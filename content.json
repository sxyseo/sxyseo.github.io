[{"title":"win10安装Postgresql 错误解决方案 Failed to load sql modules into the","date":"2018-01-14T08:28:57.000Z","path":"20180114/win10安装Postgresql-错误解决方案-Failed-to-load-sql-modules-into-the.html","text":"win10安装postgrelsql安装了很多次都是报错，开始查明以为是权限的问题，然后就给文件夹赋予权限，以为快解决了，又出现了 Failed to load sql modules into the database cluster的错误，于是根据错误去继续寻找解决方案，ubuntu下分分钟就install了。最后翻看stackoverflow找到解决方案。步骤如下：I was getting this same error when trying to install PostgreSQL v9.4.4 on Windows 10 Pro. Starting with a solution hosted on Stack Exchange, I came up with the following steps that allowed the installer to run successfully: 1234567891) Create a new user account, called postgres2) Add the new account to the Administrators and Power Users groups3) Restart the computer NOTE: I added step #3, since step #4 didn't work without it4) Run a command prompt as the postgres user, using the command: runas /user:postgres cmd.exe5) Run the installer from the postgres command window6) Delete the postgres user account, as well as the user directory NOTE: I added step #6, since the postgres account is not required after installation 第二步的话，在win10下很简单，在此电脑（我的电脑）下右键选管理，右键-》新增用户（postgres），然后重启用原来的用户登陆。注意第四步，可以按win+r打开运行命令，然后输入1runas /user:postgres cmd.exe 之后在cmd里面直接运行postgresql-10.1-3-windows-x64.exe，安装成功。win10安装Postgresql 错误解决方案 Failed to load sql modules into the database clusterwin10安装Postgresql 错误解决方案 新增用户 建议访问：stackoverflow","tags":[]},{"title":"centos ubuntu下安装nodejs环境","date":"2018-01-13T09:33:18.000Z","path":"20180113/centos-ubuntu下安装nodejs环境.html","text":"申请了阿里云的主机，后续打算将博客转移到阿里云上，之前的腾讯云由于没有备案都闲置了，用作测试。顺便从头记录node学习相关。 先安装一个node环境，到node官网下载node安装包1https://nodejs.org/zh-cn/download/ 1https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz centos ubuntu下安装nodejs环境 由于是新的环境，一切都是新的。 首先cd到/temp下，wget https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz 然后解压node-v8.9.3-linux-x64.tar.xz文件(默认使用的root用户，非root用户命令前加sudo)。 123xvf -d node-v8.9.3-linux-x64.tar.xzmv node-v8.9.3-linux-x64 nodecp -R node /usr/local 将node-v8.9.3-linux-x64重新命名为node 再把node复制到/usr/local下。 之后配置环境变量，由于没有安装vim，先使用vi来编辑， 1vi /etc/profile 在/etc/profile下追加node环境配置 123export NODE_HOME=/usr/local/nodeexport PATH=$NODE_HOME/bin:$PATHexport NODE_PATH=$NODE_HOME/lib/node_modules:$PATH 然后按esc之后输入:wq（保存并退出） 让配置生效source /etc/profile 这样安装完成。可以使用node -v查看node版本，可以使用npm -v查看npm版本 安装cnpm或者换源。 如果在centos下（ubuntu也是类似，只是命令不一样）要编译安装node首先 1yum -y install gcc make gcc-c++ openssl-devel wget 下载源码 1wget https://nodejs.org/dist/v8.9.3/node-v8.9.3.tar.gz 解压1tar -zxvf node-v8.9.3-linux-x64.tar.gz 编译安装 12./configuremake &amp;&amp; make install 然后验证 1node -v 安装pm21https://github.com/Unitech/pm2 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# General$ npm install pm2 -g # Install PM2$ pm2 start app.js # Start, Daemonize and auto-restart application (Node)$ pm2 start app.py # Start, Daemonize and auto-restart application (Python)$ pm2 start npm -- start # Start, Daemonize and auto-restart Node application# Cluster Mode (Node.js only)$ pm2 start app.js -i 4 # Start 4 instances of application in cluster mode # it will load balance network queries to each app$ pm2 reload all # Zero Second Downtime Reload$ pm2 scale [app-name] 10 # Scale Cluster app to 10 process# Process Monitoring$ pm2 list # List all processes started with PM2$ pm2 monit # Display memory and cpu usage of each app$ pm2 show [app-name] # Show all information about application# Log management$ pm2 logs # Display logs of all apps$ pm2 logs [app-name] # Display logs for a specific app$ pm2 logs --json # Logs in JSON format$ pm2 flush$ pm2 reloadLogs# Process State Management$ pm2 start app.js --name=\"api\" # Start application and name it \"api\"$ pm2 start app.js -- -a 34 # Start app and pass option \"-a 34\" as argument$ pm2 start app.js --watch # Restart application on file change$ pm2 start script.sh # Start bash script$ pm2 start app.json # Start all applications declared in app.json$ pm2 reset [app-name] # Reset all counters$ pm2 stop all # Stop all apps$ pm2 stop 0 # Stop process with id 0$ pm2 restart all # Restart all apps$ pm2 gracefulReload all # Gracefully reload all apps in cluster mode$ pm2 delete all # Kill and delete all apps$ pm2 delete 0 # Delete app with id 0# Startup/Boot management$ pm2 startup # Detect init system, generate and configure pm2 boot on startup$ pm2 save # Save current process list$ pm2 resurrect # Restore previously saved processes$ pm2 unstartup # Disable and remove startup system$ pm2 update # Save processes, kill PM2 and restore processes$ pm2 generate # Generate a sample json configuration file# Deployment$ pm2 deploy app.json prod setup # Setup \"prod\" remote server$ pm2 deploy app.json prod # Update \"prod\" remote server$ pm2 deploy app.json prod revert 2 # Revert \"prod\" remote server by 2# Module system$ pm2 module:generate [name] # Generate sample module with name [name]$ pm2 install pm2-logrotate # Install module (here a log rotation system)$ pm2 uninstall pm2-logrotate # Uninstall module$ pm2 publish # Increment version, git push and npm publish","tags":[]},{"title":"Hello World","date":"2018-01-12T16:18:25.772Z","path":"20180113/hello-world.html","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]