[{"title":"HTTP","date":"2018-03-11T03:58:31.000Z","path":"20180311/Interview/HTTP.html","text":"基础概念 Web 基础 URL 请求和响应报文 HTTP 方法 GET：获取资源 POST：传输实体主体 HEAD：获取报文首部 PUT：上传文件 DELETE：删除文件 OPTIONS：查询支持的方法 TRACE：追踪路径 CONNECT：要求用隧道协议连接代理 HTTP 状态码 2XX 成功 3XX 重定向 4XX 客户端错误 5XX 服务器错误 HTTP 首部 通用首部字段 请求首部字段 响应首部字段 实体首部字段 具体应用 Cookie 缓存 持久连接 编码 分块传输 多部分对象集合 范围请求 内容协商 虚拟主机 通信数据转发 HTTPs 加密 认证 完整性 HTTP/1.0 与 HTTP/1.1 的区别 基础概念Web 基础 HTTP（HyperText Transfer Protocol，超文本传输协议）。 WWW（World Wide Web）的三种技术：HTML、HTTP、URL。 RFC（Request for Comments，征求修正意见书），互联网的设计文档。 URL URI（Uniform Resource Indentifier，统一资源标识符） URL（Uniform Resource Locator，统一资源定位符） URN（Uniform Resource Name，统一资源名称），例如 urn:isbn:0-486-27557-4 。 URI 包含 URL 和 URN，目前 WEB 只有 URL 比较流行，所以见到的基本都是 URL。 请求和响应报文请求报文 响应报文 HTTP 方法客户端发送的请求报文第一行为请求行，包含了方法字段。 GET：获取资源POST：传输实体主体POST 主要目的不是获取资源，而是传输实体主体数据。 GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在实体主体部分。 1GET /test/demo_form.asp?name1=value1&amp;name2=value2 HTTP/1.1 123POST /test/demo_form.asp HTTP/1.1Host: w3schools.comname1=value1&amp;name2=value2 GET 的传参方式相比于 POST 安全性较差，因为 GET 传的参数在 URL 是可见的，可能会泄露私密信息。并且 GET 只支持 ASCII 字符，如果参数为中文则可能会出现乱码，而 POST 支持标准字符集。 HEAD：获取报文首部和 GET 方法一样，但是不返回报文实体主体部分。 主要用于确认 URL 的有效性以及资源更新的日期时间等。 PUT：上传文件由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般 WEB 网站不使用该方法。 DELETE：删除文件与 PUT 功能相反，并且同样不带验证机制。 OPTIONS：查询支持的方法查询指定的 URL 能够支持的方法。 会返回 Allow: GET, POST, HEAD, OPTIONS 这样的内容。 TRACE：追踪路径服务器会将通信路径返回给客户端。 发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。 TRACE 一般不会使用，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪），因此更不会去使用它。 CONNECT：要求用隧道协议连接代理主要使用 SSL（Secure Sokets Layer，安全套接字）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。 HTTP 状态码服务器返回的响应报文中第一行为状态行，包含了状态码以及原因短语，来告知客户端请求的结果。 状态码 类别 原因短语 1XX Informational（信息性状态码） 接收的请求正在处理 2XX Success（成功状态码） 请求正常处理完毕 3XX Redirection（重定向状态码） 需要进行附加操作以完成请求 4XX Client Error（客户端错误状态码） 服务器无法处理请求 5XX Server Error（服务器错误状态码） 服务器处理请求出错 2XX 成功 200 OK 204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。 206 Partial Content 3XX 重定向 301 Moved Permanently ：永久性重定向 302 Found ：临时性重定向 303 See Other 注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会 在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。 304 Not Modified ：如果请求报文首部包含一些条件，例如：If-Match，If-ModifiedSince，If-None-Match，If-Range，If-Unmodified-Since，但是不满足条件，则服务器会返回 304 状态码。 307 Temporary Redirect ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。 4XX 客户端错误 400 Bad Request ：请求报文中存在语法错误 401 Unauthorized ：该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证）的认证信息。如果之前已进行过一次请求，则表示用户认证失败。 403 Forbidden ：请求被拒绝，服务器端没有必要给出拒绝的详细理由。 404 Not Found 5XX 服务器错误 500 Internal Server Error ：服务器正在执行请求时发生错误 503 Service Unavilable ：该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。 HTTP 首部有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段。 各种首部字段及其含义如下（不需要全记，仅供查阅）： 通用首部字段 首部字段名 说明 Cache-Control 控制缓存的行为 Connection 逐跳首部、 连接的管理 Date 创建报文的日期时间 Pragma 报文指令 Trailer 报文末端的首部一览 Transfer-Encoding 指定报文主体的传输编码方式 Upgrade 升级为其他协议 Via 代理服务器的相关信息 Warning 错误通知 请求首部字段 首部字段名 说明 Accept 用户代理可处理的媒体类型 Accept-Charset 优先的字符集 Accept-Encoding 优先的内容编码 Accept-Language 优先的语言（自然语言） Authorization Web 认证信息 Expect 期待服务器的特定行为 From 用户的电子邮箱地址 Host 请求资源所在服务器 If-Match 比较实体标记（ETag） If-Modified-Since 比较资源的更新时间 If-None-Match 比较实体标记（与 If-Match 相反） If-Range 资源未更新时发送实体 Byte 的范围请求 If-Unmodified-Since 比较资源的更新时间（与 If-Modified-Since 相反） Max-Forwards 最大传输逐跳数 Proxy-Authorization 代理服务器要求客户端的认证信息 Range 实体的字节范围请求 Referer 对请求中 URI 的原始获取方 TE 传输编码的优先级 User-Agent HTTP 客户端程序的信息 响应首部字段 首部字段名 说明 Accept-Ranges 是否接受字节范围请求 Age 推算资源创建经过时间 ETag 资源的匹配信息 Location 令客户端重定向至指定 URI Proxy-Authenticate 代理服务器对客户端的认证信息 Retry-After 对再次发起请求的时机要求 Server HTTP 服务器的安装信息 Vary 代理服务器缓存的管理信息 WWW-Authenticate 服务器对客户端的认证信息 实体首部字段 首部字段名 说明 Allow 资源可支持的 HTTP 方法 Content-Encoding 实体主体适用的编码方式 Content-Language 实体主体的自然语言 Content-Length 实体主体的大小（单位： 字节） Content-Location 替代对应资源的 URI Content-MD5 实体主体的报文摘要 Content-Range 实体主体的位置范围 Content-Type 实体主体的媒体类型 Expires 实体主体过期的日期时间 Last-Modified 资源的最后修改日期时间 具体应用CookieHTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能够处理大量事务。HTTP/1.1 引入 Cookie 来保存状态信息。 服务器发送的响应报文包含 Set-Cookie 字段，客户端得到响应报文后把 Cookie 内容保存到浏览器中。下次再发送请求时，从浏览器中读出 Cookie 值，在请求报文中包含 Cookie 字段，这样服务器就知道客户端的状态信息了。Cookie 状态信息保存在客户端浏览器中，而不是服务器上。 Set-Cookie 字段有以下属性： 属性 说明 NAME=VALUE 赋予 Cookie 的名称和其值（必需项） expires=DATE Cookie 的有效期（若不明确指定则默认为浏览器关闭前为止） path=PATH 将服务器上的文件目录作为 Cookie 的适用对象（若不指定则默认为文档所在的文件目录） domain= 域名 作为 Cookie 适用对象的域名（若不指定则默认为创建 Cookie 的服务器的域名） Secure 仅在 HTTPS 安全通信时才会发送 Cookie HttpOnly 加以限制，使 Cookie 不能被 JavaScript 脚本访问 Session 和 Cookie 区别 Session 是服务器用来跟踪用户的一种手段，每个 Session 都有一个唯一标识：Session ID。当服务器创建了一个 Session 时，给客户端发送的响应报文就包含了 Set-Cookie 字段，其中有一个名为 sid 的键值对，这个键值对就是 Session ID。客户端收到后就把 Cookie 保存在浏览器中，并且之后发送的请求报文都包含 Session ID。HTTP 就是通过 Session 和 Cookie 这两种方式一起合作来实现跟踪用户状态的，Session 用于服务器端，Cookie 用于客户端。 浏览器禁用 Cookie 的情况 会使用 URL 重写技术，在 URL 后面加上 sid=xxx 。 使用 Cookie 实现用户名和密码的自动填写 网站脚本会自动从 Cookie 中读取用户名和密码，从而实现自动填写。 缓存有两种缓存方法：让代理服务器进行缓存和让客户端浏览器进行缓存。 Cache-Control 用于控制缓存的行为。Cache-Control: no-cache 有两种含义，如果是客户端向缓存服务器发送的请求报文中含有该指令，表示客户端不想要缓存的资源；如果是源服务器向缓存服务器发送的响应报文中含有该指令，表示缓存服务器不能对资源进行缓存。 Expires 字段可以用于告知缓存服务器该资源什么时候会过期。当首部字段 Cache-Control 有指定 max-age 指令时，比起首部字段 Expires，会优先处理 max-age 指令。 持久连接当浏览器访问一个包含多张图片的 HTML 页面时，除了请求访问 HTML 页面资源，还会请求图片资源，如果每进行一次 HTTP 通信就要断开一次 TCP 连接，连接建立和断开的开销会很大。 持久连接 只需要进行一次 TCP 连接就能进行多次 HTTP 通信。HTTP/1.1 开始，所有的连接默认都是持久连接。 持久连接需要使用 Connection 首部字段进行管理。HTTP/1.1 开始 HTTP 默认是持久化连接的，如果要断开 TCP 连接，需要由客户端或者服务器端提出断开，使用 Connection: close；而在 HTTP/1.1 之前默认是非持久化连接的，如果要维持持续连接，需要使用 Keep-Alive。 管线化方式可以同时发送多个请求和响应，而不需要发送一个请求然后等待响应之后再发下一个请求。 编码编码（Encoding）主要是为了对实体进行压缩。常用的编码有：gzip、compress、deflate、identity，其中 identity 表示不执行压缩的编码格式。 分块传输分块传输（Chunked Transfer Coding）可以把数据分割成多块，让浏览器逐步显示页面。 多部分对象集合一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔；每个部分都可以有首部字段。 例如，上传多个表单时可以使用如下方式： 范围请求如果网络出现中断，服务器只发送了一部分数据，范围请求使得客户端能够只请求未发送的那部分数据，从而避免服务器端重新发送所有数据。 在请求报文首部中添加 Range 字段，然后指定请求的范围，例如 Range:bytes=5001-10000。请求成功的话服务器发送 206 Partial Content 状态。 内容协商通过内容协商返回最合适的内容，例如根据浏览器的默认语言选择返回中文界面还是英文界面。 涉及以下首部字段：Accept、Accept-Charset、Accept-Encoding、Accept-Language、Content-Language。 虚拟主机使用虚拟主机技术，使得一台服务器拥有多个域名，并且在逻辑上可以看成多个服务器。 通信数据转发代理 代理服务器接受客户端的请求，并且转发给其它服务器。 代理服务器一般是透明的，不会改变 URL。 使用代理的主要目的是：缓存、网络访问控制以及访问日志记录。 网关 与代理服务器不同的是，网关服务器会将 HTTP 转化为其它协议进行通信，从而请求其它非 HTTP 服务器的服务。 隧道 使用 SSL 等加密手段，为客户端和服务器之间建立一条安全的通信线路。 HTTPsHTTP 有以下安全性问题： 使用明文进行通信，内容可能会被窃听； 不验证通信方的身份，通信方的身份有可能遭遇伪装； 无法证明报文的完整性，报文有可能遭篡改。 HTTPs 并不是新协议，而是 HTTP 先和 SSL（Secure Socket Layer）通信，再由 SSL 和 TCP 通信。通过使用 SSL，HTTPs 提供了加密、认证和完整性保护。 加密有两种加密方式：对称密钥加密和公开密钥加密。对称密钥加密的加密和解密使用同一密钥，而公开密钥加密使用一对密钥用于加密和解密，分别为公开密钥和私有密钥。公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。 对称密钥加密的缺点：无法安全传输密钥；公开密钥加密的缺点：相对来说更耗时。 HTTPs 采用 混合的加密机制 ，使用公开密钥加密用于传输对称密钥，之后使用对称密钥加密进行通信。（下图中，共享密钥即对称密钥） 认证通过使用 证书 来对通信方进行认证。证书中有公开密钥数据，如果可以验证公开密钥的确属于通信方的，那么就可以确定通信方是可靠的。 数字证书认证机构（CA，Certificate Authority）可以对其颁发的公开密钥证书对其进行验证。 进行 HTTPs 通信时，服务器会把证书发送给客户端，客户端取得其中的公开密钥之后，就可以开始通信。 使用 OpenSSL 这套开源程序，每个人都可以构建一套属于自己的认证机构，从而自己给自己颁发服务器证书。浏览器在访问该服务器时，会显示“无法确认连接安全性”或“该网站的安全证书存在问题”等警告消息。 客户端证书需要用户自行安装，只有在业务需要非常高的安全性时才使用客户端证书，例如网上银行。 完整性SSL 提供摘要功能来验证完整性。 HTTP/1.0 与 HTTP/1.1 的区别HTTP/1.1 新增了以下内容： 默认为长连接； 提供了范围请求功能； 提供了虚拟主机的功能； 多了一些缓存处理字段； 多了一些状态码； 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"http","slug":"http","permalink":"https://jiangshaobo.cn/tags/http/"}]},{"title":"JVM","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/JVM.html","text":"内存模型 1. 程序计数器 2. Java 虚拟机栈 3. 本地方法栈 4. Java 堆 5. 方法区 6. 运行时常量池 7. 直接内存 垃圾收集 1. 判断一个对象是否可回收 1.1 引用计数 1.2 可达性 1.3 引用类型 1.3.1 强引用 1.3.2 软引用 1.3.3 弱引用 1.3.4 虚引用 1.3 方法区的回收 1.4 finalize() 2. 垃圾收集算法 2.1 标记 - 清除算法 2.2 复制算法 2.3 标记 - 整理算法 2.4 分代收集算法 3. 垃圾收集器 3.1 Serial 收集器 3.2 ParNew 收集器 3.3 Parallel Scavenge 收集器 3.4 Serial Old 收集器 3.5 Parallel Old 收集器 3.6 CMS 收集器 3.7 G1 收集器 3.8 七种垃圾收集器的比较 4. 内存分配与回收策略 4.1 优先在 Eden 分配 4.2 大对象直接进入老年代 4.3 长期存活的对象进入老年代 4.4 动态对象年龄判定 4.5 空间分配担保 4.6 Full GC 的触发条件 4.6.1 调用 System.gc() 4.6.2 老年代空间不足 4.6.3 空间分配担保失败 4.6.4 JDK 1.7 及以前的永久代空间不足 4.6.5 Concurrent Mode Failure 类加载机制 1 类的生命周期 2. 类初始化时机 3. 类加载过程 3.1 加载 3.2 验证 3.3 准备 3.4 解析 3.5 初始化 4. 类加载器 4.1 类与类加载器 4.2 类加载器分类 4.3 双亲委派模型 JVM 参数 GC 优化配置 GC 类型设置 内存模型 注：白色区域为线程私有的，蓝色区域为线程共享的。 1. 程序计数器记录正在执行的虚拟机字节码指令的地址（如果正在执行的是 Native 方法则为空）。 2. Java 虚拟机栈每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。 该区域可能抛出以下异常： 当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常； 栈进行动态扩展时如果无法申请到足够内存，会抛出 OutOfMemoryError 异常。 3. 本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。 4. Java 堆所有对象实例都在这里分配内存。 这块区域是垃圾收集器管理的主要区域（”GC 堆 “）。现在收集器基本都是采用分代收集算法，Java 堆还可以分成：新生代和老年代（新生代还可以分成 Eden 空间、From Survivor 空间、To Survivor 空间等）。 不需要连续内存，可以通过 -Xmx 和 -Xms 来控制动态扩展内存大小，如果动态扩展失败会抛出 OutOfMemoryError 异常。 5. 方法区用于存放已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。 和 Java 堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。 对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现，HotSpot 虚拟机把它当成永久代来进行垃圾回收。 6. 运行时常量池运行时常量池是方法区的一部分。 类加载后，Class 文件中的常量池（用于存放编译期生成的各种字面量和符号引用）就会被放到这个区域。 在运行期间也可以用过 String 类的 intern() 方法将新的常量放入该区域。 7. 直接内存在 JDK 1.4 中新加入了 NIO 类，引入了一种基于通道（Channel）与缓冲区（Buffer）的 I/O 方式，它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。 垃圾收集程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。 垃圾回收主要是针对 Java 堆和方法区进行。 1. 判断一个对象是否可回收1.1 引用计数给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。 引用计数为 0 的对象可被回收。 两个对象会出现循环引用问题，此时引用计数器永远不为 0，导致 GC 收集器无法回收。 12objA.instance = objB;objB.instance = objA; 1.2 可达性通过 GC Roots 作为起始点进行搜索，能够到达到的对象都是都是可用的，不可达的对象可被回收。 GC Roots 一般包含以下内容： 虚拟机栈中引用的对象 方法区中类静态属性引用的对象 方法区中的常量引用的对象 本地方法栈中引用的对象 1.3 引用类型无论是通过引用计算算法判断对象的引用数量，还是通过可达性分析算法判断对象的引用链是否可达，判定独享是否存活都与“引用”有关。 1.3.1 强引用只要强引用存在，垃圾回收器永远不会回收调掉被引用的对象。 1Object obj = new Object(); 1.3.2 软引用非必须引用，内存溢出之前进行回收。 1234Object obj = new Object();SoftReference&lt;Object&gt; sf = new SoftReference&lt;Object&gt;(obj);obj = null;sf.get(); sf 是对 obj 的一个软引用，通过 sf.get() 方法可以取到这个对象，当然，当这个对象被标记为需要回收的对象时，则返回 null； 软引用主要用来实现类似缓存的功能，在内存足够的情况下直接通过软引用取值，无需从繁忙的真实来源查询数据，提升速度；当内存不足时，自动删除这部分缓存数据，从真正的来源查询这些数据。 1.3.3 弱引用只能生存到下一次垃圾收集发生之前，当垃圾收集器工作时，无论当前内存是否足够，都会被回收。 12345Object obj = new Object();WeakReference&lt;Object&gt; wf = new WeakReference&lt;Object&gt;(obj);obj = null;wf.get();wf.isEnQueued(); 1.3.4 虚引用又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。 12345Object obj = new Object();PhantomReference&lt;Object&gt; pf = new PhantomReference&lt;Object&gt;(obj);obj=null;pf.get();pf.isEnQueued(); 1.3 方法区的回收在方法区主要是对常量池的回收和对类的卸载。 常量池的回收和堆中对象回收类似。 类的卸载条件很多，需要满足以下三个条件，并且满足了也不一定会被卸载： 该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。 加载该类的 ClassLoader 已经被回收。 该类对应的 java.lang.Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。 可以通过 -Xnoclassgc 参数来控制是否对类进行卸载。 在大量使用反射、动态代理、CGLib 等 ByteCode 框架、动态生成 JSP 以及 OSGo 这类频繁自定义 ClassLoader 的场景都需要虚拟机具备类卸载功能，以保证不会出现内存溢出。 1.4 finalize()当一个对象可被回收时，如果该对象有必要执行 finalize() 方法，那么就有可能可能通过在该方法中让对象重新被引用，从而实现自救。 finalize() 类似 C++ 的析构函数，用来做关闭外部资源等工作。但是 try-finally 等方式可以做的更好，并且该方法运行代价高昂，不确定性大，无法保证各个对象的调用顺序，因此最好不要使用。 2. 垃圾收集算法2.1 标记 - 清除算法 将需要回收的对象进行标记，然后清除。 不足： 标记和清除过程效率都不高 会产生大量碎片 之后的算法都是基于该算法进行改进。 2.2 复制算法 将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。 主要不足是只使用了内存的一半。 现在的商业虚拟机都采用这种收集算法来回收新生代，但是并不是将内存划分为大小相等的两块，而是分为一块较大的 Eden 空间和两块较小的 Survior 空间，每次使用 Eden 空间和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象一次性复制到另一块 Survivor 空间上，最后清理 Eden 和 Survivor。HotSpot 虚拟机的 Eden 和 Survivor 的大小比例默认为 8:1，保证了内存的利用率达到 90 %。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 空间就不够用了，需要依赖于老年代进行分配担保，也就是借用老年代的空间。 2.3 标记 - 整理算法 让所有存活的对象都向一段移动，然后直接清理掉端边界以外的内存。 2.4 分代收集算法现在的商业虚拟机采用分代收集算法，它使用了前面介绍的几种收集算法，根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。 一般将 Java 堆分为新生代和老年代。 新生代使用：复制算法 老年代使用：标记 - 清理 或者 标记 - 整理 算法。 3. 垃圾收集器 以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。 3.1 Serial 收集器 它是单线程的收集器，不仅意味着只会使用一个线程进行垃圾收集工作，更重要的是它在进行垃圾收集时，必须暂停所有其他工作线程，往往造成过长的等待时间。 它的优点是简单高效，对于单个 CPU 环境来说，由于没有线程交互的开销，因此拥有最高的单线程收集效率。 在 Client 应用场景中，分配给虚拟机管理的内存一般来说不会很大，该收集器收集几十兆甚至一两百兆的新生代停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿是可以接受的。 3.2 ParNew 收集器 它是 Serial 收集器的多线程版本。 是 Server 模式下的虚拟机首选新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合工作。 默认开始的线程数量与 CPU 数量相同，可以使用 -XX:ParallelGCThreads 参数来设置线程数。 3.3 Parallel Scavenge 收集器是并行的多线程收集器。 其它收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，它被称为“吞吐量优先”收集器。这里的吞吐量指 CPU 用于运行用户代码的时间占总时间的比值。 停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。 提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间 -XX:MaxGCPauseMillis 参数以及直接设置吞吐量大小的 -XX:GCTimeRatio 参数（值为大于 0 且小于 100 的整数）。缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。 还提供了一个参数 -XX:+UseAdaptiveSizePolicy，这是一个开关参数，打开参数后，就不需要手工指定新生代的大小（-Xmn）、Eden 和 Survivor 区的比例（-XX:SurvivorRatio）、晋升老年代对象年龄（-XX:PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种方式称为 GC 自适应的调节策略（GC Ergonomics）。自适应调节策略也是它与 ParNew 收集器的一个重要区别。 3.4 Serial Old 收集器 Serial Old 是 Serial 收集器的老年代版本，也是给 Client 模式下的虚拟机使用。如果用在 Server 模式下，它有两大用途： 在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）中与 Parallel Scavenge 收集器搭配使用。 作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。 3.5 Parallel Old 收集器 是 Parallel Scavenge 收集器的老年代版本。 在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。 3.6 CMS 收集器 CMS（Concurrent Mark Sweep），从 Mark Sweep 可以知道它是基于 标记 - 清除 算法实现的。 特点：并发收集、低停顿。 分为以下四个流程： 初始标记：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。 并发标记：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。 重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。 并发清除：不需要停顿。 在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。 具有以下缺点： 对 CPU 资源敏感。CMS 默认启动的回收线程数是 (CPU 数量 + 3) / 4，当 CPU 不足 4 个时，CMS 对用户程序的影响就可能变得很大，如果本来 CPU 负载就比较大，还要分出一半的运算能力去执行收集器线程，就可能导致用户程序的执行速度忽然降低了 50%，其实也让人无法接受。并且低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率变低。 无法处理浮动垃圾。由于并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生。这一部分垃圾出现在标记过程之后，CMS 无法在当次收集中处理掉它们，只好留到下一次 GC 时再清理掉，这一部分垃圾就被称为“浮动垃圾”。也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此它不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。可以使用 -XX:CMSInitiatingOccupancyFraction 的值来改变触发收集器工作的内存占用百分比，JDK 1.5 默认设置下该值为 68，也就是当老年代使用了 68% 的空间之后会触发收集器工作。如果该值设置的太高，导致浮动垃圾无法保存，那么就会出现 Concurrent Mode Failure，此时虚拟机将启动后备预案：临时启用 Serial Old 收集器来重新进行老年代的垃圾收集。 标记 - 清除算法导致的空间碎片，给大对象分配带来很大麻烦，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前出发一次 Full GC。 3.7 G1 收集器 G1（Garbage-First）收集器是当今收集器技术发展最前沿的成果之一，它是一款面向服务端应用的垃圾收集器，HotSpot 开发团队赋予它的使命是（在比较长期的）未来可以替换掉 JDK 1.5 中发布的 CMS 收集器。 具备如下特点： 并行与并发：能充分利用多 CPU 环境下的硬件优势，使用多个 CPU 来缩短停顿时间； 分代收集：分代概念依然得以保留，虽然它不需要其它收集器配合就能独立管理整个 GC 堆，但它能够采用不同方式去处理新创建的对象和已存活一段时间、熬过多次 GC 的旧对象来获取更好的收集效果。 空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。 可预测的停顿：这是它相对 CMS 的一大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了降低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒，这几乎已经是实时 Java（RTSJ）的垃圾收集器的特征了。 在 G1 之前的其他收集器进行收集的范围都是整个新生代或者老生代，而 G1 不再是这样，Java 堆的内存布局与其他收集器有很大区别，将整个 Java 堆划分为多个大小相等的独立区域（Region）。虽然还保留新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，而都是一部分 Region（不需要连续）的集合。 之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个 Java 堆中进行全区域的垃圾收集。它跟踪各个 Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region（这也就是 Garbage-First 名称的来由）。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了它在有限的时间内可以获取尽可能高的收集效率。 Region 不可能是孤立的，一个对象分配在某个 Region 中，可以与整个 Java 堆任意的对象发生引用关系。在做可达性分析确定对象是否存活的时候，需要扫描整个 Java 堆才能保证准确性，这显然是对 GC 效率的极大伤害。为了避免全堆扫描的发生，每个 Region 都维护了一个与之对应的 Remembered Set。虚拟机发现程序在对 Reference 类型的数据进行写操作时，会产生一个 Write Barrier 暂时中断写操作，检查 Reference 引用的对象是否处于不同的 Region 之中，如果是，便通过 CardTable 把相关引用信息记录到被引用对象所属的 Region 的 Remembered Set 之中。当进行内存回收时，在 GC 根节点的枚举范围中加入 Remembered Set 即可保证不对全堆扫描也不会有遗漏。 如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤： 初始标记 并发标记 最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。 筛选回收：首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿是时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。 3.8 七种垃圾收集器的比较 收集器 串行、并行 or 并发 新生代 / 老年代 算法 目标 适用场景 Serial 串行 新生代 复制算法 响应速度优先 单 CPU 环境下的 Client 模式 Serial Old 串行 老年代 标记 - 整理 响应速度优先 单 CPU 环境下的 Client 模式、CMS 的后备预案 ParNew 并行 新生代 复制算法 响应速度优先 多 CPU 环境时在 Server 模式下与 CMS 配合 Parallel Scavenge 并行 新生代 复制算法 吞吐量优先 在后台运算而不需要太多交互的任务 Parallel Old 并行 老年代 标记 - 整理 吞吐量优先 在后台运算而不需要太多交互的任务 CMS 并发 老年代 标记 - 清除 响应速度优先 集中在互联网站或 B/S 系统服务端上的 Java 应用 G1 并发 both 标记 - 整理 + 复制算法 响应速度优先 面向服务端应用，将来替换 CMS 4. 内存分配与回收策略4.1 优先在 Eden 分配大多数情况下，对象在新生代 Eden 区分配，当 Eden 区空间不够时，发起 Minor GC； 4.2 大对象直接进入老年代提供 -XX:PretenureSizeThreshold 参数，大于此值的对象直接在老年代分配，避免在 Eden 区和 Survivor 区之间的大量内存复制； 4.3 长期存活的对象进入老年代JVM 为对象定义年龄计数器，经过 Minor GC 依然存活且被 Survivor 区容纳的，移动到 Survivor 区，年龄加 1，每经历一次 Minor GC 不被清理则年龄加 1，增加到一定年龄则移动到老年区（默认 15 岁，通过 -XX:MaxTenuringThreshold 设置）； 4.4 动态对象年龄判定若 Survivor 区中同年龄所有对象大小总和大于 Survivor 空间一半，则年龄大于等于该年龄的对象可以直接进入老年代； 4.5 空间分配担保在发生 Minor GC 之前，JVM 先检查老年代最大可用连续空间是否大于新生代所有对象总空间，成立的话 Minor GC 确认是安全的；否则继续检查老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小，大于的话进行 Minor GC，小于的话进行 Full GC。 4.6 Full GC 的触发条件对于 Minor GC，其触发条件非常简单，当 Eden 区空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件： 4.6.1 调用 System.gc()此方法的调用是建议 JVM 进行 Full GC，虽然只是建议而非一定，但很多情况下它会触发 Full GC，从而增加 Full GC 的频率，也即增加了间歇性停顿的次数。因此强烈建议能不使用此方法就不要使用，让虚拟机自己去管理它的内存，可通过 -XX:+ DisableExplicitGC 来禁止 RMI 调用 System.gc()。 4.6.2 老年代空间不足老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等，当执行 Full GC 后空间仍然不足，则抛出如下错误： Java.lang.OutOfMemoryError: Java heap space 为避免以上两种状况引起的 Full GC，调优时应尽量做到让对象在 Minor GC 阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组。 4.6.3 空间分配担保失败使用复制算法的 Minor GC 需要老年代的内存空间作担保，如果出现了 HandlePromotionFailure 担保失败，则会触发 Full GC。 4.6.4 JDK 1.7 及以前的永久代空间不足在 JDK 1.7 及以前，HotSpot 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些 class 的信息、常量、静态变量等数据，当系统中要加载的类、反射的类和调用的方法较多时，Permanet Generation 可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么 JVM 会抛出如下错误信息：java.lang.OutOfMemoryError: PermGen space 为避免 PermGen 占满造成 Full GC 现象，可采用的方法为增大 PermGen 空间或转为使用 CMS GC。 在 JDK 1.8 中用元空间替换了永久代作为方法区的实现，元空间是本地内存，因此减少了一种 Full GC 触发的可能性。 4.6.5 Concurrent Mode Failure执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足（有时候“空间不足”是 CMS GC 时当前的浮动垃圾过多导致暂时性的空间不足触发 Full GC），便会报 Concurrent Mode Failure 错误，并触发 Full GC。 类加载机制类是在运行期间动态加载的。 1 类的生命周期 包括以下 7 个阶段： 加载（Loading） 验证（Verification） 准备（Preparation） 解析（Resolution） 初始化（Initialization） 使用（Using） 卸载（Unloading） 其中解析过程在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 的动态绑定。 2. 类初始化时机虚拟机规范中并没有强制约束何时进行加载，但是规范严格规定了有且只有下列五种情况必须对类进行初始化：( 加载、验证、准备都会随着发生 ) 遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。最常见的生成这 4 条指令的场景是：使用 new 关键字实例化对象的时候；读取或设置一个类的静态字段（被 final 修饰、已在编译器把结果放入常量池的静态字段除外）的时候；以及调用一个类的静态方法的时候。 使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化。 当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。 当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个主类； 当使用 jdk1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化； 以上 5 种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，称为被动引用。被动引用的常见例子包括： 1. 通过子类引用父类的静态字段，不会导致子类初始化。 1System.out.println(SubClass.value); // value 字段在 SuperClass 中定义 2. 通过数组定义来引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自 Object 的子类，其中包含了数组的属性和方法。 1SuperClass[] sca = new SuperClass[10]; 3. 常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。 1System.out.println(ConstClass.HELLOWORLD); 3. 类加载过程包含了加载、验证、准备、解析和初始化这 5 个阶段。 3.1 加载加载是类加载的一个阶段，注意不要混淆。 加载过程完成以下三件事： 通过一个类的全限定名来获取定义此类的二进制字节流。 将这个字节流所代表的静态存储结构转化为方法区的运行时存储结构。 在内存中生成一个代表这个类的 Class 对象，作为方法区这个类的各种数据的访问入口。 其中二进制字节流可以从以下方式中获取： 从 ZIP 包读取，这很常见，最终成为日后 JAR、EAR、WAR 格式的基础。 从网络中获取，这种场景最典型的应用是 Applet。 运行时计算生成，这种场景使用得最多得就是动态代理技术，在 java.lang.reflect.Proxy 中，就是用了 ProxyGenerator.generateProxyClass 的代理类的二进制字节流。 由其他文件生成，典型场景是 JSP 应用，即由 JSP 文件生成对应的 Class 类。 从数据库读取，这种场景相对少见，例如有些中间件服务器（如 SAP Netweaver）可以选择把程序安装到数据库中来完成程序代码在集群间的分发。… 3.2 验证确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。 主要有以下 4 个阶段： 文件格式验证 元数据验证（对字节码描述的信息进行语义分析） 字节码验证（通过数据流和控制流分析，确保程序语义是合法、符合逻辑的，将对类的方法体进行校验分析） 符号引用验证 3.3 准备类变量是被 static 修饰的变量，准备阶段为类变量分配内存并设置初始值，使用的是方法区的内存。 实例变量不会在这阶段分配内存，它将会在对象实例化时随着对象一起分配在 Java 堆中。 初始值一般为 0 值，例如下面的类变量 value 被初始化为 0 而不是 123。 1public static int value = 123; 如果类变量是常量，那么会按照表达式来进行初始化，而不是赋值为 0。 1public static final int value = 123; 3.4 解析将常量池的符号引用替换为直接引用的过程。 3.5 初始化初始化阶段即虚拟机执行类构造器 &lt;clinit&gt;() 方法的过程。 在准备阶段，类变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源。 &lt;clinit&gt;() 方法具有以下特点： 是由编译器自动收集类中所有类变量的赋值动作和静态语句块（static{} 块）中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。例如以下代码： 1234567public class Test &#123; static &#123; i = 0; // 给变量赋值可以正常编译通过 System.out.print(i); // 这句编译器会提示“非法向前引用” &#125; static int i = 1;&#125; 与类的构造函数（或者说实例构造器 &lt;init&gt;()）不同，不需要显式的调用父类的构造器。虚拟机会自动保证在子类的 &lt;clinit&gt;() 方法运行之前，父类的 &lt;clinit&gt;() 方法已经执行结束。因此虚拟机中第一个执行 &lt;clinit&gt;() 方法的类肯定为 java.lang.Object。 由于父类的 &lt;clinit&gt;() 方法先执行，也就意味着父类中定义的静态语句块要优于子类的变量赋值操作。例如以下代码： 1234567891011121314static class Parent &#123; public static int A = 1; static &#123; A = 2; &#125;&#125;static class Sub extends Parent &#123; public static int B = A;&#125;public static void main(String[] args) &#123; System.out.println(Sub.B); // 输出结果是父类中的静态变量值 A，也就是 2&#125; &lt;clinit&gt;() 方法对于类或接口不是必须的，如果一个类中不包含静态语句块，也没有对类变量的赋值操作，编译器可以不为该类生成 &lt;clinit&gt;() 方法。 接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成 &lt;clinit&gt;() 方法。但接口与类不同的是，执行接口的 &lt;clinit&gt;() 方法不需要先执行父接口的 &lt;clinit&gt;() 方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的 &lt;clinit&gt;() 方法。 虚拟机会保证一个类的 &lt;clinit&gt;() 方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的 &lt;clinit&gt;() 方法，其它线程都会阻塞等待，直到活动线程执行 &lt;clinit&gt;() 方法完毕。如果在一个类的 &lt;clinit&gt;() 方法中有耗时的操作，就可能造成多个进程阻塞，在实际过程中此种阻塞很隐蔽。 4. 类加载器虚拟机设计团队把类加载阶段中的“通过一个类的全限定名来获取描述此类的二进制字节流 ( 即字节码 )”这个动作放到 Java 虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块称为“类加载器”。 4.1 类与类加载器对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在 Java 虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。通俗而言：比较两个类是否“相等”（这里所指的“相等”，包括类的 Class 对象的 equals() 方法、isAssignableFrom() 方法、isInstance() 方法的返回结果，也包括使用 instanceof() 关键字对做对象所属关系判定等情况），只有在这两个类时由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个 Class 文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等。 4.2 类加载器分类从 Java 虚拟机的角度来讲，只存在以下两种不同的类加载器： 一种是启动类加载器（Bootstrap ClassLoader），这个类加载器用 C++ 实现，是虚拟机自身的一部分；另一种就是所有其他类的加载器，这些类由 Java 实现，独立于虚拟机外部，并且全都继承自抽象类 java.lang.ClassLoader。 从 Java 开发人员的角度看，类加载器可以划分得更细致一些： 启动类加载器（Bootstrap ClassLoader） 此类加载器负责将存放在 &lt;JAVA_HOME&gt;\\lib 目录中的，或者被 -Xbootclasspath 参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如 rt.jar，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。 启动类加载器无法被 Java 程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器，直接使用 null 代替即可。 扩展类加载器（Extension ClassLoader） 这个类加载器是由 ExtClassLoader（sun.misc.Launcher$ExtClassLoader）实现的。它负责将 &lt;Java_Home&gt;/lib/ext 或者被 java.ext.dir 系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。 应用程序类加载器（Application ClassLoader） 这个类加载器是由 AppClassLoader（sun.misc.Launcher$AppClassLoader）实现的。由于这个类加载器是 ClassLoader 中的 getSystemClassLoader() 方法的返回值，因此一般称为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。 4.3 双亲委派模型应用程序都是由三种类加载器相互配合进行加载的，如果有必要，还可以加入自己定义的类加载器。下图展示的类加载器之间的层次关系，称为类加载器的双亲委派模型（Parents Delegation Model）。该模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器，这里类加载器之间的父子关系一般通过组合（Composition）关系来实现，而不是通过继承（Inheritance）的关系实现。 工作过程 如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载，而是把这个请求委派给父类加载器，每一个层次的加载器都是如此，依次递归，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成此加载请求（它搜索范围中没有找到所需类）时，子加载器才会尝试自己加载。 好处 使用双亲委派模型来组织类加载器之间的关系，使得 Java 类随着它的类加载器一起具备了一种带有优先级的层次关系。例如类 java.lang.Object，它存放再 rt.jar 中，无论哪个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此 Object 类在程序的各种类加载器环境中都是同一个类。相反，如果没有双亲委派模型，由各个类加载器自行加载的话，如果用户编写了一个称为｀java.lang.Object 的类，并放在程序的 ClassPath 中，那系统中将会出现多个不同的 Object 类，程序将变得一片混乱。如果开发者尝试编写一个与 rt.jar 类库中已有类重名的 Java 类，将会发现可以正常编译，但是永远无法被加载运行。 实现 12345678910111213141516171819202122protected synchronized Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException&#123; //check the class has been loaded or not Class c = findLoadedClass(name); if(c == null) &#123; try&#123; if(parent != null) &#123; c = parent.loadClass(name, false); &#125; else&#123; c = findBootstrapClassOrNull(name); &#125; &#125; catch(ClassNotFoundException e) &#123; //if throws the exception , the father can not complete the load &#125; if(c == null) &#123; c = findClass(name); &#125; &#125; if(resolve) &#123; resolveClass(c); &#125; return c;&#125; JVM 参数GC 优化配置 配置 描述 -Xms 初始化堆内存大小 -Xmx 堆内存最大值 -Xmn 新生代大小 -XX:PermSize 初始化永久代大小 -XX:MaxPermSize 永久代最大容量 GC 类型设置 配置 描述 -XX:+UseSerialGC 串行垃圾回收器 -XX:+UseParallelGC 并行垃圾回收器 -XX:+UseConcMarkSweepGC 并发标记扫描垃圾回收器 -XX:ParallelCMSThreads= 并发标记扫描垃圾回收器 = 为使用的线程数量 -XX:+UseG1GC G1 垃圾回收器 1java -Xmx12m -Xms3m -Xmn1m -XX:PermSize=20m -XX:MaxPermSize=20m -XX:+UseSerialGC -jar java-application.jar 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"计算机操作系统","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/计算机操作系统.html","text":"第一章 概述 操作系统基本特征 1. 并发 2. 共享 3. 虚拟 4. 异步 系统调用 中断分类 1. 外中断 2. 异常 3. 陷入 大内核和微内核 1. 大内核 2. 微内核 第二章 进程管理 进程与线程 1. 进程 2. 线程 3. 区别 进程状态的切换 调度算法 1. 批处理系统中的调度 1.1 先来先服务 1.2 短作业优先 1.3 最短剩余时间优先 2. 交互式系统中的调度 2.1 优先权优先 2.2 时间片轮转 2.3 多级反馈队列 2.4 短进程优先 3. 实时系统中的调度 进程同步 1. 临界区 2. 同步与互斥 3. 信号量 4. 管程 进程通信 1. 管道 2. 信号量 3. 消息队列 4. 信号 5. 共享内存 6. 套接字 经典同步问题 1. 读者-写者问题 2. 哲学家进餐问题 第三章 死锁 死锁的条件 死锁的处理方法 1. 鸵鸟策略 2. 死锁预防 2.1 破坏互斥条件 2.2 破坏请求与保持条件 2.3 破坏不可抢占条件 2.4 破坏环路等待 3. 死锁避免 3.1 安全状态 3.2 单个资源的银行家算法 3.3 多个资源的银行家算法 4. 死锁检测与死锁恢复 4.1 死锁检测算法 4.2 死锁恢复 第四章 存储器管理 虚拟内存 分页与分段 1. 分页 2. 分段 3. 段页式 4. 分页与分段区别 页面置换算法 1. 最佳（Optimal） 2. 先进先出（FIFO） 3. 最近最久未使用（LRU, Least Recently Used） 4. 时钟（Clock） 第五章 设备管理 磁盘调度算法 1. 先来先服务（FCFS, First Come First Serverd） 2. 最短寻道时间优先（SSTF, Shortest Seek Time First） 3. 扫描算法（SCAN） 4. 循环扫描算法（CSCAN） 参考资料 第一章 概述操作系统基本特征1. 并发并发性是指宏观上在一段时间内能同时运行多个程序，而并行性则指同一时刻能运行多个指令。 并行需要硬件支持，如多流水线或者多处理器。 操作系统通过引入进程和线程，使得程序能够并发运行。 2. 共享共享是指系统中的资源可以供多个并发进程共同使用。 有两种共享方式：互斥共享和同时共享。 互斥共享的资源称为临界资源，例如打印机等，在同一时间只允许一个进程访问，否则会出现错误，需要用同步机制来实现对临界资源的访问。 3. 虚拟虚拟技术把一个物理实体转换为多个逻辑实体。主要有两种虚拟技术：时分复用技术和空分复用技术，例如多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占有处理器，每次只执行一小个时间片并快速切换。 4. 异步异步是指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。 系统调用如果一个进程在用户态需要用到操作系统的一些功能，就需要使用系统调用从而陷入内核，由操作系统代为完成。 可以由系统调用请求的功能有设备管理、文件管理、进程管理、进程通信、存储器管理等。 中断分类1. 外中断由 CPU 执行指令以外的事件引起，如 I/O 结束中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。 2. 异常由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。 3. 陷入在用户程序中使用系统调用。 大内核和微内核1. 大内核大内核是将操作系统功能作为一个紧密结合的整体放到内核，由于各模块共享信息，因此有很高的性能。 2. 微内核由于操作系统不断复杂，因此将一部分操作系统功能移出内核，从而降低内核的复杂性。移出的部分根据分层的原则划分成若干服务，相互独立。但是需要频繁地在用户态和核心态之间进行切换，会有一定的性能损失。 第二章 进程管理进程与线程1. 进程进程是操作系统进行资源分配的基本单位。 进程控制块 (Process Control Block, PCB) 描述进程的基本信息和运行状态，所谓的创建进程和撤销进程，都是指对 PCB 的操作。 2. 线程一个进程中可以有多个线程，线程是独立调度的基本单位。同一个进程中的多个线程之间可以并发执行，它们共享进程资源。 3. 区别 拥有资源：进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。 调度：线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程内的线程切换到另一个进程中的线程时，会引起进程切换。 系统开销：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，因此操作系统所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置。而线程切换时只需保存和设置少量寄存器内容，开销很小。 通信方面：进程间通信 (IPC) 需要进程同步和互斥手段的辅助，以保证数据的一致性，而线程间可以通过直接读/写同一进程中的数据段（如全局变量）来进行通信。 举例：QQ 和浏览器是两个进程，浏览器进程里面有很多线程，例如 HTTP 请求线程、事件响应线程、渲染线程等等，线程的并发执行使得在浏览器中点击一个新链接从而发起 HTTP 请求时，浏览器还可以响应用户的其它事件。 进程状态的切换 阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括 CPU，缺少 CPU 会让进程从运行态转换为就绪态。 只有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。 调度算法需要针对不同环境来讨论调度算法。 1. 批处理系统中的调度1.1 先来先服务first-come first-serverd（FCFS）。 调度最先进入就绪队列的作业。 有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。 1.2 短作业优先shortest job first（SJF）。 调度估计运行时间最短的作业。 长作业有可能会饿死，处于一直等待短作业执行完毕的状态。如果一直有短作业到来，那么长作业永远得不到调度。 1.3 最短剩余时间优先shortest remaining time next（SRTN）。 2. 交互式系统中的调度2.1 优先权优先除了可以手动赋予优先权之外，还可以把响应比作为优先权，这种调度方式叫做高响应比优先调度算法。 响应比 = (等待时间 + 要求服务时间) / 要求服务时间 = 响应时间 / 要求服务时间 这种调度算法主要是为了解决 SJF 中长作业可能会饿死的问题，因为随着等待时间的增长，响应比也会越来越高。 2.2 时间片轮转将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 分配给队首的进程。 时间片轮转算法的效率和时间片的大小有很大关系。因为每次进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，进程切换太频繁，在进程切换上就会花过多时间。 2.3 多级反馈队列 设置多个就绪队列，并为各个队列赋予不同的优先级。第一个队列的优先级最高，第二个队列次之，其余各队列的优先权逐个降低。该算法赋予各个队列中进程执行时间片的大小也各不相同，在优先权越高的队列中，为每个进程所规定的执行时间片就越小。 当一个新进程进入内存后，首先将它放入第一队列的末尾，按 FCFS 原则排队等待调度。当轮到该进程执行时，如它能在该时间片内完成，便可准备撤离系统；如果它在一个时间片结束时尚未完成，调度程序便将该进程转入下一个队列的队尾。 仅当前 i -1 个队列均空时，才会调度第 i 个队列中的进程。 优点：实时性好，同时适合运行短作业和长作业。 2.4 短进程优先3. 实时系统中的调度实时系统要一个服务请求在一个确定时间内得到响应。 分为硬实时和软实时，前者必须满足绝对的截止时间，后者可以容忍一定的超时。 进程同步1. 临界区对临界资源进行访问的那段代码称为临界区。 为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。 123// entry section// critical section;// exit section 2. 同步与互斥同步指多个进程按一定顺序执行；互斥指多个进程在同一时刻只有一个进程能进入临界区。 同步是在对临界区互斥访问的基础上，通过其它机制来实现有序访问的。 3. 信号量信号量（Semaphore） 是一个整型变量，可以对其执行 down 和 up 操作，也就是常见的 P 和 V 操作。 down : 如果信号量大于 0 ，执行 -1 操作；如果信号量等于 0，将进程睡眠，等待信号量大于 0； up ：对信号量执行 +1 操作，并且唤醒睡眠的进程，让进程完成 down 操作。 down 和 up 操作需要被设计成原语，不可分割，通常的做法是在执行这些操作的时候屏蔽中断。 如果信号量的取值只能为 0 或者 1，那么就成为了 互斥量（Mutex） ，0 表示临界区已经加锁，1 表示临界区解锁。 12345678910111213typedef int semaphore;semaphore mutex = 1;void P1() &#123; down(mutex); // 临界区 up(mutex);&#125;void P2() &#123; down(mutex); // 临界区 up(mutex);&#125; 使用信号量实现生产者-消费者问题 使用一个互斥量 mutex 来对临界资源进行访问；empty 记录空缓冲区的数量，full 记录满缓冲区的数量。 注意，必须先执行 down 操作再用互斥量对临界区加锁，否则会出现死锁。因为如果都先对临界区加锁，然后再执行 down 操作，那么可能会出现这种情况：生产者对临界区加锁后，执行 down(empty) 操作，发现 empty = 0，此时生成者睡眠。消费者此时不能进入临界区，因为生产者对临界区加锁了，也就无法执行 up(empty) 操作，那么生产者和消费者就会一直等待下去。 123456789101112131415161718192021222324252627#define N 100typedef int semaphore;semaphore mutex = 1;semaphore empty = N;semaphore full = 0;void producer() &#123; while(TRUE)&#123; int item = produce_item; down(empty); down(mutex); insert_item(item); up(mutex); up(full); &#125;&#125;void consumer() &#123; while(TRUE)&#123; down(full); down(mutex); int item = remove_item(item); up(mutex); up(empty); consume_item(item); &#125;&#125; 4. 管程使用信号量机制实现的生产者消费者问题需要客户端代码做很多控制，而管程把控制的代码独立出来，不仅不容易出错，也使得客户端代码调用更容易。 c 语言不支持管程，下面的示例代码使用了类 Pascal 语言来描述管程。示例代码中的管程提供了 insert() 和 remove() 方法，客户端代码通过调用这两个方法来解决生产者-消费者问题。 1234567891011121314monitor ProducerConsumer integer i; condition c; procedure insert(); begin end; procedure remove(); begin end;end monitor; 管程有一个重要特性：在一个时刻只能有一个进程使用管程。进程在无法继续执行的时候不能一直占用管程，否者其它进程永远不能使用管程。 管程引入了 条件变量 以及相关的操作：wait() 和 signal() 来实现同步操作。对条件变量执行 wait() 操作会导致调用进程阻塞，把管程让出来让另一个进程持有。signal() 操作用于唤醒被阻塞的进程。 使用管程实现生成者-消费者问题 123456789101112131415161718192021222324252627282930313233343536373839monitor ProducerConsumer condition full, empty; integer count := 0; condition c; procedure insert(item: integer); begin if count = N then wait(full); insert_item(item); count := count + 1; if count = 1 ten signal(empty); end; function remove: integer; begin if count = 0 then wait(empty); remove = remove_item; count := count - 1; if count = N -1 then signal(full); end;end monitor;procedure producerbegin while true do begin item = produce_item; ProducerConsumer.insert(item); endend;procedure consumerbegin while true do begin item = ProducerConsumer.remove; consume_item(item); endend; 进程通信进程通信可以看成是不同进程间的线程通信，对于同一个进程内线程的通信方式，主要使用信号量、条件变量等同步机制。 1. 管道管道是单向的、先进先出的、无结构的、固定大小的字节流，它把一个进程的标准输出和另一个进程的标准输入连接在一起。写进程在管道的尾端写入数据，读进程在管道的首端读出数据。数据读出后将从管道中移走，其它读进程都不能再读到这些数据。 管道提供了简单的流控制机制，进程试图读空管道时，在有数据写入管道前，进程将一直阻塞。同样地，管道已经满时，进程再试图写管道，在其它进程从管道中移走数据之前，写进程将一直阻塞。 Linux 中管道是通过空文件来实现。 管道有三种： 普通管道：有两个限制：一是只支持半双工通信方式，即只能单向传输；二是只能在父子进程之间使用； 流管道：去除第一个限制，支持双向传输； 命名管道：去除第二个限制，可以在不相关进程之间进行通信。 2. 信号量信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其它进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。 3. 消息队列消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。 4. 信号信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。 5. 共享内存共享内存就是映射一段能被其它进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其它 IPC 运行效率低而专门设计的。它往往与其它通信机制（如信号量）配合使用，来实现进程间的同步和通信。 6. 套接字套接字也是一种进程间通信机制，与其它通信机制不同的是，它可用于不同机器间的进程通信。 经典同步问题生产者和消费者问题前面已经讨论过。 1. 读者-写者问题允许多个进程同时对数据进行读操作，但是不允许读和写以及写和写操作同时发生。 一个整型变量 count 记录在对数据进行读操作的进程数量，一个互斥量 count_mutex 用于对 count 加锁，一个互斥量 data_mutex 用于对读写的数据加锁。 1234567891011121314151617181920212223242526typedef int semaphore;semaphore count_mutex = 1;semaphore data_mutex = 1;int count = 0;void reader() &#123; while(TRUE) &#123; down(count_mutex); count++; if(count == 1) down(data_mutex); // 第一个读者需要对数据进行加锁，防止写进程访问 up(count_mutex); read(); down(count_mutex); count--; if(count == 0) up(data_mutex); up(count_mutex); &#125;&#125;void writer() &#123; while(TRUE) &#123; down(data_mutex); write(); up(data_mutex); &#125;&#125; 2. 哲学家进餐问题 五个哲学家围着一张圆周，每个哲学家面前放着饭。哲学家的生活有两种交替活动：吃饭以及思考。当一个哲学家吃饭时，需要先一根一根拿起左右两边的筷子。 下面是一种错误的解法，考虑到如果每个哲学家同时拿起左手边的筷子，那么就无法拿起右手边的筷子，造成死锁。 12345678910111213141516#define N 5#define LEFT (i + N - 1) % N#define RIGHT (i + N) % Ntypedef int semaphore;semaphore chopstick[N];void philosopher(int i) &#123; while(TURE)&#123; think(); down(chopstick[LEFT[i]]); down(chopstick[RIGHT[i]]); eat(); up(chopstick[RIGHT[i]]); up(chopstick[LEFT[i]]); &#125;&#125; 为了防止死锁的发生，可以加一点限制，只允许同时拿起左右两边的筷子，方法是引入一个互斥量，对拿起两个筷子的那段代码加锁。 12345678910111213141516semaphore mutex = 1;void philosopher(int i) &#123; while(TURE)&#123; think(); down(mutex); down(chopstick[LEFT[i]]); down(chopstick[RIGHT[i]]); up(mutex); eat(); down(mutex); up(chopstick[RIGHT[i]]); up(chopstick[LEFT[i]]); up(mutex); &#125;&#125; 第三章 死锁死锁的条件 互斥 请求与保持 不可抢占 环路等待 其中，请求与保持是指一个进程因请求资源而阻塞时，对已获得的资源保持不放。 死锁的处理方法1. 鸵鸟策略把头埋在沙子里，假装根本没发生问题。 这种策略不可取。 2. 死锁预防在程序运行之前预防发生死锁。 2.1 破坏互斥条件例如假脱机打印机技术允许若干个进程同时输出，唯一真正请求物理打印机的进程是打印机守护进程。 2.2 破坏请求与保持条件一种实现方式是规定所有进程在开始执行前请求所需要的全部资源。 2.3 破坏不可抢占条件2.4 破坏环路等待给资源统一编号，进程只能按编号顺序来请求资源。 3. 死锁避免在程序运行时避免发生死锁。 3.1 安全状态 图 a 的第二列 has 表示已拥有的资源数，第三列 max 表示总共需要的资源数，free 表示还有可以使用的资源数。从图 a 开始出发，先让 B 拥有所需的所有资源，运行结束后释放 B，此时 free 变为 4；接着以同样的方式运行 C 和 A，使得所有进程都能成功运行，因此可以称图 a 所示的状态时安全的。 定义：如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每一个进程运行完毕，则称该状态是安全的。 3.2 单个资源的银行家算法一个小城镇的银行家，他向一群客户分别承诺了一定的贷款额度，算法要做的是判断对请求的满足是否会进入不安全状态，如果是，就拒绝请求；否则予以分配。 上图 c 为不安全状态，因此算法会拒绝之前的请求，从而避免进入图 c 中的状态。 3.3 多个资源的银行家算法 上图中有五个进程，四个资源。左边的图表示已经分配的资源，右边的图表示还需要分配的资源。最右边的 E、P 以及 A 分别表示：总资源、已分配资源以及可用资源，注意这三个为向量，而不是具体数值，例如 A=(1020)，表示 4 个资源分别还剩下 1/0/2/0。 检查一个状态是否安全的算法如下： 查找右边的矩阵是否存在一行小于等于向量 A。如果不存在这样的行，那么系统将会发生死锁，状态是不安全的。 假若找到这样一行，将该进程标记为终止，并将其已分配资源加到 A 中。 重复以上两步，直到所有进程都标记为终止，则状态时安全的。 4. 死锁检测与死锁恢复不试图阻止死锁，而是当检测到死锁发生时，采取措施进行恢复。 4.1 死锁检测算法死锁检测的基本思想是，如果一个进程所请求的资源能够被满足，那么就让它执行，释放它拥有的所有资源，然后让其它能满足条件的进程执行。 上图中，有三个进程四个资源，每个数据代表的含义如下： E 向量：资源总量 A 向量：资源剩余量 C 矩阵：每个进程所拥有的资源数量，每一行都代表一个进程拥有资源的数量 R 矩阵：每个进程请求的资源数量 进程 P1 和 P2 所请求的资源都得不到满足，只有进程 P3 可以，让 P3 执行，之后释放 P3 拥有的资源，此时 A = (2 2 2 0)。P1 可以执行，执行后释放 P1 拥有的资源，A = (4 2 2 2) ，P2 也可以执行。所有进程都可以顺利执行，没有死锁。 算法总结如下： 每个进程最开始时都不被标记，执行过程有可能被标记。当算法结束时，任何没有被标记的进程都是死锁进程。 寻找一个没有标记的进程 Pi，它所请求的资源小于等于 A。 如果找到了这样一个进程，那么将 C 矩阵的第 i 行向量加到 A 中，标记该进程，并转回 1。 如果有没有这样一个进程，算法终止。 4.2 死锁恢复 利用抢占恢复 杀死进程 第四章 存储器管理虚拟内存每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。 当程序引用到一部分在物理内存中的地址空间时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。 分页与分段1. 分页用户程序的地址空间被划分为若干固定大小的区域，称为“页”。相应地，内存空间分成若干个物理块，页和块的大小相等。可将用户程序的任一页放在内存的任一块中，实现了离散分配，由一个页表来维护它们之间的映射关系。 2. 分段 上图为一个编译器在编译过程中建立的多个表，有 4 个表是动态增长的，如果使用分页系统的一维地址空间，动态递增的特点会导致覆盖问题的出现。 分段的做法是把每个表分成段，一个段构成一个独立的地址空间。每个段的长度可以不同，并且可以动态增长。 每个段都需要程序员来划分。 3. 段页式用分段方法来分配和管理虚拟存储器。程序的地址空间按逻辑单位分成基本独立的段，而每一段有自己的段名，再把每段分成固定大小的若干页。 用分页方法来分配和管理实存。即把整个主存分成与上述页大小相等的存储块，可装入作业的任何一页。 程序对内存的调入或调出是按页进行的，但它又可按段实现共享和保护。 4. 分页与分段区别 对程序员的透明性：分页透明，但是分段需要程序员显示划分每个段。 地址空间的维度：分页是一维地址空间，分段是二维的。 大小是否可以改变：页的大小不可变，段的大小可以动态改变。 出现的原因：分页主要用于实现虚拟内存，从而获得更大的地址空间；分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护。 页面置换算法在程序运行过程中，若其所要访问的页面不在内存而需要把它们调入内存，但是内存已无空闲空间时，系统必须从内存中调出一个页面到磁盘对换区中，并且将程序所需要的页面调入内存中。页面置换算法的主要目标是使页面置换频率最低（也可以说缺页率最低）。 1. 最佳（Optimal）所选择的被换出的页面将是最长时间内不再被访问，通常可以保证获得最低的缺页率。 是一种理论上的算法，因为无法知道一个页面多长时间会被再访问到。 举例：一个系统为某进程分配了三个物理块，并有如下页面引用序列： 7，0，1，2，0，3，0，4，2，3，0，3，2，1，2，0，1，7，0，1 进程运行时，先将 7,0,1 三个页面装入内存。当进程要访问页面 2 时，产生缺页中断，会将页面 7 换出，因为页面 7 再次被访问的时间最长。 2. 先进先出（FIFO）所选择换出的页面是最先进入的页面。 该算法会将那些经常被访问的页面也被换出，从而使缺页率升高。 3. 最近最久未使用（LRU, Least Recently Used）虽然无法知道将来要使用的页面情况，但是可以知道过去使用页面的情况。LRU 将最近最久未使用的页面换出。 可以用栈来实现该算法，栈中存储页面的页面号。当进程访问一个页面时，将该页面的页面号从栈移除，并将它压入栈顶。这样，最近被访问的页面的页面号总是在栈顶，而最近最久未使用的页面的页面号总是在栈底。 4，7，0，7，1，0，1，2，1，2，6 4. 时钟（Clock）Clock 页面置换算法需要用到一个访问位，当一个页面被访问时，将访问为置为 1。 首先，将内存中的所有页面链接成一个循环队列，当缺页中断发生时，检查当前指针所指向页面的访问位，如果访问位为 0，就将该页面换出；否则将该页的访问位设置为 0，给该页面第二次的机会，移动指针继续检查。 第五章 设备管理磁盘调度算法当多个进程同时请求访问磁盘时，需要进行磁盘调度来控制对磁盘的访问。磁盘调度的主要目标是使磁盘的平均寻道时间最少。 1. 先来先服务（FCFS, First Come First Serverd）根据进程请求访问磁盘的先后次序来进行调度。优点是公平和简单，缺点也很明显，因为未对寻道做任何优化，使平均寻道时间可能较长。 2. 最短寻道时间优先（SSTF, Shortest Seek Time First）要求访问的磁道与当前磁头所在磁道距离最近的优先进行调度。这种算法并不能保证平均寻道时间最短，但是比 FCFS 好很多。 3. 扫描算法（SCAN）SSTF 会出现进行饥饿现象。考虑以下情况，新进程请求访问的磁道与磁头所在磁道的距离总是比一个在等待的进程来的近，那么等待的进程会一直等待下去。 SCAN 算法在 SSTF 算法之上考虑了磁头的移动方向，要求所请求访问的磁道在磁头当前移动方向上才能够得到调度。因为考虑了移动方向，那么一个进程请求访问的磁道一定会得到调度。 当一个磁头自里向外移动时，移到最外侧会改变移动方向为自外向里，这种移动的规律类似于电梯的运行，因此又常称 SCAN 算法为电梯调度算法。 4. 循环扫描算法（CSCAN）CSCAN 对 SCAN 进行了改动，要求磁头始终沿着一个方向移动。 参考资料 Tanenbaum A S, Bos H. Modern operating systems[M]. Prentice Hall Press, 2014. 汤子瀛, 哲凤屏, 汤小丹. 计算机操作系统[M]. 西安电子科技大学出版社, 2001. Bryant, R. E., &amp; O’Hallaron, D. R. (2004). 深入理解计算机系统. 进程间的几种通信方式 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"面向对象思想","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/面向对象思想.html","text":"S.O.L.I.D 1. 单一责任原则 2. 开放封闭原则 3. 里氏替换原则 4. 接口分离原则 5. 依赖倒置原则 其他常见原则 1. 迪米特法则 2. 合成复用原则 3. 共同封闭原则 4. 稳定抽象原则 5. 稳定依赖原则 封装、继承、多态 1. 封装 2. 继承 3. 多态 UML 1. 类图 2. 时序图 参考资料 S.O.L.I.DS.O.L.I.D 是面向对象设计和编程 (OOD&amp;OOP) 中几个重要编码原则 (Programming Priciple) 的首字母缩写。 简写 全拼 中文翻译 SRP The Single Responsibility Principle 单一责任原则 OCP The Open Closed Principle 开放封闭原则 LSP The Liskov Substitution Principle 里氏替换原则 ISP The Interface Segregation Principle 接口分离原则 DIP The Dependency Inversion Principle 依赖倒置原则 1. 单一责任原则当需要修改某个类的时候原因有且只有一个。换句话说就是让一个类只做一种类型责任，当这个类需要承当其他类型的责任的时候，就需要分解这个类。 2. 开放封闭原则软件实体应该是可扩展，而不可修改的。也就是说，对扩展是开放的，而对修改是封闭的。 3. 里氏替换原则当一个子类的实例应该能够替换任何其超类的实例时，它们之间才具有 is-a 关系。 4. 接口分离原则不能强迫用户去依赖那些他们不使用的接口。换句话说，使用多个专门的接口比使用单一的总接口总要好。 5. 依赖倒置原则 高层模块不应该依赖于低层模块，二者都应该依赖于抽象 抽象不应该依赖于细节，细节应该依赖于抽象 其他常见原则除了上述的经典原则，在实际开发中还有下面这些常见的设计原则。 简写 全拼 中文翻译 LoD The Law of Demeter 迪米特法则 CRP The Composite Reuse Principle 合成复用原则 CCP The Common Closure Principle 共同封闭原则 SAP The Stable Abstractions Principle 稳定抽象原则 SDP The Stable Dependencies Principle 稳定依赖原则 1. 迪米特法则迪米特法则又叫作最少知道原则（Least Knowledge Principle 简写LKP），就是说一个对象应当对其他对象有尽可能少的了解，不和陌生人说话。 2. 合成复用原则尽量使用对象组合，而不是继承来达到复用的目的。 3. 共同封闭原则一起修改的类，应该组合在一起（同一个包里）。如果必须修改应用程序里的代码，我们希望所有的修改都发生在一个包里（修改关闭），而不是遍布在很多包里。 4. 稳定抽象原则最稳定的包应该是最抽象的包，不稳定的包应该是具体的包，即包的抽象程度跟它的稳定性成正比。 5. 稳定依赖原则包之间的依赖关系都应该是稳定方向依赖的，包要依赖的包要比自己更具有稳定性。 封装、继承、多态封装、继承、多态是面向对象的三大特性。 1. 封装利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体，数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户是无需知道对象内部的细节，但可以通过该对象对外的提供的接口来访问该对象。 封装有三大好处： 良好的封装能够减少耦合。 类内部的结构可以自由修改。 可以对成员进行更精确的控制。 隐藏信息，实现细节。 以下 Person 类封装 name、gender、age 等属性，外界只能通过 get() 方法获取一个 Person 对象的 name 属性和 gender 属性，而无法获取 age 属性，但是 age 属性可以供 work() 方法使用。 注意到 gender 属性使用 int 数据类型进行存储，封装使得用户注意不到这种实现细节。并且在需要修改使用的数据类型时，也可以在不影响客户端代码的情况下进行。 123456789101112131415161718192021public class Person &#123; private String name; private int gender; private int age; public String getName() &#123; return name; &#125; public String getGender() &#123; return gender == 0 ? \"man\" : \"woman\"; &#125; public void work() &#123; if(18 &lt;= age &amp;&amp; age &lt;= 50) &#123; System.out.println(name + \" is working very hard!\"); &#125; else &#123; System.out.println(name + \" can't work!\"); &#125; &#125;&#125; 2. 继承继承实现了 is-a 关系，例如 Cat 和 Animal 就是一种 is-a 关系，因此可以将 Cat 继承自 Animal，从而获得 Animal 非 private 的属性和方法。 Cat 可以当做 Animal 来使用，也就是可以使用 Animal 引用 Cat 对象，这种子类转换为父类称为 向上转型 。 继承应该遵循里氏替换原则：当一个子类的实例应该能够替换任何其超类的实例时，它们之间才具有 is-a 关系。 1Animal animal = new Cat(); 3. 多态多态分为编译时多态和运行时多态。编译时多态主要指方法的重装，运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定。 多态有三个条件：1. 继承；2. 覆盖父类方法；3. 向上转型。 下面的代码中，乐器类（Instrument）有两个子类：Wind 和 Percussion，它们都覆盖了 play() 方法，并且在 main() 方法中使用父类 Instrument 来引用 Wind 和 Percussion 对象。在 Instrument 引用调用 play() 方法时，会执行实际引用对象所在类的 play() 方法，而不是 Instrument 类的方法。 12345678910111213141516171819202122232425262728public class Instrument &#123; public void play() &#123; System.out.println(\"Instument is playing...\"); &#125;&#125;public class Wind extends Instrument &#123; public void play() &#123; System.out.println(\"Wind is playing...\"); &#125;&#125;public class Percussion extends Instrument &#123; public void play() &#123; System.out.println(\"Percussion is playing...\"); &#125;&#125;public class Music &#123; public static void main(String[] args) &#123; List&lt;Instrument&gt; instruments = new ArrayList&lt;&gt;(); instruments.add(new Wind()); instruments.add(new Percussion()); for(Instrument instrument : instruments) &#123; instrument.play(); &#125; &#125;&#125; UML1. 类图1.1 继承相关 继承有两种形式 : 泛化（generalize）和实现（realize），表现为 is-a 关系。 ① 泛化关系 (generalization) 从具体类中继承 ② 实现关系 (realize) 从抽象类或者接口中继承 1.2 整体和部分 ① 聚合关系 (aggregation) 表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。以下表示 B 由 A 组成： ② 组合关系 (composition) 和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。 1.3 相互联系 ① 关联关系 (association) 表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。 ② 依赖关系 (dependency) 和关联关系不同的是 , 依赖关系是在运行过程中起作用的。一般依赖作为类的构造器或者方法的参数传入。双向依赖时一种不好的设计。 2. 时序图http://www.cnblogs.com/wolf-sun/p/UML-Sequence-diagram.html 2.1 定义 时序图描述了对象之间传递消息的时间顺序，它用来表示用例的行为顺序。它的主要作用是通过对象间的交互来描述用例（注意是对象），从而寻找类的操作。 2.2 赤壁之战时序图 从虚线从上往下表示时间的推进。 可见，通过时序图可以知道每个类具有以下操作： 123456789101112131415161718192021publc class 刘备 &#123; public void 应战 ();&#125;publc class 孔明 &#123; public void 拟定策略 (); public void 联合孙权 (); private void 借东风火攻 ();&#125;public class 关羽 &#123; public void 防守荊州 ();&#125;public class 张飞 &#123; public void 防守荆州前线 ();&#125;public class 孙权 &#123; public void 领兵相助 ();&#125; 2.3 活动图、时序图之间的关系 活动图示从用户的角度来描述用例； 时序图是从计算机的角度（对象间的交互）描述用例。 2.4 类图与时序图的关系 类图描述系统的静态结构，时序图描述系统的动态行为。 2.5 时序图的组成 ① 对象 有三种表现形式 在画图时，应该遵循以下原则： 把交互频繁的对象尽可能地靠拢。 把初始化整个交互活动的对象（有时是一个参与者）放置在最左边。 ② 生命线 生命线从对象的创建开始到对象销毁时终止 ③ 消息 对象之间的交互式通过发送消息来实现的。 消息有 4 种类型： 1. 简单消息，不区分同步异步。 2. 同步消息，发送消息之后需要暂停活动来等待回应。 3. 异步消息，发送消息之后不需要等待。 4. 返回消息，可选。 ④ 激活 生命线上的方框表示激活状态，其它时间处于休眠状态。 参考资料 Java 编程思想 面向对象设计的 SOLID 原则 看懂 UML 类图和时序图 UML 系列——时序图（顺序图）sequence diagram 面向对象编程三大特性 —— 封装、继承、多态 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"代码风格规范","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/代码风格规范.html","text":"Google Java Style Guide http://www.hawstein.com/posts/google-java-style.html http://google.github.io/styleguide/javaguide.html Google C++ Style Guide http://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/ http://google.github.io/styleguide/cppguide.html Google Python Style Guide http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/ http://google.github.io/styleguide/pyguide.html 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"计算机网络","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/计算机网络.html","text":"第一章 概述 网络的网络 ISP 互联网的组成 主机之间的通信方式 电路交换与分组交换 1. 电路交换 2. 报文交换 3. 分组交换 时延 1. 发送时延 2. 传播时延 3. 处理时延 4. 排队时延 计算机网络体系结构* 1. 七层协议 2. 五层协议 3. 数据在各层之间的传递过程 4. TCP/IP 体系结构 第二章 物理层 通信方式 带通调制 信道复用技术 1. 频分复用、时分复用 2. 统计时分复用 3. 波分复用 4. 码分复用 第三章 数据链路层 三个基本问题 1. 封装成帧 2. 透明传输 3. 差错检测 点对点信道 - PPP 协议 局域网的拓扑 广播信道 - CSMA/CD 协议* 集线器 MAC 层* 虚拟局域网 第四章 网络层* 网际协议 IP 概述 IP 数据报格式 IP 地址编址 1. 分类 2. 子网划分 3. 无分类 IP 地址和 MAC 地址 地址解析协议 ARP 路由器的结构 交换机与路由器的区别 路由器分组转发流程 路由选择协议 1. 内部网关协议 RIP 2. 内部网关协议 OSPF 3. 外部网关协议 BGP 网际控制报文协议 ICMP 分组网间探测 PING IP 多播 虚拟专用网 VPN 网络地址转换 NAT 第五章 运输层* UDP 和 TCP 的特点 UDP 首部格式 TCP 首部格式 TCP 的三次握手 TCP 的四次挥手 TCP 滑动窗口 TCP 可靠传输 TCP 流量控制 TCP 拥塞控制 慢开始与拥塞避免 快重传与快恢复 第六章 应用层* 域名系统 DNS 1. 层次结构 2. 解析过程 文件传输协议 FTP 远程终端协议 TELNET 万维网 WWW 电子邮件协议 POP3 IMAP SMTP 动态主机配置协议 DHCP 点对点传输 P2P Web 页面请求过程 常用端口 参考资料 第一章 概述网络的网络网络把主机连接起来，而互联网是把多种不同的网络连接起来，因此互联网是网络的网络。 ISP互联网服务提供商 ISP 可以从互联网管理机构获得许多 IP 地址，同时拥有通信线路以及路由器等联网设备，个人或机构向 ISP 缴纳一定的费用就可以接入互联网。 目前的互联网是一种多层次 ISP 结构，ISP 根据覆盖面积的大小分为主干 ISP、地区 ISP 和本地 ISP。 互联网交换点 IXP 允许两个 ISP 直接相连而不用经过第三个 ISP。 互联网的组成 边缘部分：所有连接在互联网上的主机，用户可以直接使用； 核心部分：由大量的网络和连接这些网络的路由器组成，为边缘部分的主机提供服务。 主机之间的通信方式1. 客户-服务器（C/S） 客户是服务的请求方，服务器是服务的提供方。 2. 对等（P2P） 不区分客户和服务器。 电路交换与分组交换 1. 电路交换电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中始终占用该链路。由于通信的过程中不可能一直在使用传输线路，因此电路交换对线路的利用率很低，往往不到 10%。 2. 报文交换报文交换用于邮局通信系统，邮局接收到一份报文之后，先存储下来，然后把相同目的地的报文一起转发到下一个目的地，这个过程就是存储转发过程。 3. 分组交换分组交换也使用了存储转发，但是转发的是分组而不是报文。把整块数据称为一个报文，由于一个报文可能很长，需要先进行切分，来满足分组能处理的大小。在每个切分的数据前面加上首部之后就成为了分组，首部包含了目的地址和源地址等控制信息。 存储转发允许在一条传输线路上传送多个主机的分组，因此两个用户之间的通信不需要占用端到端的线路资源。 相比于报文交换，由于分组比报文更小，因此分组交换的存储转发速度更加快速。 时延总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延 1. 发送时延主机或路由器发送数据帧所需要的时间。 其中 l 表示数据帧的长度，v 表示发送速率。 2. 传播时延电磁波在信道中传播一定的距离需要花费的时间，电磁波传播速度接近光速。 其中 l 表示信道长度，v 表示电磁波在信道上的传播速率。 3. 处理时延主机或路由器收到分组时进行处理所需要的时间，例如分析首部，从分组中提取数据部分等。 4. 排队时延分组在路由器的输入队列和输出队列中排队等待的时间，取决于网络当前的通信量。 计算机网络体系结构* 1. 七层协议如图 a 所示，其中表示层和会话层用途如下： 表示层：信息的语法、语义以及它们的关联，如加密解密、转换翻译、压缩解压缩； 会话层：不同机器上的用户之间建立及管理会话。 2. 五层协议 应用层：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等。数据单位为报文。 运输层：提供的是进程间的通用数据传输服务。由于应用层协议很多，定义通用的运输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。 网络层：为主机之间提供服务，而不是像运输层协议那样是为主机中的进程提供服务。网络层把运输层传递下来的报文段或者用户数据报封装成分组来进行传输。 数据链路层：网络层针对的还是主机之间，而主机之间可以有很多链路，链路层协议就是为相邻结点之间提供服务。数据链路层把网络层传来的分组封装成帧。 物理层：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使物理层上的数据链路层感觉不到这些差异。 3. 数据在各层之间的传递过程在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。 路由器只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要运输层和应用层。 4. TCP/IP 体系结构它只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。 现在的 TCP/IP 体系结构不严格遵循 OSI 分层概念，应用层可能会直接使用 IP 层或者网络接口层。 TCP/IP 协议族是一种沙漏形状，中间小两边大，IP 协议在其中占用举足轻重的地位。 第二章 物理层通信方式 单向通信，又称为单工通信； 双向交替通信，又称为半双工通信； 双向同时通信，又称为全双工通信。 带通调制模拟信号是连续的信号，数字信号是离散的信号。带通调制把数字信号转换为模拟信号。 信道复用技术1. 频分复用、时分复用频分复用的所有用户在相同的时间占用不同的频率带宽资源；时分复用的所有用户在不同的时间占用相同的频率带宽资源。 使用这两种方式进行通信，在通信的过程中用户会一直占用一部分信道资源。但是由于计算机数据的突发性质，没必要一直占用信道资源而不让出给其它用户使用，因此这两种方式对信道的利用率都不高。 2. 统计时分复用是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。 3. 波分复用光的频分复用。由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。 4. 码分复用为每个用户分配 m bit 的码片，并且所有的码片正交，对于任意两个码片 和 有 为了方便，取 m=8，设码片 为 00011011。在拥有该码片的用户发送比特 1 时就发送该码片，发送比特 0 时就发送该码片的反码 11100100。 在计算时将 00011011 记作 (-1 -1 -1 +1 +1 -1 +1 +1)，可以得到 其中 为 的反码。 利用上面的式子我们知道，当接收端使用码片 对接收到的数据进行内积运算时，结果为 0 的是其它用户发送的数据，结果为 1 的是用户发送的比特 1，结果为 -1 的是用户发送的比特 0。 码分复用需要发送的数据量为原先的 m 倍。 第三章 数据链路层三个基本问题1. 封装成帧将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。 2. 透明传输透明表示一个实际存在的事物看起来好像不存在一样。 帧中有首部和尾部，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据中出现首部尾部相同的内容前面插入转义字符，如果需要传输的内容正好就是转义字符，那么就在转义字符前面再加个转义字符，在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。 3. 差错检测目前数据链路层广泛使用了循环冗余检验（CRC）来检查比特差错。 点对点信道 - PPP 协议互联网用户通常需要连接到某个 ISP 之后才能接入到互联网，PPP 协议就是用户计算机和 ISP 进行通信时所使用的数据链路层协议。 在 PPP 的帧中 F 字段为帧的定界符 A 和 C 字段暂时没有意义 FCS 字段是使用 CRC 的检验序列 信息部分的长度不超过 1500 局域网的拓扑 广播信道 - CSMA/CD 协议*在广播信道上，同一时间只能允许一台计算机发送数据。 CSMA/CD 表示载波监听多点接入 / 碰撞检测。 多点接入 ：说明这是总线型网络，许多计算机以多点的方式连接到总线上。 载波监听 ：每个站都必须不停地检听信道。在发送前，如果检听信道正在使用，就必须等待。 碰撞检测 ：在发送中，如果检听到信道已有其它站正在发送数据，就表示发生了碰撞。虽然每一个站在发送数据之前都已经检听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。 记端到端的传播时延为 τ，最先发送的站点最多经过 2τ 就可以知道是否发生了碰撞，称 2τ 为 争用期 。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。 当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用 截断二进制指数退避算法 来确定，从离散的整数集合 {0, 1, .., (2k-1)} 中随机取出一个数，记作 r，然后取 r 倍的争用期作为重传等待时间。 集线器从表面上看，使用集线器的局域网在物理上是一个星型网。但是集线器使用电子器件来模拟实际缆线的工作，逻辑上仍是一个总线网，整个系统仍像一个传统以太网那样运行。 MAC 层*MAC 地址是 6 字节（48 位）的地址，用于唯一表示网络适配器（网卡），一台主机拥有多少个适配器就有多少个 MAC 地址，例如笔记本电脑普遍存在无线网络适配器和有线网络适配器。 类型 ：标记上层使用的协议； 数据 ：长度在 46-1500 之间，如果太小则需要填充； FCS ：帧检验序列，使用的是 CRC 检验方法； 前同步码 ：只是为了计算 FCS 临时加入的，计算结束之后会丢弃。 虚拟局域网虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息，例如下图中 (A1, A2, A3, A4) 属于一个虚拟局域网，A1 发送的广播会被 A2、A3、A4 收到，而其它站点收不到。 第四章 网络层*网际协议 IP 概述因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。 使用 IP 协议，可以把异构的物理网络连接起来，使得在网络层看起来好像是一个统一的网络。 与 IP 协议配套使用的还有三个协议： 地址解析协议 ARP（Address Resolution Protocol） 网际控制报文协议 ICMP（Internet Control Message Protocol） 网际组管理协议 IGMP（Internet Group Management Protocol） IP 数据报格式 版本 : 有 4（IPv4）和 6（IPv6）两个值； 首部长度 : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为首部固定长度为 20 字节，因此该值最小为 5。如果可选部分的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。 区分服务 : 用来获得更好的服务，一般情况下不使用。 总长度 : 包括首部长度和数据部分长度。 标识 : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。 片偏移 : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。 生存时间 ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。 协议 ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。 首部检验和 ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。 IP 地址编址IP 地址的编址方式经历了三个历史阶段： 分类； 子网划分； 无分类。 1. 分类由两部分组成，网络号和主机号，其中不同类别具有不同的网络号长度，并且是固定的。 IP 地址 ::= {&lt; 网络号 &gt;, &lt; 主机号 &gt;} 2. 子网划分通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。注意，外部网络看不到子网的存在。 IP 地址 ::= {&lt; 网络号 &gt;, &lt; 子网号 &gt;, &lt; 主机号 &gt;} 要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 000000，也就是 255.255.192.0。 3. 无分类无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。 IP 地址 ::= {&lt; 网络前缀号 &gt;, &lt; 主机号 &gt;} CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。 CIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。 一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 构成超网 。 在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。 IP 地址和 MAC 地址网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。 地址解析协议 ARP实现由 IP 地址得到 MAC 地址。 每个主机都有一个 ARP 高速缓存，存放映射表。如果一个 IP 地址到 MAC 地址的映射不在该表中，主机通过广播的方式发送 ARP 请求分组，匹配 IP 地址的主机会发送 ARP 响应分组告知其 MAC 地址。 路由器的结构路由器从功能上可以划分为两大部分：路由选择和分组转发。 分组转发部分由三部分组成：交换结构、一组输入端口和一组输出端口。 交换结构的交换网络有以下三种实现方式： 交换机与路由器的区别 交换机工作于数据链路层，能识别 MAC 地址，根据 MAC 地址转发链路层数据帧。具有自学机制来维护 IP 地址与 MAC 地址的映射。 路由器位于网络层，能识别 IP 地址并根据 IP 地址转发分组。维护着路由表，根据路由表选择最佳路线。 路由器分组转发流程 从数据报的首部提取目的主机的 IP 地址 D，得到目的网络地址 N。（路由表项是网络号而不是 IP 地址，这样做大大减少了路由表条目数量） 若 N 就是与此路由器直接相连的某个网络地址，则进行直接交付； 若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给表中所指明的下一跳路由器； 若路由表中有到达网络 N 的路由，则把数据报传送给路由表中所指明的下一跳路由器； 若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器； 报告转发分组出错。 路由选择协议互联网使用的路由选择协议都是自适应的，能随着网络通信量和拓扑结构的变化而自适应地进行调整。 互联网可以划分为许多较小的自治系统 AS，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。 可以把路由选择协议划分为两大类： 内部网关协议 IGP（Interior Gateway Protocol）：在 AS 内部使用，如 RIP 和 OSPF。 外部网关协议 EGP（External Gateway Protocol）：在 AS 之间使用，如 BGP。 1. 内部网关协议 RIPRIP 是一种分布式的基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1，跳数最多为 15，超过 15 表示不可达。 RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。 距离向量算法： 对地址为 X 的相邻路由器发来的 RIP 报文，先修改报文中的所有项目，把下一跳字段中的地址改为 X，并把所有的距离字段加 1； 对修改后的 RIP 报文中的每一个项目，进行以下步骤： 若原来的路由表中没有目的网络 N，则把该项目添加到路由表中； 否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。 若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。 RIP 协议实现简单，开销小，但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。 2. 内部网关协议 OSPF开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。 开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。 OSPF 具有以下特点： 向本自治系统中的所有路由器发送信息，这种方法是洪泛法。 发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。 只有当链路状态发生变化时，路由器才会发送信息。 所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。 3. 外部网关协议 BGPAS 之间的路由选择很困难，主要是互联网规模很大。并且各个 AS 内部使用不同的路由选择协议，就无法准确定义路径的度量。并且 AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。 BGP 只能寻找一条比较好的路由，而不是最佳路由。它采用路径向量路由选择协议。 每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。 网际控制报文协议 ICMPICMP 是为了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。 ICMP 报文分为差错报告报文和询问报文。 分组网间探测 PINGPING 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。 PING 的过程： PING 同一个网段的主机：查找目的主机的 MAC 地址，然后直接交付。如果无法查找到 MAC 地址，就要进行一次 ARP 请求。 PING 不同网段的主机：发送到网关让其进行转发。同样要发送到网关也需要通过查找网关的 MAC 地址，根据 MAC 地址进行转发。 IP 多播在一对多的通信中，多播不需要将分组复制多份，从而大大节约网络资源。 虚拟专用网 VPN由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。 有三个专用地址块： 10.0.0.0 ~ 10.255.255.255 172.16.0.0 ~ 172.31.255.255 192.168.0.0 ~ 192.168.255.255 VPN 使用公用的互联网作为本机构各专用网之间的通信载体。专用指机构内的主机只与本机构内的其它主机通信；虚拟指“好像是”，而实际上并不是，它有经过公用的互联网。 下图中，场所 A 和 B 的通信部经过互联网，如果场所 A 的主机 X 要和另一个场所 B 的主机 Y 通信，IP 数据报的源地址是 10.1.0.1，目的地址是 10.2.0.3。数据报先发送到与互联网相连的路由器 R1，R1 对内部数据进行加密，然后重新加上数据报的首部，源地址是路由器 R1 的全球地址 125.1.2.3，目的地址是路由器 R2 的全球地址 194.4.5.6。路由器 R2 收到数据报后将数据部分进行解密，恢复原来的数据报，此时目的地址为 10.2.0.3，就交付给 Y。 网络地址转换 NAT专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。 在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把运输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。 第五章 运输层*网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。 运输层提供了应用进程间的逻辑通信。运输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看见的好像在两个运输层实体之间有一条端到端的逻辑通信信道。 UDP 和 TCP 的特点 用户数据包协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部）。 传输控制协议 TCP（Transmission Control Protocol） 是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块） UDP 首部格式 首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和而临时添加的。 TCP 首部格式 序号 ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。 确认号 ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。 数据偏移 ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。 确认 ACK ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。 同步 SYN ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。 终止 FIN ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放运输连接。 窗口 ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。 TCP 的三次握手 假设 A 为客户端，B 为服务器端。 首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。 A 向 B 发送连接请求报文段，SYN=1，ACK=0，选择一个初始的序号 x。 B 收到连接请求报文段，如果同意建立连接，则向 A 发送连接确认报文段，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。 A 收到 B 的连接确认报文段后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。 B 收到 A 的确认后，连接建立。 TCP 的四次挥手 以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。 A 发送连接释放报文段，FIN=1； B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据； 当 B 要不再需要连接时，发送连接释放请求报文段，FIN=1； A 收到后发出确认，此时连接释放。 TIME_WAIT 客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间。这么做有两个理由： 确保最后一个确认报文段能够到达。如果 B 没收到 A 发送来的确认报文段，那么就会重新发送连接释放请求报文段，A 等待一段时间就是为了处理这种情况的发生。 可能存在“已失效的连接请求报文段”，为了防止这种报文段出现在本次连接之外，需要等待一段时间。 TCP 滑动窗口 窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。 发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。 接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 32, 34, 35}，其中 {31, 32} 按序到达，而 {34, 35} 就不是，因此只对字节 32 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。 TCP 可靠传输TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。 一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下： 超时时间 RTO 应该略大于 RRTs，TCP 使用的超时时间计算如下： 其中 RTTd 为偏差，它与新的 RRT 和 RRTs 有关。 TCP 流量控制流量控制是为了控制发送方发送速率，保证接收方来得及接收。 接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。例如将窗口字段设置为 0，则发送方不能发送数据。 TCP 拥塞控制如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接受，而拥塞控制是为了降低整个网络的拥塞程度。 TCP 主要通过四种算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。发送方需要维护有一个叫做拥塞窗口（cwnd）的状态变量。注意拥塞窗口与发送方窗口的区别，拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。 为了便于讨论，做如下假设： 接收方有足够大的接收缓存，因此不会发生流量控制； 虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。 慢开始与拥塞避免发送的最初执行慢开始，令 cwnd=1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段为：2、4、8 … 注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。 如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。 快重传与快恢复在接收方，要求每次接收到报文段都应该发送对已收到有序报文段的确认，例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。 在发送方，如果收到三个重复确认，那么可以确认下一个报文段丢失，例如收到三个 M2 ，则 M3 丢失。此时执行快重传，立即重传下一个报文段。 在这种情况下，只是丢失个别报文段，而不是网络拥塞，因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。 第六章 应用层*域名系统 DNS把主机名解析为 IP 地址。 被设计成分布式系统。 1. 层次结构一个域名由多个层次构成，从上层到下层分别为顶级域名、二级域名、三级域名以及四级域名。所有域名可以画成一颗域名树。 域名服务器可以分为以下四类： 根域名服务器：解析顶级域名； 顶级域名服务器：解析二级域名； 权限域名服务器：解析区内的域名； 本地域名服务器：也称为默认域名服务器。可以在其中配置高速缓存。 区和域的概念不同，可以在一个域中划分多个区。图 b 在域 abc.com 中划分了两个区：abc.com 和 y.abc.com 因此就需要两个权限域名服务器： 2. 解析过程主机向本地域名服务器解析的过程采用递归，而本地域名服务器向其它域名服务器解析可以使用递归和迭代两种方式。 迭代的方式下，本地域名服务器向一个域名服务器解析请求解析之后，结果返回到本地域名服务器，然后本地域名服务器继续向其它域名服务器请求解析；而递归地方式下，结果不是直接返回的，而是继续向前请求解析，最后的结果才会返回。 文件传输协议 FTPFTP 在运输层使用 TCP，并且需要建立两个并行的 TCP 连接：控制连接和数据连接。控制连接在整个会话期间一直保持打开，而数据连接在数据传送完毕之后就关闭。控制连接使用端口号 21，数据连接使用端口号 20。 远程终端协议 TELNETTELNET 用于登录到远程主机上，并且远程主机上的输出也会返回。 TELNET 可以适应许多计算机和操作系统的差异，例如不同操作系统系统的换行符定义。 万维网 WWWHTTP 电子邮件协议一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件发送协议和读取协议。其中发送协议常用 SMTP，读取协议常用 POP3 和 IMAP。 POP3POP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。 IMAPIMAP 协议中客户端和服务器上的邮件保持同步，如果不去手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以让用户随时随地去访问服务器上的邮件。IMAP 协议也支持创建自定义的文件夹。 SMTPSMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。MIME 并没有改动或者取代 SMTP，而是增加邮件主题的结构，定义了非 ASCII 码的编码规则。 动态主机配置协议 DHCPDHCP 提供了即插即用的连网方式，用户不再需要去手动配置 IP 地址等信息。 DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、默认路由器 IP 地址、域名服务器的 IP 地址。 工作方式如下：需要 IP 地址的主机广播发送 DHCP 发现报文（将目的地址置为全 1，即 255.255.255.255:67，源地址设置为全 0，即 0.0.0.0:68），DHCP 服务器收到发现报文之后，则在 IP 地址池中取一个地址，发送 DHCP 提供报文给该主机。 点对点传输 P2P把某个文件分发的所有对等集合称为一个洪流。文件的数据单元称为文件块，它的大小是固定的。一个新的对等方加入某个洪流，一开始并没有文件块，但是能够从其它对等方中逐渐地下载到一些文件块，与此同时，它也为别的对等方上传一些文件块。 每个洪流都有一个基础设施，称为追踪器。当一个对等方加入洪流时，必须向追踪器登记，并周期性地通知追踪器它仍在洪流中。可以在任何时间加入和退出某个洪流。 一个新的对等方加入洪流时，追踪器会随机从洪流中选择若干个对等方，并让新对等方与这些对等方建立连接，把这些对等方称为相邻对等方。接收和发送文件块都是在相邻对等方中进行。 当一个对等方需要很多文件块时，通过使用最稀有优先的策略来取得文件块，也就是一个文件块在相邻对等方中副本最少，那么就优先请求这个文件块。 当很多对等方向同一个对等方请求文件块时，该对等方优先选择以最高速率向其发送文件块的对等方。 P2P 是一个分布式系统，任何时候都有对等方加入或者退出。使用分布式散列表 DHT，可以查找洪流中的资源和 IP 地址映射。 Web 页面请求过程 向 DNS 服务器发送 DNS 查询报文来解析域名。 开始进行 HTTP 会话，需要先建立 TCP 连接。 在运输层的传输过程中，HTTP 报文被封装进 TCP 中。HTTP 请求报文使用端口号 80，因为服务器监听的是 80 端口。连接建立之后，服务器会随机分配一个端口号给特定的客户端，之后的 TCP 传输都是用这个分配的端口号。 在网络层的传输过程中，TCP 报文段会被封装进 IP 分组中，IP 分组经过路由选择，最后到达目的地。 在链路层，IP 分组会被封装进 MAC 帧中，IP 地址解析成 MAC 地址需要使用 ARP。 客户端发送 HTTP 请求报文，请求获取页面。 服务器发送 HTTP 相应报文，客户端从而获取该页面。 浏览器得到页面内容之后，解析并渲染，向用户展示页面。 常用端口 应用层协议 端口号 运输层协议 DNS 53 UDP FTP 控制连接 21，数据连接 20 TCP TELNET 23 TCP DHCP 67 68 UDP HTTP 80 TCP SMTP 25 TCP POP3 110 TCP IMAP 143 TCP 参考资料 计算机网络 第七版 计算机网络 自顶向下方法 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"重构","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/重构.html","text":"第一个案例 重构原则 定义 为何重构 三次法则 间接层与重构 修改接口 何时不该重构 重构与设计 重构与性能 代码的坏味道 1. Duplicated Code（重复代码） 2. Long Method（过长函数） 3. Large Class（过大的类） 4. Long Parameter List（过长的参数列表） 5. Divergent Change（发散式变化） 6. Shotgun Surgery（散弹式修改） 7. Feature Envy（依恋情结） 8. Data Clumps（数据泥团） 9. Primitive Obsession（基本类型偏执） 10. Switch Statements（switch 惊悚现身） 11. Parallel Inheritance Hierarchies（平行继承体系） 12. Lazy Class（冗余类） 13. Speculative Generality（夸夸其谈未来性） 14. Temporary Field（令人迷惑的暂时字段） 15. Message Chains（过度耦合的消息链） 16. Middle Man（中间人） 17. Inappropriate Intimacy（狎昵关系） 18. Alernative Classes with Different Interfaces（异曲同工的类） 19. Incomplete Library Class（不完美的类库） 20. Data Class（幼稚的数据类） 21. Refused Bequest（被拒绝的馈赠） 22. Comments（过多的注释） 构筑测试体系 重新组织函数 1. Extract Method（提炼函数） 2. Inline Method（内联函数） 3. Inline Temp（内联临时变量） 4. Replace Temp with Query（以查询取代临时变量） 5. Introduce Explaining Variable（引起解释变量） 6. Split Temporary Variable（分解临时变量） 7. Remove Assigments to Parameters（移除对参数的赋值） 8. Replace Method with Method Object（以函数对象取代函数） 9. Subsititute Algorithn（替换算法） 在对象之间搬移特性 1. Move Method（搬移函数） 2. Move Field（搬移字段） 3. Extract Class（提炼类） 4. Inline Class（将类内联化） 5. Hide Delegate（隐藏“委托关系”） 6. Remove Middle Man（移除中间人） 7. Introduce Foreign Method（引入外加函数） 8. Introduce Local Extension（引入本地扩展） 重新组织数据 1. Self Encapsulate Field（自封装字段） 2. Replace Data Value with Object（以对象取代数据值） 3. Change Value to Reference（将值对象改成引用对象） 4. Change Reference to value（将引用对象改为值对象） 5. Replace Array with Object（以对象取代数组） 6. Duplicate Observed Data（赋值“被监视数据”） 7. Change Unidirectional Association to Bidirectional（将单向关联改为双向关联） 8. Change Bidirectional Association to Unidirectional（将双向关联改为单向关联） 9. Replace Magic Number with Symbolic Constant（以字面常量取代魔法数） 10. Encapsulate Field（封装字段） 11. Encapsulate Collection（封装集合） 12. Replace Record with Data Class（以数据类取代记录） 13. Replace Type Code with Class（以类取代类型码） 14. Replace Type Code with Subcalsses（以子类取代类型码） 15. Replace Type Code with State/Strategy （以 State/Strategy 取代类型码） 16. Replace Subclass with Fields（以字段取代子类） 简化条件表达式 1. Decompose Conditional（分解条件表达式） 2. Consolidate Conditional Expression（合并条件表达式） 3. Consolidate Duplicate Conditional Fragments （合并重复的条件片段） 4. Remove Control Flag（移除控制标记） 5. Replace Nested Conditional with Guard Clauses （以卫语句取代嵌套条件表达式） 6. Replace Conditional with Polymorphism （以多态取代条件表达式） 7. Introduce Null Object（引入Null对象） 8. Introduce Assertion（引入断言） 简化函数调用 1. Rename Method（函数改名） 2. Add Parameter（添加参数） 3. Remove Parameter（移除参数） 4. Separate Query from Modifier（将查询函数和修改函数分离） 5. Parameterize Method（令函数携带参数） 6. Replace Parameter with Explicit Methods（以明确函数取代参数） 7. Preserve Whole Object（保持对象完整） 8. Replace Parameter with Methods（以函数取代参数） 9. Introduce Parameter Object（引入参数对象） 10. Remove Setting Method（移除设值函数） 11. Hide Method（隐藏函数） 12. Replace Constructor with Factory Method （以工厂函数取代构造函数） 13. Encapsulate Downcast（封装向下转型） 14. Replace Error Code with Exception （以异常取代错误码） 15. Replace Exception with Test（以测试取代异常） 处理概括关系 1. Pull Up Field（字段上移） 2. Pull Up Method（函数上移） 3. Pull Up Constructor Body（构造函数本体上移） 4. Push Down Method（函数下移） 5. Push Down Field（字段下移） 6. Extract Subclass（提炼子类） 7. Extract Superclass（提炼超类） 8. Extract Interface（提炼接口） 9. Collapse Hierarchy（折叠继承体系） 10. Form Template Method（塑造模板函数） 11. Replace Inheritance with Delegation （以委托取代继承） 12. Replace Delegation with Inheritance （以继承取代委托） 第一个案例如果你发现自己需要为程序添加一个特性，而代码结构使你无法很方便地达成目的，那就先重构这个程序。 在重构前，需要先构建好可靠的测试环境，确保安全地重构。 重构需要以微小的步伐修改程序，如果重构过程发生错误，很容易就能发现错误。 案例分析 影片出租店应用程序，需要计算每位顾客的消费金额。 包括三个类：Movie、Rental 和 Customer，Rental 包含租赁的 Movie 以及天数。 最开始的实现是把所有的计费代码都放在 Customer 类中。 可以发现，该代码没有使用 Customer 类中的任何信息，更多的是使用 Rental 类的信息，因此第一个可以重构的点就是把具体计费的代码移到 Rental 类中，然后 Customer 类的 getTotalCharge() 方法只需要调用 Rental 类中的计费方法即可。 123456789101112131415161718192021class Customer...double getTotalCharge() &#123; while (rentals.hasMoreElements()) &#123; double thisAmount = 0; Rental each = (Rental) rentals.nextElement(); switch (each.getMovie().getPriceCode()) &#123; case Movie.REGULAR: thisAmount += 2; if (each.getDaysRented() &gt; 2) thisAmount += (each.getDaysRented() - 2) * 1.5; break; case Movie.NEW_RELEASE: thisAmount += each.getDaysRented() * 3; break; case Movie.CHILDRENS: thisAmount += 1.5; if (each.getDaysRented() &gt; 3) thisAmount += (each.getDaysRented() - 3) * 1.5; break; &#125;&#125; 使用 switch 的准则是：只能在对象自己的数据上使用，而不能在另一个对象的数据基础上使用。解释如下：switch 使用的数据通常是一组相关的数据，例如上面的代码使用了 Movie 的多种类别数据。当这组类别的数据发生改变时，例如上面的代码中增加 Movie 的类别或者修改一种 Movie 类别的计费方法，就需要修改 switch 代码。如果允许违反了准则，就会有多个地方的 switch 使用了这部分的数据，那么需要打开所有的 switch 代码进行修改。 以下是继承 Movie 的多态解决方案，这种方案可以解决上述的 switch 问题，因为每种电影类别的计费方式都被放到了对应 Movie 子类中，当变化发生时，只需要去修改对应子类中的代码即可。 但是由于 Movie 可以在其生命周期内修改自己的类别，一个对象却不能在生命周期内修改自己所属的类，因此这种方案不可行。可以使用策略模式来解决这个问题（原书写的是使用状态模式，但是这里应该为策略模式，具体可以参考设计模式内容）。 下图中，Price 有多种实现，Movie 组合了一个 Price 对象，并且在运行时可以改变组合的 Price 对象，从而使得它的计费方式发生改变。 重构后整体的类图和时序图如下： 重构原则定义重构是对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。 为何重构 改进软件设计 使软件更容易理解 帮助找到 Bug 提高编程速度 三次法则第一次做某件事时只管去做；第二次做类似事情时可以去做；第三次再做类似的事，就应该重构。 间接层与重构计算机科学中的很多问题可以通过增加一个间接层来解决，间接层具有以下价值： 允许逻辑共享 分开解释意图和实现 隔离变化 封装条件逻辑。 重构可以理解为在适当的位置插入间接层以及在不需要时移除间接层。 修改接口如果重构手法改变了已发布的接口，就必须维护新旧两个接口。 可以保留旧接口，让旧接口去调用新接口，并且使用 Java 提供的 @deprecation 将旧接口标记为弃用。 可见修改接口特别麻烦，因此除非真有必要，否则不要发布接口，并且不要过早发布接口。 何时不该重构当现有代码过于混乱时，应当重写而不是重构。 一个折中的办法是，将代码封装成一个个组件，然后对各个组件做重写或者重构的决定。 重构与设计软件开发无法预先设计，因为开发过程有很多变化发生，在最开始不可能都把所有情况考虑进去。 重构可以简化设计，重构在一个简单的设计上进行修修改改，当变化发生时，以一种灵活的方式去应对变化，进而带来更好的设计。 重构与性能为了软代码更容易理解，重构可能会导致性能减低。 在编写代码时，不用对性能过多关注，只有在最后性能优化阶段再考虑性能问题。 应当只关注关键代码的性能，因为只有一小部分的代码是关键代码。 代码的坏味道本章主要介绍一些不好的代码，也就是说这些代码应该被重构。 文中提到的具体重构原则可以先忽略。 1. Duplicated Code（重复代码）同一个类的两个函数有相同表达式，则用 Extract Method 提取出重复代码； 两个互为兄弟的子类含有相同的表达式，先使用 Extract Method，然后把提取出来的函数 Pull Up Method 推入超类。 如果只是部分相同，用 Extract Method 分离出相似部分和差异部分，然后使用 Form Template Method 这种模板方法设计模式。 如果两个毫不相关的类出现重复代码，则使用 Extract Class 方法将重复代码提取到一个独立类中。 2. Long Method（过长函数）函数应该尽可能小，因为小函数具有解释能力、共享能力、选择能力。 分解长函数的原则：当需要用注释来说明一段代码时，就需要把这部分代码写入一个独立的函数中。 Extract Method 会把很多参数和临时变量都当做参数，可以用 Replace Temp with Query 消除临时变量，Introduce Parameter Object 和 Preserve Whole Object 可以将过长的参数列变得更简洁。 条件和循环语句往往也需要提取到新的函数中。 3. Large Class（过大的类）应该尽可能让一个类只做一件事，而过大的类做了过多事情，需要使用 Extract Class 或 Extract Subclass。 先确定客户端如何使用该类，然后运用 Extract Interface 为每一种使用方式提取出一个接口。 4. Long Parameter List（过长的参数列表）太长的参数列表往往会造成前后不一致，不易使用。 面向对象程序中，函数所需要的数据通常内在宿主类中找到。 5. Divergent Change（发散式变化）设计原则：一个类应该只有一个引起改变的原因。也就是说，针对某一外界变化所有相应的修改，都只应该发生在单一类中。 针对某种原因的变化，使用 Extract Class 将它提炼到一个类中。 6. Shotgun Surgery（散弹式修改）一个变化引起多个类修改； 使用 Move Method 和 Move Field 把所有需要修改的代码放到同一个类中。 7. Feature Envy（依恋情结）一个函数对某个类的兴趣高于对自己所处类的兴趣，通常是过多访问其它类的数据， 使用 Move Method 将它移到该去的地方，如果对多个类都有 Feature Envy，先用 Extract Method 提取出多个函数。 8. Data Clumps（数据泥团）有些数据经常一起出现，比如两个类具有相同的字段、许多函数有相同的参数，这些绑定在一起出现的数据应该拥有属于它们自己的对象。 使用 Extract Class 将它们放在一起。 9. Primitive Obsession（基本类型偏执）使用类往往比使用基本类型更好，使用 Replace Data Value with Object 将数据值替换为对象。 10. Switch Statements（switch 惊悚现身）具体参见第一章的案例。 11. Parallel Inheritance Hierarchies（平行继承体系）每当为某个类增加一个子类，必须也为另一个类相应增加一个子类。 这种结果会带来一些重复性，消除重复性的一般策略：让一个继承体系的实例引用另一个继承体系的实例。 12. Lazy Class（冗余类）如果一个类没有做足够多的工作，就应该消失。 13. Speculative Generality（夸夸其谈未来性）有些内容是用来处理未来可能发生的变化，但是往往会造成系统难以理解和维护，并且预测未来可能发生的改变很可能和最开始的设想相反。因此，如果不是必要，就不要这么做。 14. Temporary Field（令人迷惑的暂时字段）某个字段仅为某种特定情况而设，这样的代码不易理解，因为通常认为对象在所有时候都需要它的所有字段。 把这种字段和特定情况的处理操作使用 Extract Class 提炼到一个独立类中。 15. Message Chains（过度耦合的消息链）一个对象请求另一个对象，然后再向后者请求另一个对象，然后…，这就是消息链。采用这种方式，意味着客户代码将与对象间的关系紧密耦合。 改用函数链，用函数委托另一个对象来处理。 16. Middle Man（中间人）中间人负责处理委托给它的操作，如果一个类中有过多的函数都委托给其它类，那就是过度运用委托，应当 Remove Middle Man，直接与负责的对象打交道。 17. Inappropriate Intimacy（狎昵关系）两个类多于亲密，花费太多时间去探讨彼此的 private 成分。 18. Alernative Classes with Different Interfaces（异曲同工的类）两个函数做同一件事，却有着不同的签名。 使用 Rename Method 根据它们的用途重新命名。 19. Incomplete Library Class（不完美的类库）类库的设计者不可能设计出完美的类库，当我们需要对类库进行一些修改时，可以使用以下两种方法：如果只是修改一两个函数，使用 Introduce Foreign Method；如果要添加一大堆额外行为，使用 Introduce Local Extension。 20. Data Class（幼稚的数据类）它只拥有一些数据字段，以及用于访问这些字段的函数，除此之外一无长物。 找出字段使用的地方，然后把相应的操作移到 Data Class 中。 21. Refused Bequest（被拒绝的馈赠）子类不想继承超类的所有函数和数据。 为子类新建一个兄弟类，不需要的函数或数据使用 Push Down Method 和 Push Down Field 下推给那个兄弟。 22. Comments（过多的注释）使用 Extract Method 提炼出需要注释的部分，然后用函数名来解释函数的行为。 构筑测试体系Java 可以使用 Junit 进行单元测试。 测试应该能够完全自动化，并能检查测试的结果。Junit 可以做到。 小步修改，频繁测试。 单元测试的对象是类的方法，而功能测是以客户的角度保证软件正常运行。 应当集中测试可能出错的边界条件。 重新组织函数1. Extract Method（提炼函数）将这段代码放进一个独立函数中，并让函数名称解释该函数的用途。 2. Inline Method（内联函数）一个函数的本体与名称同样清楚易懂。 在函数调用点插入函数本体，然后移除该函数。 3. Inline Temp（内联临时变量）一个临时变量，只被简单表达式赋值一次，而它妨碍了其它重构手法。 将所有对该变量的引用替换为对它赋值的那个表达式自身。 12double basePrice = anOrder.basePrice();return basePrice &gt; 1000; 1return anOrder.basePrice() &gt; 1000; 4. Replace Temp with Query（以查询取代临时变量）以临时变量保存某一表达式的运算结果，将这个表达式提炼到一个独立函数中，将所有对临时变量的引用点替换为对新函数的调用。Replace Temp with Query 往往是 Extract Method 之前必不可少的一个步骤，因为局部变量会使代码难以提炼。 12345double basePrice = quantity * itemPrice;if(basePrice &gt; 1000) return basePrice * 0.95;else return basePrice * 0.98; 123456789if(basePrice() &gt; 1000) return basePrice() * 0.95;else return basePrice() * 0.98;// ...double basePrice()&#123; return quantity * itemPrice;&#125; 5. Introduce Explaining Variable（引起解释变量）将复杂表达式（或其中一部分）的结果放进一个临时变量，以此变量名称来解释表达式用途。 12345if((platform.toUpperCase().indexOf(\"MAC\") &gt; -1) &amp;&amp; (browser.toUpperCase().indexOf(\"IE\") &gt; -1) &amp;&amp; wasInitialized() &amp;&amp; resize &gt; 0) &#123; // do something&#125; 1234567final boolean isMacOS = platform.toUpperCase().indexOf(\"MAC\") &gt; -1;final boolean isIEBrower = browser.toUpperCase().indexOf(\"IE\") &gt; -1;final boolean wasResized = resize &gt; 0;if(isMacOS &amp;&amp; isIEBrower &amp;&amp; wasInitialized() &amp;&amp; wasResized) &#123; // do something&#125; 6. Split Temporary Variable（分解临时变量）某个临时变量被赋值超过一次，它既不是循环变量，也不是用于收集计算结果。 针对每次赋值，创造一个独立、对应的临时变量，每个临时变量只承担一个责任。 7. Remove Assigments to Parameters（移除对参数的赋值）以一个临时变量取代对该参数的赋值。 12int discount (int inputVal, int quentity, int yearToDate)&#123; if (inputVal &gt; 50) inputVal -= 2; 123int discount (int inputVal, int quentity, int yearToDate)&#123; int result = inputVal; if (inputVal &gt; 50) result -= 2; 8. Replace Method with Method Object（以函数对象取代函数）当对一个大型函数采用 Extract Method 时，由于包含了局部变量使得很难进行该操作。 将这个函数放进一个单独对象中，如此一来局部变量就成了对象内的字段。然后可以在同一个对象中将这个大型函数分解为多个小型函数。 9. Subsititute Algorithn（替换算法）在对象之间搬移特性1. Move Method（搬移函数）类中的某个函数与另一个类进行更多交流：调用后者或者被后者调用。 将这个函数搬移到另一个类中。 2. Move Field（搬移字段）类中的某个字段被另一个类更多地用到，这里的用到是指调用取值设值函数，应当把该字段移到另一个类中。 3. Extract Class（提炼类）某个类做了应当由两个类做的事。 应当建立一个新类，将相关的字段和函数从旧类搬移到新类。 4. Inline Class（将类内联化）与 Extract Class 相反。 5. Hide Delegate（隐藏“委托关系”）建立所需的函数，隐藏委托关系。 123456789101112131415class Person&#123; Department department; public Department getDepartment()&#123; return department; &#125;&#125;class Department&#123; private Person manager; public Person getManager()&#123; return manager; &#125;&#125; 如果客户希望知道某人的经理是谁，必须获得 Department 对象，这样就对客户揭露了 Department 的工作原理。 1Person manager = john.getDepartment().getManager(); 通过为 Peron 建立一个函数来隐藏这种委托关系。 123public Person getManager()&#123; return department.getManager();&#125; 6. Remove Middle Man（移除中间人）与 Hide Delegate 相反，本方法需要移除委托函数，让客户直接调用委托类。 Hide Delegate 有很大好处，但是它的代价是：每当客户要使用受托类的新特性时，就必须在服务器端添加一个简单的委托函数。随着受委托的特性越来越多，服务器类完全变成了一个“中间人”。 7. Introduce Foreign Method（引入外加函数）需要为提供服务的类添加一个函数，但是无法修改这个类。 可以在客户类中建立一个函数，并以第一参数形式传入一个服务类的实例，让客户类组合服务器实例。 8. Introduce Local Extension（引入本地扩展）和 Introduce Foreign Method 目的一样，但是 Introduce Local Extension 通过建立新的类来实现。有两种方式：子类或者包装类，子类就是通过继承实现，包装类就是通过组合实现。 重新组织数据1. Self Encapsulate Field（自封装字段）为字段建立取值/设值函数，并用这些函数来访问字段。只有当子类想访问超类的一个字段，又想在子类中将对这个字段访问改为一个计算后的值，才使用这种方式，否则直接访问字段的方式简洁明了。 2. Replace Data Value with Object（以对象取代数据值）在开发初期，往往会用简单的数据项表示简单的情况，但是随着开发的进行，一些简单数据项会具有一些特殊行为。比如一开始会把电话号码存成字符串，但是随后发现电话号码需要“格式化”、“抽取区号”之类的特殊行为。 3. Change Value to Reference（将值对象改成引用对象）将彼此相等的实例替换为同一个对象。这就要用一个工厂来创建这种唯一对象，工厂类中需要保留一份已经创建对象的列表，当要创建一个对象时，先查找这份列表中是否已经存在该对象，如果存在，则返回列表中的这个对象；否则，新建一个对象，添加到列表中，并返回该对象。 4. Change Reference to value（将引用对象改为值对象）以 Change Value to Reference 相反。值对象有个非常重要的特性：它是不可变的，不可变表示如果要改变这个对象，必须用一个新的对象来替换旧对象，而不是修改旧对象。 需要为值对象实现 equals() 和 hashCode() 方法 5. Replace Array with Object（以对象取代数组）有一个数组，其中的元素各自代表不同的东西。 以对象替换数组，对于数组中的每个元素，以一个字段来表示，这样方便操作，也更容易理解。 6. Duplicate Observed Data（赋值“被监视数据”）一些领域数据置身于 GUI 控件中，而领域函数需要访问这些数据。 将该数据赋值到一个领域对象中，建立一个 Oberver 模式，用以同步领域对象和 GUI 对象内的重复数据。 7. Change Unidirectional Association to Bidirectional（将单向关联改为双向关联）当两个类都需要对方的特性时，可以使用双向关联。 有两个类，分别为订单 Order 和客户 Customer，Order 引用了 Customer，Customer 也需要引用 Order 来查看其所有订单详情。 123456789class Order&#123; private Customer customer; public void setCustomer(Customer customer)&#123; if(this.customer != null) this.customer.removeOrder(this); this.customer = customer; this.customer.add(this); &#125;&#125; 123456789class Curstomer&#123; private Set&lt;Order&gt; orders = new HashSet&lt;&gt;(); public void removeOrder(Order order)&#123; orders.remove(order); &#125; public void addOrder(Order order)&#123; orders.add(order); &#125;&#125; 注意到，这里让 Curstomer 类来控制关联关系。有以下原则来决定哪个类来控制关联关系：如果某个对象是组成另一个对象的部件，那么由后者负责控制关联关系；如果是一对多关系，则由单一引用那一方来控制关联关系。 8. Change Bidirectional Association to Unidirectional（将双向关联改为单向关联）和 Change Unidirectional Association to Bidirectiona 为反操作。 双向关联维护成本高，并且也不易于理解。大量的双向连接很容易造成“僵尸对象”：某个对象本身已经死亡了，却保留在系统中，因为它的引用还没有全部完全清除。 9. Replace Magic Number with Symbolic Constant（以字面常量取代魔法数）创建一个常量，根据其意义为它命名，并将字面常量换位这个常量。 10. Encapsulate Field（封装字段）public 字段应当改为 private，并提供相应的访问函数。 11. Encapsulate Collection（封装集合）函数返回集合的一个只读副本，并在这个类中提供添加/移除集合元素的函数。如果函数返回集合自身，会让用户得以修改集合内容而集合拥有者却一无所知。 12. Replace Record with Data Class（以数据类取代记录）13. Replace Type Code with Class（以类取代类型码）类中有一个数值类型码，但它并不影响类的行为，就用一个新类替换该数值类型码。如果类型码出现在 switch 语句中，需要使用 Replace Conditional with Polymorphism 去掉 switch，首先必须运用 Replace Type Code with Subcalss 或 Replace Type Code with State/Strategy 去掉类型码。 14. Replace Type Code with Subcalsses（以子类取代类型码）有一个不可变的类型码，它会影响类的行为，以子类取代这个类型码。 15. Replace Type Code with State/Strategy （以 State/Strategy 取代类型码）有一个可变的类型码，它会影响类的行为，以状态对象取代类型码。 和 Replace Type Code with Subcalsses 的区别是 Replace Type Code with State/Strategy 的类型码是动态可变的，前者通过继承的方式来实现，后者通过组合的方式来实现。因为类型码可变，如果通过继承的方式，一旦一个对象的类型码改变，那么就要改变用新的对象来取代旧对象，而客户端难以改变新的对象。但是通过组合的方式，改变引用的状态类是很容易的。 16. Replace Subclass with Fields（以字段取代子类）各个子类的唯一差别只在“返回常量数据”的函数上。 简化条件表达式1. Decompose Conditional（分解条件表达式）对于一个复杂的条件语句，可以从 if、then、else 三个段落中分别提炼出独立函数。 123if(data.befor(SUMMER_START) || data.after(SUMMER_END)) charge = quantity * winterRate + winterServiceCharge;else charge = quantity * summerRate; 123if(notSummer(date)) charge = winterCharge(quantity);else charge = summerCharge(quantity); 2. Consolidate Conditional Expression（合并条件表达式）有一系列条件测试，都得到相同结果。 将这些测试合并为一个条件表达式，并将这个条件表达式提炼成为一个独立函数。 123456double disabilityAmount()&#123; if (seniority &lt; 2) return 0; if (monthsDisabled &gt; 12 ) return 0; if (isPartTime) return 0; // ...&#125; 1234double disabilityAmount()&#123; if (isNotEligibleForDisability()) return 0; // ...&#125; 3. Consolidate Duplicate Conditional Fragments （合并重复的条件片段）在条件表达式的每个分支上有着相同的一段代码。 将这段重复代码搬移到条件表达式之外。 1234567if (isSpecialDeal())&#123; total = price * 0.95; send();&#125; else &#123; total = price * 0.98; send();&#125; 123456if (isSpecialDeal()) &#123; total = price * 0.95;&#125; else &#123; total = price * 0.98;&#125;send(); 4. Remove Control Flag（移除控制标记）在一系列布尔表达式中，某个变量带有“控制标记”的作用。 用 break语 句或 return 语句来取代控制标记。 5. Replace Nested Conditional with Guard Clauses （以卫语句取代嵌套条件表达式）如果某个条件极其罕见，就应该单独检查该条件，并在该条件为真时立刻从函数中返回，这样的单独检查常常被称为“卫语句”（guard clauses）。 条件表达式通常有两种表现形式。第一种形式是：所有分支都属于正常行为。第二种形式则是：条件表达式提供的答案中只有一种是正常行为，其他都是不常见的情况，可以使用卫语句表现所有特殊情况。 123456789101112double getPayAmount() &#123; double result; if (isDead) result = deadAmount(); else &#123; if (isSeparated) result = separatedAmount(); else &#123; if (isRetired) result = retiredAmount(); else result = normalPayAmount(); &#125;; &#125; return result;&#125;; 123456double getPayAmount() &#123; if (isDead) return deadAmount(); if (isSeparated) return separatedAmount(); if (isRetired) return retiredAmount(); return normalPayAmount();&#125;; 6. Replace Conditional with Polymorphism （以多态取代条件表达式）将这个条件表达式的每个分支放进一个子类内的覆写函数中，然后将原始函数声明为抽象函数。需要先使用 Replace Type Code with Subclass 或 Replace Type Code with State/Strategy 来建立继承结果。 1234567891011double getSpeed() &#123; switch (type) &#123; case EUROPEAN: return getBaseSpeed(); case AFRICAN: return getBaseSpeed()- getLoadFactor()* numberOfCoconuts; case NORWEGIAN_BLUE: return isNailed ? 0 : getBaseSpeed(voltage); &#125; throw new RuntimeException(\"Should be unreachable\");&#125; 7. Introduce Null Object（引入Null对象）将 null 值替换为 null 对象。这样做的好处在于，不需要询问对象是否为空，直接调用就行。 12if (customer == null) plan = BillingPlan.basic();else plan = customer.getPlan(); 8. Introduce Assertion（引入断言）以断言明确表现某种假设。断言只能用于开发过程中，产品代码中不会有断言。 1234double getExpenseLimit() &#123; // should have either expense limit or a primary project return (expenseLimit != NULL_EXPENSE) ? expenseLimit : primaryProject.getMemberExpenseLimit();&#125; 1234double getExpenseLimit() &#123; Assert.isTrue (expenseLimit != NULL_EXPENSE || primaryProject != null); return (expenseLimit != NULL_EXPENSE) ? expenseLimit : primaryProject.getMemberExpenseLimit();&#125; 简化函数调用1. Rename Method（函数改名）使函数名能解释函数的用途。 2. Add Parameter（添加参数）使函数不需要通过调用获得某个信息。 3. Remove Parameter（移除参数）与 Add Parameter 相反，改用调用的方式来获得某个信息。 4. Separate Query from Modifier（将查询函数和修改函数分离）某个函数即返回对象状态值，又修改对象状态。 应当建立两个不同的函数，其中一个负责查询，另一个负责修改。任何有返回值的函数，都不应该有看得到的副作用。 1getTotalOutstandingAndSetReadyForSummaries(); 12getTotalOutstanding();setReadyForSummaries(); 5. Parameterize Method（令函数携带参数）若干函数做了类似的工作，但在函数本体中却包含了不同的值。 建立单一函数，以参数表达那些不同的值。 12fivePercentRaise();tenPercentRaise(); 1raise(percentage); 6. Replace Parameter with Explicit Methods（以明确函数取代参数）有一个函数，完全取决于参数值而采取不同行为。 针对该参数的每一个可能值，建立一个独立函数。 1234567891011void setValue(String name, int value)&#123; if (name.equals(\"height\"))&#123; height = value; return; &#125; if (name.equals(\"width\"))&#123; width = value; return; &#125; Assert.shouldNeverReachHere();&#125; 123456void setHeight(int arg)&#123; height = arg;&#125;void setWidth(int arg)&#123; width = arg;&#125; 7. Preserve Whole Object（保持对象完整）从某个对象中取出若干值，将它们作为某一次函数调用时的参数。 改为传递整个对象。 123int low = daysTempRange().getLow();int high = daysTempRange().getHigh();withinPlan = plan.withinRange(low,high); 1withinPlan = plan.withinRange(daysTempRange()); 8. Replace Parameter with Methods（以函数取代参数）对象调用某个函数，并将所得结果作为参数，传递给另一个函数。而接受该参数的函数本身也能够调用前一个函数。 让参数接收者去除该项参数，而是直接调用前一个函数。 123int basePrice = _quantity * _itemPrice;discountLevel = getDiscountLevel();double finalPrice = discountedPrice (basePrice, discountLevel); 12int basePrice = _quantity * _itemPrice;double finalPrice = discountedPrice (basePrice); 9. Introduce Parameter Object（引入参数对象）某些参数总是很自然地同时出现，这些参数就是 Data Clumps。 以一个对象取代这些参数。 10. Remove Setting Method（移除设值函数）类中的某个字段应该在对象创建时被设值，然后就不再改变。 去掉该字段的所有设值函数，并将该字段设为 final。 11. Hide Method（隐藏函数）有一个函数，从来没有被其他任何类用到。 将这个函数修改为 private。 12. Replace Constructor with Factory Method （以工厂函数取代构造函数）希望在创建对象时不仅仅是做简单的建构动作。 将构造函数替换为工厂函数。 13. Encapsulate Downcast（封装向下转型）某个函数返回的对象，需要由函数调用者执行向下转型（downcast）。 将向下转型动作移到函数中。 123Object lastReading()&#123; return readings.lastElement();&#125; 123Reading lastReading()&#123; return (Reading)readings.lastElement();&#125; 14. Replace Error Code with Exception （以异常取代错误码）某个函数返回一个特定的代码，用以表示某种错误情况。 改用异常，异常将普通程序和错误处理分开，使代码更容易理解。 15. Replace Exception with Test（以测试取代异常）面对一个调用者可以预先检查的条件，你抛出了一个异常。 修改调用者，使它在调用函数之前先做检查。 1234567double getValueForPeriod(int periodNumber) &#123; try &#123; return values[periodNumber]; &#125; catch (ArrayIndexOutOfBoundsException e) &#123; return 0; &#125;&#125; 123double getValueForPeriod(int periodNumber) &#123; if (periodNumber &gt;= values.length) return 0; return values[periodNumber]; 处理概括关系1. Pull Up Field（字段上移）两个子类拥有相同的字段。 将该字段移至超类。 2. Pull Up Method（函数上移）有些函数，在各个子类中产生完全相同的结果。 将该函数移至超类。 3. Pull Up Constructor Body（构造函数本体上移）你在各个子类中拥有一些构造函数，它们的本体几乎完全一致。 在超类中新建一个构造函数，并在子类构造函数中调用它。 1234567class Manager extends Employee...public Manager(String name, String id, int grade) &#123; this.name = name; this.id = id; this.grade = grade;&#125; 1234public Manager(String name, String id, int grade) &#123; super(name, id); this.grade = grade;&#125; 4. Push Down Method（函数下移）超类中的某个函数只与部分子类有关。 将这个函数移到相关的那些子类去。 5. Push Down Field（字段下移）超类中的某个字段只被部分子类用到。 将这个字段移到需要它的那些子类去。 6. Extract Subclass（提炼子类）类中的某些特性只被某些实例用到。 新建一个子类，将上面所说的那一部分特性移到子类中。 7. Extract Superclass（提炼超类）两个类有相似特性。 为这两个类建立一个超类，将相同特性移至超类。 8. Extract Interface（提炼接口）若干客户使用类接口中的同一子集，或者两个类的接口有部分相同。 将相同的子集提炼到一个独立接口中。 9. Collapse Hierarchy（折叠继承体系）超类和子类之间无太大区别。 将它们合为一体。 10. Form Template Method（塑造模板函数）你有一些子类，其中相应的某些函数以相同顺序执行类似的操作，但各个操作的细节上有所不同。 将这些操作分别放进独立函数中，并保持它们都有相同的签名，于是原函数也就变得相同了。然后将原函数上移至超类。(模板方法模式) 11. Replace Inheritance with Delegation （以委托取代继承）某个子类只使用超类接口中的一部分，或是根本不需要继承而来的数据。 在子类中新建一个字段用以保存超类，调整子类函数，令它改而委托超类，然后去掉两者之间的继承关系。 12. Replace Delegation with Inheritance （以继承取代委托）你在两个类之间使用委托关系，并经常为整个接口编写许多极简单的委托函数。 让委托类继承受托类。 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"设计模式","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/设计模式.html","text":"前言 第一章 设计模式入门 第二章 观察者模式 第三章 装饰模式 第四章 工厂模式 1. 简单工厂 2. 工厂方法模式 3. 抽象工厂模式 第五章 单件模式 第六章 命令模式 第七章 适配器模式与外观模式 1. 适配器模式 2. 外观模式 第八章 模板方法模式 第九章 迭代器和组合模式 1. 迭代器模式 2. Java 内置的迭代器 3. 组合模式 第十章 状态模式 第十一章 代理模式 第十二章 复合模式 MVC 第十三章 与设计模式相处 第十四章 剩下的模式 前言文中涉及一些 UML 类图，为了更好地理解，可以先阅读 UML 类图。 需要说明的一点是，文中的 UML 类图和规范的 UML 类图不大相同，其中组合关系使用以下箭头表示： 第一章 设计模式入门1. 设计模式概念 设计模式不是代码，而是解决问题的方案，学习现有的设计模式可以做到经验复用。 拥有设计模式词汇，在沟通时就能用更少的词汇来讨论，并且不需要了解底层细节。 2. 问题描述 设计不同种类的鸭子拥有不同的叫声和飞行方式。 3. 简单实现方案 使用继承的解决方案如下，这种方案代码无法复用，如果两个鸭子类拥有同样的飞行方式，就有两份重复的代码。 4. 设计原则 封装变化 在这里变化的是鸭子叫和飞行的行为方式。 针对接口编程，而不是针对实现编程 变量声明的类型为父类，而不是具体的某个子类。父类中的方法实现不在父类，而是在各个子类。程序在运行时可以动态改变变量所指向的子类类型。 运用这一原则，将叫和飞行的行为抽象出来，实现多种不同的叫和飞行的子类，让子类去实现具体的叫和飞行方式。 多用组合，少用继承 组合也就是 has-a 关系，通过组合，可以在运行时动态改变实现，只要通过改变父类对象具体指向哪个子类即可。而继承就不能做到这些，继承体系在创建类时就已经确定。 运用这一原则，在 Duck 类中组合 FlyBehavior 和 QuackBehavior 类，performQuack() 和 performFly() 方法委托给这两个类去处理。通过这种方式，一个 Duck 子类可以根据需要去实例化 FlyBehavior 和 QuackBehavior 的子类对象，并且也可以动态地进行改变。 5. 整体设计图 6. 模式定义 策略模式 ：定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。 7. 实现代码 1234567891011121314151617181920212223public abstract class Duck &#123; FlyBehavior flyBehavior; QuackBehavior quackBehavior; public Duck()&#123; &#125; public void performFly()&#123; flyBehavior.fly(); &#125; public void setFlyBehavior(FlyBehavior fb)&#123; flyBehavior = fb; &#125; public void performQuack()&#123; quackBehavior.quack(); &#125; public void setQuackBehavior(QuackBehavior qb)&#123; quackBehavior = qb; &#125;&#125; 123456public class MallarDuck extends Duck&#123; public MallarDuck()&#123; flyBehavior = new FlyWithWings(); quackBehavior = new Quack(); &#125;&#125; 123public interface FlyBehavior &#123; void fly();&#125; 123456public class FlyNoWay implements FlyBehavior&#123; @Override public void fly() &#123; System.out.println(\"FlyBehavior.FlyNoWay\"); &#125;&#125; 123456public class FlyWithWings implements FlyBehavior&#123; @Override public void fly() &#123; System.out.println(\"FlyBehavior.FlyWithWings\"); &#125;&#125; 123public interface QuackBehavior &#123; void quack();&#125; 123456public class Quack implements QuackBehavior&#123; @Override public void quack() &#123; System.out.println(\"QuackBehavior.Quack\"); &#125;&#125; 123456public class MuteQuack implements QuackBehavior&#123; @Override public void quack() &#123; System.out.println(\"QuackBehavior.MuteQuack\"); &#125;&#125; 123456public class Squeak implements QuackBehavior&#123; @Override public void quack() &#123; System.out.println(\"QuackBehavior.Squeak\"); &#125;&#125; 123456789public class MiniDuckSimulator &#123; public static void main(String[] args) &#123; Duck mallarDuck = new MallarDuck(); mallarDuck.performQuack(); mallarDuck.performFly(); mallarDuck.setFlyBehavior(new FlyNoWay()); mallarDuck.performFly(); &#125;&#125; 执行结果123QuackBehavior.QuackFlyBehavior.FlyWithWingsFlyBehavior.FlyNoWay 第二章 观察者模式1. 模式定义 定义了对象之间的一对多依赖，当一个对象改变状态时，它的所有依赖者都会受到通知并自动更新。主题（Subject）是被观察的对象，而其所有依赖者（Observer）成为观察者。 2. 模式类图 主题中具有注册和移除观察者，并通知所有注册者的功能，主题是通过维护一张观察者列表来实现这些操作的。 观察者拥有一个主题对象的引用，因为注册、移除还有数据都在主题当中，必须通过操作主题才能完成相应功能。 3. 问题描述 天气数据布告板会在天气信息发生改变时更新其内容，布告板有多个，并且在将来会继续增加。 4. 解决方案类图 5. 设计原则 为交互对象之间的松耦合设计而努力 当两个对象之间松耦合，它们依然可以交互，但是不太清楚彼此的细节。由于松耦合的两个对象之间互相依赖程度很低，因此系统具有弹性，能够应对变化。 6. 实现代码 12345public interface Subject &#123; public void resisterObserver(Observer o); public void removeObserver(Observer o); public void notifyObserver();&#125; 12345678910111213141516171819202122232425262728293031323334353637383940import java.util.ArrayList;import java.util.List;public class WeatherData implements Subject &#123; private List&lt;Observer&gt; observers; private float temperature; private float humidity; private float pressure; public WeatherData() &#123; observers = new ArrayList&lt;&gt;(); &#125; @Override public void resisterObserver(Observer o) &#123; observers.add(o); &#125; @Override public void removeObserver(Observer o) &#123; int i = observers.indexOf(o); if (i &gt;= 0) &#123; observers.remove(i); &#125; &#125; @Override public void notifyObserver() &#123; for (Observer o : observers) &#123; o.update(temperature, humidity, pressure); &#125; &#125; public void setMeasurements(float temperature, float humidity, float pressure) &#123; this.temperature = temperature; this.humidity = humidity; this.pressure = pressure; notifyObserver(); &#125;&#125; 123public interface Observer &#123; public void update(float temp, float humidity, float pressure);&#125; 12345678910111213public class CurrentConditionsDisplay implements Observer &#123; private Subject weatherData; public CurrentConditionsDisplay(Subject weatherData) &#123; this.weatherData = weatherData; weatherData.resisterObserver(this); &#125; @Override public void update(float temp, float humidity, float pressure) &#123; System.out.println(\"CurrentConditionsDisplay.update:\" + temp + \" \" + humidity + \" \" + pressure); &#125;&#125; 12345678910111213public class StatisticsDisplay implements Observer &#123; private Subject weatherData; public StatisticsDisplay(Subject weatherData) &#123; this.weatherData = weatherData; weatherData.resisterObserver(this); &#125; @Override public void update(float temp, float humidity, float pressure) &#123; System.out.println(\"StatisticsDisplay.update:\" + temp + \" \" + humidity + \" \" + pressure); &#125;&#125; 12345678910public class WeatherStation &#123; public static void main(String[] args) &#123; WeatherData weatherData = new WeatherData(); CurrentConditionsDisplay currentConditionsDisplay = new CurrentConditionsDisplay(weatherData); StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData); weatherData.setMeasurements(0, 0, 0); weatherData.setMeasurements(1, 1, 1); &#125;&#125; 执行结果1234CurrentConditionsDisplay.update:0.0 0.0 0.0StatisticsDisplay.update:0.0 0.0 0.0CurrentConditionsDisplay.update:1.0 1.0 1.0StatisticsDisplay.update:1.0 1.0 1.0 第三章 装饰模式1. 问题描述 设计不同种类的饮料，并且每种饮料可以动态添加新的材料，比如可以添加牛奶。计算一种饮料的价格。 2. 模式定义 动态地将责任附加到对象上。在扩展功能上，装饰者提供了比继承更有弹性的替代方案。 下图中 DarkRoast 对象被 Mocha 包裹，Mocha 对象又被 Whip 包裹，并且他们都继承自相同父类，都有 cost() 方法，但是外层对象的 cost() 方法实现调用了内层对象的 cost() 方法。因此，如果要在 DarkRoast 上添加 Mocha，那么只需要用 Mocha 包裹 DarkRoast，如果还需要 Whip ，就用 Whip 包裹 Mocha，最后调用 cost() 方法能把三种对象的价格都包含进去。 3. 模式类图 装饰者和具体组件都继承自组件类型，其中具体组件的方法实现不需要依赖于其它对象，而装饰者拥有一个组件类型对象，这样它可以装饰其它装饰者或者具体组件。所谓装饰，就是把这个装饰者套在被装饰的对象之外，从而动态扩展被装饰者的功能。装饰者的方法有一部分是自己的，这属于它的功能，然后调用被装饰者的方法实现，从而也保留了被装饰者的功能。可以看到，具体组件应当是装饰层次的最低层，因为只有具体组件有直接实现而不需要委托给其它对象去处理。 4. 问题解决方案的类图 5. 设计原则 类应该对扩展开放，对修改关闭。 也就是添加新功能时不需要修改代码。在本章问题中该原则体现在，在饮料中添加新的材料，而不需要去修改饮料的代码。观察则模式也符合这个原则。不可能所有类都能实现这个原则，应当把该原则应用于设计中最有可能改变的地方。 6. Java I/O 中的装饰者模式 7. 代码实现 123public interface Beverage &#123; public double cost();&#125; 123456public class HouseBlend implements Beverage&#123; @Override public double cost() &#123; return 1; &#125;&#125; 123456public class DarkRoast implements Beverage&#123; @Override public double cost() &#123; return 1; &#125;&#125; 123public abstract class CondimentDecorator implements Beverage&#123; protected Beverage beverage;&#125; 1234567891011public class Mocha extends CondimentDecorator &#123; public Mocha(Beverage beverage) &#123; this.beverage = beverage; &#125; @Override public double cost() &#123; return 1 + beverage.cost(); &#125;&#125; 1234567891011public class Milk extends CondimentDecorator &#123; public Milk(Beverage beverage) &#123; this.beverage = beverage; &#125; @Override public double cost() &#123; return 1 + beverage.cost(); &#125;&#125; 12345678public class StartbuzzCoffee &#123; public static void main(String[] args) &#123; Beverage beverage = new HouseBlend(); beverage = new Mocha(beverage); beverage = new Milk(beverage); System.out.println(beverage.cost()); &#125;&#125; 输出 13.0 第四章 工厂模式1. 简单工厂1. 问题描述 有不同的 Pizza，根据不同的情况用不同的子类实例化一个 Pizza 对象。 2. 定义 简单工厂不是设计模式，更像是一种编程习惯。在实例化一个超类的对象时，可以用它的所有子类来进行实例化，要根据具体需求来决定使用哪个子类。在这种情况下，把实例化的操作放到工厂来中，让工厂类来决定应该用哪个子类来实例化。这样做把客户对象和具体子类的实现解耦，客户对象不再需要知道有哪些子类以及实例化哪个子类。因为客户类往往有多个，如果不使用简单工厂，那么所有的客户类都要知道所有子类的细节，一旦子类发生改变，例如增加子类，那么所有的客户类都要发生改变。 3. 解决方案类图 4. 代码实现 123public interface Pizza &#123; public void make();&#125; 123456public class CheesePizza implements Pizza&#123; @Override public void make() &#123; System.out.println(\"CheesePizza\"); &#125;&#125; 123456public class GreekPizza implements Pizza&#123; @Override public void make() &#123; System.out.println(\"GreekPizza\"); &#125;&#125; 1234567891011public class SimplePizzaFactory &#123; public Pizza createPizza(String type) &#123; if (type.equals(\"cheese\")) &#123; return new CheesePizza(); &#125; else if (type.equals(\"greek\")) &#123; return new GreekPizza(); &#125; else &#123; throw new UnsupportedOperationException(); &#125; &#125;&#125; 1234567public class PizzaStore &#123; public static void main(String[] args) &#123; SimplePizzaFactory simplePizzaFactory = new SimplePizzaFactory(); Pizza pizza = simplePizzaFactory.createPizza(\"cheese\"); pizza.make(); &#125;&#125; 运行结果 1CheesePizza 2. 工厂方法模式1. 问题描述 每个地区的 Pizza 店虽然种类相同，但是都有自己的风味，需要单独区分。例如，一个客户点了纽约的 cheese 种类的 Pizza 和在芝加哥点的相同种类的 Pizza 是不同的。 2. 模式定义 定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。 3. 模式类图 在简单工厂中，创建对象的是另一个类，而在工厂方法中，是由子类来创建对象。下图中，Creator 有一个 anOperation() 方法，这个方法需要用到一组产品类，这组产品类由每个子类来创建。 可以为每个子类创建单独的简单工厂来创建每一个产品类，但是把简单工厂中创建对象的代码放到子类中来可以减少类的数目，因为子类不算是产品类，因此完全可以这么做。 4. 解决方案类图 5. 代码实现 123public interface Pizza &#123; public void make();&#125; 123public interface PizzaStore &#123; public Pizza orderPizza(String item);&#125; 123456public class NYStyleCheesePizza implements Pizza&#123; @Override public void make() &#123; System.out.println(\"NYStyleCheesePizza is making..\"); &#125;&#125; 123456public class NYStyleVeggiePizza implements Pizza &#123; @Override public void make() &#123; System.out.println(\"NYStyleVeggiePizza is making..\"); &#125;&#125; 123456public class ChicagoStyleCheesePizza implements Pizza&#123; @Override public void make() &#123; System.out.println(\"ChicagoStyleCheesePizza is making..\"); &#125;&#125; 123456public class ChicagoStyleVeggiePizza implements Pizza&#123; @Override public void make() &#123; System.out.println(\"ChicagoStyleVeggiePizza is making..\"); &#125;&#125; 123456789101112131415public class NYPizzaStore implements PizzaStore &#123; @Override public Pizza orderPizza(String item) &#123; Pizza pizza = null; if (item.equals(\"cheese\")) &#123; pizza = new NYStyleCheesePizza(); &#125; else if (item.equals(\"veggie\")) &#123; pizza = new NYStyleVeggiePizza(); &#125; else &#123; throw new UnsupportedOperationException(); &#125; pizza.make(); return pizza; &#125;&#125; 123456789101112131415public class ChicagoPizzaStore implements PizzaStore &#123; @Override public Pizza orderPizza(String item) &#123; Pizza pizza = null; if (item.equals(\"cheese\")) &#123; pizza = new ChicagoStyleCheesePizza(); &#125; else if (item.equals(\"veggie\")) &#123; pizza = new ChicagoStyleVeggiePizza(); &#125; else &#123; throw new UnsupportedOperationException(); &#125; pizza.make(); return pizza; &#125;&#125; 12345678public class PizzaTestDrive &#123; public static void main(String[] args) &#123; PizzaStore nyStore = new NYPizzaStore(); nyStore.orderPizza(\"cheese\"); PizzaStore chicagoStore = new ChicagoPizzaStore(); chicagoStore.orderPizza(\"cheese\"); &#125;&#125; 运行结果 12NYStyleCheesePizza is making..ChicagoStyleCheesePizza is making.. 3. 抽象工厂模式1. 设计原则 依赖倒置原则 ：要依赖抽象，不要依赖具体类。听起来像是针对接口编程，不针对实现编程，但是这个原则说明了：不能让高层组件依赖底层组件，而且，不管高层或底层组件，两者都应该依赖于抽象。例如，下图中 PizzaStore 属于高层组件，它依赖的是 Pizza 的抽象类，这样就可以不用关心 Pizza 的具体实现细节。 2. 模式定义 提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。 3. 模式类图 抽象工厂模式创建的是对象家族，也就是很多对象而不是一个对象，并且这些对象是相关的，也就是说必须一起创建出来。而工厂模式只是用于创建一个对象，这和抽象工厂模式有很大不同。并且，抽象工厂模式也用到了工厂模式来创建单一对象，在类图左部，AbstractFactory 中的 CreateProductA 和 CreateProductB 方法都是让子类来实现，这两个方法单独来看就是在创建一个对象，这符合工厂模式的定义。至于创建对象的家族这一概念是在 Client 体现，Client 要通过 AbstractFactory 同时调用两个方法来创建出两个对象，在这里这两个对象就有很大的相关性，Client 需要这两个对象的协作才能完成任务。从高层次来看，抽象工厂使用了组合，即 Cilent 组合了 AbstractFactory ，而工厂模式使用了继承。 4. 解决方案类图 5. 代码实现 123public interface Dough &#123; public String doughType();&#125; 1234567public class ThickCrustDough implements Dough&#123; @Override public String doughType() &#123; return \"ThickCrustDough\"; &#125;&#125; 123456public class ThinCrustDough implements Dough &#123; @Override public String doughType() &#123; return \"ThinCrustDough\"; &#125;&#125; 123public interface Sauce &#123; public String sauceType();&#125; 123456public class MarinaraSauce implements Sauce &#123; @Override public String sauceType() &#123; return \"MarinaraSauce\"; &#125;&#125; 123456public class PlumTomatoSauce implements Sauce &#123; @Override public String sauceType() &#123; return \"PlumTomatoSauce\"; &#125;&#125; 1234public interface PizzaIngredientFactory &#123; public Dough createDough(); public Sauce createSauce();&#125; 1234567891011public class NYPizzaIngredientFactory implements PizzaIngredientFactory&#123; @Override public Dough createDough() &#123; return new ThickCrustDough(); &#125; @Override public Sauce createSauce() &#123; return new MarinaraSauce(); &#125;&#125; 1234567891011public class ChicagoPizzaIngredientFactory implements PizzaIngredientFactory&#123; @Override public Dough createDough() &#123; return new ThinCrustDough(); &#125; @Override public Sauce createSauce() &#123; return new PlumTomatoSauce(); &#125;&#125; 1234567891011121314public class NYPizzaStore &#123; private PizzaIngredientFactory ingredientFactory; public NYPizzaStore() &#123; ingredientFactory = new NYPizzaIngredientFactory(); &#125; public void makePizza() &#123; Dough dough = ingredientFactory.createDough(); Sauce sauce = ingredientFactory.createSauce(); System.out.println(dough.doughType()); System.out.println(sauce.sauceType()); &#125;&#125; 123456public class NYPizzaStoreTestDrive &#123; public static void main(String[] args) &#123; NYPizzaStore nyPizzaStore = new NYPizzaStore(); nyPizzaStore.makePizza(); &#125;&#125; 运行结果 12ThickCrustDoughMarinaraSauce 第五章 单件模式1. 模式定义 确保一个类只有一个实例，并提供了一个全局访问点。 2. 模式类图 使用一个私有构造器、一个私有静态变量以及一个公有静态函数来实现。私有构造函数保证了不能通过构造函数来创建对象实例，只能通过公有静态函数返回唯一的私有静态变量。 3. 懒汉式-线程不安全 以下实现中，私有静态变量被延迟化实例化，这样做的好处是，如果没有用到该类，那么就不会创建私有静态变量，从而节约资源。 这个实现在多线程环境下是不安全的，如果多个线程能够同时进入 if(uniqueInstance == null) 内的语句块，那么就会多次实例化 uniqueInstance 私有静态变量。 1234567891011121314public class Singleton &#123; private static Singleton uniqueInstance; private Singleton() &#123; &#125; public static Singleton getUniqueInstance() &#123; if (uniqueInstance == null) &#123; uniqueInstance = new Singleton(); &#125; return uniqueInstance; &#125;&#125; 4. 懒汉式-线程安全 只需要对 getUniqueInstance() 方法加锁，那么在一个时间点只能有一个线程能够进入该方法，从而避免了对 uniqueInstance 进行多次实例化的问题。但是这样有一个问题，就是当一个线程进入该方法之后，其它线程视图进入该方法都必须等待，因此性能上有一定的损耗。 123456public static synchronized Singleton getUniqueInstance() &#123; if (uniqueInstance == null) &#123; uniqueInstance = new Singleton(); &#125; return uniqueInstance;&#125; 5. 饿汉式-线程安全 线程不安全问题主要是由于静态实例变量被初始化了多次，那么静态实例变量采用直接实例化就可以解决问题。但是直接初始化的方法也丢失了延迟初始化节约资源的优势。 1private static Singleton uniqueInstance = new Singleton(); 6. 双重校验锁-线程安全 因为 uniqueInstance 只需要被初始化一次，之后就可以直接使用了。加锁操作只需要对初始化那部分的代码进行，也就是说，只有当 uniqueInstance 没有被初始化时，才需要进行加锁。 双重校验锁先判断 uniqueInstance 是否已经被初始化了，如果没有被初始化，那么才对初始化的语句进行加锁。如果只做一次判断，那么多个线程还是有可能同时进入实例化语句块的，因此需要仅此第二次的判断。 123456789101112131415161718public class Singleton &#123; private volatile static Singleton uniqueInstance; private Singleton() &#123; &#125; public static Singleton getUniqueInstance() &#123; if (uniqueInstance == null) &#123; synchronized (Singleton.class) &#123; if (uniqueInstance == null) &#123; uniqueInstance = new Singleton(); &#125; &#125; &#125; return uniqueInstance; &#125;&#125; 第六章 命令模式1. 问题描述 设计一个遥控器，它有很多按钮，每个按钮可以发起一个命令，让一个家电完成相应操作。 有非常多的家电，并且之后会增加家电。 2. 模式定义 将命令封装成对象，以便使用不同的命令来参数化其它对象。 3. 解决方案类图 RemoteControl 是遥控器，它可以为每个按钮设置命令对象，并且调用命令对象的 execute() 方法。 Command 就是命令对象，命令模式正式将各种命令封装成 Commad 对象来实现的。 Light 是命令真正的执行者。可以注意到 LightOnCommand 和 LightOffCommand 类组合了一个 Light 对象，通过组合的方法，就可以将 excute() 方法委托给 Light 对象来执行。 RemoteLoader 是客户端，注意它与 RemoteControl 的区别。因为 RemoteControl 不能主动地调用自身的方法，因此也就不能当成是客户端。客户端好比人，只有人才能去真正去使用遥控器。 4. 模式类图 5. 代码实现 123public interface Command &#123; public void execute();&#125; 12345678910public class Light &#123; public void on() &#123; System.out.println(\"Light is on!\"); &#125; public void off() &#123; System.out.println(\"Light is off!\"); &#125;&#125; 123456789101112public class LightOnCommand implements Command&#123; Light light; public LightOnCommand(Light light) &#123; this.light = light; &#125; @Override public void execute() &#123; light.on(); &#125;&#125; 12345678910111213141516171819/** * 遥控器类 */public class SimpleRemoteControl &#123; Command slot; public SimpleRemoteControl() &#123; &#125; public void setCommand(Command command) &#123; this.slot = command; &#125; public void buttonWasPressed() &#123; slot.execute(); &#125;&#125; 123456789101112/** * 客户端 */public class RemoteLoader &#123; public static void main(String[] args) &#123; SimpleRemoteControl remote = new SimpleRemoteControl(); Light light = new Light(); LightOnCommand lightOnCommand = new LightOnCommand(light); remote.setCommand(lightOnCommand); remote.buttonWasPressed(); &#125;&#125; 输出 1Light is on! 第七章 适配器模式与外观模式1. 适配器模式1. 模式定义 将一个类的接口，转换为客户期望的另一个接口。适配器让原本不兼容的类可以合作无间。 2. 模式类图 有两种适配器模式的实现，一种是对象方式，一种是类方式。对象方式是通过组合的方法，让适配器类（Adapter）拥有一个待适配的对象（Adaptee），从而把相应的处理委托给待适配的对象。类方式用到多重继承，Adapter 继承 Target 和 Adaptee，先把 Adapter 当成 Adaptee 类型然后实例化一个对象，再把它当成 Target 类型的，这样 Client 就可以把这个对象当成 Target 的对象来处理，同时拥有 Adaptee 的方法。 3. 问题描述 鸭子（Duck）和火鸡（Turkey）拥有不同的叫声，Duck 调用的是 quack() 方法，而 Turkey 调用 gobble() 方法。 要求将 Turkey 的 gobble() 方法适配成 Duck 的 quack() 方法。 4. 解决方案类图 5. 代码实现 123public interface Duck &#123; public void quack();&#125; 123public interface Turkey &#123; public void gobble();&#125; 123456public class WildTurkey implements Turkey&#123; @Override public void gobble() &#123; System.out.println(\"gobble!\"); &#125;&#125; 123456789101112public class TurkeyAdapter implements Duck&#123; Turkey turkey; public TurkeyAdapter(Turkey turkey) &#123; this.turkey = turkey; &#125; @Override public void quack() &#123; turkey.gobble(); &#125;&#125; 1234567public class DuckTestDrive &#123; public static void main(String[] args) &#123; Turkey turkey = new WildTurkey(); Duck duck = new TurkeyAdapter(turkey); duck.quack(); &#125;&#125; 运行结果 1gobble! 2. 外观模式1. 模式定义 提供了一个统一的接口，用来访问子系统中的一群接口，从而让子系统更容易使用。 2. 模式类图 3. 问题描述 家庭影院中有众多电器，当要进行观看电影时需要对很多电器进行操作。要求简化这些操作，使得家庭影院类只提供一个简化的接口，例如提供一个看电影相关的接口。 4. 解决方案类图 5. 设计原则 最少知识原则 ：只和你的密友谈话。也就是应当使得客户对象所需要交互的对象尽可能少。 6. 代码实现 过于简单，无实现。 第八章 模板方法模式1. 模式定义 在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。 模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。 2. 模式类图 模板方法 templateMethod() 定义了算法的骨架，确定了 primitiveOperation1() 和 primitiveOperation2() 方法执行的顺序，而 primitiveOperation1() 和 primitiveOperation2() 让子类去实现。 3. 问题描述 冲咖啡和冲茶都有类似的流程，但是某些步骤会有点不一样，要求复用那些相同步骤的代码。 4. 解决方案类图 其中 prepareRecipe() 方法就是模板方法，它确定了其它四个方法的具体执行步骤。其中 brew() 和 addCondiments() 方法在子类中实现。 5. 设计原则 好莱坞原则 ：别调用（打电话给）我们，我们会调用（打电话给）你。这一原则可以防止依赖腐败，即防止高层组件依赖低层组件，低层组件又依赖高层组件。该原则在模板方法的体现为，只有父类会调用子类，子类不会调用父类。 6. 钩子 钩子（hock）：某些步骤在不同实现中可有可无，可以先定义一个什么都不做的方法，把它加到模板方法中，如果子类需要它就覆盖默认实现并加上自己的实现。 7. 代码实现 123456789101112131415161718192021public abstract class CaffeineBeverage &#123; final void prepareRecipe()&#123; boilWater(); brew(); pourInCup(); addCondiments(); &#125; abstract void brew(); abstract void addCondiments(); void boilWater()&#123; System.out.println(\"boilWater\"); &#125; void pourInCup()&#123; System.out.println(\"pourInCup\"); &#125;&#125; 1234567891011public class Coffee extends CaffeineBeverage&#123; @Override void brew() &#123; System.out.println(\"Coffee.brew\"); &#125; @Override void addCondiments() &#123; System.out.println(\"Coffee.addCondiments\"); &#125;&#125; 1234567891011public class Tea extends CaffeineBeverage&#123; @Override void brew() &#123; System.out.println(\"Tea.brew\"); &#125; @Override void addCondiments() &#123; System.out.println(\"Tea.addCondiments\"); &#125;&#125; 123456789public class CaffeineBeverageTestDrive &#123; public static void main(String[] args) &#123; CaffeineBeverage caffeineBeverage = new Coffee(); caffeineBeverage.prepareRecipe(); System.out.println(\"-----------\"); caffeineBeverage = new Tea(); caffeineBeverage.prepareRecipe(); &#125;&#125; 运行结果 123456789boilWaterCoffee.brewpourInCupCoffee.addCondiments-----------boilWaterTea.brewpourInCupTea.addCondiments 第九章 迭代器和组合模式1. 迭代器模式1. 模式定义 提供顺序访问一个聚合对象中的各个元素的方法，而又不暴露聚合对象内部的表示。 2. 模式类图 Aggregate 是聚合类，其中 createIterator() 方法可以产生一个 Iterator 对象； Iterator 主要定义了 hasNext() 和 next() 方法。 Client 需要拥有一个 Aggregate 对象，这是很明显的。为了迭代变量 Aggregate 对象，也需要拥有 Iterator 对象。 3. 代码实现 12345678910111213141516public class Aggregate &#123; private int[] items; public Aggregate() &#123; items = new int[10]; for (int i = 0; i &lt; items.length; i++) &#123; items[i] = i; &#125; &#125; public Iterator createIterator() &#123; return new ConcreteIterator(items); &#125;&#125; 1234public interface Iterator &#123; boolean hasNext(); int next();&#125; 12345678910111213141516171819public class ConcreteIterator implements Iterator &#123; private int[] items; private int position = 0; public ConcreteIterator(int[] items) &#123; this.items = items; &#125; @Override public boolean hasNext() &#123; return position &lt; items.length; &#125; @Override public int next() &#123; return items[position++]; &#125;&#125; 123456789public class Client &#123; public static void main(String[] args) &#123; Aggregate aggregate = new Aggregate(); Iterator iterator = aggregate.createIterator(); while(iterator.hasNext())&#123; System.out.println(iterator.next()); &#125; &#125;&#125; 运行结果123456789100123456789 2. Java 内置的迭代器1. 实现接口 在使用 Java 的迭代器实现时，需要让聚合对象去实现 Iterable 接口，该接口有一个 iterator() 方法会返回一个 Iterator 对象。 使用 Java 内置的迭代器实现，客户对象可以使用 foreach 循环来遍历聚合对象中的每个元素。 Java 中的集合类基本都实现了 Iterable 接口。 2. 代码实现 123456789101112131415161718import java.util.Iterator;public class Aggregate implements Iterable&lt;Integer&gt;&#123; private int[] items; public Aggregate() &#123; items = new int[10]; for (int i = 0; i &lt; items.length; i++) &#123; items[i] = i; &#125; &#125; @Override public Iterator&lt;Integer&gt; iterator() &#123; return new ConcreteIterator(items); &#125;&#125; 123456789101112131415161718192021import java.util.Iterator;public class ConcreteIterator implements Iterator&lt;Integer&gt; &#123; private int[] items; private int position = 0; public ConcreteIterator(int[] items) &#123; this.items = items; &#125; @Override public boolean hasNext() &#123; return position &lt; items.length; &#125; @Override public Integer next() &#123; return items[position++]; &#125;&#125; 12345678public class Client &#123; public static void main(String[] args) &#123; Aggregate aggregate = new Aggregate(); for (int item : aggregate) &#123; System.out.println(item); &#125; &#125;&#125; 3. 组合模式1. 设计原则 一个类应该只有一个引起改变的原因。 2. 模式定义 允许将对象组合成树形结构来表现“整体/部分”层次结构。 组合能让客户以一致的方式处理个别对象以及组合对象。 3. 模式类图 组件（Component）类是组合类（Composite）和叶子类（Leaf）的父类，可以把组合类看成是树的中间节点。 组合类拥有一个组件对象，因此组合类的操作可以委托给组件对象去处理，而组件对象可以是另一个组合类或者叶子类。 4. 代码实现 123456789101112131415public abstract class Component &#123; protected String name; public Component(String name) &#123; this.name = name; &#125; abstract public void addChild(Component component); public void print() &#123; print(0); &#125; abstract protected void print(int level);&#125; 123456789101112131415161718public class Leaf extends Component &#123; public Leaf(String name) &#123; super(name); &#125; @Override public void addChild(Component component) &#123; throw new UnsupportedOperationException(); // 牺牲透明性换取单一职责原则，这样就不用考虑是叶子节点还是组合节点 &#125; @Override protected void print(int level) &#123; for (int i = 0; i &lt; level; i++) &#123; System.out.print(\"--\"); &#125; System.out.println(\"left:\" + name); &#125;&#125; 12345678910111213141516171819202122232425public class Composite extends Component &#123; private List&lt;Component&gt; childs; public Composite(String name) &#123; super(name); childs = new ArrayList&lt;&gt;(); &#125; @Override public void addChild(Component component) &#123; childs.add(component); &#125; @Override protected void print(int level) &#123; for (int i = 0; i &lt; level; i++) &#123; System.out.print(\"--\"); &#125; System.out.println(\"Composite:\" + name); for (Component component : childs) &#123; component.print(level + 1); &#125; &#125;&#125; 123456789101112131415161718public class Client &#123; public static void main(String[] args) &#123; Composite root = new Composite(\"root\"); Component node1 = new Leaf(\"1\"); Component node2 = new Composite(\"2\"); Component node3 = new Leaf(\"3\"); root.addChild(node1); root.addChild(node2); root.addChild(node3); Component node21 = new Leaf(\"21\"); Component node22 = new Composite(\"22\"); node2.addChild(node21); node2.addChild(node22); Component node221 = new Leaf(\"221\"); node22.addChild(node221); root.print(); &#125;&#125; 运行结果 1234567Composite:root--left:1--Composite:2----left:21----Composite:22------left:221--left:3 第十章 状态模式1. 模式定义 允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它所属的类。 2. 模式类图 Context 的 request() 方法委托给 State 对象去处理。当 Context 组合的 State 对象发生改变时，它的行为也就发生了改变。 3. 与策略模式的比较 状态模式的类图和策略模式一样，并且都是能够动态改变对象的行为。 但是状态模式是通过状态转移来改变 Context 所组合的 State 对象，而策略模式是通过 Context 本身的决策来改变组合的 Strategy 对象。 所谓的状态转移，是指 Context 在运行过程中由于一些条件发生改变而使得 State 对象发生改变，主要必须要是在运行过程中。 状态模式主要是用来解决状态转移的问题，当状态发生庄毅了，那么 Context 对象就会改变它的行为；而策略模式主要是用来封装一组可以互相替代的算法族，并且可以根据需要动态地去替换 Context 需要使用哪个算法。 4. 问题描述 糖果销售机有多种状态，每种状态下销售机有不同的行为，状态可以发生转移，使得销售机的行为也发生改变。 5. 直接解决方案 在糖果机的每个操作函数里面，判断当前的状态，根据不同的状态进行不同的处理，并且发生不同的状态转移。 这种解决方案在需要增加状态的时候，必须对每个操作的代码都进行修改。 6 代码实现 糖果销售机即 Context。 下面的实现中每个 State 都组合了 Context 对象，这是因为状态转移的操作在 State 对象中，而状态转移过程又必须改变 Context 对象的 state 对象，因此 State 必须拥有 Context 对象。 123456789101112131415161718192021public interface State &#123; /** * 投入25 分钱 */ void insertQuarter(); /** * 退回25 分钱 */ void ejectQuarter(); /** * 转动曲柄 */ void turnCrank(); /** * 发放糖果 */ void dispense();&#125; 1234567891011121314151617181920212223242526272829public class HasQuarterState implements State&#123; private GumballMachine gumballMachine; public HasQuarterState(GumballMachine gumballMachine)&#123; this.gumballMachine = gumballMachine; &#125; @Override public void insertQuarter() &#123; System.out.println(\"You can't insert another quarter\"); &#125; @Override public void ejectQuarter() &#123; System.out.println(\"Quarter returned\"); gumballMachine.setState(gumballMachine.getNoQuarterState()); &#125; @Override public void turnCrank() &#123; System.out.println(\"You turned...\"); gumballMachine.setState(gumballMachine.getSoldState()); &#125; @Override public void dispense() &#123; System.out.println(\"No gumball dispensed\"); &#125;&#125; 12345678910111213141516171819202122232425262728public class NoQuarterState implements State &#123; GumballMachine gumballMachine; public NoQuarterState(GumballMachine gumballMachine) &#123; this.gumballMachine = gumballMachine; &#125; @Override public void insertQuarter() &#123; System.out.println(\"You insert a quarter\"); gumballMachine.setState(gumballMachine.getHasQuarterState()); &#125; @Override public void ejectQuarter() &#123; System.out.println(\"You haven't insert a quarter\"); &#125; @Override public void turnCrank() &#123; System.out.println(\"You turned, but there's no quarter\"); &#125; @Override public void dispense() &#123; System.out.println(\"You need to pay first\"); &#125;&#125; 12345678910111213141516171819202122232425262728public class SoldOutState implements State &#123; GumballMachine gumballMachine; public SoldOutState(GumballMachine gumballMachine) &#123; this.gumballMachine = gumballMachine; &#125; @Override public void insertQuarter() &#123; System.out.println(\"You can't insert a quarter, the machine is sold out\"); &#125; @Override public void ejectQuarter() &#123; System.out.println(\"You can't eject, you haven't inserted a quarter yet\"); &#125; @Override public void turnCrank() &#123; System.out.println(\"You turned, but there are no gumballs\"); &#125; @Override public void dispense() &#123; System.out.println(\"No gumball dispensed\"); &#125;&#125; 123456789101112131415161718192021222324252627282930313233public class SoldState implements State &#123; GumballMachine gumballMachine; public SoldState(GumballMachine gumballMachine) &#123; this.gumballMachine = gumballMachine; &#125; @Override public void insertQuarter() &#123; System.out.println(\"Please wait, we're already giving you a gumball\"); &#125; @Override public void ejectQuarter() &#123; System.out.println(\"Sorry, you already turned the crank\"); &#125; @Override public void turnCrank() &#123; System.out.println(\"Turning twice doesn't get you another gumball!\"); &#125; @Override public void dispense() &#123; gumballMachine.releaseBall(); if(gumballMachine.getCount()&gt;0)&#123; gumballMachine.setState(gumballMachine.getNoQuarterState()); &#125; else&#123; System.out.println(\"Oops, out of gumballs\"); gumballMachine.setState(gumballMachine.getSoldOutState()); &#125; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667public class GumballMachine &#123; private State soldOutState; private State noQuarterState; private State hasQuarterState; private State soldState; private State state; private int count = 0; public GumballMachine(int numberGumballs) &#123; count = numberGumballs; soldOutState = new SoldOutState(this); noQuarterState = new NoQuarterState(this); hasQuarterState = new HasQuarterState(this); soldState = new SoldState(this); if (numberGumballs &gt; 0) &#123; state = noQuarterState; &#125; else &#123; state = soldOutState; &#125; &#125; public void insertQuarter() &#123; state.insertQuarter(); &#125; public void ejectQuarter() &#123; state.ejectQuarter(); &#125; public void turnCrank() &#123; state.turnCrank(); state.dispense(); &#125; public void setState(State state) &#123; this.state = state; &#125; public void releaseBall() &#123; System.out.println(\"A gumball comes rolling out the slot...\"); if (count != 0) &#123; count -= 1; &#125; &#125; public State getSoldOutState() &#123; return soldOutState; &#125; public State getNoQuarterState() &#123; return noQuarterState; &#125; public State getHasQuarterState() &#123; return hasQuarterState; &#125; public State getSoldState() &#123; return soldState; &#125; public int getCount() &#123; return count; &#125;&#125; 1234567891011121314151617181920212223242526public class GumballMachineTestDrive &#123; public static void main(String[] args) &#123; GumballMachine gumballMachine = new GumballMachine(5); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.ejectQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.ejectQuarter(); gumballMachine.insertQuarter(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); &#125;&#125; 运行结果12345678910111213141516171819202122232425You insert a quarterYou turned...A gumball comes rolling out the slot...You insert a quarterQuarter returnedYou turned, but there's no quarterYou need to pay firstYou insert a quarterYou turned...A gumball comes rolling out the slot...You insert a quarterYou turned...A gumball comes rolling out the slot...You haven't insert a quarterYou insert a quarterYou can't insert another quarterYou turned...A gumball comes rolling out the slot...You insert a quarterYou turned...A gumball comes rolling out the slot...Oops, out of gumballsYou can't insert a quarter, the machine is sold outYou turned, but there are no gumballsNo gumball dispensed 第十一章 代理模式第十二章 复合模式MVC传统 MVC 视图使用组合模式，模型使用了观察者模式，控制器使用了策略模式。 Web 中的 MVC 模式不再使用观察者模式。 第十三章 与设计模式相处定义：在某 情境 下，针对某 问题 的某种 解决方案。 过度使用设计模式可能导致代码被过度工程化，应该总是用最简单的解决方案完成工作，并在真正需要模式的地方才使用它。 反模式：不好的解决方案来解决一个问题。主要作用是为了警告不要使用这些解决方案。 模式分类： 第十四章 剩下的模式 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"2016 校招真题题解","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/2016 校招真题题解.html","text":"前言 1. 小米-小米Git 2. 小米-懂二进制 3. 小米-中国牛市 4. 微软-LUCKY STRING 5. 微软-Numeric Keypad 6. 微软-Spring Outing 7. 微软-S-expression 8. 华为-最高分是多少 9. 华为-简单错误记录 10. 华为-扑克牌大小 11. 去哪儿-二分查找 12. 去哪儿-首个重复字符 13. 去哪儿-寻找Coder 14. 美团-最大差值 15. 美团-棋子翻转 16. 美团-拜访 17. 美团-直方图内最大矩形 18. 美团-字符串计数 19. 美团-平均年龄 20. 百度-罪犯转移 22. 百度-裁减网格纸 23. 百度-钓鱼比赛 24. 百度-蘑菇阵 前言省略的代码： 1import java.util.*; 12public class Solution &#123;&#125; 1234567public class Main &#123; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); while (in.hasNext()) &#123; &#125; &#125;&#125; 1. 小米-小米Git 重建多叉树 使用 LCA 12345678910111213141516171819202122232425262728293031323334353637383940414243444546private class TreeNode &#123; int id; List&lt;TreeNode&gt; childs = new ArrayList&lt;&gt;(); TreeNode(int id) &#123; this.id = id; &#125;&#125;public int getSplitNode(String[] matrix, int indexA, int indexB) &#123; int n = matrix.length; boolean[][] linked = new boolean[n][n]; // 重建邻接矩阵 for (int i = 0; i &lt; n; i++) &#123; for (int j = 0; j &lt; n; j++) &#123; linked[i][j] = matrix[i].charAt(j) == '1'; &#125; &#125; TreeNode tree = constructTree(linked, 0); TreeNode ancestor = LCA(tree, new TreeNode(indexA), new TreeNode(indexB)); return ancestor.id;&#125;private TreeNode constructTree(boolean[][] linked, int root) &#123; TreeNode tree = new TreeNode(root); for (int i = 0; i &lt; linked[root].length; i++) &#123; if (linked[root][i]) &#123; linked[i][root] = false; // 因为题目给的邻接矩阵是双向的，在这里需要把它转为单向的 tree.childs.add(constructTree(links, i)); &#125; &#125; return tree;&#125;private TreeNode LCA(TreeNode root, TreeNode p, TreeNode q) &#123; if (root == null || root.id == p.id || root.id == q.id) return root; TreeNode ancestor = null; int cnt = 0; for (int i = 0; i &lt; root.childs.size(); i++) &#123; TreeNode tmp = LCA(root.childs.get(i), p, q); if (tmp != null) &#123; ancestor = tmp; cnt++; &#125; &#125; return cnt == 2 ? root : ancestor;&#125; 2. 小米-懂二进制对两个数进行异或，结果的二进制表示为 1 的那一位就是两个数不同的位。 123public int countBitDiff(int m, int n) &#123; return Integer.bitCount(m ^ n);&#125; 3. 小米-中国牛市背包问题，可以设一个大小为 2 的背包。 状态转移方程如下： 1dp[i, j] = max(dp[i, j-1], prices[j] - prices[jj] + dp[i-1, jj]) &#123; jj in range of [0, j-1] &#125; = max(dp[i, j-1], prices[j] + max(dp[i-1, jj] - prices[jj])) 123456789101112public int calculateMax(int[] prices) &#123; int n = prices.length; int[][] dp = new int[3][n]; for (int i = 1; i &lt;= 2; i++) &#123; int localMax = dp[i - 1][0] - prices[0]; for (int j = 1; j &lt; n; j++) &#123; dp[i][j] = Math.max(dp[i][j - 1], prices[j] + localMax); localMax = Math.max(localMax, dp[i - 1][j] - prices[j]); &#125; &#125; return dp[2][n - 1];&#125; 4. 微软-LUCKY STRING 斐波那契数列可以预计算； 从头到尾遍历字符串的过程，每一轮循环都使用一个 Set 来保存从 i 到 j 出现的字符，并且 Set 保证了字符都不同，因此 Set 的大小就是不同字符的个数。 1234567891011121314151617181920Set&lt;Integer&gt; fibSet = new HashSet&lt;&gt;(Arrays.asList(1, 2, 3, 5, 8, 13, 21, 34, 55, 89));Scanner in = new Scanner(System.in);String str = in.nextLine();int n = str.length();Set&lt;String&gt; ret = new HashSet&lt;&gt;();for (int i = 0; i &lt; n; i++) &#123; Set&lt;Character&gt; set = new HashSet&lt;&gt;(); for (int j = i; j &lt; n; j++) &#123; set.add(str.charAt(j)); int cnt = set.size(); if (fibSet.contains(cnt)) &#123; ret.add(str.substring(i, j + 1)); &#125; &#125;&#125;String[] arr = ret.toArray(new String[ret.size()]);Arrays.sort(arr);for (String s : arr) &#123; System.out.println(s);&#125; 5. 微软-Numeric Keypad123456789101112131415161718192021222324252627282930313233343536373839private static int[][] canReach = &#123; &#123;1, 0, 0, 0, 0, 0, 0, 0, 0, 0&#125;, // 0 &#123;1, 1, 1, 1, 1, 1, 1, 1, 1, 1&#125;, // 1 &#123;1, 0, 1, 1, 0, 1, 1, 0, 1, 1&#125;, // 2 &#123;0, 0, 0, 1, 0, 0, 1, 0, 0, 1&#125;, // 3 &#123;1, 0, 0, 0, 1, 1, 1, 1, 1, 1&#125;, // 4 &#123;1, 0, 0, 0, 0, 1, 1, 0, 1, 1&#125;, // 5 &#123;0, 0, 0, 0, 0, 0, 1, 0, 0, 1&#125;, // 6 &#123;1, 0, 0, 0, 0, 0, 0, 1, 1, 1&#125;, // 7 &#123;1, 0, 0, 0, 0, 0, 0, 0, 1, 1&#125;, // 8 &#123;0, 0, 0, 0, 0, 0, 0, 0, 0, 1&#125; // 9&#125;;private static boolean isLegal(char[] chars, int idx) &#123; if (idx &gt;= chars.length || idx &lt; 0) return true; int cur = chars[idx] - '0'; int next = chars[idx + 1] - '0'; return canReach[cur][next] == 1;&#125;public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); int T = Integer.valueOf(in.nextLine()); for (int i = 0; i &lt; T; i++) &#123; String line = in.nextLine(); char[] chars = line.toCharArray(); for (int j = 0; j &lt; chars.length - 1; j++) &#123; while (!isLegal(chars, j)) &#123; if (--chars[j + 1] &lt; '0') &#123; chars[j--]--; &#125; for (int k = j + 2; k &lt; chars.length; k++) &#123; chars[k] = '9'; &#125; &#125; &#125; System.out.println(new String(chars)); &#125;&#125; 6. 微软-Spring Outing下面以 N = 3，K = 4 来进行讨论。 初始时，令第 0 个地方成为待定地点，也就是呆在家里。 从第 4 个地点开始投票，每个人只需要比较第 4 个地方和第 0 个地方的优先级，里，如果超过半数的人选择了第 4 个地方，那么更新第 4 个地方成为待定地点。 从后往前不断重复以上步骤，不断更新待定地点，直到所有地方都已经投票。 上面的讨论中，先令第 0 个地点成为待定地点，是因为这样的话第 4 个地点就只需要和这个地点进行比较，而不用考虑其它情况。如果最开始先令第 1 个地点成为待定地点，那么在对第 2 个地点进行投票时，每个人不仅要考虑第 2 个地点与第 1 个地点的优先级，也要考虑与其后投票地点的优先级。 12345678910111213141516171819202122int N = in.nextInt();int K = in.nextInt();int[][] votes = new int[N][K + 1];for (int i = 0; i &lt; N; i++) &#123; for (int j = 0; j &lt; K + 1; j++) &#123; int place = in.nextInt(); votes[i][place] = j; &#125;&#125;int ret = 0;for (int place = K; place &gt; 0; place--) &#123; int cnt = 0; for (int i = 0; i &lt; N; i++) &#123; if (votes[i][place] &lt; votes[i][ret]) &#123; cnt++; &#125; &#125; if (cnt &gt; N / 2) &#123; ret = place; &#125;&#125;System.out.println(ret == 0 ? \"otaku\" : ret); 7. 微软-S-expression8. 华为-最高分是多少123456789101112131415161718192021222324252627int N = in.nextInt();int M = in.nextInt();int[] scores = new int[N];for (int i = 0; i &lt; N; i++) &#123; scores[i] = in.nextInt();&#125;for (int i = 0; i &lt; M; i++) &#123; String str = in.next(); if (str.equals(\"U\")) &#123; int id = in.nextInt() - 1; int newScore = in.nextInt(); scores[id] = newScore; &#125; else &#123; int idBegin = in.nextInt() - 1; int idEnd = in.nextInt() - 1; int ret = 0; if (idBegin &gt; idEnd) &#123; int t = idBegin; idBegin = idEnd; idEnd = t; &#125; for (int j = idBegin; j &lt;= idEnd; j++) &#123; ret = Math.max(ret, scores[j]); &#125; System.out.println(ret); &#125;&#125; 9. 华为-简单错误记录123456789101112131415HashMap&lt;String, Integer&gt; map = new LinkedHashMap&lt;&gt;();while (in.hasNextLine()) &#123; String s = in.nextLine(); String key = s.substring(s.lastIndexOf('\\\\') + 1); map.put(key, map.containsKey(key) ? map.get(key) + 1 : 1);&#125;List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = new LinkedList&lt;&gt;(map.entrySet());Collections.sort(list, (o1, o2) -&gt; o2.getValue() - o1.getValue());for (int i = 0; i &lt; 8 &amp;&amp; i &lt; list.size(); i++) &#123; String[] token = list.get(i).getKey().split(\" \"); String filename = token[0]; String line = token[1]; if (filename.length() &gt; 16) filename = filename.substring(filename.length() - 16); System.out.println(filename + \" \" + line + \" \" + list.get(i).getValue());&#125; 10. 华为-扑克牌大小1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586public class Main &#123; private Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;(); public Main() &#123; map.put(\"3\", 0); map.put(\"4\", 1); map.put(\"5\", 2); map.put(\"6\", 3); map.put(\"7\", 4); map.put(\"8\", 5); map.put(\"9\", 6); map.put(\"10\", 7); map.put(\"J\", 8); map.put(\"Q\", 9); map.put(\"K\", 10); map.put(\"A\", 11); map.put(\"2\", 12); map.put(\"joker\", 13); map.put(\"JOKER \", 14); &#125; private String play(String s1, String s2) &#123; String[] token1 = s1.split(\" \"); String[] token2 = s2.split(\" \"); CardType type1 = computeCardType(token1); CardType type2 = computeCardType(token2); if (type1 == CardType.DoubleJoker) return s1; if (type2 == CardType.DoubleJoker) return s2; if (type1 == CardType.Bomb &amp;&amp; type2 != CardType.Bomb) return s1; if (type2 == CardType.Bomb &amp;&amp; type1 != CardType.Bomb) return s2; if (type1 != type2 || token1.length != token2.length) return \"ERROR\"; for (int i = 0; i &lt; token1.length; i++) &#123; int val1 = map.get(token1[i]); int val2 = map.get(token2[i]); if (val1 != val2) return val1 &gt; val2 ? s1 : s2; &#125; return \"ERROR\"; &#125; private CardType computeCardType(String[] token) &#123; boolean hasjoker = false, hasJOKER = false; for (int i = 0; i &lt; token.length; i++) &#123; if (token[i].equals(\"joker\")) hasjoker = true; else if (token[i].equals(\"JOKER\")) hasJOKER = true; &#125; if (hasjoker &amp;&amp; hasJOKER) return CardType.DoubleJoker; int maxContinueLen = 1; int curContinueLen = 1; String curValue = token[0]; for (int i = 1; i &lt; token.length; i++) &#123; if (token[i].equals(curValue)) curContinueLen++; else &#123; curContinueLen = 1; curValue = token[i]; &#125; maxContinueLen = Math.max(maxContinueLen, curContinueLen); &#125; if (maxContinueLen == 4) return CardType.Bomb; if (maxContinueLen == 3) return CardType.Triple; if (maxContinueLen == 2) return CardType.Double; boolean isStraight = true; for (int i = 1; i &lt; token.length; i++) &#123; if (map.get(token[i]) - map.get(token[i - 1]) != 1) &#123; isStraight = false; break; &#125; &#125; if (isStraight &amp;&amp; token.length == 5) return CardType.Straight; return CardType.Sigal; &#125; private enum CardType &#123; DoubleJoker, Bomb, Sigal, Double, Triple, Straight; &#125; public static void main(String[] args) &#123; Main main = new Main(); Scanner in = new Scanner(System.in); while (in.hasNextLine()) &#123; String s = in.nextLine(); String[] token = s.split(\"-\"); System.out.println(main.play(token[0], token[1])); &#125; &#125;&#125; 11. 去哪儿-二分查找对于有重复元素的有序数组，二分查找需要注意以下要点： if (val &lt;= A[m]) h = m; 因为 h 的赋值为 m 而不是 m - 1，因此 while 循环的条件也就为 l &lt; h。（如果是 m - 1 循环条件为 l &lt;= h） 123456789public int getPos(int[] A, int n, int val) &#123; int l = 0, h = n - 1; while (l &lt; h) &#123; int m = l + (h - l) / 2; if (val &lt;= A[m]) h = m; else l = m + 1; &#125; return A[h] == val ? h : -1;&#125; 12. 去哪儿-首个重复字符123456789public char findFirstRepeat(String A, int n) &#123; boolean[] hasAppear = new boolean[256]; for (int i = 0; i &lt; n; i++) &#123; char c = A.charAt(i); if(hasAppear[c]) return c; hasAppear[c] = true; &#125; return ' ';&#125; 13. 去哪儿-寻找Coder1234567891011121314151617181920212223242526272829303132333435363738394041public String[] findCoder(String[] A, int n) &#123; List&lt;Pair&lt;String, Integer&gt;&gt; list = new ArrayList&lt;&gt;(); for (String s : A) &#123; int cnt = 0; String t = s.toLowerCase(); int idx = -1; while (true) &#123; idx = t.indexOf(\"coder\", idx + 1); if (idx == -1) break; cnt++; &#125; if (cnt != 0) &#123; list.add(new Pair&lt;&gt;(s, cnt)); &#125; &#125; Collections.sort(list, (o1, o2) -&gt; (o2.getValue() - o1.getValue())); String[] ret = new String[list.size()]; for (int i = 0; i &lt; list.size(); i++) &#123; ret[i] = list.get(i).getKey(); &#125; return ret;&#125;// 牛客网无法导入 javafx.util.Pair，这里就自己实现一下 Pair 类private class Pair&lt;T, K&gt; &#123; T t; K k; Pair(T t, K k) &#123; this.t = t; this.k = k; &#125; T getKey() &#123; return t; &#125; K getValue() &#123; return k; &#125;&#125; 14. 美团-最大差值贪心策略。 123456789public int getDis(int[] A, int n) &#123; int max = 0; int soFarMin = A[0]; for (int i = 1; i &lt; n; i++) &#123; if(soFarMin &gt; A[i]) soFarMin = A[i]; else max = Math.max(max, A[i]- soFarMin); &#125; return max;&#125; 15. 美团-棋子翻转1234567891011public int[][] flipChess(int[][] A, int[][] f) &#123; int[][] direction = &#123;&#123;0, 1&#125;, &#123;0, -1&#125;, &#123;1, 0&#125;, &#123;-1, 0&#125;&#125;; for (int[] ff : f) &#123; for (int[] dd : direction) &#123; int r = ff[0] + dd[0] - 1, c = ff[1] + dd[1] - 1; if(r &lt; 0 || r &gt; 3 || c &lt; 0 || c &gt; 3) continue; A[r][c] ^= 1; &#125; &#125; return A;&#125; 16. 美团-拜访1234567891011121314151617181920212223242526272829303132333435363738394041424344454647private Set&lt;String&gt; paths;private List&lt;Integer&gt; curPath;public int countPath(int[][] map, int n, int m) &#123; paths = new HashSet&lt;&gt;(); curPath = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; n; i++) &#123; for (int j = 0; j &lt; m; j++) &#123; if (map[i][j] == 1) &#123; map[i][j] = -1; int[][] leftRightDirection = &#123;&#123;1, 0&#125;, &#123;-1, 0&#125;&#125;; int[][] topDownDirection = &#123;&#123;0, 1&#125;, &#123;0, -1&#125;&#125;; for (int[] lr : leftRightDirection) &#123; for (int[] td : topDownDirection) &#123; int[][] directions = &#123;lr, td&#125;; backtracking(map, n, m, i, j, directions); &#125; &#125; return paths.size(); &#125; &#125; &#125; return 0;&#125;private void backtracking(int[][] map, int n, int m, int r, int c, int[][] directions) &#123; if (map[r][c] == 2) &#123; String path = \"\"; for (int num : curPath) &#123; path += num; &#125; paths.add(path); return; &#125; for (int i = 0; i &lt; directions.length; i++) &#123; int nextR = r + directions[i][0]; int nextC = c + directions[i][1]; if (nextR &lt; 0 || nextR &gt;= n || nextC &lt; 0 || nextC &gt;= m || map[nextR][nextC] == -1) continue; map[nextR][nextC] = map[nextR][nextC] == 2 ? 2 : -1; curPath.add(nextR); curPath.add(nextC); backtracking(map, n, m, nextR, nextC, directions); curPath.remove(curPath.size() - 1); curPath.remove(curPath.size() - 1); map[nextR][nextC] = map[nextR][nextC] == 2 ? 2 : 0; &#125;&#125; 17. 美团-直方图内最大矩形1234567891011public int countArea(int[] A, int n) &#123; int max = 0; for (int i = 0; i &lt; n; i++) &#123; int min = A[i]; for (int j = i; j &lt; n; j++) &#123; min = Math.min(min, A[j]); max = Math.max(max, min * (j - i + 1)); &#125; &#125; return max;&#125; 18. 美团-字符串计数字符串都是小写字符，可以把字符串当成是 26 进制。但是字典序的比较和普通的整数比较不同，是从左往右进行比较，例如 “ac” 和 “abc”，字典序的比较结果为 “ac” &gt; “abc”，如果按照整数方法比较，因为 “abc” 是三位数，显然更大。 由于两个字符串的长度可能不想等，在 s1 空白部分和 s2 对应部分进行比较时，应该把 s1 的空白部分看成是 ‘a’ 字符进行填充的。 还有一点要注意的是，s1 到 s2 长度为 leni 的字符串个数只比较前面 i 个字符。例如 ‘aaa’ 和 ‘bbb’ ，长度为 2 的个数为 ‘aa’ 到 ‘bb’ 的字符串个数，不需要考虑后面部分的字符。 在统计个数时，从 len1 开始一直遍历到最大合法长度，每次循环都统计长度为 i 的子字符串个数。 123456789101112131415161718String s1 = in.next();String s2 = in.next();int len1 = in.nextInt();int len2 = in.nextInt();int len = Math.min(s2.length(), len2);int[] subtractArr = new int[len];for (int i = 0; i &lt; len; i++) &#123; char c1 = i &lt; s1.length() ? s1.charAt(i) : 'a'; char c2 = s2.charAt(i); subtractArr[i] = c2 - c1;&#125;int ret = 0;for (int i = len1; i &lt;= len; i++) &#123; for (int j = 0; j &lt; i; j++) &#123; ret += subtractArr[j] * Math.pow(26, i - j - 1); &#125;&#125;System.out.println(ret - 1); 19. 美团-平均年龄123456789int W = in.nextInt();double Y = in.nextDouble();double x = in.nextDouble();int N = in.nextInt();while (N-- &gt; 0) &#123; Y++; // 老员工每年年龄都要加 1 Y += (21 - Y) * x;&#125;System.out.println((int) Math.ceil(Y)); 20. 百度-罪犯转移部分和问题，将每次求的部分和缓存起来。 123456789101112131415161718int n = in.nextInt();int t = in.nextInt();int c = in.nextInt();int[] values = new int[n];for (int i = 0; i &lt; n; i++) &#123; values[i] = in.nextInt();&#125;int cnt = 0;int totalValue = 0;for (int s = 0, e = c - 1; e &lt; n; s++, e++) &#123; if (s == 0) &#123; for (int j = 0; j &lt; c; j++) totalValue += values[j]; &#125; else &#123; totalValue = totalValue - values[s - 1] + values[e]; &#125; if (totalValue &lt;= t) cnt++;&#125;System.out.println(cnt); 22. 百度-裁减网格纸12345678910111213int n = in.nextInt();int minX, minY, maxX, maxY;minX = minY = Integer.MAX_VALUE;maxX = maxY = Integer.MIN_VALUE;for (int i = 0; i &lt; n; i++) &#123; int x = in.nextInt(); int y = in.nextInt(); minX = Math.min(minX, x); minY = Math.min(minY, y); maxX = Math.max(maxX, x); maxY = Math.max(maxY, y);&#125;System.out.println((int) Math.pow(Math.max(maxX - minX, maxY - minY), 2)); 23. 百度-钓鱼比赛P ( 至少钓一条鱼 ) = 1 - P ( 一条也钓不到 ) 坑：读取概率矩阵的时候，需要一行一行进行读取，而不能直接用 in.nextDouble()。 12345678910111213141516171819202122232425262728293031323334public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); while (in.hasNext()) &#123; int n = in.nextInt(); int m = in.nextInt(); int x = in.nextInt(); int y = in.nextInt(); int t = in.nextInt(); in.nextLine(); // 坑 double pcc = 0.0; double sum = 0.0; for (int i = 1; i &lt;= n; i++) &#123; String[] token = in.nextLine().split(\" \"); // 坑 for (int j = 1; j &lt;= m; j++) &#123; double p = Double.parseDouble(token[j - 1]); // double p = in.nextDouble(); sum += p; if (i == x &amp;&amp; j == y) &#123; pcc = p; &#125; &#125; &#125; double pss = sum / (n * m); pcc = computePOfIRT(pcc, t); pss = computePOfIRT(pss, t); System.out.println(pcc &gt; pss ? \"cc\" : pss &gt; pcc ? \"ss\" : \"equal\"); System.out.printf(\"%.2f\\n\", Math.max(pcc, pss)); &#125;&#125;// compute probability of independent repeated trialsprivate static double computePOfIRT(double p, int t) &#123; return 1 - Math.pow((1 - p), t);&#125; 24. 百度-蘑菇阵这题用回溯会超时，需要用 DP。 dp[i][j] 表示到达 (i,j) 位置不会触碰蘑菇的概率。对于 N*M 矩阵，如果 i == N || j == M，那么 (i,j) 只能有一个移动方向；其它情况下能有两个移动方向。 考虑以下矩阵，其中第 3 行和第 3 列只能往一个方向移动，而其它位置可以有两个方向移动。 123456789101112131415161718192021222324252627int N = in.nextInt();int M = in.nextInt();int K = in.nextInt();boolean[][] mushroom = new boolean[N][M];while (K-- &gt; 0) &#123; int x = in.nextInt(); int y = in.nextInt(); mushroom[x - 1][y - 1] = true;&#125;double[][] dp = new double[N][M];dp[0][0] = 1;for (int i = 0; i &lt; N; i++) &#123; for (int j = 0; j &lt; M; j++) &#123; if (mushroom[i][j]) dp[i][j] = 0; else &#123; double cur = dp[i][j]; if (i == N - 1 &amp;&amp; j == M - 1) break; if (i == N - 1) dp[i][j + 1] += cur; else if (j == M - 1) dp[i + 1][j] += cur; else &#123; dp[i][j + 1] += cur / 2; dp[i + 1][j] += cur / 2; &#125; &#125; &#125;&#125;System.out.printf(\"%.2f\\n\", dp[N - 1][M - 1]);","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"剑指 offer 题解","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/剑指 offer 题解.html","text":"第二章 面试需要的基础知识 2. 实现 Singleton 3. 数组中重复的数字 4. 二维数组中的查找 5. 替换空格 6. 从尾到头打印链表 7. 重建二叉树 8. 二叉树的下一个结点 9. 用两个栈实现队列 10.1 斐波那契数列 10.2 跳台阶 10.3 变态跳台阶 10.4 矩形覆盖 11. 旋转数组的最小数字 12. 矩阵中的路径 13. 机器人的运动范围 14. 剪绳子 15. 二进制中 1 的个数 第三章 高质量的代码 16. 数值的整数次方 17. 打印从 1 到最大的 n 位数 18.1 在 O(1) 时间内删除链表节点 18.2 删除链表中重复的结点 19. 正则表达式匹配 20. 表示数值的字符串 21. 调整数组顺序使奇数位于偶数前面 22. 链表中倒数第 k 个结点 23. 链表中环的入口结点 24. 反转链表 25. 合并两个排序的链表 26. 树的子结构 第四章 解决面试题的思路 27. 二叉树的镜像 28.1 对称的二叉树 28.2 平衡二叉树 29. 顺时针打印矩阵 30. 包含 min 函数的栈 31. 栈的压入、弹出序列 32.1 从上往下打印二叉树 32.3 把二叉树打印成多行 32.3 按之字形顺序打印二叉树 33. 二叉搜索树的后序遍历序列 34. 二叉树中和为某一值的路径 35. 复杂链表的复制 36. 二叉搜索树与双向链表 37. 序列化二叉树 38. 字符串的排列 第五章 优化时间和空间效率 39. 数组中出现次数超过一半的数字 40. 最小的 K 个数 41.1 数据流中的中位数 41.2 字符流中第一个不重复的字符 42. 连续子数组的最大和 43. 从 1 到 n 整数中 1 出现的次数 44. 数字序列中的某一位数字 45. 把数组排成最小的数 46. 把数字翻译成字符串 47. 礼物的最大价值 48. 最长不含重复字符的子字符串 49. 丑数 50. 第一个只出现一次的字符位置 51. 数组中的逆序对 52. 两个链表的第一个公共结点 第六章 面试中的各项能力 53 数字在排序数组中出现的次数 54. 二叉搜索树的第 k 个结点 55 二叉树的深度 56. 数组中只出现一次的数字 57.1 和为 S 的两个数字 57.2 和为 S 的连续正数序列 58.1 翻转单词顺序列 58.2 左旋转字符串 59. 滑动窗口的最大值 60. n 个骰子的点数 61. 扑克牌顺子 62. 圆圈中最后剩下的数 63. 股票的最大利润 64. 求 1+2+3+…+n 65. 不用加减乘除做加法 66. 构建乘积数组 第七章 两个面试案例 67. 把字符串转换成整数 68. 树中两个节点的最低公共祖先 第二章 面试需要的基础知识2. 实现 Singleton 单例模式 3. 数组中重复的数字 题目描述 在一个长度为 n 的数组里的所有数字都在 0 到 n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。例如，如果输入长度为 7 的数组 {2, 3, 1, 0, 2, 5, 3}，那么对应的输出是第一个重复的数字 2。 解题思路 这种数组元素在 [0, n-1] 范围内的问题，可以将值为 i 的元素放到第 i 个位置上。 12345678910111213141516171819public boolean duplicate(int[] numbers, int length, int[] duplication) &#123; if(numbers == null || length &lt;= 0) return false; for (int i = 0; i &lt; length; i++) &#123; while (numbers[i] != i &amp;&amp; numbers[i] != numbers[numbers[i]]) &#123; swap(numbers, i, numbers[i]); &#125; if (numbers[i] != i &amp;&amp; numbers[i] == numbers[numbers[i]]) &#123; duplication[0] = numbers[i]; return true; &#125; &#125; return false;&#125;private void swap(int[] numbers, int i, int j) &#123; int t = numbers[i]; numbers[i] = numbers[j]; numbers[j] = t;&#125; 4. 二维数组中的查找题目描述 在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 解题思路 从右上角开始查找。因为矩阵中的一个数，它左边的数都比它来的小，下边的数都比它来的大。因此，从右上角开始查找，就可以根据 target 和当前元素的大小关系来改变行和列的下标，从而缩小查找区间。 1234567891011public boolean Find(int target, int [][] array) &#123; if (array == null || array.length == 0 || array[0].length == 0) return false; int m = array.length, n = array[0].length; int row = 0, col = n - 1; while (row &lt; m &amp;&amp; col &gt;= 0) &#123; if (target == array[row][col]) return true; else if (target &lt; array[row][col]) col--; else row++; &#125; return false;&#125; 5. 替换空格题目描述 请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为 We Are Happy. 则经过替换之后的字符串为 We%20Are%20Happy。 题目要求 以 O(1) 的空间复杂度和 O(n) 的空间复杂度来求解。 解题思路 从后向前改变字符串。 1234567891011121314151617181920public String replaceSpace(StringBuffer str) &#123; int n = str.length(); for (int i = 0; i &lt; n; i++) &#123; if (str.charAt(i) == ' ') str.append(\" \"); // 尾部填充两个 &#125; int idxOfOriginal = n - 1; int idxOfNew = str.length() - 1; while (idxOfOriginal &gt;= 0 &amp;&amp; idxOfNew &gt; idxOfOriginal) &#123; if (str.charAt(idxOfOriginal) == ' ') &#123; str.setCharAt(idxOfNew--, '0'); str.setCharAt(idxOfNew--, '2'); str.setCharAt(idxOfNew--, '%'); &#125; else &#123; str.setCharAt(idxOfNew--, str.charAt(idxOfOriginal)); &#125; idxOfOriginal--; &#125; return str.toString();&#125; 6. 从尾到头打印链表正向遍历然后调用 Collections.reverse()。 123456789public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) &#123; ArrayList&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); while (listNode != null) &#123; ret.add(listNode.val); listNode = listNode.next; &#125; Collections.reverse(ret); return ret;&#125; 使用 Stack 123456789101112public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) &#123; Stack&lt;Integer&gt; stack = new Stack&lt;&gt;(); while (listNode != null) &#123; stack.add(listNode.val); listNode = listNode.next; &#125; ArrayList&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); while (!stack.isEmpty()) &#123; ret.add(stack.pop()); &#125; return ret;&#125; 递归 12345678public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) &#123; ArrayList&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); if(listNode != null) &#123; ret.addAll(printListFromTailToHead(listNode.next)); ret.add(listNode.val); &#125; return ret;&#125; 不使用库函数，并且不使用递归的迭代实现，利用链表的头插法为逆序的特性。 1234567891011121314151617public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) &#123; ListNode head = new ListNode(-1); // 头结点 ListNode cur = listNode; while (cur != null) &#123; ListNode next = cur.next; cur.next = head.next; head.next = cur; cur = next; &#125; ArrayList&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); head = head.next; while (head != null) &#123; ret.add(head.val); head = head.next; &#125; return ret;&#125; 7. 重建二叉树题目描述 根据二叉树的前序遍历和中序遍历的结果，重建出该二叉树。 123456789101112131415public TreeNode reConstructBinaryTree(int[] pre, int[] in) &#123; return reConstructBinaryTree(pre, 0, pre.length - 1, in, 0, in.length - 1);&#125;private TreeNode reConstructBinaryTree(int[] pre, int preL, int preR, int[] in, int inL, int inR) &#123; if (preL == preR) return new TreeNode(pre[preL]); if (preL &gt; preR || inL &gt; inR) return null; TreeNode root = new TreeNode(pre[preL]); int midIdx = inL; while (midIdx &lt;= inR &amp;&amp; in[midIdx] != root.val) midIdx++; int leftTreeSize = midIdx - inL; root.left = reConstructBinaryTree(pre, preL + 1, preL + leftTreeSize, in, inL, inL + leftTreeSize - 1); root.right = reConstructBinaryTree(pre, preL + leftTreeSize + 1, preR, in, inL + leftTreeSize + 1, inR); return root;&#125; 8. 二叉树的下一个结点题目描述 给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。 解题思路 如果一个节点有右子树不为空，那么该节点的下一个节点是右子树的最左节点； 否则，向上找第一个左链接指向的树包含该节点的祖先节点。 12345678910111213141516public TreeLinkNode GetNext(TreeLinkNode pNode) &#123; if (pNode == null) return null; if (pNode.right != null) &#123; pNode = pNode.right; while (pNode.left != null) pNode = pNode.left; return pNode; &#125; else &#123; TreeLinkNode parent = pNode.next; while (parent != null) &#123; if (parent.left == pNode) return parent; pNode = pNode.next; parent = pNode.next; &#125; &#125; return null;&#125; 9. 用两个栈实现队列解题思路 添加到栈中的序列顺序会被反转，如果进行两次反转，那么得到的序列依然是正向的。因此，添加的数据需要同时压入两个栈之后才能出栈，这样就能保证出栈的顺序为先进先出。 123456789101112131415Stack&lt;Integer&gt; stack1 = new Stack&lt;Integer&gt;();Stack&lt;Integer&gt; stack2 = new Stack&lt;Integer&gt;();public void push(int node) &#123; stack1.push(node);&#125;public int pop() &#123; if (stack2.isEmpty()) &#123; while (!stack1.isEmpty()) &#123; stack2.push(stack1.pop()); &#125; &#125; return stack2.pop();&#125; 10.1 斐波那契数列12345678910111213private int[] fib = new int[40];public Solution() &#123; fib[1] = 1; fib[2] = 2; for (int i = 2; i &lt; fib.length; i++) &#123; fib[i] = fib[i - 1] + fib[i - 2]; &#125;&#125;public int Fibonacci(int n) &#123; return fib[n];&#125; 10.2 跳台阶12345678910public int JumpFloor(int target) &#123; if (target == 1) return 1; int[] dp = new int[target]; dp[0] = 1; dp[1] = 2; for (int i = 2; i &lt; dp.length; i++) &#123; dp[i] = dp[i - 1] + dp[i - 2]; &#125; return dp[target - 1];&#125; 10.3 变态跳台阶12345678910public int JumpFloorII(int target) &#123; int[] dp = new int[target]; Arrays.fill(dp, 1); for (int i = 1; i &lt; target; i++) &#123; for (int j = 0; j &lt; i; j++) &#123; dp[i] += dp[j]; &#125; &#125; return dp[target - 1];&#125; 10.4 矩形覆盖题目描述 我们可以用 2*1 的小矩形横着或者竖着去覆盖更大的矩形。请问用 n 个 2*1 的小矩形无重叠地覆盖一个 2*n 的大矩形，总共有多少种方法？ 1234public int RectCover(int target) &#123; if (target &lt;= 2) return target; return RectCover(target - 1) + RectCover(target - 2);&#125; 11. 旋转数组的最小数字题目描述 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。例如数组 {3, 4, 5, 1, 2} 为 {1, 2, 3, 4, 5} 的一个旋转，该数组的最小值为 1。NOTE：给出的所有元素都大于 0，若数组大小为 0，请返回 0。 O(N) 时间复杂度解法： 1234567public int minNumberInRotateArray(int[] array) &#123; if (array.length == 0) return 0; for (int i = 0; i &lt; array.length - 1; i++) &#123; if (array[i] &gt; array[i + 1]) return array[i + 1]; &#125; return 0;&#125; O(lgN) 时间复杂度解法： 123456789101112public int minNumberInRotateArray(int[] array) &#123; if (array.length == 0) return 0; int l = 0, r = array.length - 1; int mid = -1; while (array[l] &gt;= array[r]) &#123; if (r - l == 1) return array[r]; mid = l + (r - l) / 2; if (array[mid] &gt;= array[l]) l = mid; else if (array[mid] &lt;= array[r]) r = mid; &#125; return array[mid];&#125; 12. 矩阵中的路径题目描述 请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。例如 a b c e s f c s a d e e 矩阵中包含一条字符串 “bcced” 的路径，但是矩阵中不包含 “abcb” 路径，因为字符串的第一个字符 b 占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。 123456789101112131415161718192021222324252627282930313233343536private int[][] next = &#123;&#123;0, -1&#125;, &#123;0, 1&#125;, &#123;-1, 0&#125;, &#123;1, 0&#125;&#125;;private int rows;private int cols;public boolean hasPath(char[] matrix, int rows, int cols, char[] str) &#123; if (rows == 0 || cols == 0) return false; this.rows = rows; this.cols = cols; // 一维数组重建二维矩阵 char[][] newMatrix = new char[rows][cols]; for (int i = 0, idx = 0; i &lt; rows; i++) &#123; for (int j = 0; j &lt; cols; j++) &#123; newMatrix[i][j] = matrix[idx++]; &#125; &#125; for (int i = 0; i &lt; rows; i++) &#123; for (int j = 0; j &lt; cols; j++) &#123; if (backtracking(newMatrix, str, new boolean[rows][cols], 0, i, j)) return true; &#125; &#125; return false;&#125;private boolean backtracking(char[][] matrix, char[] str, boolean[][] used, int pathLen, int curR, int curC) &#123; if (pathLen == str.length) return true; if (curR &lt; 0 || curR &gt;= rows || curC &lt; 0 || curC &gt;= cols) return false; if (matrix[curR][curC] != str[pathLen]) return false; if (used[curR][curC]) return false; used[curR][curC] = true; for (int i = 0; i &lt; next.length; i++) &#123; if (backtracking(matrix, str, used, pathLen + 1, curR + next[i][0], curC + next[i][1])) return true; &#125; used[curR][curC] = false; return false;&#125; 13. 机器人的运动范围题目描述 地上有一个 m 行和 n 列的方格。一个机器人从坐标 (0, 0) 的格子开始移动，每一次只能向左右上下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于 k 的格子。例如，当 k 为 18 时，机器人能够进入方格（35, 37），因为 3+5+3+7=18。但是，它不能进入方格（35, 38），因为 3+5+3+8=19。请问该机器人能够达到多少个格子？ 12345678910111213141516171819202122232425262728293031323334353637private int cnt = 0;private int[][] next = &#123;&#123;0, -1&#125;, &#123;0, 1&#125;, &#123;-1, 0&#125;, &#123;1, 0&#125;&#125;;private int[][] digitSum;public int movingCount(int threshold, int rows, int cols) &#123; initDigitSum(rows, cols); dfs(new boolean[rows][cols], threshold, rows, cols, 0, 0); return cnt;&#125;private void dfs(boolean[][] visited, int threshold, int rows, int cols, int r, int c) &#123; if (r &lt; 0 || r &gt;= rows || c &lt; 0 || c &gt;= cols) return; if (visited[r][c]) return; visited[r][c] = true; if (this.digitSum[r][c] &gt; threshold) return; this.cnt++; for (int i = 0; i &lt; this.next.length; i++) &#123; dfs(visited, threshold, rows, cols, r + next[i][0], c + next[i][1]); &#125;&#125;private void initDigitSum(int rows, int cols) &#123; int[] digitSumOne = new int[Math.max(rows, cols)]; for (int i = 0; i &lt; digitSumOne.length; i++) &#123; int n = i; while (n &gt; 0) &#123; digitSumOne[i] += n % 10; n /= 10; &#125; &#125; this.digitSum = new int[rows][cols]; for (int i = 0; i &lt; rows; i++) &#123; for (int j = 0; j &lt; cols; j++) &#123; this.digitSum[i][j] = digitSumOne[i] + digitSumOne[j]; &#125; &#125;&#125; 14. 剪绳子题目描述 把一根绳子剪成多段，并且使得每段的长度乘积最大。 动态规划解法 分割整数 贪心解法 尽可能多得剪长度为 3 的绳子，并且不允许有长度为 1 的绳子出现，如果出现了，就从已经切好长度为 3 的绳子中拿出一段与长度为 1 的绳子重新组合，把它们切成两段长度为 2 的绳子。 123456789int maxProductAfterCuttin(int length) &#123; if (length &lt; 2) return 0; if (length == 2) return 1; if (length == 3) return 2; int timesOf3 = length / 3; if (length - timesOf3 * 3 == 1) timesOf3--; int timesOf2 = (length - timesOf3 * 3) / 2; return (int) (Math.pow(3, timesOf3)) * (int) (Math.pow(2, timesOf2));&#125; 15. 二进制中 1 的个数使用库函数： 123public int NumberOf1(int n) &#123; return Integer.bitCount(n);&#125; O(lgM) 时间复杂度解法，其中 M 表示 1 的个数： n&amp;(n-1) 该位运算是去除 n 的位级表示中最低的那一位。例如对于二进制表示 10110100，减去 1 得到 10110011，这两个数相与得到 10110000。 12345678public int NumberOf1(int n) &#123; int cnt = 0; while (n != 0) &#123; cnt++; n &amp;= (n - 1); &#125; return cnt;&#125; 第三章 高质量的代码16. 数值的整数次方123456789101112public double Power(double base, int exponent) &#123; if (exponent == 0) return 1; if (exponent == 1) return base; boolean isNegative = false; if (exponent &lt; 0) &#123; exponent = -exponent; isNegative = true; &#125; double pow = Power(base * base, exponent / 2); if (exponent % 2 != 0) pow = pow * base; return isNegative ? 1 / pow : pow;&#125; 17. 打印从 1 到最大的 n 位数12345678910111213141516171819202122232425public void print1ToMaxOfNDigits(int n) &#123; if (n &lt; 0) return; char[] number = new char[n]; print1ToMaxOfNDigits(number, -1);&#125;private void print1ToMaxOfNDigits(char[] number, int idx) &#123; if (idx == number.length - 1) &#123; printNumber(number); return; &#125; for (int i = 0; i &lt; 10; i++) &#123; number[idx + 1] = (char) (i + '0'); print1ToMaxOfNDigits(number, idx + 1); &#125;&#125;private void printNumber(char[] number) &#123; boolean isBeginWith0 = true; for (char c : number) &#123; if (isBeginWith0 &amp;&amp; c != '0') isBeginWith0 = false; if(!isBeginWith0) System.out.print(c); &#125; System.out.println();&#125; 18.1 在 O(1) 时间内删除链表节点1234567891011121314public ListNode deleteNode(ListNode head, ListNode tobeDelete) &#123; if (head == null || head.next == null || tobeDelete == null) return null; if (tobeDelete.next != null) &#123; // 要删除的节点不是尾节点 ListNode next = tobeDelete.next; tobeDelete.val = next.val; tobeDelete.next = next.next; &#125; else &#123; ListNode cur = head; while (cur.next != tobeDelete) cur = cur.next; cur.next = null; &#125; return head;&#125; 18.2 删除链表中重复的结点1234567891011121314public ListNode deleteDuplication(ListNode pHead) &#123; if (pHead == null) return null; if (pHead.next == null) return pHead; if (pHead.val == pHead.next.val) &#123; ListNode next = pHead.next; while (next != null &amp;&amp; pHead.val == next.val) &#123; next = next.next; &#125; return deleteDuplication(next); &#125; else &#123; pHead.next = deleteDuplication(pHead.next); return pHead; &#125;&#125; 19. 正则表达式匹配题目描述 请实现一个函数用来匹配包括 ‘.’ 和 ‘*‘ 的正则表达式。模式中的字符 ‘.’ 表示任意一个字符，而 ‘*‘ 表示它前面的字符可以出现任意次（包含 0 次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串 “aaa” 与模式 “a.a” 和 “ab*ac*a” 匹配，但是与 “aa.a” 和 “ab*a” 均不匹配 123456789101112131415161718public boolean match(char[] str, char[] pattern) &#123; int n = str.length, m = pattern.length; boolean[][] dp = new boolean[n + 1][m + 1]; dp[0][0] = true; for (int i = 1; i &lt;= m; i++) &#123; if (pattern[i - 1] == '*') dp[0][i] = dp[0][i - 2]; &#125; for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= m; j++) &#123; if (str[i - 1] == pattern[j - 1] || pattern[j - 1] == '.') dp[i][j] = dp[i - 1][j - 1]; else if (pattern[j - 1] == '*') &#123; if (pattern[j - 2] != str[i - 1] &amp;&amp; pattern[j - 2] != '.') dp[i][j] = dp[i][j - 2]; else dp[i][j] = dp[i][j - 1] || dp[i][j - 2] || dp[i - 1][j]; &#125; &#125; &#125; return dp[n][m];&#125; 20. 表示数值的字符串题目描述 请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串 “+100”,”5e2”,”-123”,”3.1416” 和 “-1E-16” 都表示数值。 但是 “12e”,”1a3.14”,”1.2.3”,”+-5” 和 “12e+4.3” 都不是。 1234public boolean isNumeric(char[] str) &#123; String string = String.valueOf(str); return string.matches(\"[\\\\+-]?[0-9]*(\\\\.[0-9]*)?([eE][\\\\+-]?[0-9]+)?\");&#125; 21. 调整数组顺序使奇数位于偶数前面题目要求 保证奇数和奇数，偶数和偶数之间的相对位置不变，这和书本不太一样。 时间复杂度 : O(n2)空间复杂度 : O(1) 123456789101112131415public void reOrderArray(int[] array) &#123; int n = array.length; for (int i = 0; i &lt; n; i++) &#123; if (array[i] % 2 == 0) &#123; int nextOddIdx = i + 1; while (nextOddIdx &lt; n &amp;&amp; array[nextOddIdx] % 2 == 0) nextOddIdx++; if (nextOddIdx == n) break; int nextOddVal = array[nextOddIdx]; for (int j = nextOddIdx; j &gt; i; j--) &#123; array[j] = array[j - 1]; &#125; array[i] = nextOddVal; &#125; &#125;&#125; 时间复杂度 : O(n)空间复杂度 : O(n) 12345678910public void reOrderArray(int[] array) &#123; int oddCnt = 0; for (int num : array) if (num % 2 == 1) oddCnt++; int[] copy = array.clone(); int i = 0, j = oddCnt; for (int num : copy) &#123; if (num % 2 == 1) array[i++] = num; else array[j++] = num; &#125;&#125; 22. 链表中倒数第 k 个结点123456789101112public ListNode FindKthToTail(ListNode head, int k) &#123; if (head == null) return null; ListNode fast, slow; fast = slow = head; while (fast != null &amp;&amp; k-- &gt; 0) fast = fast.next; if (k &gt; 0) return null; while (fast != null) &#123; fast = fast.next; slow = slow.next; &#125; return slow;&#125; 23. 链表中环的入口结点1234567891011121314151617public ListNode EntryNodeOfLoop(ListNode pHead) &#123; if (pHead == null) return null; ListNode slow = pHead, fast = pHead; while (fast != null &amp;&amp; fast.next != null) &#123; fast = fast.next.next; slow = slow.next; if (slow == fast) &#123; fast = pHead; while (slow != fast) &#123; slow = slow.next; fast = fast.next; &#125; return slow; &#125; &#125; return null;&#125; 24. 反转链表12345678910public ListNode ReverseList(ListNode head) &#123; ListNode newList = new ListNode(-1); while (head != null) &#123; ListNode next = head.next; head.next = newList.next; newList.next = head; head = next; &#125; return newList.next;&#125; 25. 合并两个排序的链表1234567891011121314151617public ListNode Merge(ListNode list1, ListNode list2) &#123; ListNode head = new ListNode(-1); ListNode cur = head; while (list1 != null &amp;&amp; list2 != null) &#123; if (list1.val &lt; list2.val) &#123; cur.next = list1; list1 = list1.next; &#125; else &#123; cur.next = list2; list2 = list2.next; &#125; cur = cur.next; &#125; if (list1 != null) cur.next = list1; if (list2 != null) cur.next = list2; return head.next;&#125; 26. 树的子结构123456789101112public boolean HasSubtree(TreeNode root1, TreeNode root2) &#123; if (root1 == null || root2 == null) return false; return isSubtree(root1, root2) || HasSubtree(root1.left, root2) || HasSubtree(root1.right, root2);&#125;private boolean isSubtree(TreeNode root1, TreeNode root2) &#123; if (root1 == null &amp;&amp; root2 == null) return true; if (root1 == null) return false; if (root2 == null) return true; if (root1.val != root2.val) return false; return isSubtree(root1.left, root2.left) &amp;&amp; isSubtree(root1.right, root2.right);&#125; 第四章 解决面试题的思路27. 二叉树的镜像12345678public void Mirror(TreeNode root) &#123; if (root == null) return; TreeNode t = root.left; root.left = root.right; root.right = t; Mirror(root.left); Mirror(root.right);&#125; 28.1 对称的二叉树1234567891011boolean isSymmetrical(TreeNode pRoot) &#123; if (pRoot == null) return true; return isSymmetrical(pRoot.left, pRoot.right);&#125;boolean isSymmetrical(TreeNode t1, TreeNode t2) &#123; if (t1 == null &amp;&amp; t2 == null) return true; if (t1 == null || t2 == null) return false; if (t1.val != t2.val) return false; return isSymmetrical(t1.left, t2.right) &amp;&amp; isSymmetrical(t1.right, t2.left);&#125; 28.2 平衡二叉树1234567891011121314private boolean isBalanced = true;public boolean IsBalanced_Solution(TreeNode root) &#123; height(root); return isBalanced;&#125;private int height(TreeNode root) &#123; if (root == null) return 0; int left = height(root.left); int right = height(root.right); if (Math.abs(left - right) &gt; 1) isBalanced = false; return 1 + Math.max(left, right);&#125; 29. 顺时针打印矩阵123456789101112public ArrayList&lt;Integer&gt; printMatrix(int[][] matrix) &#123; ArrayList&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); int r1 = 0, r2 = matrix.length - 1, c1 = 0, c2 = matrix[0].length - 1; while (r1 &lt;= r2 &amp;&amp; c1 &lt;= c2) &#123; for (int i = c1; i &lt;= c2; i++) ret.add(matrix[r1][i]); for (int i = r1 + 1; i &lt;= r2; i++) ret.add(matrix[i][c2]); if (r1 != r2) for (int i = c2 - 1; i &gt;= c1; i--) ret.add(matrix[r2][i]); if (c1 != c2) for (int i = r2 - 1; i &gt; r1; i--) ret.add(matrix[i][c1]); r1++; r2--; c1++; c2--; &#125; return ret;&#125; 30. 包含 min 函数的栈1234567891011121314151617181920212223private Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();private Stack&lt;Integer&gt; minStack = new Stack&lt;&gt;();private int min = Integer.MAX_VALUE;public void push(int node) &#123; stack.push(node); if (min &gt; node) min = node; minStack.push(min);&#125;public void pop() &#123; stack.pop(); minStack.pop(); min = minStack.peek();&#125;public int top() &#123; return stack.peek();&#125;public int min() &#123; return minStack.peek();&#125; 31. 栈的压入、弹出序列123456789101112public boolean IsPopOrder(int[] pushA, int[] popA) &#123; int n = pushA.length; Stack&lt;Integer&gt; stack = new Stack&lt;&gt;(); for (int i = 0, j = 0; i &lt; n; i++) &#123; stack.push(pushA[i]); while (j &lt; n &amp;&amp; stack.peek() == popA[j]) &#123; stack.pop(); j++; &#125; &#125; return stack.isEmpty();&#125; 32.1 从上往下打印二叉树12345678910111213141516public ArrayList&lt;Integer&gt; PrintFromTopToBottom(TreeNode root) &#123; Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); ArrayList&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); if (root == null) return ret; queue.add(root); while (!queue.isEmpty()) &#123; int cnt = queue.size(); for (int i = 0; i &lt; cnt; i++) &#123; TreeNode t = queue.poll(); if (t.left != null) queue.add(t.left); if (t.right != null) queue.add(t.right); ret.add(t.val); &#125; &#125; return ret;&#125; 32.3 把二叉树打印成多行123456789101112131415161718ArrayList&lt;ArrayList&lt;Integer&gt;&gt; Print(TreeNode pRoot) &#123; ArrayList&lt;ArrayList&lt;Integer&gt;&gt; ret = new ArrayList&lt;&gt;(); if (pRoot == null) return ret; Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); queue.add(pRoot); while (!queue.isEmpty()) &#123; int cnt = queue.size(); ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; cnt; i++) &#123; TreeNode node = queue.poll(); list.add(node.val); if (node.left != null) queue.add(node.left); if (node.right != null) queue.add(node.right); &#125; ret.add(list); &#125; return ret;&#125; 32.3 按之字形顺序打印二叉树12345678910111213141516171819202122232425public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; Print(TreeNode pRoot) &#123; ArrayList&lt;ArrayList&lt;Integer&gt;&gt; ret = new ArrayList&lt;&gt;(); if (pRoot == null) return ret; Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); queue.add(pRoot); boolean reverse = false; while (!queue.isEmpty()) &#123; int cnt = queue.size(); ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; cnt; i++) &#123; TreeNode node = queue.poll(); list.add(node.val); if (node.left != null) queue.add(node.left); if (node.right != null) queue.add(node.right); &#125; if (reverse) &#123; Collections.reverse(list); reverse = false; &#125; else &#123; reverse = true; &#125; ret.add(list); &#125; return ret;&#125; 33. 二叉搜索树的后序遍历序列123456789101112131415161718public boolean VerifySquenceOfBST(int[] sequence) &#123; if (sequence.length == 0) return false; return verify(sequence, 0, sequence.length - 1);&#125;private boolean verify(int[] sequence, int start, int end) &#123; if (end - start &lt;= 1) return true; int rootVal = sequence[end]; int cutIdx = start; while (cutIdx &lt; end) &#123; if (sequence[cutIdx] &gt; rootVal) break; cutIdx++; &#125; for (int i = cutIdx + 1; i &lt; end; i++) &#123; if (sequence[i] &lt; rootVal) return false; &#125; return verify(sequence, start, cutIdx - 1) &amp;&amp; verify(sequence, cutIdx, end - 1);&#125; 34. 二叉树中和为某一值的路径12345678910111213141516171819private ArrayList&lt;ArrayList&lt;Integer&gt;&gt; ret = new ArrayList&lt;&gt;();public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindPath(TreeNode root, int target) &#123; dfs(root, target, 0, new ArrayList&lt;&gt;()); return ret;&#125;private void dfs(TreeNode node, int target, int curSum, ArrayList&lt;Integer&gt; path) &#123; if (node == null) return; curSum += node.val; path.add(node.val); if (curSum == target &amp;&amp; node.left == null &amp;&amp; node.right == null) &#123; ret.add(new ArrayList(path)); &#125; else &#123; dfs(node.left, target, curSum, path); dfs(node.right, target, curSum, path); &#125; path.remove(path.size() - 1);&#125; 35. 复杂链表的复制题目描述 输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的 head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空） 第一步，在每个节点的后面插入复制的节点。 第二步，对复制节点的 random 链接进行赋值。 第三步，拆分。 1234567891011121314151617181920212223242526272829public RandomListNode Clone(RandomListNode pHead) &#123; if (pHead == null) return null; // 插入新节点 RandomListNode cur = pHead; while (cur != null) &#123; RandomListNode node = new RandomListNode(cur.label); node.next = cur.next; cur.next = node; cur = node.next; &#125; // 建立 random 链接 cur = pHead; while (cur != null) &#123; RandomListNode clone = cur.next; if (cur.random != null) &#123; clone.random = cur.random.next; &#125; cur = clone.next; &#125; // 拆分 RandomListNode pCloneHead = pHead.next; cur = pHead; while (cur.next != null) &#123; RandomListNode t = cur.next; cur.next = t.next; cur = t; &#125; return pCloneHead;&#125; 36. 二叉搜索树与双向链表题目描述 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。 12345678910111213141516private TreeNode pre = null;public TreeNode Convert(TreeNode pRootOfTree) &#123; if(pRootOfTree == null) return null; inOrder(pRootOfTree); while(pRootOfTree.left != null) pRootOfTree = pRootOfTree.left; return pRootOfTree;&#125;private void inOrder(TreeNode node) &#123; if(node == null) return; inOrder(node.left); node.left = pre; if(pre != null) pre.right = node; pre = node; inOrder(node.right);&#125; 37. 序列化二叉树12345678910111213141516171819202122232425262728private String serizeString = \"\";String Serialize(TreeNode root) &#123; if (root == null) return \"#\"; return root.val + \" \" + Serialize(root.left) + \" \" + Serialize(root.right);&#125;TreeNode Deserialize(String str) &#123; this.serizeString = str; return Deserialize();&#125;private TreeNode Deserialize() &#123; if (this.serizeString.length() == 0) return null; int idx = this.serizeString.indexOf(\" \"); if (idx == -1) return null; String sub = this.serizeString.substring(0, idx); this.serizeString = this.serizeString.substring(idx + 1); if (sub.equals(\"#\")) &#123; return null; &#125; int val = Integer.valueOf(sub); TreeNode t = new TreeNode(val); t.left = Deserialize(); t.right = Deserialize(); return t;&#125; 38. 字符串的排列题目描述 输入一个字符串 , 按字典序打印出该字符串中字符的所有排列。例如输入字符串 abc, 则打印出由字符 a, b, c 所能排列出来的所有字符串 abc, acb, bac, bca, cab 和 cba。 1234567891011121314151617181920212223private ArrayList&lt;String&gt; ret = new ArrayList&lt;&gt;();public ArrayList&lt;String&gt; Permutation(String str) &#123; if (str.length() == 0) return new ArrayList&lt;&gt;(); char[] chars = str.toCharArray(); Arrays.sort(chars); backtracking(chars, new boolean[chars.length], \"\"); return ret;&#125;private void backtracking(char[] chars, boolean[] used, String s) &#123; if (s.length() == chars.length) &#123; ret.add(s); return; &#125; for (int i = 0; i &lt; chars.length; i++) &#123; if (used[i]) continue; if (i != 0 &amp;&amp; chars[i] == chars[i - 1] &amp;&amp; !used[i - 1]) continue; // 保证不重复 used[i] = true; backtracking(chars, used, s + chars[i]); used[i] = false; &#125;&#125; 第五章 优化时间和空间效率39. 数组中出现次数超过一半的数字12345678910111213141516public int MoreThanHalfNum_Solution(int[] array) &#123; int cnt = 1, num = array[0]; for (int i = 1; i &lt; array.length; i++) &#123; if (array[i] == num) cnt++; else cnt--; if (cnt == 0) &#123; num = array[i]; cnt = 1; &#125; &#125; cnt = 0; for (int i = 0; i &lt; array.length; i++) &#123; if (num == array[i]) cnt++; &#125; return cnt &gt; array.length / 2 ? num : 0;&#125; 40. 最小的 K 个数构建大小为 k 的小顶堆。 时间复杂度：O(nlgk)空间复杂度：O(k) 123456789101112public ArrayList&lt;Integer&gt; GetLeastNumbers_Solution(int[] input, int k) &#123; if (k &gt; input.length || k &lt;= 0) return new ArrayList&lt;&gt;(); PriorityQueue&lt;Integer&gt; pq = new PriorityQueue&lt;&gt;((o1, o2) -&gt; o2 - o1); for (int num : input) &#123; pq.add(num); if (pq.size() &gt; k) &#123; pq.poll(); &#125; &#125; ArrayList&lt;Integer&gt; ret = new ArrayList&lt;&gt;(pq); return ret;&#125; 利用快速选择 时间复杂度：O(n)空间复杂度：O(1) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public ArrayList&lt;Integer&gt; GetLeastNumbers_Solution(int[] input, int k) &#123; if (k &gt; input.length || k &lt;= 0) return new ArrayList&lt;&gt;(); int kthSmallest = findKthSmallest(input, k - 1); ArrayList&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); for (int num : input) &#123; if(num &lt;= kthSmallest &amp;&amp; ret.size() &lt; k) ret.add(num); &#125; return ret;&#125;public int findKthSmallest(int[] nums, int k) &#123; int lo = 0; int hi = nums.length - 1; while (lo &lt; hi) &#123; int j = partition(nums, lo, hi); if (j &lt; k) &#123; lo = j + 1; &#125; else if (j &gt; k) &#123; hi = j - 1; &#125; else &#123; break; &#125; &#125; return nums[k];&#125;private int partition(int[] a, int lo, int hi) &#123; int i = lo; int j = hi + 1; while (true) &#123; while (i &lt; hi &amp;&amp; less(a[++i], a[lo])) ; while (j &gt; lo &amp;&amp; less(a[lo], a[--j])) ; if (i &gt;= j) &#123; break; &#125; exch(a, i, j); &#125; exch(a, lo, j); return j;&#125;private void exch(int[] a, int i, int j) &#123; final int tmp = a[i]; a[i] = a[j]; a[j] = tmp;&#125;private boolean less(int v, int w) &#123; return v &lt; w;&#125; 41.1 数据流中的中位数题目描述 如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。 123456789101112131415161718192021222324private PriorityQueue&lt;Integer&gt; maxHeap = new PriorityQueue&lt;&gt;((o1, o2) -&gt; o2-o1); // 实现左边部分private PriorityQueue&lt;Integer&gt; minHeep = new PriorityQueue&lt;&gt;(); // 实现右边部分，右边部分所有元素大于左边部分private int cnt = 0;public void Insert(Integer num) &#123; // 插入要保证两个堆存于平衡状态 if(cnt % 2 == 0) &#123; // 为偶数的情况下插入到最小堆，先经过最大堆筛选，这样就能保证最大堆中的元素都小于最小堆中的元素 maxHeap.add(num); minHeep.add(maxHeap.poll()); &#125; else &#123; minHeep.add(num); maxHeap.add(minHeep.poll()); &#125; cnt++;&#125;public Double GetMedian() &#123; if(cnt % 2 == 0) &#123; return (maxHeap.peek() + minHeep.peek()) / 2.0; &#125; else &#123; return (double) minHeep.peek(); &#125;&#125; 41.2 字符流中第一个不重复的字符题目描述 请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符 “go” 时，第一个只出现一次的字符是 “g”。当从该字符流中读出前六个字符“google” 时，第一个只出现一次的字符是 “l”。 1234567891011121314151617//Insert one char from stringstreamprivate int[] cnts = new int[256];private Queue&lt;Character&gt; queue = new LinkedList&lt;&gt;();public void Insert(char ch) &#123; cnts[ch]++; queue.add(ch); while (!queue.isEmpty() &amp;&amp; cnts[queue.peek()] &gt; 1) &#123; queue.poll(); &#125;&#125;//return the first appearence once char in current stringstreampublic char FirstAppearingOnce() &#123; if (queue.isEmpty()) return '#'; return queue.peek();&#125; 42. 连续子数组的最大和1234567891011public int FindGreatestSumOfSubArray(int[] array) &#123; if(array.length == 0) return 0; int ret = Integer.MIN_VALUE; int sum = 0; for(int num : array) &#123; if(sum &lt;= 0) sum = num; else sum += num; ret = Math.max(ret, sum); &#125; return ret;&#125; 43. 从 1 到 n 整数中 1 出现的次数解题参考：Leetcode : 233. Number of Digit One-C++JavaPython) 12345678public int NumberOf1Between1AndN_Solution(int n) &#123; int cnt = 0; for (int m = 1; m &lt;= n; m *= 10) &#123; int a = n / m, b = n % m; cnt += (a + 8) / 10 * m + (a % 10 == 1 ? b + 1 : 0); &#125; return cnt;&#125; 44. 数字序列中的某一位数字题目描述 数字以 0123456789101112131415… 的格式序列化到一个字符串中，求这个字符串的第 index 位。 1234567891011121314151617181920212223242526272829303132int digitAtIndex(int index) &#123; if (index &lt; 0) return -1; int digit = 1; while (true) &#123; int amount = getAmountOfDigit(digit); int totalAmount = amount * digit; if (index &lt; totalAmount) return digitAtIndex(index, digit); index -= totalAmount; digit++; &#125;&#125;private int getAmountOfDigit(int digit) &#123; if (digit == 1) return 10; return (int) Math.pow(10, digit - 1);&#125;private int digitAtIndex(int index, int digits) &#123; int number = beginNumber(digits) + index / digits; int remain = index % digits; return (number + \"\").charAt(remain) - '0';&#125;private int beginNumber(int digits) &#123; if (digits == 1) return 0; return (int) Math.pow(10, digits - 1);&#125;public static void main(String[] args) &#123; Solution solution = new Solution(); System.out.println(solution.digitAtIndex(1001));&#125; 45. 把数组排成最小的数题目描述 输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组 {3，32，321}，则打印出这三个数字能排成的最小数字为 321323。 123456789public String PrintMinNumber(int[] numbers) &#123; int n = numbers.length; String[] nums = new String[n]; for (int i = 0; i &lt; n; i++) nums[i] = numbers[i] + \"\"; Arrays.sort(nums, (s1, s2) -&gt; (s1 + s2).compareTo(s2 + s1)); String ret = \"\"; for (String str : nums) ret += str; return ret;&#125; 46. 把数字翻译成字符串题目描述 给定一个数字，按照如下规则翻译成字符串：0 翻译成“a”，1 翻译成“b”…25 翻译成“z”。一个数字有多种翻译可能，例如 12258 一共有 5 种，分别是 bccfi，bwfi，bczi，mcfi，mzi。实现一个函数，用来计算一个数字有多少种不同的翻译方法。 12345678910111213public int getTranslationCount(String number) &#123; int n = number.length(); int[] counts = new int[n + 1]; counts[n - 1] = counts[n] = 1; for (int i = n - 2; i &gt;= 0; i--) &#123; counts[i] = counts[i + 1]; int converted = Integer.valueOf(number.substring(i, i + 2)); if (converted &gt;= 10 &amp;&amp; converted &lt;= 25) &#123; counts[i] += counts[i + 2]; &#125; &#125; return counts[0];&#125; 47. 礼物的最大价值题目描述 在一个 m * n 的棋盘的每一个格都放有一个礼物，每个礼物都有一定价值（大于 0）。从左上角开始拿礼物，每次向右或向下移动一格，直到右下角结束。给定一个棋盘，求拿到礼物的最大价值。例如，对于如下棋盘 12341 10 3 812 2 9 65 7 4 113 7 16 5 礼物的最大价值为 1+12+5+7+7+16+5=53。 解题思路 应该用动态规划求解，而不是深度优先搜索，深度优先搜索过于复杂，不是最优解。 12345678910111213public int getMaxValue(int[][] values) &#123; if (values == null || values.length == 0 || values[0].length == 0) return 0; int m = values.length; int n = values[0].length; int[] dp = new int[n]; for (int i = 0; i &lt; m; i++) &#123; dp[0] += values[i][0]; for (int j = 1; j &lt; n; j++) &#123; dp[j] = Math.max(dp[j], dp[j - 1]) + values[i][j]; &#125; &#125; return dp[n - 1];&#125; 48. 最长不含重复字符的子字符串题目描述 输入一个字符串（只包含 a~z 的字符），求其最长不含重复字符的子字符串的长度。例如对于 arabcacfr，最长不含重复字符的子字符串为 acfr，长度为 4。 1234567891011121314151617public int longestSubStringWithoutDuplication(String str) &#123; int curLen = 0; int maxLen = 0; int[] position = new int[26]; for (int i = 0; i &lt; str.length(); i++) &#123; int c = str.charAt(i) - 'a'; int preIndex = position[c]; if (preIndex == -1 || i - preIndex &gt; curLen) curLen++; else &#123; maxLen = Math.max(maxLen, curLen); curLen = i - preIndex; &#125; position[c] = i; &#125; maxLen = Math.max(maxLen, curLen); return maxLen;&#125; 49. 丑数题目描述 把只包含因子 2、3 和 5 的数称作丑数（Ugly Number）。例如 6、8 都是丑数，但 14 不是，因为它包含因子 7。 习惯上我们把 1 当做是第一个丑数。求按从小到大的顺序的第 N 个丑数。 12345678910111213141516public int GetUglyNumber_Solution(int index) &#123; if (index &lt;= 6) return index; int i2 = 0, i3 = 0, i5 = 0; int cnt = 1; int[] dp = new int[index]; dp[0] = 1; while (cnt &lt; index) &#123; int n2 = dp[i2] * 2, n3 = dp[i3] * 3, n5 = dp[i5] * 5; int tmp = Math.min(n2, Math.min(n3, n5)); dp[cnt++] = tmp; if (tmp == n2) i2++; if (tmp == n3) i3++; if (tmp == n5) i5++; &#125; return dp[index - 1];&#125; 50. 第一个只出现一次的字符位置123456public int FirstNotRepeatingChar(String str) &#123; int[] cnts = new int[256]; for (int i = 0; i &lt; str.length(); i++) cnts[str.charAt(i)]++; for (int i = 0; i &lt; str.length(); i++) if (cnts[str.charAt(i)] == 1) return i; return -1;&#125; 51. 数组中的逆序对123456789101112131415161718192021222324252627282930313233private long cnt = 0;public int InversePairs(int[] array) &#123; mergeSortUp2Down(array, 0, array.length - 1); return (int) (cnt % 1000000007);&#125;private void mergeSortUp2Down(int[] a, int start, int end) &#123; if (end - start &lt; 1) return; int mid = start + (end - start) / 2; mergeSortUp2Down(a, start, mid); mergeSortUp2Down(a, mid + 1, end); merge(a, start, mid, end);&#125;private void merge(int[] a, int start, int mid, int end) &#123; int[] tmp = new int[end - start + 1]; int i = start, j = mid + 1, k = 0; while (i &lt;= mid || j &lt;= end) &#123; if (i &gt; mid) tmp[k] = a[j++]; else if (j &gt; end) tmp[k] = a[i++]; else if (a[i] &lt; a[j]) tmp[k] = a[i++]; else &#123; tmp[k] = a[j++]; this.cnt += mid - i + 1; // a[i] &gt; a[j] ，说明 a[i...mid] 都大于 a[j] &#125; k++; &#125; for (k = 0; k &lt; tmp.length; k++) &#123; a[start + k] = tmp[k]; &#125;&#125; 52. 两个链表的第一个公共结点12345678910public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) &#123; ListNode l1 = pHead1, l2 = pHead2; while (l1 != l2) &#123; if (l1 == null) l1 = pHead2; else l1 = l1.next; if (l2 == null) l2 = pHead1; else l2 = l2.next; &#125; return l1;&#125; 第六章 面试中的各项能力53 数字在排序数组中出现的次数1234567891011public int GetNumberOfK(int[] array, int k) &#123; int l = 0, h = array.length - 1; while (l &lt;= h) &#123; int m = l + (h - l) / 2; if (array[m] &gt;= k) h = m - 1; else l = m + 1; &#125; int cnt = 0; while (l &lt; array.length &amp;&amp; array[l++] == k) cnt++; return cnt;&#125; 54. 二叉搜索树的第 k 个结点12345678910111213141516TreeNode ret;int cnt = 0;TreeNode KthNode(TreeNode pRoot, int k) &#123; inorder(pRoot, k); return ret;&#125;private void inorder(TreeNode root, int k) &#123; if (root == null) return; if (cnt &gt; k) return; inorder(root.left, k); cnt++; if (cnt == k) ret = root; inorder(root.right, k);&#125; 55 二叉树的深度1234public int TreeDepth(TreeNode root) &#123; if (root == null) return 0; return 1 + Math.max(TreeDepth(root.left), TreeDepth(root.right));&#125; 56. 数组中只出现一次的数字题目描述 一个整型数组里除了两个数字之外，其他的数字都出现了两次，找出这两个数。 解题思路 两个不相等的元素在位级表示上必定会有一位存在不同。 将数组的所有元素异或得到的结果为不存在重复的两个元素异或的结果。 diff &amp;= -diff 得到出 diff 最右侧不为 0 的位，也就是不存在重复的两个元素在位级表示上最右侧不同的那一位，利用这一位就可以将两个元素区分开来。 12345678910public void FindNumsAppearOnce(int[] array, int num1[], int num2[]) &#123; int diff = 0; for (int num : array) diff ^= num; // 得到最右一位 diff &amp;= -diff; for (int num : array) &#123; if ((num &amp; diff) == 0) num1[0] ^= num; else num2[0] ^= num; &#125;&#125; 57.1 和为 S 的两个数字题目描述 输入一个递增排序的数组和一个数字 S，在数组中查找两个数，是的他们的和正好是 S，如果有多对数字的和等于 S，输出两个数的乘积最小的。 12345678910public ArrayList&lt;Integer&gt; FindNumbersWithSum(int[] array, int sum) &#123; int i = 0, j = array.length - 1; while (i &lt; j) &#123; int cur = array[i] + array[j]; if (cur == sum) return new ArrayList&lt;Integer&gt;(Arrays.asList(array[i], array[j])); else if (cur &lt; sum) i++; else j--; &#125; return new ArrayList&lt;Integer&gt;();&#125; 57.2 和为 S 的连续正数序列题目描述 和为 100 的连续序列有 18, 19, 20, 21, 22 1234567891011121314151617181920212223242526public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindContinuousSequence(int sum) &#123; ArrayList&lt;ArrayList&lt;Integer&gt;&gt; ret = new ArrayList&lt;&gt;(); int start = 1, end = 2; int mid = sum / 2; int curSum = 3; while (start &lt;= mid &amp;&amp; end &lt; sum) &#123; if (curSum &gt; sum) &#123; curSum -= start; start++; &#125; else if (curSum &lt; sum) &#123; end++; curSum += end; &#125; else &#123; ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(); for (int i = start; i &lt;= end; i++) &#123; list.add(i); &#125; ret.add(list); curSum -= start; start++; end++; curSum += end; &#125; &#125; return ret;&#125; 58.1 翻转单词顺序列题目描述 输入：”I am a student.” 输出：”student. a am I” 12345678910111213141516171819202122232425public String ReverseSentence(String str) &#123; if (str.length() == 0) return str; int n = str.length(); char[] chars = str.toCharArray(); int start = 0, end = 0; while (end &lt;= n) &#123; if (end == n || chars[end] == ' ') &#123; reverse(chars, start, end - 1); start = end + 1; &#125; end++; &#125; reverse(chars, 0, n - 1); return new String(chars);&#125;private void reverse(char[] c, int start, int end) &#123; while (start &lt; end) &#123; char t = c[start]; c[start] = c[end]; c[end] = t; start++; end--; &#125;&#125; 58.2 左旋转字符串题目描述 对于一个给定的字符序列 S，请你把其循环左移 K 位后的序列输出。例如，字符序列 S=”abcXYZdef”, 要求输出循环左移 3 位后的结果，即“XYZdefabc”。 123456789101112131415161718public String LeftRotateString(String str, int n) &#123; if (str.length() == 0) return \"\"; char[] c = str.toCharArray(); reverse(c, 0, n - 1); reverse(c, n, c.length - 1); reverse(c, 0, c.length - 1); return new String(c);&#125;private void reverse(char[] c, int i, int j) &#123; while (i &lt; j) &#123; char t = c[i]; c[i] = c[j]; c[j] = t; i++; j--; &#125;&#125; 59. 滑动窗口的最大值题目描述 给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组 {2, 3, 4, 2, 6, 2, 5, 1} 及滑动窗口的大小 3，那么一共存在 6 个滑动窗口，他们的最大值分别为 {4, 4, 6, 6, 6, 5}； 12345678910111213public ArrayList&lt;Integer&gt; maxInWindows(int[] num, int size) &#123; ArrayList&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); if (size &gt; num.length || size &lt; 1) return ret; PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;Integer&gt;((o1, o2) -&gt; o2 - o1); for (int i = 0; i &lt; size; i++) heap.add(num[i]); ret.add(heap.peek()); for (int i = 1; i + size - 1 &lt; num.length; i++) &#123; heap.remove(num[i - 1]); heap.add(num[i + size - 1]); ret.add(heap.peek()); &#125; return ret;&#125; 60. n 个骰子的点数题目描述 把 n 个骰子仍在地上，求点数和为 s 的概率。 最直观的动态规划解法，O(n2) 的空间复杂度。 123456789101112131415161718192021private static int face = 6;public double countProbability(int n, int s) &#123; if (n &lt; 1 || s &lt; n) return 0.0; int pointNum = face * n; int[][] dp = new int[n][pointNum]; for (int i = 0; i &lt; face; i++) &#123; dp[0][i] = 1; &#125; for (int i = 1; i &lt; n; i++) &#123; for (int j = i; j &lt; pointNum; j++) &#123; // 使用 i 个骰子最小点数为 i for (int k = 1; k &lt;= face; k++) &#123; if (j - k &lt; 0) continue; dp[i][j] += dp[i - 1][j - k]; &#125; &#125; &#125; int totalNum = (int) Math.pow(6, n); return (double) dp[n - 1][s - 1] / totalNum;&#125; 使用旋转数组将空间复杂度降低为 O(n) 12345678910111213141516171819202122private static int face = 6;public double countProbability(int n, int s) &#123; if (n &lt; 1 || s &lt; n) return 0.0; int pointNum = face * n; int[][] dp = new int[2][pointNum]; for (int i = 0; i &lt; face; i++) &#123; dp[0][i] = 1; &#125; int flag = 1; for (int i = 1; i &lt; n; i++) &#123; for (int j = i; j &lt; pointNum; j++) &#123; // 使用 i 个骰子最小点数为 i for (int k = 1; k &lt;= face; k++) &#123; if (j - k &lt; 0) continue; dp[flag][j] += dp[1 - flag][j - k]; &#125; &#125; &#125; int totalNum = (int) Math.pow(6, n); return (double) dp[n - 1][s - 1] / totalNum;&#125; 61. 扑克牌顺子题目描述 五张牌，其中大小鬼为癞子，牌面大小为 0。判断是否能组成顺子。 12345678910111213public boolean isContinuous(int[] numbers) &#123; if (numbers.length &lt; 5) return false; Arrays.sort(numbers); int cnt = 0; for (int num : numbers) if (num == 0) cnt++; for (int i = cnt; i &lt; numbers.length - 1; i++) &#123; if (numbers[i + 1] == numbers[i]) return false; int cut = numbers[i + 1] - numbers[i] - 1; if (cut &gt; cnt) return false; cnt -= cut; &#125; return true;&#125; 62. 圆圈中最后剩下的数题目描述 让小朋友们围成一个大圈。然后 , 他随机指定一个数 m, 让编号为 0 的小朋友开始报数。每次喊到 m-1 的那个小朋友要出列唱首歌 , 然后可以在礼品箱中任意的挑选礼物 , 并且不再回到圈中 , 从他的下一个小朋友开始 , 继续 0…m-1 报数 …. 这样下去 …. 直到剩下最后一个小朋友 , 可以不用表演。 解题思路 约瑟夫环 12345public int LastRemaining_Solution(int n, int m) &#123; if (n == 0) return -1; if (n == 1) return 0; return (LastRemaining_Solution(n - 1, m) + m) % n;&#125; 63. 股票的最大利润题目描述 可以有一次买入和一次卖出，买入必须在前。求最大收益。 1234567891011public int maxProfit(int[] prices) &#123; int n = prices.length; if(n == 0) return 0; int soFarMin = prices[0]; int max = 0; for(int i = 1; i &lt; n; i++) &#123; if(soFarMin &gt; prices[i]) soFarMin = prices[i]; else max = Math.max(max, prices[i] - soFarMin); &#125; return max;&#125; 64. 求 1+2+3+…+n题目描述 求 1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case 等关键字及条件判断语句（A?B:C） 12345public int Sum_Solution(int n) &#123; int sum = n; boolean b = (n &gt; 0) &amp;&amp; ((sum += Sum_Solution(n - 1)) &gt; 0); return sum;&#125; 65. 不用加减乘除做加法a ^ b 表示没有考虑进位的情况下两数的和，(a &amp; b) &lt;&lt; 1 就是进位。递归会终止的原因是 (a &amp; b) &lt;&lt; 1 最右边会多一个 0，那么继续递归，进位最右边的 0 会慢慢增多，最后进位会变为 0，递归终止。 1234public int Add(int num1, int num2) &#123; if(num2 == 0) return num1; return Add(num1 ^ num2, (num1 &amp; num2) &lt;&lt; 1);&#125; 66. 构建乘积数组题目描述 给定一个数组 A[0, 1,…, n-1], 请构建一个数组 B[0, 1,…, n-1], 其中 B 中的元素 B[i]=A[0]*A[1]*…*A[i-1]*A[i+1]*…*A[n-1]。不能使用除法。 1234567891011121314151617181920public int[] multiply(int[] A) &#123; int n = A.length; int[][] dp = new int[n][n]; for (int i = 0; i &lt; n; i++) &#123; dp[i][i] = A[i]; &#125; for (int i = 0; i &lt; n; i++) &#123; for (int j = i + 1; j &lt; n; j++) &#123; dp[i][j] = dp[i][j - 1] * A[j]; &#125; &#125; int[] B = new int[n]; Arrays.fill(B, 1); for (int i = 0; i &lt; n; i++) &#123; if (i != 0) B[i] *= dp[0][i - 1]; if (i != n - 1) B[i] *= dp[i + 1][n - 1]; &#125; return B;&#125; 第七章 两个面试案例67. 把字符串转换成整数123456789101112public int StrToInt(String str) &#123; if (str.length() == 0) return 0; char[] chars = str.toCharArray(); boolean isNegative = chars[0] == '-'; int ret = 0; for (int i = 0; i &lt; chars.length; i++) &#123; if (i == 0 &amp;&amp; (chars[i] == '+' || chars[i] == '-')) continue; if (chars[i] &lt; '0' || chars[i] &gt; '9') return 0; ret = ret * 10 + (chars[i] - '0'); &#125; return isNegative ? -ret : ret;&#125; 68. 树中两个节点的最低公共祖先树是二叉查找树的最低公共祖先问题： 12345public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123; if(root.val &gt; p.val &amp;&amp; root.val &gt; q.val) return lowestCommonAncestor(root.left, p, q); if(root.val &lt; p.val &amp;&amp; root.val &lt; q.val) return lowestCommonAncestor(root.right, p, q); return root;&#125; 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"Java IO","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/Java IO.html","text":"概览 磁盘操作 字节操作 字符操作 对象操作 网络操作 1. InetAddress 2. URL 3. Sockets 4. Datagram NIO 1. 流与块 2. 通道与缓冲区 2.1 通道 2.2 缓冲区 3. 缓冲区状态变量 4. 读写文件实例 5. 阻塞与非阻塞 5.1 阻塞式 I/O 5.2 非阻塞式 I/O 6. 套接字实例 6.1 ServerSocketChannel 6.2 Selectors 6.3 主循环 6.4 监听新连接 6.5 接受新的连接 6.6 删除处理过的 SelectionKey 6.7 传入的 I/O 参考资料 概览Java 的 I/O 大概可以分成以下几类 磁盘操作：File 字节操作：InputStream 和 OutputStream 字符操作：Reader 和 Writer 对象操作：Serializable 网络操作：Socket 非阻塞式 IO：NIO 磁盘操作File 类可以用于表示文件和目录，但是它只用于表示文件的信息，而不表示文件的内容。 字节操作 Java I/O 使用了装饰者模式来实现。以 InputStream 为例，InputStream 是抽象组件，FileInputStream 是 InputStream 的子类，属于具体组件，提供了字节流的输入操作。FilterInputStream 属于抽象装饰者，装饰者用于装饰组件，为组件提供额外的功能，例如 BufferedInputStream 为 FileInputStream 提供缓存的功能。实例化一个具有缓存功能的字节流对象时，只需要在 FileInputStream 对象上再套一层 BufferedInputStream 对象即可。 1BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file)); DataInputStream 装饰者提供了对更多数据类型进行输入的操作，比如 int、double 等基本类型。 批量读入文件中的内容到字节数组中 123456byte[] buf = new byte[20*1024];int bytes = 0;// 最多读取 buf.length 个字节，返回的是实际读取的个数，返回 -1 的时候表示读到 eof，即文件尾while((bytes = in.read(buf, 0 , buf.length)) != -1) &#123; // ...&#125; 字符操作不管是磁盘还是网络传输，最小的存储单元都是字节，而不是字符，所以 I/O 操作的都是字节而不是字符。但是在程序中操作的数据通常是字符形式，因此需要提供对字符进行操作的方法。 InputStreamReader 实现从文本文件的字节流解码成字符流；OutputStreamWriter 实现字符流编码成为文本文件的字节流。它们都继承自 Reader 和 Writer。 编码就是把字符转换为字节，而解码是把字节重新组合成字符。 12byte[] bytes = str.getBytes(encoding); // 编码String str = new String(bytes, encoding)； // 解码 GBK 编码中，中文占 2 个字节，英文占 1 个字节；UTF-8 编码中，中文占 3 个字节，英文占 1 个字节；Java 使用双字节编码 UTF-16be，中文和英文都占 2 个字节。 如果编码和解码过程使用不同的编码方式那么就出现了乱码。 对象操作序列化就是将一个对象转换成字节序列，方便存储和传输。 序列化：ObjectOutputStream.writeObject() 反序列化：ObjectInputStream.readObject() 序列化的类需要实现 Serializable 接口，它只是一个标准，没有任何方法需要实现。 transient 关键字可以使一些属性不会被序列化。 ArrayList 序列化和反序列化的实现 ：ArrayList 中存储数据的数组是用 transient 修饰的，因为这个数组是动态扩展的，并不是所有的空间都被使用，因此就不需要所有的内容都被序列化。通过重写序列化和反序列化方法，使得可以只序列化数组中有内容的那部分数据。 1private transient Object[] elementData; 网络操作Java 中的网络支持： InetAddress：用于表示网络上的硬件资源，即 IP 地址； URL：统一资源定位符，通过 URL 可以直接读取或者写入网络上的数据； Sockets：使用 TCP 协议实现网络通信； Datagram：使用 UDP 协议实现网络通信。 1. InetAddress没有公有构造函数，只能通过静态方法来创建实例，比如 InetAddress.getByName(String host)、InetAddress.getByAddress(byte[] addr)。 2. URL可以直接从 URL 中读取字节流数据 123456789101112URL url = new URL(\"http://www.baidu.com\");InputStream is = url.openStream(); // 字节流InputStreamReader isr = new InputStreamReader(is, \"utf-8\"); // 字符流BufferedReader br = new BufferedReader(isr);String line = br.readLine();while (line != null) &#123; System.out.println(line); line = br.readLine();&#125;br.close();isr.close();is.close(); 3. SocketsSocket 通信模型 ServerSocket：服务器端类 Socket：客户端类 服务器和客户端通过 InputStream 和 OutputStream 进行输入输出。 4. Datagram DatagramPacket：数据包类 DatagramSocket：通信类 NIONIO 将最耗时的 I/O 操作 ( 即填充和提取缓冲区 ) 转移回操作系统，因而 不需要程序员去控制就可以极大地提高运行速度。 1. 流与块I/O 与 NIO 最重要的区别是数据打包和传输的方式。正如前面提到的，I/O 以流的方式处理数据，而 NIO 以块的方式处理数据。 面向流的 I/O 一次一个字节进行处理数据，一个输入流产生一个字节的数据，一个输出流消费一个字节的数据。为流式数据创建过滤器非常容易，链接几个过滤器，以便每个过滤器只负责单个复杂处理机制的一部分，这样也是相对简单的。不利的一面是，面向流的 I/O 通常相当慢。 一个面向块的 I/O 系统以块的形式处理数据，每一个操作都在一步中产生或者消费一个数据块。按块处理数据比按流处理数据要快得多。但是面向块的 I/O 缺少一些面向流的 I/O 所具有的优雅性和简单性。 I/O 包和 NIO 已经很好地集成了，java.io.* 已经以 NIO 为基础重新实现了，所以现在它可以利用 NIO 的一些特性。例如， java.io.* 包中的一些类包含以块的形式读写数据的方法，这使得即使在更面向流的系统中，处理速度也会更快。 2. 通道与缓冲区2.1 通道通道 Channel 是对原 I/O 包中的流的模拟，可以通过它读取和写入数据。 通道与流的不同之处在于，流只能在一个方向上移动，(一个流必须是 InputStream 或者 OutputStream 的子类)， 而通道是双向的，可以用于读、写或者同时用于读写。 通道包括以下类型： FileChannel：从文件中读写数据； DatagramChannel：通过 UDP 读写网络中数据； SocketChannel：通过 TCP 读写网络中数据； ServerSocketChannel：可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel。 2.2 缓冲区发送给一个通道的所有对象都必须首先放到缓冲区中；同样地，从通道中读取的任何数据都要读到缓冲区中。也就是说，不会直接对通道进行读写数据，而是先经过缓冲区。 缓冲区实质上是一个数组，但它不仅仅是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读/写进程。 缓冲区包括以下类型： ByteBuffer CharBuffer ShortBuffer IntBuffer LongBuffer FloatBuffer DoubleBuffer 3. 缓冲区状态变量 capacity：最大容量； position：当前已经读写的字节数； limit：还可以读写的字节数。 状态变量的改变过程： 1. 新建一个大小为 8 个字节的缓冲区，此时 position 为 0，而 limit == capacity == 9。capacity 变量不会改变，下面的讨论会忽略它。 2. 从输入通道中读取 3 个字节数据写入缓冲区中，此时 position 移动设为 3，limit 保持不变。 3. 在将缓冲区的数据写到输出通道之前，需要先调用 flip() 方法，这个方法将 limit 设置为当前 position，并将 position 设置为 0。 4. 从缓冲区中取 4 个字节到输出缓冲中，此时 position 设为 4。 5. 最后需要调用 clear() 方法来清空缓冲区，此时 position 和 limit 都被设置为最初位置。 4. 读写文件实例1. 为要读取的文件创建 FileInputStream，之后通过 FileInputStream 获取输入 FileChannel； 12FileInputStream fin = new FileInputStream(\"readandshow.txt\");FileChannel fic = fin.getChannel(); 2. 创建一个容量为 1024 的 Buffer 1ByteBuffer buffer = ByteBuffer.allocate(1024); 3. 将数据从输入 FileChannel 写入到 Buffer 中，如果没有数据的话， read() 方法会返回 -1 1234int r = fcin.read(buffer);if (r == -1) &#123; break;&#125; 4. 为要写入的文件创建 FileOutputStream，之后通过 FileOutputStream 获取输出 FileChannel 12FileOutputStream fout = new FileOutputStream(\"writesomebytes.txt\");FileChannel foc = fout.getChannel(); 5. 调用 flip() 切换读写 1buffer.flip(); 6. 把 Buffer 中的数据读取到输出 FileChannel 中 1foc.write(buffer); 7. 最后调用 clear() 重置缓冲区 1buffer.clear(); 5. 阻塞与非阻塞应当注意，FileChannel 不能切换到非阻塞模式，套接字 Channel 可以。 5.1 阻塞式 I/O阻塞式 I/O 在调用 InputStream.read() 方法时会一直等到数据到来时（或超时）才会返回，在调用 ServerSocket.accept() 方法时，也会一直阻塞到有客户端连接才会返回，每个客户端连接过来后，服务端都会启动一个线程去处理该客户端的请求。 5.2 非阻塞式 I/O由一个专门的线程来处理所有的 I/O 事件，并负责分发。 事件驱动机制：事件到的时候触发，而不是同步的去监视事件。 线程通信：线程之间通过 wait()、notify() 等方式通信，保证每次上下文切换都是有意义的，减少无谓的线程切换。 6. 套接字实例6.1 ServerSocketChannel每一个端口都需要有一个 ServerSocketChannel 用来监听连接。 123456ServerSocketChannel ssc = ServerSocketChannel.open();ssc.configureBlocking(false); // 设置为非阻塞ServerSocket ss = ssc.socket();InetSocketAddress address = new InetSocketAddress(ports[i]);ss.bind(address); // 绑定端口号 6.2 Selectors异步 I/O 通过 Selector 注册对特定 I/O 事件的兴趣 ― 可读的数据的到达、新的套接字连接等等，在发生这样的事件时，系统将会发送通知。 创建 Selectors 之后，就可以对不同的通道对象调用 register() 方法。register() 的第一个参数总是这个 Selector。第二个参数是 OP_ACCEPT，这里它指定我们想要监听 accept 事件，也就是在新的连接建立时所发生的事件。 SelectionKey 代表这个通道在此 Selector 上的这个注册。当某个 Selector 通知您某个传入事件时，它是通过提供对应于该事件的 SelectionKey 来进行的。SelectionKey 还可以用于取消通道的注册。 12Selector selector = Selector.open();SelectionKey key = ssc.register(selector, SelectionKey.OP_ACCEPT); 6.3 主循环首先，我们调用 Selector 的 select() 方法。这个方法会阻塞，直到至少有一个已注册的事件发生。当一个或者更多的事件发生时， select() 方法将返回所发生的事件的数量。 接下来，我们调用 Selector 的 selectedKeys() 方法，它返回发生了事件的 SelectionKey 对象的一个 集合 。 我们通过迭代 SelectionKeys 并依次处理每个 SelectionKey 来处理事件。对于每一个 SelectionKey，您必须确定发生的是什么 I/O 事件，以及这个事件影响哪些 I/O 对象。 123456789int num = selector.select(); Set selectedKeys = selector.selectedKeys();Iterator it = selectedKeys.iterator(); while (it.hasNext()) &#123; SelectionKey key = (SelectionKey)it.next(); // ... deal with I/O event ...&#125; 6.4 监听新连接程序执行到这里，我们仅注册了 ServerSocketChannel，并且仅注册它们“接收”事件。为确认这一点，我们对 SelectionKey 调用 readyOps() 方法，并检查发生了什么类型的事件： 12345if ((key.readyOps() &amp; SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT) &#123; // Accept the new connection // ...&#125; 可以肯定地说， readOps() 方法告诉我们该事件是新的连接。 6.5 接受新的连接因为我们知道这个服务器套接字上有一个传入连接在等待，所以可以安全地接受它；也就是说，不用担心 accept() 操作会阻塞： 12ServerSocketChannel ssc = (ServerSocketChannel)key.channel();SocketChannel sc = ssc.accept(); 下一步是将新连接的 SocketChannel 配置为非阻塞的。而且由于接受这个连接的目的是为了读取来自套接字的数据，所以我们还必须将 SocketChannel 注册到 Selector上，如下所示： 12sc.configureBlocking( false );SelectionKey newKey = sc.register( selector, SelectionKey.OP_READ ); 注意我们使用 register() 的 OP_READ 参数，将 SocketChannel 注册用于 读取 而不是 接受 新连接。 6.6 删除处理过的 SelectionKey在处理 SelectionKey 之后，我们几乎可以返回主循环了。但是我们必须首先将处理过的 SelectionKey 从选定的键集合中删除。如果我们没有删除处理过的键，那么它仍然会在主集合中以一个激活的键出现，这会导致我们尝试再次处理它。我们调用迭代器的 remove() 方法来删除处理过的 SelectionKey： 1it.remove(); 现在我们可以返回主循环并接受从一个套接字中传入的数据(或者一个传入的 I/O 事件)了。 6.7 传入的 I/O当来自一个套接字的数据到达时，它会触发一个 I/O 事件。这会导致在主循环中调用 Selector.select()，并返回一个或者多个 I/O 事件。这一次， SelectionKey 将被标记为 OP_READ 事件，如下所示： 123456&#125; else if ((key.readyOps() &amp; SelectionKey.OP_READ) == SelectionKey.OP_READ) &#123; // Read the data SocketChannel sc = (SocketChannel)key.channel(); // ...&#125; 参考资料 Eckel B, 埃克尔 , 昊鹏 , 等 . Java 编程思想 [M]. 机械工业出版社 , 2002. IBM: NIO 入门 深入分析 Java I/O 的工作机制 NIO 与传统 IO 的区别 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"Leetcode 题解","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/Leetcode 题解.html","text":"算法思想 二分查找 贪心思想 双指针 排序 快速选择 堆排序 桶排序 搜索 BFS DFS Backtracking 分治 动态规划 分割整数 矩阵路径 斐波那契数列 最长递增子序列 最长公共子系列 0-1 背包 数组区间 字符串编辑 其它问题 数学 素数 最大公约数 进制转换 阶乘 字符串加法减法 相遇问题 多数投票问题 其它 数据结构相关 栈和队列 哈希表 字符串 数组与矩阵 有序矩阵 链表 树 递归 层次遍历 前中后序遍历 BST Trie 图 位运算 参考资料 算法思想二分查找二分查找思想简单，但是在实现时有一些需要注意的细节： 在计算 mid 时不能使用 mid = (l + h) / 2 这种方式，因为 l + h 可能会导致加法溢出，应该使用 mid = l + (h - l) / 2。 对 h 的赋值和循环条件有关，当循环条件为 l &lt;= h 时，h = mid - 1；当循环条件为 l &lt; h 时，h = mid。解释如下：在循环条件为 l &lt;= h 时，如果 h = mid，会出现循环无法退出的情况，例如 l = 1，h = 1，此时 mid 也等于 1，如果此时继续执行 h = mid，那么就会无限循环；在循环条件为 l &lt; h，如果 h = mid - 1，会错误跳过查找的数，例如对于数组 [1,2,3]，要查找 1，最开始 l = 0，h = 2，mid = 1，判断 key &lt; arr[mid] 执行 h = mid - 1 = 0，此时循环退出，直接把查找的数跳过了。 l 的赋值一般都为 l = mid + 1。 12345678910public int search(int key, int[] arr) &#123; int l = 0, h = arr.length - 1; while (l &lt;= h) &#123; int mid = l + (h - l) / 2; if (key == arr[mid]) return mid; if (key &lt; arr[mid]) h = mid - 1; else l = mid + 1; &#125; return -1;&#125; 求开方 Leetcode : 69. Sqrt(x) (Easy) 一个数 x 的开方 sqrt 一定在 0 ~ x 之间，并且满足 sqrt == x / sqrt 。可以利用二分查找在 0 ~ x 之间查找 sqrt。 123456789101112public int mySqrt(int x) &#123; if(x &lt;= 1) return x; int l = 1, h = x; while(l &lt;= h)&#123; int mid = l + (h - l) / 2; int sqrt = x / mid; if(sqrt == mid) return mid; else if(sqrt &lt; mid) h = mid - 1; else l = mid + 1; &#125; return h;&#125; 摆硬币 Leetcode : 441. Arranging Coins (Easy) 123456789n = 8The coins can form the following rows:¤¤ ¤¤ ¤ ¤¤ ¤Because the 4th row is incomplete, we return 3. 题目描述：第 i 行摆 i 个，统计能够摆的行数。 返回 h 而不是 l，因为摆的硬币最后一行不能算进去。 1234567891011public int arrangeCoins(int n) &#123; int l = 0, h = n; while(l &lt;= h)&#123; int m = l + (h - l) / 2; long x = m * (m + 1L) / 2; if(x == n) return m; else if(x &lt; n) l = m + 1; else h = m - 1; &#125; return h;&#125; 可以不用二分查找，更直观的解法如下： 12345678public int arrangeCoins(int n) &#123; int level = 1; while (n &gt; 0) &#123; n -= level; level++; &#125; return n == 0 ? level - 1 : level - 2;&#125; 有序数组的 Single Element Leetcode : 540. Single Element in a Sorted Array (Medium) 题目描述：一个有序数组只有一个数不出现两次，找出这个数。 12345678910public int singleNonDuplicate(int[] nums) &#123; int l = 0, h = nums.length - 1; while(l &lt; h) &#123; int m = l + (h - l) / 2; if(m % 2 == 1) m--; // 保证 l/h/m 都在偶数位，使得查找区间大小一直都是奇数 if(nums[m] == nums[m + 1]) l = m + 2; else h = m; &#125; return nums[l];&#125; 贪心思想贪心思想保证每次操作都是局部最优的，并且最后得到的结果是全局最优的。 分配饼干 Leetcode : 455. Assign Cookies (Easy) 题目描述：每个孩子都有一个满足度，每个饼干都有一个大小，只有饼干的大小大于一个孩子的满足度，该孩子才会获得满足。求解最多可以获得满足的孩子数量。 因为最小的孩子最容易得到满足，因此先满足最小孩子。给一个孩子的饼干应当尽量小又能满足该孩子，这样大饼干就能拿来给满足度比较大的孩子。 证明：假设在某次选择中，贪心策略选择给第 i 个孩子分配第 m 个饼干，并且第 i 个孩子满足度最小，第 m 个饼干为可以满足第 i 个孩子的最小饼干，利用贪心策略最终可以满足 k 个孩子。假设最优策略在这次选择中给 i 个孩子分配第 n 个饼干，并且这个饼干大于第 m 个饼干。我们发现使用第 m 个饼干去替代第 n 个饼干完全不影响后续的结果，因此不存在比贪心策略更优的策略，即贪心策略就是最优策略。 12345678910public int findContentChildren(int[] g, int[] s) &#123; Arrays.sort(g); Arrays.sort(s); int i = 0, j = 0; while(i &lt; g.length &amp;&amp; j &lt; s.length)&#123; if(g[i] &lt;= s[j]) i++; j++; &#125; return i;&#125; 投飞镖刺破气球 Leetcode : 452. Minimum Number of Arrows to Burst Balloons (Medium) 12345Input:[[10,16], [2,8], [1,6], [7,12]]Output:2 题目描述：气球在一个水平数轴上摆放，可以重叠，飞镖垂直射向坐标轴，使得路径上的气球都会刺破。求解最小的投飞镖次数使所有气球都被刺破。 从左往右投飞镖，并且在每次投飞镖时满足以下条件： 左边已经没有气球了； 本次投飞镖能够刺破最多的气球。 1234567891011121314public int findMinArrowShots(int[][] points) &#123; if(points.length == 0) return 0; Arrays.sort(points,(a,b) -&gt; (a[1] - b[1])); int curPos = points[0][1]; int ret = 1; for (int i = 1; i &lt; points.length; i++) &#123; if(points[i][0] &lt;= curPos) &#123; continue; &#125; curPos = points[i][1]; ret++; &#125; return ret; &#125; 股票的最大收益 Leetcode : 122. Best Time to Buy and Sell Stock II (Easy) 题目描述：一次交易包含买入和卖出，多个交易之间不能交叉进行。 对于 [a, b, c, d]，如果有 a &lt;= b &lt;= c &lt;= d ，那么最大收益为 d - a。而 d - a = (d - c) + (c - b) + (b - a) ，因此当访问到一个 prices[i] 且 prices[i] - prices[i-1] &gt; 0，那么就把 prices[i] - prices[i-1] 添加加到收益中，从而在局部最优的情况下也保证全局最优。 1234567public int maxProfit(int[] prices) &#123; int profit = 0; for(int i = 1; i &lt; prices.length; i++)&#123; if(prices[i] &gt; prices[i-1]) profit += (prices[i] - prices[i-1]); &#125; return profit;&#125; 种植花朵 Leetcode : 605. Can Place Flowers (Easy) 12Input: flowerbed = [1,0,0,0,1], n = 1Output: True 题目描述：花朵之间至少需要一个单位的间隔。 12345678910111213public boolean canPlaceFlowers(int[] flowerbed, int n) &#123; int cnt = 0; for(int i = 0; i &lt; flowerbed.length; i++)&#123; if(flowerbed[i] == 1) continue; int pre = i == 0 ? 0 : flowerbed[i - 1]; int next = i == flowerbed.length - 1 ? 0 : flowerbed[i + 1]; if(pre == 0 &amp;&amp; next == 0) &#123; cnt++; flowerbed[i] = 1; &#125; &#125; return cnt &gt;= n;&#125; 修改一个数成为非递减数组 Leetcode : 665. Non-decreasing Array (Easy) 题目描述：判断一个数组能不能只修改一个数就成为非递减数组。 在出现 nums[i] &lt; nums[i - 1] 时，需要考虑的是应该修改数组的哪个数，使得本次修改能使 i 之前的数组成为非递减数组，并且 不影响后续的操作 。优先考虑令 nums[i - 1] = nums[i]，因为如果修改 nums[i] = nums[i - 1] 的话，那么 nums[i] 这个数会变大，那么就有可能比 nums[i + 1] 大，从而影响了后续操作。还有一个比较特别的情况就是 nums[i] &lt; nums[i - 2]，只修改 nums[i - 1] = nums[i] 不能令数组成为非递减，只能通过修改 nums[i] = nums[i - 1] 才行。 1234567891011public boolean checkPossibility(int[] nums) &#123; int cnt = 0; for(int i = 1; i &lt; nums.length; i++)&#123; if(nums[i] &lt; nums[i - 1])&#123; cnt++; if(i - 2 &gt;= 0 &amp;&amp; nums[i - 2] &gt; nums[i]) nums[i] = nums[i-1]; else nums[i - 1] = nums[i]; &#125; &#125; return cnt &lt;= 1;&#125; 判断是否为子串 Leetcode : 392. Is Subsequence (Medium) 12s = \"abc\", t = \"ahbgdc\"Return true. 1234567public boolean isSubsequence(String s, String t) &#123; for (int i = 0, pos = 0; i &lt; s.length(); i++, pos++) &#123; pos = t.indexOf(s.charAt(i), pos); if(pos == -1) return false; &#125; return true;&#125; 分隔字符串使同种字符出现在一起 Leetcode : 763. Partition Labels (Medium) 123456Input: S = \"ababcbacadefegdehijhklij\"Output: [9,7,8]Explanation:The partition is \"ababcbaca\", \"defegde\", \"hijhklij\".This is a partition so that each letter appears in at most one part.A partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits S into less parts. 1234567891011121314151617public List&lt;Integer&gt; partitionLabels(String S) &#123; List&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); int[] lastIdxs = new int[26]; for(int i = 0; i &lt; S.length(); i++) lastIdxs[S.charAt(i) - 'a'] = i; int startIdx = 0; while(startIdx &lt; S.length()) &#123; int endIdx = startIdx; for(int i = startIdx; i &lt; S.length() &amp;&amp; i &lt;= endIdx; i++) &#123; int lastIdx = lastIdxs[S.charAt(i) - 'a']; if(lastIdx == i) continue; if(lastIdx &gt; endIdx) endIdx = lastIdx; &#125; ret.add(endIdx - startIdx + 1); startIdx = endIdx + 1; &#125; return ret;&#125; 根据身高和序号重组队列 Leetcode : 406. Queue Reconstruction by Height(Medium) 12345Input:[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]Output:[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]] 题目描述：一个学生用两个分量 (h, k) 描述，h 表示身高，k 表示排在前面的有 k 个学生的身高比他高或者和他一样高。 为了在每次插入操作时不影响后续的操作，身高较高的学生应该先做插入操作，否则身高较小的学生原先正确插入第 k 个位置可能会变成第 k+1 个位置。 身高降序、k 值升序，然后按排好序的顺序插入队列的第 k 个位置中。 1234567891011121314151617181920212223public int[][] reconstructQueue(int[][] people) &#123; if(people == null || people.length == 0 || people[0].length == 0) return new int[0][0]; Arrays.sort(people, new Comparator&lt;int[]&gt;() &#123; public int compare(int[] a, int[] b) &#123; if(a[0] == b[0]) return a[1] - b[1]; return b[0] - a[0]; &#125; &#125;); int n = people.length; List&lt;int[]&gt; tmp = new ArrayList&lt;&gt;(); for(int i = 0; i &lt; n; i++) &#123; tmp.add(people[i][1], new int[]&#123;people[i][0], people[i][1]&#125;); &#125; int[][] ret = new int[n][2]; for(int i = 0; i &lt; n; i++) &#123; ret[i][0] = tmp.get(i)[0]; ret[i][1] = tmp.get(i)[1]; &#125; return ret;&#125; 双指针双指针主要用于遍历数组，两个指针指向不同的元素，从而协同完成任务。 从一个已经排序的数组中查找出两个数，使它们的和为 0 Leetcode ：167. Two Sum II - Input array is sorted (Easy) 使用双指针，一个指针指向元素较小的值，一个指针指向元素较大的值。指向较小元素的指针从头向尾遍历，指向较大元素的指针从尾向头遍历。 如果两个指针指向元素的和 sum == target，那么得到要求的结果；如果 sum &gt; target，移动较大的元素，使 sum 变小一些；如果 sum &lt; target，移动较小的元素，使 sum 变大一些。 12345678910public int[] twoSum(int[] numbers, int target) &#123; int i = 0, j = numbers.length - 1; while (i &lt; j) &#123; int sum = numbers[i] + numbers[j]; if (sum == target) return new int[]&#123;i + 1, j + 1&#125;; else if (sum &lt; target) i++; else j--; &#125; return null;&#125; 反转字符串中的元音字符 Leetcode : 345. Reverse Vowels of a String (Easy) 使用双指针，指向待反转的两个元音字符，一个指针从头向尾遍历，一个指针从尾到头遍历。 123456789101112131415161718192021222324private HashSet&lt;Character&gt; vowels = new HashSet&lt;&gt;(Arrays.asList('a','e','i','o','u','A','E','I','O','U'));public String reverseVowels(String s) &#123; if(s.length() == 0) return s; int i = 0, j = s.length() - 1; char[] result = new char[s.length()]; while(i &lt;= j)&#123; char ci = s.charAt(i); char cj = s.charAt(j); if(!vowels.contains(ci))&#123; result[i] = ci; i++; &#125; else if(!vowels.contains(cj))&#123; result[j] = cj; j--; &#125; else&#123; result[i] = cj; result[j] = ci; i++; j--; &#125; &#125; return new String(result);&#125; 两数平方和 Leetcode : 633. Sum of Square Numbers (Easy) 题目描述：判断一个数是否为两个数的平方和，例如 5 = 12 + 22。 12345678910public boolean judgeSquareSum(int c) &#123; int left = 0, right = (int) Math.sqrt(c); while(left &lt;= right)&#123; int powSum = left * left + right * right; if(powSum == c) return true; else if(powSum &gt; c) right--; else left++; &#125; return false;&#125; 回文字符串 Leetcode : 680. Valid Palindrome II (Easy) 题目描述：字符串可以删除一个字符，判断是否能构成回文字符串。 123456789101112131415161718192021public boolean validPalindrome(String s) &#123; int i = 0, j = s.length() -1; while(i &lt; j)&#123; if(s.charAt(i) != s.charAt(j))&#123; return isPalindrome(s, i, j - 1) || isPalindrome(s, i + 1, j); &#125; i++; j--; &#125; return true;&#125;private boolean isPalindrome(String s, int l, int r)&#123; while(l &lt; r)&#123; if(s.charAt(l) != s.charAt(r)) return false; l++; r--; &#125; return true;&#125; 归并两个有序数组 Leetcode : 88. Merge Sorted Array (Easy) 题目描述：把归并结果存到第一个数组上 1234567891011public void merge(int[] nums1, int m, int[] nums2, int n) &#123; int i = m - 1, j = n - 1; // 需要从尾开始遍历，否则在 nums1 上归并得到的值会覆盖还未进行归并比较的值 int idx = m + n - 1; while(i &gt;= 0 || j &gt;= 0)&#123; if(i &lt; 0) nums1[idx] = nums2[j--]; else if(j &lt; 0) nums1[idx] = nums1[i--]; else if(nums1[i] &gt; nums2[j]) nums1[idx] = nums1[i--]; else nums1[idx] = nums2[j--]; idx--; &#125;&#125; 判断链表是否存在环 Leetcode : 141. Linked List Cycle (Easy) 使用双指针，一个指针每次移动一个节点，一个指针每次移动两个节点，如果存在环，那么这两个指针一定会相遇。 1234567891011public boolean hasCycle(ListNode head) &#123; if(head == null) return false; ListNode l1 = head, l2 = head.next; while(l1 != null &amp;&amp; l2 != null)&#123; if(l1 == l2) return true; l1 = l1.next; if(l2.next == null) break; l2 = l2.next.next; &#125; return false;&#125; 最长子序列 Leetcode : 524. Longest Word in Dictionary through Deleting (Medium) 12345Input:s = \"abpcplea\", d = [\"ale\",\"apple\",\"monkey\",\"plea\"]Output:\"apple\" 题目描述：可以删除 s 中的一些字符，使得它成为字符串列表 d 中的一个字符串。要求在 d 中找到满足条件的最长字符串。 123456789101112131415public String findLongestWord(String s, List&lt;String&gt; d) &#123; String ret = \"\"; for (String str : d) &#123; for (int i = 0, j = 0; i &lt; s.length() &amp;&amp; j &lt; str.length(); i++) &#123; if (s.charAt(i) == str.charAt(j)) j++; if (j == str.length()) &#123; if (ret.length() &lt; str.length() || (ret.length() == str.length() &amp;&amp; ret.compareTo(str) &gt; 0)) &#123; ret = str; &#125; &#125; &#125; &#125; return ret;&#125; 排序快速选择一般用于求解 Kth Element 问题，可以在 O(n) 时间复杂度，O(1) 空间复杂度完成求解工作。 与快速排序一样，快速选择一般需要先打乱数组，否则最坏情况下时间复杂度为 O(n2)。 堆排序堆排序用于求解 TopK Elements 问题，通过维护一个大小为 K 的堆，堆中的元素就是 TopK Elements。当然它也可以用于求解 Kth Element 问题，因为最后出堆的那个元素就是 Kth Element。快速选择也可以求解 TopK Elements 问题，因为找到 Kth Element 之后，再遍历一次数组，所有小于等于 Kth Element 的元素都是 TopK Elements。可以看到，快速选择和堆排序都可以求解 Kth Element 和 TopK Elements 问题。 Kth Element Leetocde : 215. Kth Largest Element in an Array (Medium) 排序 ：时间复杂度 O(nlgn)，空间复杂度 O(1) 解法 12345public int findKthLargest(int[] nums, int k) &#123; int N = nums.length; Arrays.sort(nums); return nums[N - k];&#125; 堆排序 ：时间复杂度 O(nlgk)，空间复杂度 O(k) 12345678910public int findKthLargest(int[] nums, int k) &#123; PriorityQueue&lt;Integer&gt; pq = new PriorityQueue&lt;&gt;(); for(int val : nums) &#123; pq.offer(val); if(pq.size() &gt; k) &#123; pq.poll(); &#125; &#125; return pq.peek();&#125; 快速选择 ：时间复杂度 O(n)，空间复杂度 O(1) 123456789101112131415161718192021222324252627282930313233343536373839404142public int findKthLargest(int[] nums, int k) &#123; k = nums.length - k; int lo = 0; int hi = nums.length - 1; while (lo &lt; hi) &#123; final int j = partition(nums, lo, hi); if(j &lt; k) &#123; lo = j + 1; &#125; else if (j &gt; k) &#123; hi = j - 1; &#125; else &#123; break; &#125; &#125; return nums[k]; &#125; private int partition(int[] a, int lo, int hi) &#123; int i = lo; int j = hi + 1; while(true) &#123; while(i &lt; hi &amp;&amp; less(a[++i], a[lo])); while(j &gt; lo &amp;&amp; less(a[lo], a[--j])); if(i &gt;= j) &#123; break; &#125; exch(a, i, j); &#125; exch(a, lo, j); return j; &#125; private void exch(int[] a, int i, int j) &#123; final int tmp = a[i]; a[i] = a[j]; a[j] = tmp; &#125; private boolean less(int v, int w) &#123; return v &lt; w; &#125;&#125; 桶排序找出出现频率最多的 k 个数 Leetcode : 347. Top K Frequent Elements (Medium) 12345678910111213141516171819202122public List&lt;Integer&gt; topKFrequent(int[] nums, int k) &#123; List&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for(int num : nums) &#123; map.put(num, map.getOrDefault(num, 0) + 1); &#125; List&lt;Integer&gt;[] bucket = new List[nums.length + 1]; for(int key : map.keySet()) &#123; int frequency = map.get(key); if(bucket[frequency] == null) &#123; bucket[frequency] = new ArrayList&lt;&gt;(); &#125; bucket[frequency].add(key); &#125; for(int i = bucket.length - 1; i &gt;= 0 &amp;&amp; ret.size() &lt; k; i--) &#123; if(bucket[i] != null) &#123; ret.addAll(bucket[i]); &#125; &#125; return ret;&#125; 搜索深度优先搜索和广度优先搜索广泛运用于树和图中，但是它们的应用远远不止如此。 BFS 广度优先搜索的搜索过程有点像一层一层地进行遍历：从节点 0 出发，遍历到 6、2、1 和 5 这四个新节点。 继续从 6 开始遍历，得到节点 4 ；从 2 开始遍历，没有下一个节点；从 1 开始遍历，没有下一个节点；从 5 开始遍历，得到 3 和 4 节点。这一轮总共得到两个新节点：4 和 3 。 反复从新节点出发进行上述的遍历操作。 可以看到，每一轮遍历的节点都与根节点路径长度相同。设 di 表示第 i 个节点与根节点的路径长度，推导出一个结论：对于先遍历的节点 i 与后遍历的节点 j，有 di&lt;=dj。利用这个结论，可以求解最短路径 最优解 问题：第一次遍历到目的节点，其所经过的路径为最短路径，如果继续遍历，之后再遍历到目的节点，所经过的路径就不是最短路径。 在程序实现 BFS 时需要考虑以下问题： 队列：用来存储每一轮遍历的节点 标记：对于遍历过得节点，应该将它标记，防止重复遍历； 计算在网格中从原点到特定点的最短路径长度 1234[[1,1,0,1],[1,0,1,0],[1,1,1,1],[1,0,1,1]] 123456789101112131415161718192021222324252627public int minPathLength(int[][] grids, int tr, int tc) &#123; int[][] next = &#123;&#123;1, 0&#125;, &#123;-1, 0&#125;, &#123;0, 1&#125;, &#123;0, -1&#125;&#125;; int m = grids.length, n = grids[0].length; Queue&lt;Position&gt; queue = new LinkedList&lt;&gt;(); queue.add(new Position(0, 0, 1)); while (!queue.isEmpty()) &#123; Position pos = queue.poll(); for (int i = 0; i &lt; 4; i++) &#123; Position nextPos = new Position(pos.r + next[i][0], pos.c + next[i][1], pos.length + 1); if (nextPos.r &lt; 0 || nextPos.r &gt;= m || nextPos.c &lt; 0 || nextPos.c &gt;= n) continue; if (grids[nextPos.r][nextPos.c] != 1) continue; grids[nextPos.r][nextPos.c] = 0; if (nextPos.r == tr &amp;&amp; nextPos.c == tc) return nextPos.length; queue.add(nextPos); &#125; &#125; return -1;&#125;private class Position &#123; int r, c, length; public Position(int r, int c, int length) &#123; this.r = r; this.c = c; this.length = length; &#125;&#125; DFS 广度优先搜索一层一层遍历，每一层遍历到的所有新节点，要用队列先存储起来以备下一层遍历的时候再遍历；而深度优先搜索在遍历到一个新节点时立马对新节点进行遍历：从节点 0 出发开始遍历，得到到新节点 6 时，立马对新节点 6 进行遍历，得到新节点 4；如此反复以这种方式遍历新节点，直到没有新节点了，此时返回。返回到根节点 0 的情况是，继续对根节点 0 进行遍历，得到新节点 2，然后继续以上步骤。 从一个节点出发，使用 DFS 对一个图进行遍历时，能够遍历到的节点都是从初始节点可达的，DFS 常用来求解这种 可达性 问题。 在程序实现 DFS 时需要考虑以下问题： 栈：用栈来保存当前节点信息，当遍历新节点返回时能够继续遍历当前节点。也可以使用递归栈。 标记：和 BFS 一样同样需要对已经遍历过得节点进行标记。 查找最大的连通面积 Leetcode : 695. Max Area of Island (Easy) 12345678[[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]] 123456789101112131415161718public int maxAreaOfIsland(int[][] grid) &#123; int m = grid.length, n = grid[0].length; int max = 0; for(int i = 0; i &lt; m; i++)&#123; for(int j = 0; j &lt; n; j++)&#123; if(grid[i][j] == 1) max = Math.max(max, dfs(grid, i, j)); &#125; &#125; return max;&#125;private int dfs(int[][] grid, int i, int j)&#123; int m = grid.length, n = grid[0].length; if(i &lt; 0 || i &gt;= m || j &lt; 0 || j &gt;= n) return 0; if(grid[i][j] == 0) return 0; grid[i][j] = 0; return dfs(grid, i + 1, j) + dfs(grid, i - 1, j) + dfs(grid, i, j + 1) + dfs(grid, i, j - 1) + 1;&#125; 图的连通分量 Leetcode : 547. Friend Circles (Medium) 1234567Input:[[1,1,0], [1,1,0], [0,0,1]]Output: 2Explanation:The 0th and 1st students are direct friends, so they are in a friend circle.The 2nd student himself is in a friend circle. So return 2. 12345678910111213141516171819202122public int findCircleNum(int[][] M) &#123; int n = M.length; int ret = 0; boolean[] hasFind = new boolean[n]; for(int i = 0; i &lt; n; i++) &#123; if(!hasFind[i]) &#123; dfs(M, i, hasFind); ret++; &#125; &#125; return ret;&#125;private void dfs(int[][] M, int i, boolean[] hasFind) &#123; hasFind[i] = true; int n = M.length; for(int k = 0; k &lt; n; k++) &#123; if(M[i][k] == 1 &amp;&amp; !hasFind[k]) &#123; dfs(M, k, hasFind); &#125; &#125;&#125; 矩阵中的连通区域数量 Leetcode : 200. Number of Islands (Medium) 1234511110110101100000000Answer: 1 1234567891011121314151617181920212223242526private int m, n;private int[][] direction = &#123;&#123;0, 1&#125;, &#123;0, -1&#125;, &#123;1, 0&#125;, &#123;-1, 0&#125;&#125;;public int numIslands(char[][] grid) &#123; if (grid == null || grid.length == 0) return 0; m = grid.length; n = grid[0].length; int ret = 0; for (int i = 0; i &lt; m; i++) &#123; for (int j = 0; j &lt; n; j++) &#123; if (grid[i][j] == '1') &#123; dfs(grid, i, j); ret++; &#125; &#125; &#125; return ret;&#125;private void dfs(char[][] grid, int i, int j) &#123; if (i &lt; 0 || i &gt;= m || j &lt; 0 || j &gt;= n || grid[i][j] == '0') return; grid[i][j] = '0'; for (int k = 0; k &lt; direction.length; k++) &#123; dfs(grid, i + direction[k][0], j + direction[k][1]); &#125;&#125; 输出二叉树中所有从根到叶子的路径 Leetcode : 257. Binary Tree Paths (Easy) 12345 1/ \\2 3\\ 5 1[\"1-&gt;2-&gt;5\", \"1-&gt;3\"] 1234567891011121314151617public List&lt;String&gt; binaryTreePaths(TreeNode root) &#123; List&lt;String&gt; ret = new ArrayList(); if(root == null) return ret; dfs(root, \"\", ret); return ret;&#125;private void dfs(TreeNode root, String prefix, List&lt;String&gt; ret)&#123; if(root == null) return; if(root.left == null &amp;&amp; root.right == null)&#123; ret.add(prefix + root.val); return; &#125; prefix += (root.val + \"-&gt;\"); dfs(root.left, prefix, ret); dfs(root.right, prefix, ret);&#125; 填充封闭区域 Leetcode : 130. Surrounded Regions (Medium) 1234567891011For example,X X X XX O O XX X O XX O X XAfter running your function, the board should be:X X X XX X X XX X X XX O X X 题目描述：使得被 ‘X’ 的 ‘O’ 转换为 ‘X’。 先填充最外侧，剩下的就是里侧了。 123456789101112131415161718192021222324252627282930private int[][] direction = &#123;&#123;0, 1&#125;, &#123;0, -1&#125;, &#123;1, 0&#125;, &#123;-1, 0&#125;&#125;;private int m, n;public void solve(char[][] board) &#123; if (board == null || board.length == 0) return; m = board.length; n = board[0].length; for (int i = 0; i &lt; m; i++) &#123; dfs(board, i, 0); dfs(board, i, n - 1); &#125; for (int i = 0; i &lt; n; i++) &#123; dfs(board, 0, i); dfs(board, m - 1, i); &#125; for (int i = 0; i &lt; m; i++) &#123; for (int j = 0; j &lt; n; j++) &#123; if (board[i][j] == 'T') board[i][j] = 'O'; else if (board[i][j] == 'O') board[i][j] = 'X'; &#125; &#125;&#125;private void dfs(char[][] board, int r, int c) &#123; if (r &lt; 0 || r &gt;= m || c &lt; 0 || c &gt;= n || board[r][c] != 'O') return; board[r][c] = 'T'; for (int i = 0; i &lt; direction.length; i++) &#123; dfs(board, r + direction[i][0], c + direction[i][1]); &#125;&#125; 从两个方向都能到达的区域 Leetcode : 417. Pacific Atlantic Water Flow (Medium) 123456789101112Given the following 5x5 matrix: Pacific ~ ~ ~ ~ ~ ~ 1 2 2 3 (5) * ~ 3 2 3 (4) (4) * ~ 2 4 (5) 3 1 * ~ (6) (7) 1 4 5 * ~ (5) 1 1 2 4 * * * * * * AtlanticReturn:[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix). 题目描述：左边和上边是太平洋，右边和下边是大西洋，内部的数字代表海拔，海拔高的地方的水能够流到低的地方，求解水能够流到太平洋和大西洋的所有位置。 1234567891011121314151617181920212223242526272829303132333435363738394041private int m, n;private int[][] matrix;private int[][] direction = &#123;&#123;0, 1&#125;, &#123;0, -1&#125;, &#123;1, 0&#125;, &#123;-1, 0&#125;&#125;;public List&lt;int[]&gt; pacificAtlantic(int[][] matrix) &#123; List&lt;int[]&gt; ret = new ArrayList&lt;&gt;(); if (matrix == null || matrix.length == 0) return ret; this.m = matrix.length; this.n = matrix[0].length; this.matrix = matrix; boolean[][] canReachP = new boolean[m][n]; boolean[][] canReachA = new boolean[m][n]; for (int i = 0; i &lt; m; i++) &#123; dfs(i, 0, canReachP); dfs(i, n - 1, canReachA); &#125; for (int i = 0; i &lt; n; i++) &#123; dfs(0, i, canReachP); dfs(m - 1, i, canReachA); &#125; for (int i = 0; i &lt; m; i++) &#123; for (int j = 0; j &lt; n; j++) &#123; if (canReachP[i][j] &amp;&amp; canReachA[i][j]) &#123; ret.add(new int[]&#123;i, j&#125;); &#125; &#125; &#125; return ret;&#125;private void dfs(int r, int c, boolean[][] canReach) &#123; if(canReach[r][c]) return; canReach[r][c] = true; for (int i = 0; i &lt; direction.length; i++) &#123; int nextR = direction[i][0] + r; int nextC = direction[i][1] + c; if (nextR &lt; 0 || nextR &gt;= m || nextC &lt; 0 || nextC &gt;= n || matrix[r][c] &gt; matrix[nextR][nextC]) continue; dfs(nextR, nextC, canReach); &#125;&#125; N 皇后 Leetcode : 51. N-Queens (Hard) 题目描述：在 n*n 的矩阵中摆放 n 个皇后，并且每个皇后不能在同一行，同一列，同一对角线上，要求解所有的 n 皇后解。 一行一行地摆放，在确定一行中的那个皇后应该摆在哪一列时，需要用三个标记数组来确定某一列是否合法，这三个标记数组分别为：列标记数组、45 度对角线标记数组和 135 度对角线标记数组。 45 度对角线标记数组的维度为 2*n - 1，通过下图可以明确 (r,c) 的位置所在的数组下标为 r + c。 135 度对角线标记数组的维度也是 2*n - 1，(r,c) 的位置所在的数组下标为 n - 1 - (r - c)。 123456789101112131415161718192021222324252627282930313233343536373839404142private List&lt;List&lt;String&gt;&gt; ret;private char[][] nQueens;private boolean[] colUsed;private boolean[] diagonals45Used;private boolean[] diagonals135Used;private int n;public List&lt;List&lt;String&gt;&gt; solveNQueens(int n) &#123; ret = new ArrayList&lt;&gt;(); nQueens = new char[n][n]; Arrays.fill(nQueens, '.'); colUsed = new boolean[n]; diagonals45Used = new boolean[2 * n - 1]; diagonals135Used = new boolean[2 * n - 1]; this.n = n; backstracking(0); return ret;&#125;private void backstracking(int row) &#123; if (row == n) &#123; List&lt;String&gt; list = new ArrayList&lt;&gt;(); for (char[] chars : nQueens) &#123; list.add(new String(chars)); &#125; ret.add(list); return; &#125; for (int col = 0; col &lt; n; col++) &#123; int diagonals45Idx = row + col; int diagonals135Idx = n - 1 - (row - col); if (colUsed[col] || diagonals45Used[diagonals45Idx] || diagonals135Used[diagonals135Idx]) &#123; continue; &#125; nQueens[row][col] = 'Q'; colUsed[col] = diagonals45Used[diagonals45Idx] = diagonals135Used[diagonals135Idx] = true; backstracking(row + 1); colUsed[col] = diagonals45Used[diagonals45Idx] = diagonals135Used[diagonals135Idx] = false; nQueens[row][col] = '.'; &#125;&#125; Backtracking回溯是 DFS 的一种，它不是用在遍历图的节点上，而是用于求解 排列组合 问题，例如有 { ‘a’,’b’,’c’ } 三个字符，求解所有由这三个字符排列得到的字符串。 在程序实现时，回溯需要注意对元素进行标记的问题。使用递归实现的回溯，在访问一个新元素进入新的递归调用，此时需要将新元素标记为已经访问，这样才能在继续递归调用时不用重复访问该元素；但是在递归返回时，需要将该元素标记为未访问，因为只需要保证在一个递归链中不同时访问一个元素，而在不同的递归链是可以访问已经访问过但是不在当前递归链中的元素。 数字键盘组合 Leetcode : 17. Letter Combinations of a Phone Number (Medium) 12Input:Digit string \"23\"Output: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]. 1234567891011121314151617181920private static final String[] KEYS = &#123;\"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"&#125;;public List&lt;String&gt; letterCombinations(String digits) &#123; List&lt;String&gt; ret = new ArrayList&lt;&gt;(); if (digits != null &amp;&amp; digits.length() != 0) &#123; combination(\"\", digits, 0, ret); &#125; return ret;&#125;private void combination(String prefix, String digits, int offset, List&lt;String&gt; ret) &#123; if (offset == digits.length()) &#123; ret.add(prefix); return; &#125; String letters = KEYS[digits.charAt(offset) - '0']; for (char c : letters.toCharArray()) &#123; combination(prefix + c, digits, offset + 1, ret); &#125;&#125; 在矩阵中寻找字符串 Leetcode : 79. Word Search (Medium) 12345678910For example,Given board =[ ['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E']]word = \"ABCCED\", -&gt; returns true,word = \"SEE\", -&gt; returns true,word = \"ABCB\", -&gt; returns false. 1234567891011121314151617181920212223242526272829303132333435private static int[][] shift = &#123;&#123;1, 0&#125;, &#123;-1, 0&#125;, &#123;0, 1&#125;, &#123;0, -1&#125;&#125;;private static boolean[][] visited;private int m;private int n;public boolean exist(char[][] board, String word) &#123; if (word == null || word.length() == 0) return true; if (board == null || board.length == 0 || board[0].length == 0) return false; m = board.length; n = board[0].length; visited = new boolean[m][n]; for (int i = 0; i &lt; m; i++) &#123; for (int j = 0; j &lt; n; j++) &#123; if (dfs(board, word, 0, i, j)) return true; &#125; &#125; return false;&#125;private boolean dfs(char[][] board, String word, int start, int r, int c) &#123; if (start == word.length()) &#123; return true; &#125; if (r &lt; 0 || r &gt;= m || c &lt; 0 || c &gt;= n || board[r][c] != word.charAt(start) || visited[r][c] ) &#123; return false; &#125; visited[r][c] = true; for (int i = 0; i &lt; shift.length; i++) &#123; int nextR = r + shift[i][0]; int nextC = c + shift[i][1]; if (dfs(board, word, start + 1, nextR, nextC)) return true; &#125; visited[r][c] = false; return false;&#125; IP 地址划分 Leetcode : 93. Restore IP Addresses(Medium) 12Given \"25525511135\",return [\"255.255.11.135\", \"255.255.111.35\"]. 1234567891011121314151617181920212223private List&lt;String&gt; ret;public List&lt;String&gt; restoreIpAddresses(String s) &#123; ret = new ArrayList&lt;&gt;(); doRestore(0, \"\", s); return ret;&#125;private void doRestore(int k, String path, String s) &#123; if (k == 4 || s.length() == 0) &#123; if (k == 4 &amp;&amp; s.length() == 0) &#123; ret.add(path); &#125; return; &#125; for (int i = 0; i &lt; s.length() &amp;&amp; i &lt;= 2; i++) &#123; if (i != 0 &amp;&amp; s.charAt(0) == '0') break; String part = s.substring(0, i + 1); if (Integer.valueOf(part) &lt;= 255) &#123; doRestore(k + 1, path.length() != 0 ? path + \".\" + part : part, s.substring(i + 1)); &#125; &#125;&#125; 排列 Leetcode : 46. Permutations (Medium) 123456789[1,2,3] have the following permutations:[ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]] 1234567891011121314151617181920212223public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) &#123; List&lt;List&lt;Integer&gt;&gt; ret = new ArrayList&lt;&gt;(); List&lt;Integer&gt; permuteList = new ArrayList&lt;&gt;(); boolean[] visited = new boolean[nums.length]; backtracking(permuteList, visited, nums, ret); return ret;&#125;private void backtracking(List&lt;Integer&gt; permuteList, boolean[] visited, int[] nums, List&lt;List&lt;Integer&gt;&gt; ret)&#123; if(permuteList.size() == nums.length)&#123; ret.add(new ArrayList(permuteList)); return; &#125; for(int i = 0; i &lt; visited.length; i++)&#123; if(visited[i]) continue; visited[i] = true; permuteList.add(nums[i]); backtracking(permuteList, visited, nums, ret); permuteList.remove(permuteList.size() - 1); visited[i] = false; &#125;&#125; 含有相同元素求排列 Leetcode : 47. Permutations II (Medium) 12[1,1,2] have the following unique permutations:[[1,1,2], [1,2,1], [2,1,1]] 题目描述：数组元素可能含有相同的元素，进行排列时就有可能出先重复的排列，要求重复的排列只返回一个。 在实现上，和 Permutations 不同的是要先排序，然后在添加一个元素时，判断这个元素是否等于前一个元素，如果等于，并且前一个元素还未访问，那么就跳过这个元素。 12345678910111213141516171819202122232425public List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) &#123; List&lt;List&lt;Integer&gt;&gt; ret = new ArrayList&lt;&gt;(); List&lt;Integer&gt; permuteList = new ArrayList&lt;&gt;(); Arrays.sort(nums); boolean[] visited = new boolean[nums.length]; backtracking(permuteList, visited, nums, ret); return ret;&#125;private void backtracking(List&lt;Integer&gt; permuteList, boolean[] visited, int[] nums, List&lt;List&lt;Integer&gt;&gt; ret) &#123; if (permuteList.size() == nums.length) &#123; ret.add(new ArrayList(permuteList)); return; &#125; for (int i = 0; i &lt; visited.length; i++) &#123; if (i != 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; !visited[i - 1]) continue; if (visited[i]) continue; visited[i] = true; permuteList.add(nums[i]); backtracking(permuteList, visited, nums, ret); permuteList.remove(permuteList.size() - 1); visited[i] = false; &#125;&#125; 组合 Leetcode : 77. Combinations (Medium) 123456789If n = 4 and k = 2, a solution is:[ [2,4], [3,4], [2,3], [1,2], [1,3], [1,4],] 1234567891011121314151617181920public List&lt;List&lt;Integer&gt;&gt; combine(int n, int k) &#123; List&lt;List&lt;Integer&gt;&gt; ret = new ArrayList&lt;&gt;(); List&lt;Integer&gt; combineList = new ArrayList&lt;&gt;(); backtracking(1, n, k, combineList, ret); return ret;&#125;private void backtracking(int start, int n, int k, List&lt;Integer&gt; combineList, List&lt;List&lt;Integer&gt;&gt; ret)&#123; if(k == 0)&#123; ret.add(new ArrayList(combineList)); // 这里要重新构造一个 List return; &#125; for(int i = start; i &lt;= n - k + 1; i++)&#123; // 剪枝 combineList.add(i); // 把 i 标记为已访问 backtracking(i + 1, n, k - 1, combineList, ret); combineList.remove(combineList.size() - 1); // 把 i 标记为未访问 &#125;&#125; 组合求和 Leetcode : 39. Combination Sum (Medium) 123given candidate set [2, 3, 6, 7] and target 7,A solution set is:[[7],[2, 2, 3]] 123456789101112131415161718192021private List&lt;List&lt;Integer&gt;&gt; ret;public List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] candidates, int target) &#123; ret = new ArrayList&lt;&gt;(); doCombination(candidates, target, 0, new ArrayList&lt;&gt;()); return ret;&#125;private void doCombination(int[] candidates, int target, int start, List&lt;Integer&gt; list) &#123; if (target == 0) &#123; ret.add(new ArrayList&lt;&gt;(list)); return; &#125; for (int i = start; i &lt; candidates.length; i++) &#123; if (candidates[i] &lt;= target) &#123; list.add(candidates[i]); doCombination(candidates, target - candidates[i], i, list); list.remove(list.size() - 1); &#125; &#125;&#125; 含有相同元素的求组合求和 Leetcode : 40. Combination Sum II (Medium) 12345678For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, A solution set is: [ [1, 7], [1, 2, 5], [2, 6], [1, 1, 6]] 12345678910111213141516171819202122232425private List&lt;List&lt;Integer&gt;&gt; ret;public List&lt;List&lt;Integer&gt;&gt; combinationSum2(int[] candidates, int target) &#123; ret = new ArrayList&lt;&gt;(); Arrays.sort(candidates); doCombination(candidates, target, 0, new ArrayList&lt;&gt;(), new boolean[candidates.length]); return ret;&#125;private void doCombination(int[] candidates, int target, int start, List&lt;Integer&gt; list, boolean[] visited) &#123; if (target == 0) &#123; ret.add(new ArrayList&lt;&gt;(list)); return; &#125; for (int i = start; i &lt; candidates.length; i++) &#123; if (i != 0 &amp;&amp; candidates[i] == candidates[i - 1] &amp;&amp; !visited[i - 1]) continue; if (candidates[i] &lt;= target) &#123; list.add(candidates[i]); visited[i] = true; doCombination(candidates, target - candidates[i], i + 1, list, visited); visited[i] = false; list.remove(list.size() - 1); &#125; &#125;&#125; 子集 Leetcode : 78. Subsets (Medium) 题目描述：找出集合的所有子集，子集不能重复，[1, 2] 和 [2, 1] 这种子集算重复 123456789101112131415161718192021222324private List&lt;List&lt;Integer&gt;&gt; ret;private List&lt;Integer&gt; subsetList;public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums) &#123; ret = new ArrayList&lt;&gt;(); subsetList = new ArrayList&lt;&gt;(); for (int i = 0; i &lt;= nums.length; i++) &#123; backtracking(0, i, nums); &#125; return ret;&#125;private void backtracking(int startIdx, int size, int[] nums) &#123; if (subsetList.size() == size) &#123; ret.add(new ArrayList(subsetList)); return; &#125; for (int i = startIdx; i &lt; nums.length; i++) &#123; subsetList.add(nums[i]); backtracking(i + 1, size, nums); // startIdx 设为下一个元素，使 subset 中的元素都递增排序 subsetList.remove(subsetList.size() - 1); &#125;&#125; 含有相同元素求子集 Leetcode : 90. Subsets II (Medium) 1234567891011For example,If nums = [1,2,2], a solution is:[ [2], [1], [1,2,2], [2,2], [1,2], []] 123456789101112131415161718192021222324252627282930private List&lt;List&lt;Integer&gt;&gt; ret;private List&lt;Integer&gt; subsetList;private boolean[] visited;public List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(int[] nums) &#123; ret = new ArrayList&lt;&gt;(); subsetList = new ArrayList&lt;&gt;(); visited = new boolean[nums.length]; Arrays.sort(nums); for (int i = 0; i &lt;= nums.length; i++) &#123; backtracking(0, i, nums); &#125; return ret;&#125;private void backtracking(int startIdx, int size, int[] nums) &#123; if (subsetList.size() == size) &#123; ret.add(new ArrayList(subsetList)); return; &#125; for (int i = startIdx; i &lt; nums.length; i++) &#123; if (i != 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; !visited[i - 1]) continue; subsetList.add(nums[i]); visited[i] = true; backtracking(i + 1, size, nums); visited[i] = false; subsetList.remove(subsetList.size() - 1); &#125;&#125; 分割字符串使得每部分都是回文数 Leetcode : 131. Palindrome Partitioning (Medium) 12345678910111213141516171819202122232425262728private List&lt;List&lt;String&gt;&gt; ret;public List&lt;List&lt;String&gt;&gt; partition(String s) &#123; ret = new ArrayList&lt;&gt;(); doPartion(new ArrayList&lt;&gt;(), s); return ret;&#125;private void doPartion(List&lt;String&gt; list, String s) &#123; if (s.length() == 0) &#123; ret.add(new ArrayList&lt;&gt;(list)); return; &#125; for (int i = 0; i &lt; s.length(); i++) &#123; if (isPalindrome(s, 0, i)) &#123; list.add(s.substring(0, i + 1)); doPartion(list, s.substring(i + 1)); list.remove(list.size() - 1); &#125; &#125;&#125;private boolean isPalindrome(String s, int begin, int end) &#123; while (begin &lt; end) &#123; if (s.charAt(begin++) != s.charAt(end--)) return false; &#125; return true;&#125; 数独 Leetcode : 37. Sudoku Solver (Hard) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647private boolean[][] rowsUsed = new boolean[9][10];private boolean[][] colsUsed = new boolean[9][10];private boolean[][] cubesUsed = new boolean[9][10];private char[][] board;public void solveSudoku(char[][] board) &#123; this.board = board; for (int i = 0; i &lt; 9; i++) &#123; for (int j = 0; j &lt; 9; j++) &#123; if (board[i][j] == '.') continue; int num = board[i][j] - '0'; rowsUsed[i][num] = true; colsUsed[j][num] = true; cubesUsed[cubeNum(i, j)][num] = true; &#125; &#125; for (int i = 0; i &lt; 9; i++) &#123; for (int j = 0; j &lt; 9; j++) &#123; backtracking(i, j); &#125; &#125;&#125;private boolean backtracking(int row, int col) &#123; while (row &lt; 9 &amp;&amp; board[row][col] != '.') &#123; row = col == 8 ? row + 1 : row; col = col == 8 ? 0 : col + 1; &#125; if (row == 9) &#123; return true; &#125; for (int num = 1; num &lt;= 9; num++) &#123; if (rowsUsed[row][num] || colsUsed[col][num] || cubesUsed[cubeNum(row, col)][num]) continue; rowsUsed[row][num] = colsUsed[col][num] = cubesUsed[cubeNum(row, col)][num] = true; board[row][col] = (char) (num + '0'); if (backtracking(row, col)) return true; board[row][col] = '.'; rowsUsed[row][num] = colsUsed[col][num] = cubesUsed[cubeNum(row, col)][num] = false; &#125; return false;&#125;private int cubeNum(int i, int j) &#123; int r = i / 3; int c = j / 3; return r * 3 + c;&#125; 分治给表达式加括号 Leetcode : 241. Different Ways to Add Parentheses (Medium) 123456Input: \"2-1-1\".((2-1)-1) = 0(2-(1-1)) = 2Output : [0, 2] 12345678910111213141516171819202122public List&lt;Integer&gt; diffWaysToCompute(String input) &#123; int n = input.length(); List&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; n; i++) &#123; char c = input.charAt(i); if (c == '+' || c == '-' || c == '*') &#123; List&lt;Integer&gt; left = diffWaysToCompute(input.substring(0, i)); List&lt;Integer&gt; right = diffWaysToCompute(input.substring(i + 1)); for (int l : left) &#123; for (int r : right) &#123; switch (c) &#123; case '+': ret.add(l + r); break; case '-': ret.add(l - r); break; case '*': ret.add(l * r); break; &#125; &#125; &#125; &#125; &#125; if (ret.size() == 0) ret.add(Integer.valueOf(input)); return ret;&#125; 动态规划递归和动态规划都是将原问题拆成多个子问题然后求解，他们之间最本质的区别是，动态规划保存了子问题的解。 分割整数分割整数的最大乘积 Leetcode : 343. Integer Break (Medim) 题目描述：For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4). 12345678910public int integerBreak(int n) &#123; int[] dp = new int[n + 1]; dp[1] = 1; for(int i = 2; i &lt;= n; i++) &#123; for(int j = 1; j &lt;= i - 1; j++) &#123; dp[i] = Math.max(dp[i], Math.max(j * dp[i - j], j * (i - j))); &#125; &#125; return dp[n];&#125; 按平方数来分割整数 Leetcode : 279. Perfect Squares(Medium) 题目描述：For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9. 12345678910111213141516171819public int numSquares(int n) &#123; List&lt;Integer&gt; squares = new ArrayList&lt;&gt;(); // 存储小于 n 的平方数 int diff = 3; while(square &lt;= n) &#123; squares.add(square); square += diff; diff += 2; &#125; int[] dp = new int[n + 1]; for(int i = 1; i &lt;= n; i++) &#123; int max = Integer.MAX_VALUE; for(int s : squares) &#123; if(s &gt; i) break; max = Math.min(max, dp[i - s] + 1); &#125; dp[i] = max; &#125; return dp[n];&#125; 分割整数构成字母字符串 Leetcode : 91. Decode Ways (Medium) 题目描述：Given encoded message “12”, it could be decoded as “AB” (1 2) or “L” (12). 123456789101112131415public int numDecodings(String s) &#123; if(s == null || s.length() == 0) return 0; int n = s.length(); int[] dp = new int[n + 1]; dp[0] = 1; dp[1] = s.charAt(0) == '0' ? 0 : 1; for(int i = 2; i &lt;= n; i++) &#123; int one = Integer.valueOf(s.substring(i - 1, i)); if(one != 0) dp[i] += dp[i - 1]; if(s.charAt(i - 2) == '0') continue; int two = Integer.valueOf(s.substring(i - 2, i)); if(two &lt;= 26) dp[i] += dp[i - 2]; &#125; return dp[n];&#125; 矩阵路径矩阵的总路径数 Leetcode : 62. Unique Paths (Medium) 题目描述：统计从矩阵左上角到右下角的路径总数，每次只能向左和向下移动。 12345678910public int uniquePaths(int m, int n) &#123; int[] dp = new int[n]; for (int i = 0; i &lt; m; i++) &#123; for (int j = 0; j &lt; n; j++) &#123; if(i == 0) dp[j] = 1; else if(j != 0) dp[j] = dp[j] + dp[j - 1]; &#125; &#125; return dp[n - 1];&#125; 矩阵的最小路径和 Leetcode : 64. Minimum Path Sum (Medium) 题目描述：求从矩阵的左上角到右下角的最小路径和，每次只能向左和向下移动。 12345678910111213public int minPathSum(int[][] grid) &#123; if(grid.length == 0 || grid[0].length == 0) return 0; int m = grid.length, n = grid[0].length; int[] dp = new int[n]; for(int i = 0; i &lt; m; i++) &#123; for(int j = 0; j &lt; n; j++) &#123; if(j == 0) dp[0] = dp[0] + grid[i][0]; else if(i == 0) dp[j] = dp[j - 1] + grid[0][j]; else dp[j] = Math.min(dp[j - 1], dp[j]) + grid[i][j]; &#125; &#125; return dp[n - 1];&#125; 斐波那契数列爬楼梯 Leetcode : 70. Climbing Stairs (Easy) 题目描述：有 N 阶楼梯，每次可以上一阶或者两阶，求有多少种上楼梯的方法。 定义一个数组 dp 存储上楼梯的方法数（为了方便讨论，数组下标从 1 开始），dp[i] 表示走到第 i 个楼梯的方法数目。第 i 个楼梯可以从第 i-1 和 i-2 个楼梯再走一步到达，走到第 i 个楼梯的方法数为走到第 i-1 和第 i-2 个楼梯的方法数之和。 dp[N] 即为所求。 考虑到 dp[i] 只与 dp[i - 1] 和 dp[i - 2] 有关，因此可以只用两个变量来存储 dp[i - 1] 和 dp[i - 2] 即可，使得原来的 O(n) 空间复杂度优化为 O(1) 复杂度。 123456789101112public int climbStairs(int n) &#123; if(n == 1) return 1; if(n == 2) return 2; // 前一个楼梯、后一个楼梯 int pre1 = 2, pre2 = 1; for(int i = 2; i &lt; n; i++)&#123; int cur = pre1 + pre2; pre2 = pre1; pre1 = cur; &#125; return pre1;&#125; 母牛生产 程序员代码面试指南-P181 题目描述：假设农场中成熟的母牛每年都会生 1 头小母牛，并且永远不会死。第一年有 1 只小母牛，从第二年开始，母牛开始生小母牛。每只小母牛 3 年之后成熟又可以生小母牛。给定整数 N，求 N 年后牛的数量。 第 i 年成熟的牛的数量为： 强盗抢劫 Leetcode : 198. House Robber (Easy) 题目描述：抢劫一排住户，但是不能抢邻近的住户，求最大抢劫量。 定义 dp 数组用来存储最大的抢劫量，其中 dp[i] 表示抢到第 i 个住户时的最大抢劫量。由于不能抢劫邻近住户，因此如果抢劫了第 i 个住户那么只能抢劫 i - 2 和 i - 3 的住户，所以 O(n) 空间复杂度实现方法： 1234567891011121314public int rob(int[] nums) &#123; int n = nums.length; if(n == 0) return 0; if(n == 1) return nums[0]; if(n == 2) return Math.max(nums[0], nums[1]); int[] dp = new int[n]; dp[0] = nums[0]; dp[1] = nums[1]; dp[2] = nums[0] + nums[2]; for(int i = 3; i &lt; n; i++)&#123; dp[i] = Math.max(dp[i -2], dp[i - 3]) + nums[i]; &#125; return Math.max(dp[n - 1], dp[n - 2]);&#125; O(1) 空间复杂度实现方法： 1234567891011121314public int rob(int[] nums) &#123; int n = nums.length; if(n == 0) return 0; if(n == 1) return nums[0]; if(n == 2) return Math.max(nums[0], nums[1]); int pre3 = nums[0], pre2 = nums[1], pre1 = nums[2] + nums[0]; for(int i = 3; i &lt; n; i++)&#123; int cur = Math.max(pre2, pre3) + nums[i]; pre3 = pre2; pre2 = pre1; pre1 = cur; &#125; return Math.max(pre1, pre2);&#125; 强盗在环形街区抢劫 Leetcode : 213. House Robber II (Medium) 1234567891011121314151617181920public int rob(int[] nums) &#123; if(nums == null || nums.length == 0) return 0; int n = nums.length; if(n == 1) return nums[0]; return Math.max(rob(nums, 0, n - 2), rob(nums, 1, n - 1));&#125;private int rob(int[] nums, int s, int e) &#123; int n = nums.length; if(e - s == 0) return nums[s]; if(e - s == 1) return Math.max(nums[s], nums[s + 1]); int[] dp = new int[n]; dp[s] = nums[s]; dp[s + 1] = nums[s + 1]; dp[s + 2] = nums[s] + nums[s + 2]; for (int i = s + 3; i &lt;= e; i++) &#123; dp[i] = Math.max(dp[i - 2], dp[i - 3]) + nums[i]; &#125; return Math.max(dp[e], dp[e - 1]);&#125; 信件错排 题目描述：有 N 个 信 和 信封，它们被打乱，求错误装信的方式数量。 定义一个数组 dp 存储错误方式数量，dp[i] 表示前 i 个信和信封的错误方式数量。假设第 i 个信装到第 j 个信封里面，而第 j 个信装到第 k 个信封里面。根据 i 和 k 是否相等，有两种情况： ① i==k，交换 i 和 k 的信后，它们的信和信封在正确的位置，但是其余 i-2 封信有 dp[i-2] 种错误装信的方式。由于 j 有 i-1 种取值，因此共有 (i-1)*dp[i-2] 种错误装信方式。 ② i != k，交换 i 和 j 的信后，第 i 个信和信封在正确的位置，其余 i-1 封信有 dp[i-1] 种错误装信方式。由于 j 有 i-1 种取值，因此共有 (n-1)*dp[i-1] 种错误装信方式。 综上所述，错误装信数量方式数量为： dp[N] 即为所求。 和上楼梯问题一样，dp[i] 只与 dp[i-1] 和 dp[i-2] 有关，因此也可以只用两个变量来存储 dp[i-1] 和 dp[i-2]。 最长递增子序列已知一个序列 {S1, S2,…,Sn} ，取出若干数组成新的序列 {Si1, Si2,…, Sim}，其中 i1、i2 … im 保持递增，即新序列中各个数仍然保持原数列中的先后顺序，称新序列为原序列的一个 子序列 。 如果在子序列中，当下标 ix &gt; iy 时，Six &gt; Siy，称子序列为原序列的一个 递增子序列 。 定义一个数组 dp 存储最长递增子序列的长度，dp[n] 表示以 Sn 结尾的序列的最长递增子序列长度。对于一个递增子序列 {Si1, Si2,…,Sim}，如果 im &lt; n 并且 Sim &lt; Sn ，此时 {Si1, Si2,…, Sim, Sn} 为一个递增子序列，递增子序列的长度增加 1。满足上述条件的递增子序列中，长度最长的那个递增子序列就是要找的，在长度最长的递增子序列上加上 Sn 就构成了以 Sn 为结尾的最长递增子序列。因此 dp[n] = max{ dp[i]+1 | Si &lt; Sn &amp;&amp; i &lt; n} 。 因为在求 dp[n] 时可能无法找到一个满足条件的递增子序列，此时 {Sn} 就构成了递增子序列，因此需要对前面的求解方程做修改，令 dp[n] 最小为 1，即： 对于一个长度为 N 的序列，最长子序列并不一定会以 SN 为结尾，因此 dp[N] 不是序列的最长递增子序列的长度，需要遍历 dp 数组找出最大值才是所要的结果，即 max{ dp[i] | 1 &lt;= i &lt;= N} 即为所求。 最长递增子序列 Leetcode : 300. Longest Increasing Subsequence (Medium) 12345678910111213141516public int lengthOfLIS(int[] nums) &#123; int n = nums.length; int[] dp = new int[n]; for(int i = 0; i &lt; n; i++)&#123; int max = 1; for(int j = 0; j &lt; i; j++)&#123; if(nums[i] &gt; nums[j]) max = Math.max(max, dp[j] + 1); &#125; dp[i] = max; &#125; int ret = 0; for(int i = 0; i &lt; n; i++)&#123; ret = Math.max(ret, dp[i]); &#125; return ret;&#125; 以上解法的时间复杂度为 O(n2) ，可以使用二分查找使得时间复杂度降低为 O(nlogn)。定义一个 tails 数组，其中 tails[i] 存储长度为 i + 1 的最长递增子序列的最后一个元素，例如对于数组 [4,5,6,3]，有 123len = 1 : [4], [5], [6], [3] =&gt; tails[0] = 3len = 2 : [4, 5], [5, 6] =&gt; tails[1] = 5len = 3 : [4, 5, 6] =&gt; tails[2] = 6 对于一个元素 x，如果它大于 tails 数组所有的值，那么把它添加到 tails 后面；如果 tails[i-1] &lt; x &lt;= tails[i]，那么更新 tails[i] = x 。 可以看出 tails 数组保持有序，因此在查找 Si 位于 tails 数组的位置时就可以使用二分查找。 123456789101112131415161718192021public int lengthOfLIS(int[] nums) &#123; int n = nums.length; int[] tails = new int[n]; int size = 0; for(int i = 0; i &lt; n; i++)&#123; int idx = binarySearch(tails, 0, size, nums[i]); tails[idx] = nums[i]; if(idx == size) size++; &#125; return size;&#125;private int binarySearch(int[] nums, int sIdx, int eIdx, int key)&#123; while(sIdx &lt; eIdx)&#123; int mIdx = sIdx + (eIdx - sIdx) / 2; if(nums[mIdx] == key) return mIdx; else if(nums[mIdx] &gt; key) eIdx = mIdx; else sIdx = mIdx + 1; &#125; return sIdx;&#125; 最长摆动子序列 Leetcode : 376. Wiggle Subsequence (Medium) 要求：使用 O(n) 时间复杂度求解。 使用两个状态 up 和 down。 12345678910public int wiggleMaxLength(int[] nums) &#123; int len = nums.length; if (len == 0) return 0; int up = 1, down = 1; for (int i = 1; i &lt; len; i++) &#123; if (nums[i] &gt; nums[i - 1]) up = down + 1; else if (nums[i] &lt; nums[i - 1]) down = up + 1; &#125; return Math.max(up, down);&#125; 最长公共子系列对于两个子序列 S1 和 S2，找出它们最长的公共子序列。 定义一个二维数组 dp 用来存储最长公共子序列的长度，其中 dp[i][j] 表示 S1 的前 i 个字符与 S2 的前 j 个字符最长公共子序列的长度。考虑 S1i 与 S2j 值是否相等，分为两种情况： ① 当 S1i==S2j 时，那么就能在 S1 的前 i-1 个字符与 S2 的前 j-1 个字符最长公共子序列的基础上再加上 S1i 这个值，最长公共子序列长度加 1 ，即 dp[i][j] = dp[i-1][j-1] + 1。 ② 当 S1i != S2j 时，此时最长公共子序列为 S1 的前 i-1 个字符和 S2 的前 j 个字符最长公共子序列，与 S1 的前 i 个字符和 S2 的前 j-1 个字符最长公共子序列，它们的最大者，即 dp[i][j] = max{ dp[i-1][j], dp[i][j-1] }。 综上，最长公共子系列的状态转移方程为： 对于长度为 N 的序列 S1 和 长度为 M 的序列 S2，dp[N][M] 就是序列 S1 和序列 S2 的最长公共子序列长度。 与最长递增子序列相比，最长公共子序列有以下不同点： ① 针对的是两个序列，求它们的最长公共子序列。② 在最长递增子序列中，dp[i] 表示以 Si 为结尾的最长递增子序列长度，子序列必须包含 Si ；在最长公共子序列中，dp[i][j] 表示 S1 中前 i 个字符与 S2 中前 j 个字符的最长公共子序列长度，不一定包含 S1i 和 S2j 。③ 由于 2 ，在求最终解时，最长公共子序列中 dp[N][M] 就是最终解，而最长递增子序列中 dp[N] 不是最终解，因为以 SN 为结尾的最长递增子序列不一定是整个序列最长递增子序列，需要遍历一遍 dp 数组找到最大者。 1234567891011public int lengthOfLCS(int[] nums1, int[] nums2) &#123; int n1 = nums1.length, n2 = nums2.length; int[][] dp = new int[n1 + 1][n2 + 1]; for (int i = 1; i &lt;= n1; i++) &#123; for (int j = 1; j &lt;= n2; j++) &#123; if (nums1[i - 1] == nums2[j - 1]) dp[i][j] = dp[i - 1][j - 1] + 1; else dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); &#125; &#125; return dp[n1][n2];&#125; 0-1 背包有一个容量为 N 的背包，要用这个背包装下物品的价值最大，这些物品有两个属性：体积 w 和价值 v。 定义一个二维数组 dp 存储最大价值，其中 dp[i][j] 表示体积不超过 j 的情况下，前 i 件物品能达到的最大价值。设第 i 件物品体积为 w，价值为 v，根据第 i 件物品是否添加到背包中，可以分两种情况讨论： ① 第 i 件物品没添加到背包，总体积不超过 j 的前 i 件物品的最大价值就是总体积不超过 j 的前 i-1 件物品的最大价值，dp[i][j] = dp[i-1][j]。② 第 i 件物品添加到背包中，dp[i][j] = dp[i-1][j-w] + v。 第 i 件物品可添加也可以不添加，取决于哪种情况下最大价值更大。 综上，0-1 背包的状态转移方程为： 123456789101112131415public int knapsack(int W, int N, int[] weights, int[] values) &#123; int[][] dp = new int[N][W]; for (int i = W - 1; i &gt;= 0; i--) &#123; dp[0][i] = i &gt; weights[0] ? values[0] : 0; &#125; for (int i = 1; i &lt; N; i++) &#123; for (int j = W - 1; j &gt;= weights[i]; j--) &#123; dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - weights[i]] + values[i]); &#125; for (int j = weights[i - 1] - 1; j &gt;= 0; j--) &#123; dp[i][j] = dp[i - 1][j]; &#125; &#125; return dp[N - 1][W - 1];&#125; 空间优化 在程序实现时可以对 0-1 背包做优化。观察状态转移方程可以知道，前 i 件物品的状态仅由前 i-1 件物品的状态有关，因此可以将 dp 定义为一维数组，其中 dp[j] 既可以表示 dp[i-1][j] 也可以表示 dp[i][j]。此时， 因为 dp[j-w] 表示 dp[i-1][j-w]，因此不能先求 dp[i][j-w] 防止将 dp[i-1][j-w] 覆盖。也就是说要先计算 dp[i][j] 再计算 dp[i][j-w]，在程序实现时需要按倒序来循环求解。 无法使用贪心算法的解释 0-1 背包问题无法使用贪心算法来求解，也就是说不能按照先添加性价比最高的物品来达到最优，这是因为这种方式可能造成背包空间的浪费，从而无法达到最优。考虑下面的物品和一个容量为 5 的背包，如果先添加物品 0 再添加物品 1，那么只能存放的价值为 16，浪费了大小为 2 的空间。最优的方式是存放物品 1 和物品 2，价值为 22. id w v v/w 0 1 6 6 1 2 10 5 2 3 12 4 变种 完全背包：物品可以无限个，可以转换为 0-1 背包，令每种物品的体积和价值变为 1/2/4… 倍数，把它们都当成一个新物品，然后一种物品只能添加一次。 多重背包：物品数量有限制，同样可以转换为 0-1 背包。 多维费用背包：物品不仅有重量，还有体积，同时考虑这两种限制。 其它：物品之间相互约束或者依赖。 划分数组为和相等的两部分 Leetcode : 416. Partition Equal Subset Sum (Medium) 可以看成一个背包大小为 sum/2 的 0-1 背包问题，但是也有不同的地方，这里没有价值属性，并且背包必须被填满。 以下实现使用了空间优化。 12345678910111213141516171819202122public boolean canPartition(int[] nums) &#123; int sum = 0; for (int num : nums) &#123; sum += num; &#125; if (sum % 2 != 0) &#123; return false; &#125; int W = sum / 2; boolean[] dp = new boolean[W + 1]; int n = nums.length; for(int i = 0; i &lt;= W; i++) &#123; if(nums[0] == i) dp[i] = true; &#125; for(int i = 1; i &lt; n; i++) &#123; for(int j = W; j &gt;= nums[i]; j--) &#123; dp[j] = dp[j] || dp[j - nums[i]]; &#125; &#125; return dp[W];&#125; 字符串按单词列表分割 Leetcode : 139. Word Break (Medium) 123s = \"leetcode\",dict = [\"leet\", \"code\"].Return true because \"leetcode\" can be segmented as \"leet code\". 1234567891011121314public boolean wordBreak(String s, List&lt;String&gt; wordDict) &#123; int n = s.length(); boolean[] dp = new boolean[n + 1]; dp[0] = true; for (int i = 1; i &lt;= n; i++) &#123; for (String word : wordDict) &#123; if (word.length() &lt;= i &amp;&amp; word.equals(s.substring(i - word.length(), i))) &#123; dp[i] = dp[i] || dp[i - word.length()]; &#125; &#125; &#125; return dp[n];&#125; 改变一组数的正负号使得它们的和为一给定数 Leetcode : 494. Target Sum (Medium) 1234567891011Input: nums is [1, 1, 1, 1, 1], S is 3. Output: 5Explanation: -1+1+1+1+1 = 3+1-1+1+1+1 = 3+1+1-1+1+1 = 3+1+1+1-1+1 = 3+1+1+1+1-1 = 3There are 5 ways to assign symbols to make the sum of nums be target 3. 该问题可以转换为 subset sum 问题，从而使用 0-1 背包的方法来求解。可以将这组数看成两部分，P 和 N，其中 P 使用正号，N 使用负号，有以下推导： 123 sum(P) - sum(N) = targetsum(P) + sum(N) + sum(P) - sum(N) = target + sum(P) + sum(N) 2 * sum(P) = target + sum(nums) 因此只要找到一个子集，令它们都取正号，并且和等于 (target + sum(nums))/2，就证明存在解。 1234567891011121314151617181920212223public int findTargetSumWays(int[] nums, int S) &#123; int sum = 0; for (int num : nums) &#123; sum += num; &#125; if (sum &lt; S || (sum + S) % 2 == 1) &#123; return 0; &#125; return subsetSum(nums, (sum + S) &gt;&gt;&gt; 1);&#125;private int subsetSum(int[] nums, int targetSum) &#123; Arrays.sort(nums); int[] dp = new int[targetSum + 1]; dp[0] = 1; for (int i = 0; i &lt; nums.length; i++) &#123; int num = nums[i]; for (int j = targetSum; j &gt;= num; j--) &#123; dp[j] = dp[j] + dp[j - num]; &#125; &#125; return dp[targetSum];&#125; 01字符构成最多的字符串 Leetcode : 474. Ones and Zeroes (Medium) 1234Input: Array = &#123;\"10\", \"0001\", \"111001\", \"1\", \"0\"&#125;, m = 5, n = 3Output: 4Explanation: This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are “10,”0001”,”1”,”0” 这是一个多维费用的 0-1 背包问题，有两个背包大小，0 的数量和 1 的数量。 123456789101112131415161718192021public int findMaxForm(String[] strs, int m, int n) &#123; if (strs == null || strs.length == 0) return 0; int l = strs.length; int[][] dp = new int[m + 1][n + 1]; for (int i = 0; i &lt; l; i++) &#123; String s = strs[i]; int ones = 0, zeros = 0; for (char c : s.toCharArray()) &#123; if (c == '0') zeros++; else if (c == '1') ones++; &#125; for (int j = m; j &gt;= zeros; j--) &#123; for (int k = n; k &gt;= ones; k--) &#123; if (zeros &lt;= j &amp;&amp; ones &lt;= k) &#123; dp[j][k] = Math.max(dp[j][k], dp[j - zeros][k - ones] + 1); &#125; &#125; &#125; &#125; return dp[m][n];&#125; 找零钱 Leetcode : 322. Coin Change (Medium) 题目描述：给一些面额的硬币，要求用这些硬币来组成给定面额的钱数，并且使得硬币数量最少。硬币可以重复使用。 这是一个完全背包问题，完全背包问题和 0-1背包问题在实现上唯一的不同是，第二层循环是从 0 开始的，而不是从尾部开始。 12345678910111213public int coinChange(int[] coins, int amount) &#123; int[] dp = new int[amount + 1]; Arrays.fill(dp, amount + 1); dp[0] = 0; for (int i = 1; i &lt;= amount; i++) &#123; for (int j = 0; j &lt; coins.length; j++) &#123; if (coins[j] &lt;= i) &#123; dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1); &#125; &#125; &#125; return dp[amount] &gt; amount ? -1 : dp[amount];&#125; 组合总和 Leetcode : 377. Combination Sum IV (Medium) 123456789101112131415nums = [1, 2, 3]target = 4The possible combination ways are:(1, 1, 1, 1)(1, 1, 2)(1, 2, 1)(1, 3)(2, 1, 1)(2, 2)(3, 1)Note that different sequences are counted as different combinations.Therefore the output is 7. 123456789101112public int combinationSum4(int[] nums, int target) &#123; int[] dp = new int[target + 1]; dp[0] = 1; for (int i = 1; i &lt;= target; i++) &#123; for (int j = 0; j &lt; nums.length; j++) &#123; if(nums[j] &lt;= i) &#123; dp[i] += dp[i - nums[j]]; &#125; &#125; &#125; return dp[target];&#125; 只能进行两次的股票交易 Leetcode : 123. Best Time to Buy and Sell Stock III (Hard) 1234567891011public int maxProfit(int[] prices) &#123; int firstBuy = Integer.MIN_VALUE, firstSell = 0; int secondBuy = Integer.MIN_VALUE, secondSell = 0; for (int curPrice : prices) &#123; if (firstBuy &lt; -curPrice) firstBuy = -curPrice; if (firstSell &lt; firstBuy + curPrice) firstSell = firstBuy + curPrice; if (secondBuy &lt; firstSell - curPrice) secondBuy = firstSell - curPrice; if (secondSell &lt; secondBuy + curPrice) secondSell = secondBuy + curPrice; &#125; return secondSell;&#125; 只能进行 k 次的股票交易 Leetcode : 188. Best Time to Buy and Sell Stock IV (Hard) 1dp[i, j] = max(dp[i, j-1], prices[j] - prices[jj] + dp[i-1, jj]) &#123; jj in range of [0, j-1] &#125; = max(dp[i, j-1], prices[j] + max(dp[i-1, jj] - prices[jj])) 1234567891011121314151617181920public int maxProfit(int k, int[] prices) &#123; int n = prices.length; if (k &gt;= n/2) &#123; int maxPro = 0; for (int i = 1; i &lt; n; i++) &#123; if (prices[i] &gt; prices[i-1]) maxPro += prices[i] - prices[i-1]; &#125; return maxPro; &#125; int[][] dp = new int[k + 1][n]; for (int i = 1; i &lt;= k; i++) &#123; int localMax = dp[i - 1][0] - prices[0]; for (int j = 1; j &lt; n; j++) &#123; dp[i][j] = Math.max(dp[i][j - 1], prices[j] + localMax); localMax = Math.max(localMax, dp[i - 1][j] - prices[j]); &#125; &#125; return dp[k][n - 1];&#125; 数组区间数组区间和 Leetcode : 303. Range Sum Query - Immutable (Easy) 求区间 i ~ j 的和，可以转换为 sum[j] - sum[i-1]，其中 sum[i] 为 0 ~ j 的和。 1234567891011121314class NumArray &#123; int[] nums; public NumArray(int[] nums) &#123; for(int i = 1; i &lt; nums.length; i++) nums[i] += nums[i - 1]; this.nums = nums; &#125; public int sumRange(int i, int j) &#123; return i == 0 ? nums[j] : nums[j] - nums[i - 1]; &#125;&#125; 子数组最大的和 Leetcode : 53. Maximum Subarray (Easy) 令 sum[i] 为以 num[i] 为结尾的子数组最大的和，可以由 sum[i-1] 得到 sum[i] 的值，如果 sum[i-1] 小于 0，那么以 num[i] 为结尾的子数组不能包含前面的内容，因为加上前面的部分，那么和一定会比 num[i] 还小。 1234567891011public int maxSubArray(int[] nums) &#123; int n = nums.length; int[] sum = new int[n]; sum[0] = nums[0]; int max = sum[0]; for(int i = 1; i &lt; n; i++)&#123; sum[i] = (sum[i-1] &gt; 0 ? sum[i-1] : 0) + nums[i]; max = Math.max(max, sum[i]); &#125; return max;&#125; 空间复杂度可以优化成 O(1) 空间复杂度 123456789public int maxSubArray(int[] nums) &#123; int max = nums[0]; int oldsum = nums[0]; for (int i = 1; i &lt; nums.length; i++) &#123; oldsum = (oldsum &gt; 0 ? oldsum: 0) + nums[i]; max = Math.max(max, oldsum); &#125; return max;&#125; 数组中等差递增子区间的个数 Leetcode : 413. Arithmetic Slices (Medium) 123A = [1, 2, 3, 4]return: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself. 对于 (1,2,3,4)，它有三种组成递增子区间的方式，而对于 (1,2,3,4,5)，它组成递增子区间的方式除了 (1,2,3,4) 的三种外还多了一种，即 (1,2,3,4,5)，因此 dp[i] = dp[i - 1] + 1。 1234567891011121314public int numberOfArithmeticSlices(int[] A) &#123; int n = A.length; int[] dp = new int[n]; for(int i = 2; i &lt; n; i++) &#123; if(A[i] - A[i - 1] == A[i - 1] - A[i - 2]) &#123; dp[i] = dp[i - 1] + 1; &#125; &#125; int ret = 0; for(int cnt : dp) &#123; ret += cnt; &#125; return ret;&#125; 字符串编辑删除两个字符串的字符使它们相等 Leetcode : 583. Delete Operation for Two Strings (Medium) 可以转换为求两个字符串的最长公共子序列问题。 123456789101112public int minDistance(String word1, String word2) &#123; int m = word1.length(), n = word2.length(); int[][] dp = new int[m + 1][n + 1]; for (int i = 0; i &lt;= m; i++) &#123; for (int j = 0; j &lt;= n; j++) &#123; if (i == 0 || j == 0) continue; dp[i][j] = word1.charAt(i - 1) == word2.charAt(j - 1) ? dp[i - 1][j - 1] + 1 : Math.max(dp[i][j - 1], dp[i - 1][j]); &#125; &#125; return m + n - 2 * dp[m][n];&#125; 修改一个字符串称为另一个字符串 // TODO Leetcode : 72. Edit Distance (Hard) 其它问题需要冷却期的股票交易 Leetcode : 309. Best Time to Buy and Sell Stock with Cooldown(Medium) 题目描述：交易之后需要有一天的冷却时间。 123s0[i] = max(s0[i - 1], s2[i - 1]); // Stay at s0, or rest from s2s1[i] = max(s1[i - 1], s0[i - 1] - prices[i]); // Stay at s1, or buy from s0s2[i] = s1[i - 1] + prices[i]; // Only one way from s1 12345678910111213141516public int maxProfit(int[] prices) &#123; if (prices == null || prices.length == 0) return 0; int n = prices.length; int[] s0 = new int[n]; int[] s1 = new int[n]; int[] s2 = new int[n]; s0[0] = 0; s1[0] = -prices[0]; s2[0] = Integer.MIN_VALUE; for (int i = 1; i &lt; n; i++) &#123; s0[i] = Math.max(s0[i - 1], s2[i - 1]); s1[i] = Math.max(s1[i - 1], s0[i - 1] - prices[i]); s2[i] = Math.max(s2[i - 1], s1[i - 1] + prices[i]); &#125; return Math.max(s0[n - 1], s2[n - 1]);&#125; 统计从 0 ~ n 每个数的二进制表示中 1 的个数 Leetcode : 338. Counting Bits (Medium) 对于数字 6(110)，它可以看成是数字 2(10) 前面加上一个 1 ，因此 dp[i] = dp[i&amp;(i-1)] + 1; 1234567public int[] countBits(int num) &#123; int[] ret = new int[num + 1]; for(int i = 1; i &lt;= num; i++)&#123; ret[i] = ret[i&amp;(i-1)] + 1; &#125; return ret;&#125; 一组整数对能够构成的最长链 Leetcode : 646. Maximum Length of Pair Chain (Medium) 对于 (a, b) 和 (c, d) ，如果 b &lt; c，则它们可以构成一条链。 12345678910111213141516171819202122public int findLongestChain(int[][] pairs) &#123; if(pairs == null || pairs.length == 0) &#123; return 0; &#125; Arrays.sort(pairs, (a, b) -&gt; (a[0] - b[0])); int n = pairs.length; int[] dp = new int[n]; Arrays.fill(dp, 1); for(int i = 0; i &lt; n; i++) &#123; for(int j = 0; j &lt; i; j++) &#123; if(pairs[i][0] &gt; pairs[j][1])&#123; dp[i] = Math.max(dp[i], dp[j] + 1); &#125; &#125; &#125; int ret = 0; for(int num : dp) &#123; ret = Math.max(ret, num); &#125; return ret;&#125; 买入和售出股票最大的收益 Leetcode : 121. Best Time to Buy and Sell Stock (Easy) 只进行一次交易。 只要记录前面的最小价格，将这个最小价格作为买入价格，然后将当前的价格作为售出价格，查看这个价格是否是当前的最大价格。 1234567891011public int maxProfit(int[] prices) &#123; int n = prices.length; if(n == 0) return 0; int soFarMin = prices[0]; int max = 0; for(int i = 1; i &lt; n; i++)&#123; if(soFarMin &gt; prices[i]) soFarMin = prices[i]; else max = Math.max(max, prices[i] - soFarMin); &#125; return max;&#125; 复制粘贴字符 Leetcode : 650. 2 Keys Keyboard (Medium) 12345678910111213public int minSteps(int n) &#123; int[] dp = new int[n + 1]; for (int i = 2; i &lt;= n; i++) &#123; dp[i] = i; for (int j = i - 1; j &gt;= 0; j--) &#123; if (i % j == 0) &#123; dp[i] = dp[j] + dp[i / j]; break; &#125; &#125; &#125; return dp[n];&#125; 1234567public int minSteps(int n) &#123; if (n == 1) return 0; for (int i = 2; i &lt;= Math.sqrt(n); i++) &#123; if (n % i == 0) return i + minSteps(n / i); &#125; return n;&#125; 数学素数素数分解 每一个数都可以分解成素数的乘积，例如 84 = 22 * 31 * 50 * 71 * 110 * 130 * 170 * … 整除 令 x = 2m0 * 3m1 * 5m2 * 7m3 * 11m4 * …令 y = 2n0 * 3n1 * 5n2 * 7n3 * 11n4 * … 如果 x 整除 y（y mod x == 0），则对于所有 i，mi &lt;= ni。 x 和 y 的 最大公约数 为：gcd(x,y) = 2min(m0,n0) * 3min(m1,n1) * 5min(m2,n2) * … x 和 y 的 最小公倍数 为：lcm(x,y) = 2max(m0,n0) * 3max(m1,n1) * 5max(m2,n2) * … 生成素数序列 Leetcode : 204. Count Primes (Easy) 埃拉托斯特尼筛法在每次找到一个素数时，将能被素数整除的数排除掉。 12345678910111213public int countPrimes(int n) &#123; boolean[] notPrimes = new boolean[n + 1]; int cnt = 0; for(int i = 2; i &lt; n; i++)&#123; if(notPrimes[i]) continue; cnt++; // 从 i * i 开始，因为如果 k &lt; i，那么 k * i 在之前就已经被去除过了 for(long j = (long) i * i; j &lt; n; j += i)&#123; notPrimes[(int) j] = true; &#125; &#125; return cnt;&#125; 最大公约数1234int gcd(int a, int b) &#123; if (b == 0) return a; return gcd(b, a % b);&#125; 最大公倍数为两数的乘积除以最大公约数。 123int lcm(int a, int b)&#123; return a * b / gcd(a, b);&#125; 对于最大公约数问题，因为需要计算 a % b ，而这个操作是比较耗时的，可以使用 编程之美：2.7 的方法，利用减法和移位操作来替换它。 对于 a 和 b 的最大公约数 f(a, b)，有： 1. 如果 a 和 b 均为偶数，f(a, b) = 2*f(a/2, b/2);2. 如果 a 是偶数 b 是奇数，f(a, b) = f(a/2, b);3. 如果 b 是偶数 a 是奇数，f(a, b) = f(a, b/2);4. 如果 a 和 b 均为奇数，f(a, b) = f(a, a-b); 乘 2 和除 2 都可以转换为移位操作。 进制转换Java 中 static String toString(int num, int radix) 可以将一个整数装换为 redix 进制表示的字符串。 7 进制 Leetcode : 504. Base 7 (Easy) 123456789public String convertToBase7(int num) &#123; if (num &lt; 0) &#123; return '-' + convertToBase7(-num); &#125; if (num &lt; 7) &#123; return num + \"\"; &#125; return convertToBase7(num / 7) + num % 7;&#125; 16 进制 Leetcode : 405. Convert a Number to Hexadecimal (Easy) 12345678910public String toHex(int num) &#123; char[] map = &#123;'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'&#125;; if(num == 0) return \"0\"; String ret = \"\"; while(num != 0)&#123; ret = map[(num &amp; 0b1111)] + ret; num &gt;&gt;&gt;= 4; &#125; return ret;&#125; 阶乘统计阶乘尾部有多少个 0 Leetcode : 172. Factorial Trailing Zeroes (Easy) 尾部的 0 由 2 * 5 得来，2 的数量明显多于 5 的数量，因此只要统计有多少个 5 即可。 对于一个数 N，它所包含 5 的个数为：N/5 + N/52 + N/53 + …，其中 N/5 表示不大于 N 的数中 5 的倍数贡献一个 5，N/52 表示不大于 N 的数中 52 的倍数再贡献一个 5 …。 123public int trailingZeroes(int n) &#123; return n == 0 ? 0 : n / 5 + trailingZeroes(n / 5);&#125; 如果统计的是 N! 的二进制表示中最低位 1 的位置，只要统计有多少个 2 即可，该题目出自 编程之美：2.2 。和求解有多少个 5 一样，2 的个数为 N/2 + N/22 + N/23 + … 字符串加法减法二进制加法 Leetcode : 67. Add Binary (Easy) 123456789101112public String addBinary(String a, String b) &#123; int i = a.length() - 1, j = b.length() - 1, carry = 0; String str = \"\"; while(i &gt;= 0 || j &gt;= 0)&#123; if(i &gt;= 0 &amp;&amp; a.charAt(i--) == '1') carry++; if(j &gt;= 0 &amp;&amp; b.charAt(j--) == '1') carry++; str = (carry % 2) + str; carry /= 2; &#125; if(carry == 1) str = \"1\" + str; return str;&#125; 字符串加法 Leetcode : 415. Add Strings (Easy) 题目描述：字符串的值为非负整数 1234567891011public String addStrings(String num1, String num2) &#123; StringBuilder sb = new StringBuilder(); int carry = 0; for(int i = num1.length() - 1, j = num2.length() - 1; i &gt;= 0 || j &gt;= 0 || carry == 1; i--, j--)&#123; int x = i &lt; 0 ? 0 : num1.charAt(i) - '0'; int y = j &lt; 0 ? 0 : num2.charAt(j) - '0'; sb.append((x + y + carry) % 10); carry = (x + y + carry) / 10; &#125; return sb.reverse().toString();&#125; 相遇问题改变数组元素使所有的数组元素都相等 Leetcode : 462. Minimum Moves to Equal Array Elements II (Medium) 题目描述：每次可以对一个数组元素加一或者减一，求最小的改变次数。 这是个典型的相遇问题，移动距离最小的方式是所有元素都移动到中位数。理由如下： 设 m 为中位数。a 和 b 是 m 两边的两个元素，且 b &gt; a。要使 a 和 b 相等，它们总共移动的次数为 b - a，这个值等于 (b - m) + (m - a)，也就是把这两个数移动到中位数的移动次数。 设数组长度为 N，则可以找到 N/2 对 a 和 b 的组合，使它们都移动到 m 的位置。 解法 1 先排序，时间复杂度：O(NlgN) 1234567891011public int minMoves2(int[] nums) &#123; Arrays.sort(nums); int ret = 0; int l = 0, h = nums.length - 1; while(l &lt;= h) &#123; ret += nums[h] - nums[l]; l++; h--; &#125; return ret;&#125; 解法 2 使用快速排序找到中位数，时间复杂度 O(N) 123456789101112131415161718192021222324252627public int minMoves2(int[] nums) &#123; int ret = 0; int n = nums.length; int median = quickSelect(nums, 0, n - 1, n / 2 + 1); for(int num : nums) ret += Math.abs(num - median); return ret;&#125;private int quickSelect(int[] nums, int start, int end, int k) &#123; int l = start, r = end, privot = nums[(l + r) / 2]; while(l &lt;= r) &#123; while(nums[l] &lt; privot) l++; while(nums[r] &gt; privot) r--; if(l &gt;= r) break; swap(nums, l, r); l++; r--; &#125; int left = l - start + 1; if(left &gt; k) return quickSelect(nums, start, l - 1, k); if(left == k &amp;&amp; l == r) return nums[l]; int right = r - start + 1; return quickSelect(nums, r + 1, end, k - right);&#125;private void swap(int[] nums, int i, int j) &#123; int tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp;&#125; 多数投票问题数组中出现次数多于 n / 2 的元素 Leetcode : 169. Majority Element (Easy) 先对数组排序，最中间那个数出现次数一定多于 n / 2 1234public int majorityElement(int[] nums) &#123; Arrays.sort(nums); return nums[nums.length / 2];&#125; 可以利用 Boyer-Moore Majority Vote Algorithm 来解决这个问题，使得时间复杂度为 O(n)。可以这么理解该算法：使用 cnt 来统计一个元素出现的次数，当遍历到的元素和统计元素不想等时，令 cnt–。如果前面查找了 i 个元素，且 cnt == 0 ，说明前 i 个元素没有 majority，或者有 majority，但是出现的次数少于 i / 2 ，因为如果多于 i / 2 的话 cnt 就一定不会为 0 。此时剩下的 n - i 个元素中，majority 的数目多于 (n - i) / 2，因此继续查找就能找出 majority。 123456789101112public int majorityElement(int[] nums) &#123; int cnt = 0, majority = 0; for(int i = 0; i &lt; nums.length; i++)&#123; if(cnt == 0) &#123; majority = nums[i]; cnt++; &#125; else if(majority == nums[i]) cnt++; else cnt--; &#125; return majority;&#125; 其它平方数 Leetcode : 367. Valid Perfect Square (Easy) 平方序列：1,4,9,16,..间隔：3,5,7,… 间隔为等差数列，使用这个特性可以得到从 1 开始的平方序列。 12345678public boolean isPerfectSquare(int num) &#123; int subNum = 1; while (num &gt; 0) &#123; num -= subNum; subNum += 2; &#125; return num == 0;&#125; 3 的 n 次方 Leetcode : 326. Power of Three (Easy) 123public boolean isPowerOfThree(int n) &#123; return n &gt; 0 &amp;&amp; (1162261467 % n == 0);&#125; 找出数组中的乘积最大的三个数 Leetcode : 628. Maximum Product of Three Numbers (Easy) 1234567891011121314151617181920212223public int maximumProduct(int[] nums) &#123; int max1 = Integer.MIN_VALUE, max2 = Integer.MIN_VALUE, max3 = Integer.MIN_VALUE, min1 = Integer.MAX_VALUE, min2 = Integer.MAX_VALUE; for (int n : nums) &#123; if (n &gt; max1) &#123; max3 = max2; max2 = max1; max1 = n; &#125; else if (n &gt; max2) &#123; max3 = max2; max2 = n; &#125; else if (n &gt; max3) &#123; max3 = n; &#125; if (n &lt; min1) &#123; min2 = min1; min1 = n; &#125; else if (n &lt; min2) &#123; min2 = n; &#125; &#125; return Math.max(max1*max2*max3, max1*min1*min2);&#125; 乘积数组 Leetcode : 238. Product of Array Except Self (Medium) 题目描述：给定一个数组，创建一个新数组，新数组的每个元素为原始数组中除了该位置上的元素之外所有元素的乘积。 题目要求：时间复杂度为 O(n)，并且不能使用除法。 1234567891011121314public int[] productExceptSelf(int[] nums) &#123; int n = nums.length; int[] ret = new int[n]; ret[0] = 1; for(int i = 1; i &lt; n; i++) &#123; ret[i] = ret[i - 1] * nums[i - 1]; &#125; int right = 1; for(int i = n - 1; i &gt;= 0; i--) &#123; ret[i] *= right; right *= nums[i]; &#125; return ret;&#125; 数据结构相关栈和队列用栈实现队列 一个栈实现： 1234567891011121314151617181920212223242526class MyQueue &#123; private Stack&lt;Integer&gt; st = new Stack(); public void push(int x) &#123; Stack&lt;Integer&gt; temp = new Stack(); while(!st.isEmpty())&#123; temp.push(st.pop()); &#125; st.push(x); while(!temp.isEmpty())&#123; st.push(temp.pop()); &#125; &#125; public int pop() &#123; return st.pop(); &#125; public int peek() &#123; return st.peek(); &#125; public boolean empty() &#123; return st.isEmpty(); &#125;&#125; 两个栈实现： 123456789101112131415161718192021222324252627282930class MyQueue &#123; private Stack&lt;Integer&gt; in = new Stack(); private Stack&lt;Integer&gt; out = new Stack(); public void push(int x) &#123; in.push(x); &#125; public int pop() &#123; in2out(); return out.pop(); &#125; public int peek() &#123; in2out(); return out.peek(); &#125; private void in2out()&#123; if(out.isEmpty())&#123; while(!in.isEmpty())&#123; out.push(in.pop()); &#125; &#125; &#125; public boolean empty() &#123; return in.isEmpty() &amp;&amp; out.isEmpty(); &#125;&#125; 用队列实现栈 Leetcode : 225. Implement Stack using Queues (Easy) 123456789101112131415161718192021222324252627class MyStack &#123; private Queue&lt;Integer&gt; queue; public MyStack() &#123; queue = new LinkedList&lt;&gt;(); &#125; public void push(int x) &#123; queue.add(x); for(int i = 1; i &lt; queue.size(); i++)&#123; // 翻转 queue.add(queue.remove()); &#125; &#125; public int pop() &#123; return queue.remove(); &#125; public int top() &#123; return queue.peek(); &#125; public boolean empty() &#123; return queue.isEmpty(); &#125;&#125; 最小值栈 Leetcode : 155. Min Stack (Easy) 用两个栈实现，一个存储数据，一个存储最小值。 1234567891011121314151617181920212223242526272829303132333435363738class MinStack &#123; private Stack&lt;Integer&gt; dataStack; private Stack&lt;Integer&gt; minStack; private int min; public MinStack() &#123; dataStack = new Stack&lt;&gt;(); minStack = new Stack&lt;&gt;(); min = Integer.MAX_VALUE; &#125; public void push(int x) &#123; dataStack.add(x); if(x &lt; min) &#123; min = x; &#125; minStack.add(min); &#125; public void pop() &#123; dataStack.pop(); minStack.pop(); if(!minStack.isEmpty()) &#123; min = minStack.peek(); &#125; else&#123; min = Integer.MAX_VALUE; &#125; &#125; public int top() &#123; return dataStack.peek(); &#125; public int getMin() &#123; return min; &#125;&#125; 对于实现最小值队列问题，可以先将队列使用栈来实现，然后就将问题转换为最小值栈，这个问题出现在 编程之美：3.7。 用栈实现括号匹配 Leetcode : 20. Valid Parentheses (Easy) 123\"()[]&#123;&#125;\"Output : true 1234567891011121314151617public boolean isValid(String s) &#123; Stack&lt;Character&gt; stack = new Stack&lt;&gt;(); for(int i = 0; i &lt; s.length(); i++)&#123; char c = s.charAt(i); if(c == '(' || c == '&#123;' || c == '[') stack.push(c); else&#123; if(stack.isEmpty()) return false; char cStack = stack.pop(); if(c == ')' &amp;&amp; cStack != '(' || c == ']' &amp;&amp; cStack != '[' || c == '&#125;' &amp;&amp; cStack != '&#123;' ) &#123; return false; &#125; &#125; &#125; return stack.isEmpty();&#125; 数组中比当前元素大的下一个数组元素的距离 12Input: [73, 74, 75, 71, 69, 72, 76, 73]Output: [1, 1, 4, 2, 1, 1, 0, 0] Leetcode : 739. Daily Temperatures (Medium) 使用栈来存储还未计算的元素。可以保证从栈顶向下元素递增，否则上面有一个比下面某个元素大的元素进入栈中，下面那个元素已经找到比它大的元素，因此会出栈。 12345678910111213public int[] dailyTemperatures(int[] temperatures) &#123; int n = temperatures.length; int[] ret = new int[n]; Stack&lt;Integer&gt; stack = new Stack&lt;&gt;(); for(int i = 0; i &lt; n; i++) &#123; while(!stack.isEmpty() &amp;&amp; temperatures[i] &gt; temperatures[stack.peek()]) &#123; int idx = stack.pop(); ret[idx] = i - idx; &#125; stack.add(i); &#125; return ret;&#125; 数组中下一个比当前数大的数 Leetcode : 496. Next Greater Element I (Easy) 12Input: nums1 = [4,1,2], nums2 = [1,3,4,2].Output: [-1,3,-1] 在遍历数组时用 Stack 把数组中的数存起来，如果当前遍历的数比栈顶元素来的大，说明栈顶元素的下一个比它大的数就是当前元素。 12345678910111213141516public int[] nextGreaterElement(int[] nums1, int[] nums2) &#123; Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); Stack&lt;Integer&gt; stack = new Stack&lt;&gt;(); for(int num : nums2)&#123; while(!stack.isEmpty() &amp;&amp; num &gt; stack.peek())&#123; map.put(stack.pop(), num); &#125; stack.add(num); &#125; int[] ret = new int[nums1.length]; for(int i = 0; i &lt; nums1.length; i++)&#123; if(map.containsKey(nums1[i])) ret[i] = map.get(nums1[i]); else ret[i] = -1; &#125; return ret;&#125; 循环数组中下一个比当前元素大的数 Leetcode : 503. Next Greater Element II (Medium) 123456789101112public int[] nextGreaterElements(int[] nums) &#123; int n = nums.length, next[] = new int[n]; Arrays.fill(next, -1); Stack&lt;Integer&gt; stack = new Stack&lt;&gt;(); for (int i = 0; i &lt; n * 2; i++) &#123; int num = nums[i % n]; while (!stack.isEmpty() &amp;&amp; nums[stack.peek()] &lt; num) next[stack.pop()] = num; if (i &lt; n) stack.push(i); &#125; return next;&#125; 哈希表利用 Hash Table 可以快速查找一个元素是否存在等问题，但是需要一定的空间来存储。在优先考虑时间复杂度的情况下，可以利用 Hash Table 这种空间换取时间的做法。 Java 中的 HashSet 用于存储一个集合，并以 O(1) 的时间复杂度查找元素是否在集合中。 如果元素有穷，并且范围不大，那么可以用一个布尔数组来存储一个元素是否存在，例如对于只有小写字符的元素，就可以用一个长度为 26 的布尔数组来存储一个字符集合，使得空间复杂度降低为 O(1)。 Java 中的 HashMap 主要用于映射关系，从而把两个元素联系起来。 在对一个内容进行压缩或者其它转换时，利用 HashMap 可以把原始内容和转换后的内容联系起来。例如在一个简化 url 的系统中（Leetcdoe : 535. Encode and Decode TinyURL (Medium)），利用 HashMap 就可以存储精简后的 url 到原始 url 的映射，使得不仅可以显示简化的 url，也可以根据简化的 url 得到原始 url 从而定位到正确的资源。 HashMap 也可以用来对元素进行计数统计，此时键为元素，值为计数。和 HashSet 类似，如果元素有穷并且范围不大，可以用整型数组来进行统计。 数组中的两个数和为给定值 Leetcode : 1. Two Sum (Easy) 可以先对数组进行排序，然后使用双指针方法或者二分查找方法。这样做的时间复杂度为 O(nlgn)，空间复杂度为 O(1)。 用 HashMap 存储数组元素和索引的映射，在访问到 nums[i] 时，判断 HashMap 中是否存在 target - nums[i] ，如果存在说明 target - nums[i] 所在的索引和 i 就是要找的两个数。该方法的时间复杂度为 O(n)，空间复杂度为 O(n)，使用空间来换取时间。 12345678public int[] twoSum(int[] nums, int target) &#123; HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for(int i = 0; i &lt; nums.length; i++)&#123; if(map.containsKey(target - nums[i])) return new int[]&#123;map.get(target - nums[i]), i&#125;; else map.put(nums[i], i); &#125; return null;&#125; 最长和谐序列 和谐序列中最大数和最小数只差正好为 1 Leetcode : 594. Longest Harmonious Subsequence (Easy) 12345678910111213public int findLHS(int[] nums) &#123; Map&lt;Long, Integer&gt; map = new HashMap&lt;&gt;(); for (long num : nums) &#123; map.put(num, map.getOrDefault(num, 0) + 1); &#125; int result = 0; for (long key : map.keySet()) &#123; if (map.containsKey(key + 1)) &#123; result = Math.max(result, map.get(key + 1) + map.get(key)); &#125; &#125; return result;&#125; 字符串两个字符串的包含的字符是否完全相同 Leetcode : 242. Valid Anagram (Easy) 字符串只包含小写字符，总共有 26 个小写字符。可以用 Hash Table 来映射字符与出现次数，因为键值范围很小，因此可以用数组来进行映射。 使用长度为 26 的整型数组对字符串出现的字符进行统计，比较两个字符串出现的字符数量是否相同。 1234567public boolean isAnagram(String s, String t) &#123; int[] cnts = new int[26]; for(int i = 0; i &lt; s.length(); i++) cnts[s.charAt(i) - 'a'] ++; for(int i = 0; i &lt; t.length(); i++) cnts[t.charAt(i) - 'a'] --; for(int i = 0; i &lt; 26; i++) if(cnts[i] != 0) return false; return true;&#125; 字符串同构 Leetcode : 205. Isomorphic Strings (Easy) 例如 “egg” 和 “add” 就属于同构字符串。 记录一个字符上次出现的位置，如果两个字符串中某个字符上次出现的位置一样，那么就属于同构。 123456789101112public boolean isIsomorphic(String s, String t) &#123; int[] m1 = new int[256]; int[] m2 = new int[256]; for(int i = 0; i &lt; s.length(); i++)&#123; if(m1[s.charAt(i)] != m2[t.charAt(i)]) &#123; return false; &#125; m1[s.charAt(i)] = i + 1; m2[t.charAt(i)] = i + 1; &#125; return true;&#125; 计算一组字符集合可以组成的回文字符串的最大长度 Leetcode : 409. Longest Palindrome 使用长度为 128 的整型数组来统计每个字符出现的个数，每个字符有偶数个可以用来构成回文字符串。因为回文字符串最中间的那个字符可以单独出现，所以如果有单独的字符就把它放到最中间。 12345678public int longestPalindrome(String s) &#123; int[] cnts = new int[128]; // ascii 码总共 128 个 for(char c : s.toCharArray()) cnts[c]++; int ret = 0; for(int cnt : cnts) ret += (cnt / 2) * 2; if(ret &lt; s.length()) ret ++; // 这个条件下 s 中一定有单个未使用的字符存在，可以把这个字符放到回文的最中间 return ret;&#125; 判断一个整数是否是回文数 Leetcode : 9. Palindrome Number (Easy) 要求不能使用额外空间，也就不能将整数转换为字符串进行判断。 将整数分成左右两部分，右边那部分需要转置，然后判断这两部分是否相等。 1234567891011public boolean isPalindrome(int x) &#123; if(x == 0) return true; if(x &lt; 0) return false; if(x % 10 == 0) return false; int right = 0; while(x &gt; right)&#123; right = right * 10 + x % 10; x /= 10; &#125; return x == right || x == right / 10;&#125; 回文子字符串 Leetcode : 647. Palindromic Substrings (Medium) 解决方案是从字符串的某一位开始，尝试着去扩展子字符串。 12345678910111213141516private int cnt = 0;public int countSubstrings(String s) &#123; for(int i = 0; i &lt; s.length(); i++) &#123; extendSubstrings(s, i, i); // 奇数长度 extendSubstrings(s, i, i + 1); // 偶数长度 &#125; return cnt;&#125;private void extendSubstrings(String s, int start, int end) &#123; while(start &gt;= 0 &amp;&amp; end &lt; s.length() &amp;&amp; s.charAt(start) == s.charAt(end)) &#123; start--; end++; cnt++; &#125;&#125; 统计二进制字符串中连续 1 和 连续 0 数量相同的子字符串个数 123Input: \"00110011\"Output: 6Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\". Leetcode : 696. Count Binary Substrings (Easy) 12345678910111213public int countBinarySubstrings(String s) &#123; int preLen = 0, curLen = 1, ret = 0; for(int i = 1; i &lt; s.length(); i++)&#123; if(s.charAt(i) == s.charAt(i-1)) curLen++; else&#123; preLen = curLen; curLen = 1; &#125; if(preLen &gt;= curLen) ret++; &#125; return ret;&#125; 字符串循环移位包含 编程之美：3.1 给定两个字符串 s1 和 s2 ，要求判定 s2 是否能够被 s1 做循环移位得到的字符串包含。 12s1 = AABCD, s2 = CDAAReturn : true s1 进行循环移位的结果是 s1s1 的子字符串，因此只要判断 s2 是否是 s1s1 的子字符串即可。 字符串循环移位 编程之美：2.17 将字符串向右循环移动 k 位。 例如 abcd123 向右移动 3 位 得到 123abcd 将 abcd123 中的 abcd 和 123 单独逆序，得到 dcba321，然后对整个字符串进行逆序，得到123abcd。 字符串中单词的翻转 程序员代码面试指南 例如将 “I am a student” 翻转成 “student a am I” 将每个单词逆序，然后将整个字符串逆序。 数组与矩阵把数组中的 0 移到末尾 Leetcode : 283. Move Zeroes (Easy) 12345678910public void moveZeroes(int[] nums) &#123; int n = nums.length; int idx = 0; for(int i = 0; i &lt; n; i++)&#123; if(nums[i] != 0) nums[idx++] = nums[i]; &#125; while(idx &lt; n)&#123; nums[idx++] = 0; &#125;&#125; 一个数组元素在 [1, n] 之间，其中一个数被替换为另一个数，找出丢失的数和重复的数 Leetcode : 645. Set Mismatch (Easy) 最直接的方法是先对数组进行排序，这种方法时间复杂度为 O(nlogn)，本题可以以 O(n) 的时间复杂度、O(1) 空间复杂度来求解。 主要思想是让通过交换数组元素，使得数组上的元素在正确的位置上。 遍历数组，如果第 i 位上的元素不是 i + 1 ，那么就交换第 i 位 和 nums[i] - 1 位上的元素，使得 num[i] - 1 的元素为 nums[i] ，也就是该位的元素是正确的。交换操作需要循环进行，因为一次交换没办法使得第 i 位上的元素是正确的。但是要交换的两个元素可能就是重复元素，那么循环就可能永远进行下去，终止循环的方法是加上 nums[i] != nums[nums[i] - 1 条件。 类似题目： Leetcode :448. Find All Numbers Disappeared in an Array (Easy)，寻找所有丢失的元素 Leetcode : 442. Find All Duplicates in an Array (Medium)，寻找所有重复的元素。 1234567891011121314151617public int[] findErrorNums(int[] nums) &#123; for(int i = 0; i &lt; nums.length; i++)&#123; while(nums[i] != i + 1 &amp;&amp; nums[i] != nums[nums[i] - 1]) swap(nums, i, nums[i] - 1); &#125; for(int i = 0; i &lt; nums.length; i++)&#123; if(i + 1 != nums[i]) return new int[]&#123;nums[i], i + 1&#125;; &#125; return null;&#125;private void swap(int[] nums, int i, int j)&#123; int tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp;&#125; 找出数组中重复的数，数组值在 [0, n-1] 之间 Leetcode : 287. Find the Duplicate Number (Medium) 二分查找解法： 12345678910111213public int findDuplicate(int[] nums) &#123; int l = 1, h = nums.length - 1; while (l &lt;= h) &#123; int mid = l + (h - l) / 2; int cnt = 0; for (int i = 0; i &lt; nums.length; i++) &#123; if (nums[i] &lt;= mid) cnt++; &#125; if (cnt &gt; mid) h = mid - 1; else l = mid + 1; &#125; return l;&#125; 双指针解法，类似于有环链表中找出环的入口： 1234567891011121314public int findDuplicate(int[] nums) &#123; int slow = nums[0], fast = nums[nums[0]]; while (slow != fast) &#123; slow = nums[slow]; fast = nums[nums[fast]]; &#125; fast = 0; while (slow != fast) &#123; slow = nums[slow]; fast = nums[fast]; &#125; return slow;&#125; 有序矩阵有序矩阵指的是行和列分别有序的矩阵。 一般可以利用有序性使用二分查找方法。 12345[ [ 1, 5, 9], [10, 11, 13], [12, 13, 15]] 有序矩阵查找 Leetocde : 240. Search a 2D Matrix II (Medium) 1234567891011public boolean searchMatrix(int[][] matrix, int target) &#123; if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return false; int m = matrix.length, n = matrix[0].length; int row = 0, col = n - 1; while (row &lt; m &amp;&amp; col &gt;= 0) &#123; if (target == matrix[row][col]) return true; else if (target &lt; matrix[row][col]) col--; else row++; &#125; return false;&#125; 有序矩阵的 Kth Element Leetcode : 378. Kth Smallest Element in a Sorted Matrix ((Medium)) 12345678matrix = [ [ 1, 5, 9], [10, 11, 13], [12, 13, 15]],k = 8,return 13. 解题参考：Share my thoughts and Clean Java Code 二分查找解法： 12345678910111213141516public int kthSmallest(int[][] matrix, int k) &#123; int m = matrix.length, n = matrix[0].length; int lo = matrix[0][0], hi = matrix[m - 1][n - 1]; while(lo &lt;= hi) &#123; int mid = lo + (hi - lo) / 2; int cnt = 0; for(int i = 0; i &lt; m; i++) &#123; for(int j = 0; j &lt; n &amp;&amp; matrix[i][j] &lt;= mid; j++) &#123; cnt++; &#125; &#125; if(cnt &lt; k) lo = mid + 1; else hi = mid - 1; &#125; return lo;&#125; 堆解法： 1234567891011121314151617181920212223public int kthSmallest(int[][] matrix, int k) &#123; int m = matrix.length, n = matrix[0].length; PriorityQueue&lt;Tuple&gt; pq = new PriorityQueue&lt;Tuple&gt;(); for(int j = 0; j &lt; n; j++) pq.offer(new Tuple(0, j, matrix[0][j])); for(int i = 0; i &lt; k - 1; i++) &#123; // 小根堆，去掉 k - 1 个堆顶元素，此时堆顶元素就是第 k 的数 Tuple t = pq.poll(); if(t.x == m - 1) continue; pq.offer(new Tuple(t.x + 1, t.y, matrix[t.x + 1][t.y])); &#125; return pq.poll().val;&#125;class Tuple implements Comparable&lt;Tuple&gt; &#123; int x, y, val; public Tuple(int x, int y, int val) &#123; this.x = x; this.y = y; this.val = val; &#125; @Override public int compareTo(Tuple that) &#123; return this.val - that.val; &#125;&#125; 链表判断两个链表的交点 Leetcode : 160. Intersection of Two Linked Lists 12345A: a1 → a2 ↘ c1 → c2 → c3 ↗B: b1 → b2 → b3 要求：时间复杂度为 O(n) 空间复杂度为 O(1) 设 A 的长度为 a + c，B 的长度为 b + c，其中 c 为尾部公共部分长度，可知 a + c + b = b + c + a。 当访问 A 链表的指针访问到链表尾部时，令它从链表 B 的头部开始访问链表 B；同样地，当访问 B 链表的指针访问到链表尾部时，令它从链表 A 的头部开始访问链表 A。这样就能控制访问 A 和 B 两个链表的指针能同时访问到交点。 123456789public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123; if(headA == null || headB == null) return null; ListNode l1 = headA, l2 = headB; while(l1 != l2)&#123; l1 = (l1 == null) ? headB : l1.next; l2 = (l2 == null) ? headA : l2.next; &#125; return l1;&#125; 如果只是判断是否存在交点，那么就是另一个问题，即 编程之美：3.6 的问题。有两种解法：把第一个链表的结尾连接到第二个链表的开头，看第二个链表是否存在环；或者直接比较第一个链表最后一个节点和第二个链表最后一个节点是否相同。 链表反转 Leetcode : 206. Reverse Linked List 头插法能够按逆序构建链表。 12345678910public ListNode reverseList(ListNode head) &#123; ListNode newHead = null; // 设为 null ，作为新链表的结尾 while(head != null)&#123; ListNode nextNode = head.next; head.next = newHead; newHead = head; head = nextNode; &#125; return newHead;&#125; 归并两个有序的链表 Leetcode : 21. Merge Two Sorted Lists 链表和树一样，可以用递归方式来定义：链表是空节点，或者有一个值和一个指向下一个链表的指针，因此很多链表问题可以用递归来处理。 12345678910111213public ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123; if(l1 == null) return l2; if(l2 == null) return l1; ListNode newHead = null; if(l1.val &lt; l2.val)&#123; newHead = l1; newHead.next = mergeTwoLists(l1.next, l2); &#125; else&#123; newHead = l2; newHead.next = mergeTwoLists(l1, l2.next); &#125; return newHead;&#125; 从有序链表中删除重复节点 Leetcode : 83. Remove Duplicates from Sorted List (Easy) 12345public ListNode deleteDuplicates(ListNode head) &#123; if(head == null || head.next == null) return head; head.next = deleteDuplicates(head.next); return head.next != null &amp;&amp; head.val == head.next.val ? head.next : head;&#125; 回文链表 Leetcode : 234. Palindrome Linked List (Easy) 切成两半，把后半段反转，然后比较两半是否相等。 123456789101112131415161718192021222324252627282930313233343536373839404142public boolean isPalindrome(ListNode head) &#123; if(head == null || head.next == null) return true; ListNode slow = head, fast = head.next; while(fast != null &amp;&amp; fast.next != null)&#123; slow = slow.next; fast = fast.next.next; &#125; if(fast != null)&#123; // 偶数节点，让 slow 指向下一个节点 slow = slow.next; &#125; cut(head, slow); // 切成两个链表 ListNode l1 = head, l2 = slow; l2 = reverse(l2); return isEqual(l1, l2);&#125;private void cut(ListNode head, ListNode cutNode)&#123; while( head.next != cutNode ) head = head.next; head.next = null;&#125;private ListNode reverse(ListNode head)&#123; ListNode newHead = null; while(head != null)&#123; ListNode nextNode = head.next; head.next = newHead; newHead = head; head = nextNode; &#125; return newHead;&#125;private boolean isEqual(ListNode l1, ListNode l2)&#123; while(l1 != null &amp;&amp; l2 != null)&#123; if(l1.val != l2.val) return false; l1 = l1.next; l2 = l2.next; &#125; return true;&#125; 从链表中删除节点 编程之美：3.4 12B.val = C.val;B.next = C.next; 链表元素按奇偶聚集 Leetcode : 328. Odd Even Linked List (Medium) 1234567891011121314public ListNode oddEvenList(ListNode head) &#123; if (head == null) &#123; return head; &#125; ListNode odd = head, even = head.next, evenHead = even; while (even != null &amp;&amp; even.next != null) &#123; odd.next = odd.next.next; odd = odd.next; even.next = even.next.next; even = even.next; &#125; odd.next = evenHead; return head;&#125; 树递归一棵树要么是空树，要么有两个指针，每个指针指向一棵树。树是一种递归结构，很多树的问题可以使用递归来处理。 树的高度 Leetcode : 104. Maximum Depth of Binary Tree (Easy) 1234public int maxDepth(TreeNode root) &#123; if(root == null) return 0; return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;&#125; 翻转树 Leetcode : 226. Invert Binary Tree (Easy) 1234567public TreeNode invertTree(TreeNode root) &#123; if(root == null) return null; TreeNode left = root.left; // 后面的操作会改变 left 指针，因此先保存下来 root.left = invertTree(root.right); root.right = invertTree(left); return root;&#125; 归并两棵树 Leetcode : 617. Merge Two Binary Trees (Easy) 123456789public TreeNode mergeTrees(TreeNode t1, TreeNode t2) &#123; if(t1 == null &amp;&amp; t2 == null) return null; if(t1 == null) return t2; if(t2 == null) return t1; TreeNode root = new TreeNode(t1.val + t2.val); root.left = mergeTrees(t1.left, t2.left); root.right = mergeTrees(t1.right, t2.right); return root;&#125; 判断路径和是否等于一个数 Leetcdoe : 112. Path Sum (Easy) 题目描述：路径和定义为从 root 到 leaf 的所有节点的和 12345public boolean hasPathSum(TreeNode root, int sum) &#123; if(root == null) return false; if(root.left == null &amp;&amp; root.right == null &amp;&amp; root.val == sum) return true; return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);&#125; 统计路径和等于一个数的路径数量 Leetcode : 437. Path Sum III (Easy) 题目描述：路径不一定以 root 开头并以 leaf 结尾，但是必须连续 pathSumStartWithRoot() 方法统计以某个节点开头的路径个数。 12345678910111213public int pathSum(TreeNode root, int sum) &#123; if(root == null) return 0; int ret = pathSumStartWithRoot(root, sum) + pathSum(root.left, sum) + pathSum(root.right, sum); return ret;&#125;private int pathSumStartWithRoot(TreeNode root, int sum)&#123; if(root == null) return 0; int ret = 0; if(root.val == sum) ret++; ret += pathSumStartWithRoot(root.left, sum - root.val) + pathSumStartWithRoot(root.right, sum - root.val); return ret;&#125; 树的对称 Leetcode : 101. Symmetric Tree (Easy) 1234567891011public boolean isSymmetric(TreeNode root) &#123; if(root == null) return true; return isSymmetric(root.left, root.right);&#125;private boolean isSymmetric(TreeNode t1, TreeNode t2)&#123; if(t1 == null &amp;&amp; t2 == null) return true; if(t1 == null || t2 == null) return false; if(t1.val != t2.val) return false; return isSymmetric(t1.left, t2.right) &amp;&amp; isSymmetric(t1.right, t2.left);&#125; 平衡树 Leetcode : 110. Balanced Binary Tree (Easy) 题目描述：左右子树高度差是否都小于等于 1 1234567891011121314private boolean result = true;public boolean isBalanced(TreeNode root) &#123; maxDepth(root); return result;&#125;public int maxDepth(TreeNode root) &#123; if (root == null) return 0; int l = maxDepth(root.left); int r = maxDepth(root.right); if (Math.abs(l - r) &gt; 1) result = false; return 1 + Math.max(l, r);&#125; 最小路径 Leetcode : 111. Minimum Depth of Binary Tree (Easy) 题目描述：树的根节点到叶子节点的最小长度 1234567public int minDepth(TreeNode root) &#123; if(root == null) return 0; int left = minDepth(root.left); int right = minDepth(root.right); if(left == 0 || right == 0) return left + right + 1; return Math.min(left, right) + 1;&#125; 统计左叶子节点的和 Leetcode : 404. Sum of Left Leaves (Easy) 12345678910public int sumOfLeftLeaves(TreeNode root) &#123; if(root == null) return 0; if(isLeaf(root.left)) return root.left.val + sumOfLeftLeaves(root.right); return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right);&#125;private boolean isLeaf(TreeNode node)&#123; if(node == null) return false; return node.left == null &amp;&amp; node.right == null;&#125; 修剪一棵树 Leetcode : 669. Trim a Binary Search Tree (Easy) 题目描述：只保留值在 L ~ R 之间的节点 12345678public TreeNode trimBST(TreeNode root, int L, int R) &#123; if(root == null) return null; if(root.val &gt; R) return trimBST(root.left, L, R); if(root.val &lt; L) return trimBST(root.right, L, R); root.left = trimBST(root.left, L, R); root.right = trimBST(root.right, L, R); return root;&#125; 子树 Leetcode : 572. Subtree of Another Tree (Easy) 12345678910111213public boolean isSubtree(TreeNode s, TreeNode t) &#123; if(s == null &amp;&amp; t == null) return true; if(s == null || t == null) return false; if(s.val == t.val &amp;&amp; isSame(s, t)) return true; return isSubtree(s.left, t) || isSubtree(s.right, t);&#125;private boolean isSame(TreeNode s, TreeNode t)&#123; if(s == null &amp;&amp; t == null) return true; if(s == null || t == null) return false; if(s.val != t.val) return false; return isSame(s.left, t.left) &amp;&amp; isSame(s.right, t.right);&#125; 从有序数组中构造二叉查找树 Leetcode : 108. Convert Sorted Array to Binary Search Tree (Easy) 二叉查找树（BST）：根节点大于等于左子树所有节点，小于等于右子树所有节点。 123456789101112public TreeNode sortedArrayToBST(int[] nums) &#123; return toBST(nums, 0, nums.length - 1);&#125;private TreeNode toBST(int[] nums, int sIdx, int eIdx)&#123; if(sIdx &gt; eIdx) return null; int mIdx = (sIdx + eIdx) / 2; TreeNode root = new TreeNode(nums[mIdx]); root.left = toBST(nums, sIdx, mIdx - 1); root.right = toBST(nums, mIdx + 1, eIdx); return root;&#125; 两节点的最长路径 1234567 1 / \\ 2 3 / \\ 4 5Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3]. 12345678910111213141516private int max = 0;public int diameterOfBinaryTree(TreeNode root) &#123; depth(root); return max;&#125;private int depth(TreeNode root) &#123; if (root == null) &#123; return 0; &#125; int leftDepth = depth(root.left); int rightDepth = depth(root.right); max = Math.max(max, leftDepth + rightDepth); return Math.max(leftDepth, rightDepth) + 1;&#125; 找出二叉树中第二小的节点 Leetcode : 671. Second Minimum Node In a Binary Tree (Easy) 12345678Input: 2 / \\ 2 5 / \\ 5 7Output: 5 一个节点要么具有 0 个或 2 个子节点，如果有子节点，那么根节点是最小的节点。 1234567891011public int findSecondMinimumValue(TreeNode root) &#123; if(root == null) return -1; if(root.left == null &amp;&amp; root.right == null) return -1; int leftVal = root.left.val; int rightVal = root.right.val; if(leftVal == root.val) leftVal = findSecondMinimumValue(root.left); if(rightVal == root.val) rightVal = findSecondMinimumValue(root.right); if(leftVal != -1 &amp;&amp; rightVal != -1) return Math.min(leftVal, rightVal); if(leftVal != -1) return leftVal; return rightVal;&#125; 寻找两个节点的最近公共祖先 Leetcode : 235. Lowest Common Ancestor of a Binary Search Tree (Easy) 12345public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123; if(root.val &gt; p.val &amp;&amp; root.val &gt; q.val) return lowestCommonAncestor(root.left, p, q); if(root.val &lt; p.val &amp;&amp; root.val &lt; q.val) return lowestCommonAncestor(root.right, p, q); return root;&#125; 最近公共祖先 Leetcode : 236. Lowest Common Ancestor of a Binary Tree (Medium) 123456public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123; if (root == null || root == p || root == q) return root; TreeNode left = lowestCommonAncestor(root.left, p, q); TreeNode right = lowestCommonAncestor(root.right, p, q); return left == null ? right : right == null ? left : root;&#125; 最大相同节点值的路径长度 Leetcode : 687. Longest Univalue Path (Easy) 1234567 1 / \\ 4 5 / \\ \\ 4 4 5Output : 2 123456789101112131415private int path = 0;public int longestUnivaluePath(TreeNode root) &#123; dfs(root); return path;&#125;private int dfs(TreeNode root)&#123; if(root == null) return 0; int left = dfs(root.left); int right = dfs(root.right); int leftPath = root.left != null &amp;&amp; root.left.val == root.val ? left + 1 : 0; int rightPath = root.right != null &amp;&amp; root.right.val == root.val ? right + 1 : 0; path = Math.max(path, leftPath + rightPath); return Math.max(leftPath, rightPath);&#125; 间隔遍历 Leetcode : 337. House Robber III (Medium) 123456789101112public int rob(TreeNode root) &#123; if (root == null) return 0; int val1 = root.val; if (root.left != null) &#123; val1 += rob(root.left.left) + rob(root.left.right); &#125; if (root.right != null) &#123; val1 += rob(root.right.left) + rob(root.right.right); &#125; int val2 = rob(root.left) + rob(root.right); return Math.max(val1, val2);&#125; 层次遍历使用 BFS，不需要使用两个队列来分别存储当前层的节点和下一层的节点， 因为在开始遍历一层的节点时，当前队列中的节点数就是当前层的节点数，只要控制遍历这么多节点数，就能保证这次遍历的都是当前层的节点。 计算一棵树每层节点的平均数 637. Average of Levels in Binary Tree (Easy) 123456789101112131415161718public List&lt;Double&gt; averageOfLevels(TreeNode root) &#123; List&lt;Double&gt; ret = new ArrayList&lt;&gt;(); if(root == null) return ret; Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); queue.add(root); while(!queue.isEmpty())&#123; int cnt = queue.size(); double sum = 0; for(int i = 0; i &lt; cnt; i++)&#123; TreeNode node = queue.poll(); sum += node.val; if(node.left != null) queue.add(node.left); if(node.right != null) queue.add(node.right); &#125; ret.add(sum / cnt); &#125; return ret;&#125; 得到左下角的节点 Leetcode : 513. Find Bottom Left Tree Value (Easy) 12345678910public int findBottomLeftValue(TreeNode root) &#123; Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); queue.add(root); while(!queue.isEmpty())&#123; root = queue.poll(); if(root.right != null) queue.add(root.right); if(root.left != null) queue.add(root.left); &#125; return root.val;&#125; 前中后序遍历12345 1 / \\ 2 3 / \\ \\4 5 6 层次遍历顺序：[1 2 3 4 5 6]前序遍历顺序：[1 2 4 5 3 6]中序遍历顺序：[4 2 5 1 3 6]后序遍历顺序：[4 5 2 6 3 1] 层次遍历使用 BFS 实现，利用的就是 BFS 一层一层遍历的特性；而前序、中序、后序遍历利用了 DFS 实现。 前序、中序、后序遍只是在对节点访问的顺序有一点不同，其它都相同。 ① 前序 12345void dfs(TreeNode root)&#123; visit(root); dfs(root.left); dfs(root.right);&#125; ② 中序 12345void dfs(TreeNode root)&#123; dfs(root.left); visit(root); dfs(root.right);&#125; ③ 后序 12345void dfs(TreeNode root)&#123; dfs(root.left); dfs(root.right); visit(root);&#125; 非递归实现二叉树的前序遍历 Leetcode : 144. Binary Tree Preorder Traversal (Medium) 12345678910111213public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123; List&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); if (root == null) return ret; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); stack.push(root); while (!stack.isEmpty()) &#123; TreeNode node = stack.pop(); ret.add(node.val); if (node.right != null) stack.push(node.right); if (node.left != null) stack.push(node.left); // 先添加右子树再添加左子树，这样是为了让左子树在栈顶 &#125; return ret;&#125; 非递归实现二叉树的后续遍历 Leetcode : ### 145. Binary Tree Postorder Traversal (Medium) 前序遍历为 root -&gt; left -&gt; right，后序遍历为 left -&gt; right -&gt; root，可以修改前序遍历成为 root -&gt; right -&gt; left，那么这个顺序就和后序遍历正好相反。 1234567891011121314public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123; List&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); if (root == null) return ret; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); stack.push(root); while (!stack.isEmpty()) &#123; TreeNode node = stack.pop(); ret.add(node.val); if (node.left != null) stack.push(node.left); if (node.right != null) stack.push(node.right); &#125; Collections.reverse(ret); return ret;&#125; 非递归实现二叉树的中序遍历 Leetcode : 94. Binary Tree Inorder Traversal (Medium) 123456789101112131415public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123; List&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); TreeNode cur = root; while(cur != null || !stack.isEmpty()) &#123; while(cur != null) &#123; // 模拟递归栈的不断深入 stack.add(cur); cur = cur.left; &#125; TreeNode node = stack.pop(); ret.add(node.val); cur = node.right; &#125; return ret;&#125; 使用中序遍历和前序遍历序列重建二叉树 //TODO BST主要利用 BST 中序遍历有序的特点。 在 BST 中寻找两个节点，使它们的和为一个给定值。 653. Two Sum IV - Input is a BST 使用中序遍历得到有序数组之后，再利用双指针对数组进行查找。 应该注意到，这一题不能用分别在左右子树两部分来处理这种思想，因为两个待求的节点可能分别在左右子树中。 12345678910111213141516171819public boolean findTarget(TreeNode root, int k) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); inOrder(root, nums); int i = 0, j = nums.size() - 1; while(i &lt; j)&#123; int sum = nums.get(i) + nums.get(j); if(sum == k) return true; if(sum &lt; k) i++; else j--; &#125; return false;&#125;private void inOrder(TreeNode root, List&lt;Integer&gt; nums)&#123; if(root == null) return; inOrder(root.left, nums); nums.add(root.val); inOrder(root.right, nums);&#125; 在 BST 中查找最小的两个节点之差的绝对值 Leetcode : 530. Minimum Absolute Difference in BST (Easy) 利用 BST 的中序遍历为有序的性质，计算中序遍历中临近的两个节点之差的绝对值，取最小值。 123456789101112131415private int minDiff = Integer.MAX_VALUE;private int preVal = -1;public int getMinimumDifference(TreeNode root) &#123; inorder(root); return minDiff;&#125;private void inorder(TreeNode node)&#123; if(node == null) return; inorder(node.left); if(preVal != -1) minDiff = Math.min(minDiff, Math.abs(node.val - preVal)); preVal = node.val; inorder(node.right);&#125; 把 BST 每个节点的值都加上比它大的节点的值 Leetcode : Convert BST to Greater Tree (Easy) 先遍历右子树。 1234567891011121314151617181920private int sum = 0;public TreeNode convertBST(TreeNode root) &#123; traver(root); return root;&#125;private void traver(TreeNode root) &#123; if (root == null) &#123; return; &#125; if (root.right != null) &#123; traver(root.right); &#125; sum += root.val; root.val = sum; if (root.left != null) &#123; traver(root.left); &#125;&#125; 寻找 BST 中出现次数最多的节点 123456789101112131415161718192021222324252627282930313233private int cnt = 1;private int maxCnt = 1;private TreeNode preNode = null;private List&lt;Integer&gt; list;public int[] findMode(TreeNode root) &#123; list = new ArrayList&lt;&gt;(); inorder(root); int[] ret = new int[list.size()]; int idx = 0; for(int num : list)&#123; ret[idx++] = num; &#125; return ret;&#125;private void inorder(TreeNode node)&#123; if(node == null) return; inorder(node.left); if(preNode != null)&#123; if(preNode.val == node.val) cnt++; else cnt = 1; &#125; if(cnt &gt; maxCnt)&#123; maxCnt = cnt; list.clear(); list.add(node.val); &#125; else if(cnt == maxCnt)&#123; list.add(node.val); &#125; preNode = node; inorder(node.right);&#125; 寻找 BST 的第 k 个元素 Leetcode : 230. Kth Smallest Element in a BST (Medium) 递归解法： 1234567891011public int kthSmallest(TreeNode root, int k) &#123; int leftCnt = count(root.left); if(leftCnt == k - 1) return root.val; if(leftCnt &gt; k - 1) return kthSmallest(root.left, k); return kthSmallest(root.right, k - leftCnt - 1);&#125;private int count(TreeNode node) &#123; if(node == null) return 0; return 1 + count(node.left) + count(node.right);&#125; 中序遍历解法： 123456789101112131415161718private int cnt = 0;private int val;public int kthSmallest(TreeNode root, int k) &#123; inorder(root, k); return val;&#125;private void inorder(TreeNode node, int k) &#123; if(node == null) return; inorder(node.left, k); cnt++; if(cnt == k) &#123; val = node.val; return; &#125; inorder(node.right, k);&#125; Trie Trie，又称前缀树或字典树，用于判断字符串是否存在或者是否具有某种字符串前缀。 实现一个 Trie Leetcode : 208. Implement Trie (Prefix Tree) (Medium) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253class Trie &#123; private class Node&#123; Node[] childs = new Node[26]; boolean isLeaf; &#125; private Node root = new Node(); /** Initialize your data structure here. */ public Trie() &#123; &#125; /** Inserts a word into the trie. */ public void insert(String word) &#123; int idx = word.charAt(0) - 'a'; insert(word, root); &#125; private void insert(String word, Node node)&#123; int idx = word.charAt(0) - 'a'; if(node.childs[idx] == null)&#123; node.childs[idx] = new Node(); &#125; if(word.length() == 1) node.childs[idx].isLeaf = true; else insert(word.substring(1), node.childs[idx]); &#125; /** Returns if the word is in the trie. */ public boolean search(String word) &#123; return search(word, root); &#125; private boolean search(String word, Node node)&#123; if(node == null) return false; int idx = word.charAt(0) - 'a'; if(node.childs[idx] == null) return false; if(word.length() == 1) return node.childs[idx].isLeaf; return search(word.substring(1), node.childs[idx]); &#125; /** Returns if there is any word in the trie that starts with the given prefix. */ public boolean startsWith(String prefix) &#123; return startWith(prefix, root); &#125; private boolean startWith(String prefix, Node node)&#123; if(node == null) return false; if(prefix.length() == 0) return true; int idx = prefix.charAt(0) - 'a'; return startWith(prefix.substring(1), node.childs[idx]); &#125;&#125; 实现一个 Trie，用来求前缀和 Leetcode : 677. Map Sum Pairs (Medium) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class MapSum &#123; private class Trie &#123; int val; Map&lt;Character, Trie&gt; childs; boolean isWord; Trie() &#123; childs = new HashMap&lt;&gt;(); &#125; &#125; private Trie root; public MapSum() &#123; root = new Trie(); &#125; public void insert(String key, int val) &#123; Trie cur = root; for(char c : key.toCharArray()) &#123; if(!cur.childs.containsKey(c)) &#123; Trie next = new Trie(); cur.childs.put(c, next); &#125; cur = cur.childs.get(c); &#125; cur.val = val; cur.isWord = true; &#125; public int sum(String prefix) &#123; Trie cur = root; for(char c : prefix.toCharArray()) &#123; if(!cur.childs.containsKey(c)) return 0; cur = cur.childs.get(c); &#125; return dfs(cur); &#125; private int dfs(Trie cur) &#123; int sum = 0; if(cur.isWord) &#123; sum += cur.val; &#125; for(Trie next : cur.childs.values()) &#123; sum += dfs(next); &#125; return sum; &#125;&#125; 图位运算1. 基本原理 0s 表示 一串 0 ，1s 表示一串 1。 123x ^ 0s = x x &amp; 0s = 0 x | 0s = xx ^ 1s = ~x x &amp; 1s = x x | 1s = 1sx ^ x = 0 x &amp; x = x x | x = x ① 利用 x ^ 1s = ~x 的特点，可以将位级表示翻转；利用 x ^ x = 0 的特点，可以将三个数中重复的两个数去除，只留下另一个数；② 利用 x &amp; 0s = 0 和 x &amp; 1s = x 的特点，可以实现掩码操作。一个数 num 与 mask ：00111100 进行位与操作，只保留 num 中与 mask 的 1 部分相对应的位；③ 利用 x | 0s = x 和 x | 1s = 1s 的特点，可以实现设置操作。一个数 num 与 mask：00111100 进行位或操作，将 num 中与 mask 的 1 部分相对应的位都设置为 1 。 >> n 为算术右移，相当于除以 2n；>>> n 为无符号右移，左边会补上 0。&lt;&lt; n 为算术左移，相当于乘以 2n。 n&amp;(n-1) 该位运算是去除 n 的位级表示中最低的那一位。例如对于二进制表示 10110 100 ，减去 1 得到 10110011，这两个数相与得到 10110000。 n-n&amp;(~n+1) 概运算是去除 n 的位级表示中最高的那一位。 n&amp;(-n) 该运算得到 n 的位级表示中最低的那一位。-n 得到 n 的反码加 1，对于二进制表示 10110 100 ，-n 得到 01001100，相与得到 00000100 2. mask 计算 要获取 111111111，将 0 取反即可，~0。 要得到只有第 i 位为 1 的 mask，将 1 向左移动 i 位即可，1&lt;&lt;i 。例如 1&lt;&lt;5 得到只有第 5 位为 1 的 mask ：00010000。 要得到 1 到 i 位为 1 的 mask，1&lt;&lt;(i+1)-1 即可，例如将 1&lt;&lt;(4+1)-1 = 00010000-1 = 00001111。 要得到 1 到 i 位为 0 的 mask，只需将 1 到 i 位为 1 的 mask 取反，即 ~(1&lt;&lt;(i+1)-1)。 3. 位操作举例 ① 获取第 i 位 num &amp; 00010000 != 0 1(num &amp; (1 &lt;&lt; i)) != 0; ② 将第 i 位设置为 1 num | 00010000 1num | (1 &lt;&lt; i); ③ 将第 i 位清除为 0 num &amp; 11101111 1num &amp; (~(1 &lt;&lt; i)) ④ 将最高位到第 i 位清除为 0 num &amp; 00001111 1num &amp; ((1 &lt;&lt; i) - 1); ⑤ 将第 0 位到第 i 位清除为 0 num &amp; 11110000 1num &amp; (~((1 &lt;&lt; (i+1)) - 1)); ⑥ 将第 i 位设置为 0 或者 1 先将第 i 位清零，然后将 v 左移 i 位，执行“位或”运算。 1(num &amp; (1 &lt;&lt; i)) | (v &lt;&lt; i); 4. Java 中的位操作 123static int Integer.bitCount() // 统计 1 的数量static int Integer.highestOneBit() // 获得最高位static String toBinaryString(int i) // 转换位二进制表示的字符串 统计两个数的二进制表示有多少位不同 Leetcode : 461. Hamming Distance (Easy) 对两个数进行异或操作，不同的那一位结果为 1 ，统计有多少个 1 即可。 123456789public int hammingDistance(int x, int y) &#123; int z = x ^ y; int cnt = 0; while(z != 0)&#123; if((z &amp; 1) == 1) cnt++; z = z &gt;&gt; 1; &#125; return cnt;&#125; 可以使用 Integer.bitcount() 来统计 1 个的个数。 123public int hammingDistance(int x, int y) &#123; return Integer.bitCount(x ^ y);&#125; 翻转一个数的比特位 Leetcode : 190. Reverse Bits (Easy) 123456789public int reverseBits(int n) &#123; int ret = 0; for(int i = 0; i &lt; 32; i++)&#123; ret &lt;&lt;= 1; ret |= (n &amp; 1); n &gt;&gt;&gt;= 1; &#125; return ret;&#125; 不用额外变量交换两个整数 程序员代码面试指南 ：P317 123a = a ^ b;b = a ^ b;a = a ^ b; 将 c = a ^ b，那么 b ^ c = b ^ b ^ a = a，a ^ c = a ^ a ^ b = b。 判断一个数是不是 4 的 n 次方 Leetcode : 342. Power of Four (Easy) 该数二进制表示有且只有一个奇数位为 1 ，其余的都为 0 ，例如 16 ： 10000。可以每次把 1 向左移动 2 位，就能构造出这种数字，然后比较构造出来的数与要判断的数是否相同。 12345678public boolean isPowerOfFour(int num) &#123; int i = 1; while(i &gt; 0)&#123; if(i == num) return true; i = i &lt;&lt; 2; &#125; return false;&#125; 也可以用 Java 的 Integer.toString() 方法将该数转换为 4 进制形式的字符串，然后判断字符串是否以 1 开头。 123public boolean isPowerOfFour(int num) &#123; return Integer.toString(num, 4).matches(\"10*\");&#125; 判断一个数是不是 2 的 n 次方 Leetcode : 231. Power of Two (Easy) 同样可以用 Power of Four 的方法，但是 2 的 n 次方更特殊，它的二进制表示只有一个 1 存在。 123public boolean isPowerOfTwo(int n) &#123; return n &gt; 0 &amp;&amp; Integer.bitCount(n) == 1;&#125; 利用 1000 &amp; 0111 == 0 这种性质，得到以下解法： 123public boolean isPowerOfTwo(int n) &#123; return n &gt; 0 &amp;&amp; (n &amp; (n - 1)) == 0;&#125; 数组中唯一一个不重复的元素 Leetcode : 136. Single Number (Easy) 两个相同的数异或的结果为 0，对所有数进行异或操作，最后的结果就是单独出现的那个数。 类似的有：Leetcode : 389. Find the Difference (Easy)，两个字符串仅有一个字符不相同，使用异或操作可以以 O(1) 的空间复杂度来求解，而不需要使用 HashSet。 12345public int singleNumber(int[] nums) &#123; int ret = 0; for(int n : nums) ret = ret ^ n; return ret;&#125; 数组中不重复的两个元素 Leetcode : 260. Single Number III (Medium) 两个不相等的元素在位级表示上必定会有一位存在不同。 将数组的所有元素异或得到的结果为不存在重复的两个元素异或的结果。 diff &amp;= -diff 得到出 diff 最右侧不为 0 的位，也就是不存在重复的两个元素在位级表示上最右侧不同的那一位，利用这一位就可以将两个元素区分开来。 123456789101112public int[] singleNumber(int[] nums) &#123; int diff = 0; for(int num : nums) diff ^= num; // 得到最右一位 diff &amp;= -diff; int[] ret = new int[2]; for(int num : nums) &#123; if((num &amp; diff) == 0) ret[0] ^= num; else ret[1] ^= num; &#125; return ret;&#125; 判断一个数的位级表示是否不会出现连续的 0 和 1 Leetcode : 693. Binary Number with Alternating Bits (Easy) 对于 10101 这种位级表示的数，把它向右移动 1 位得到 1010 ，这两个数每个位都不同，因此异或得到的结果为 11111。 1234public boolean hasAlternatingBits(int n) &#123; int a = (n ^ (n &gt;&gt; 1)); return (a &amp; (a + 1)) == 0;&#125; 求一个数的补码 Leetcode : 476. Number Complement (Easy) 不考虑二进制表示中的首 0 部分 对于 00000101，要求补码可以将它与 00000111 进行异或操作。那么问题就转换为求掩码 00000111。 1234567public int findComplement(int num) &#123; if(num == 0) return 1; int mask = 1 &lt;&lt; 30; while((num &amp; mask) == 0) mask &gt;&gt;= 1; mask = (mask &lt;&lt; 1) - 1; return num ^ mask;&#125; 可以利用 Java 的 Integer.highestOneBit() 方法来获得含有首 1 的数。 123456public int findComplement(int num) &#123; if(num == 0) return 1; int mask = Integer.highestOneBit(num); mask = (mask &lt;&lt; 1) - 1; return num ^ mask;&#125; 对于 10000000 这样的数要扩展成 11111111，可以利用以下方法： 123mask |= mask &gt;&gt; 1 11000000mask |= mask &gt;&gt; 2 11110000mask |= mask &gt;&gt; 4 11111111 123456789public int findComplement(int num) &#123; int mask = num; mask |= mask &gt;&gt; 1; mask |= mask &gt;&gt; 2; mask |= mask &gt;&gt; 4; mask |= mask &gt;&gt; 8; mask |= mask &gt;&gt; 16; return (mask ^ num);&#125; 实现整数的加法 Leetcode : 371. Sum of Two Integers (Easy) a ^ b 表示没有考虑进位的情况下两数的和，(a &amp; b) &lt;&lt; 1 就是进位。递归会终止的原因是 (a &amp; b) &lt;&lt; 1 最右边会多一个 0，那么继续递归，进位最右边的 0 会慢慢增多，最后进位会变为 0，递归终止。 123public int getSum(int a, int b) &#123; return b == 0 ? a : getSum((a ^ b), (a &amp; b) &lt;&lt; 1);&#125; 字符串数组最大乘积 Leetcode : 318. Maximum Product of Word Lengths (Medium) 题目描述：字符串数组的字符串只含有小写字符。求解字符串数组中两个字符串长度的最大乘积，要求这两个字符串不能含有相同字符。 解题思路：本题主要问题是判断两个字符串是否含相同字符，由于字符串只含有小写字符，总共 26 位，因此可以用一个 32 位的整数来存储每个字符是否出现过。 12345678910111213141516171819public int maxProduct(String[] words) &#123; int n = words.length; if (n == 0) return 0; int[] val = new int[n]; for (int i = 0; i &lt; n; i++) &#123; for (char c : words[i].toCharArray()) &#123; val[i] |= 1 &lt;&lt; (c - 'a'); &#125; &#125; int ret = 0; for (int i = 0; i &lt; n; i++) &#123; for (int j = i + 1; j &lt; n; j++) &#123; if ((val[i] &amp; val[j]) == 0) &#123; ret = Math.max(ret, words[i].length() * words[j].length()); &#125; &#125; &#125; return ret;&#125; 参考资料 Leetcode Weiss M A, 冯舜玺. 数据结构与算法分析——C 语言描述[J]. 2004. Sedgewick R. Algorithms[M]. Pearson Education India, 1988. 何海涛, 软件工程师. 剑指 Offer: 名企面试官精讲典型编程题[M]. 电子工业出版社, 2014. 《编程之美》小组. 编程之美[M]. 电子工业出版社, 2008. 左程云. 程序员代码面试指南[M]. 电子工业出版社, 2015. 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"Java 基础","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/Java 基础.html","text":"关键字 1. final 2. static Object 通用方法 1. 概览 2. clone() 3. equals() 继承 1. 访问权限 2. 抽象类与接口的区别 3. super() String 1. String, StringBuffer and StringBuilder 2. String 不可变的原因 3. String.intern() 基本类型与运算 1. 包装类型 2. switch 反射 异常 泛型 特性 1. 三大特性 2. Java 各版本的新特性 3. Java 与 C++ 的区别 4. JRE or JDK 关键字1. final数据 声明数据为常量，可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。 对于基本类型，final 使数值不变；对于引用对象，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。 方法 声明方法不能被子类覆盖。 private 方法隐式地被指定为 final，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是覆盖基类方法，而是重载了。 类 声明类不允许被继承。 2. static变量 静态变量在内存中只存在一份，只在类第一次实例化时初始化一次，同时类所有的实例都共享静态变量，可以直接通过类名来访问它。 但是实例变量则不同，它是伴随着实例的，每创建一个实例就会产生一个实例变量，它与该实例同生共死。 方法 静态方法在类加载的时候就存在了，它不依赖于任何实例，所以 static 方法必须实现，也就是说他不能是抽象方法 abstract。 静态语句块 静态语句块和静态变量一样在类第一次实例化时运行一次。 初始化顺序 静态数据优先于其它数据的初始化，静态变量和静态语句块哪个先运行取决于它们在代码中的顺序。 1public static String staticField = \"静态变量\"; 123static &#123; System.out.println(\"静态初始化块\");&#125; 实例变量和普通语句块的初始化在静态变量和静态语句块初始化结束之后。 1public String field = \"变量\"; 123&#123; System.out.println(\"初始化块\");&#125; 最后才是构造函数中的数据进行初始化 123public InitialOrderTest() &#123; System.out.println(\"构造器\");&#125; 存在继承的情况下，初始化顺序为： 父类（静态变量、静态初始化块） 子类（静态变量、静态初始化块） 父类（变量、初始化块） 父类（构造器） 子类（变量、初始化块） 子类（构造器） Object 通用方法1. 概览 public final native Class&lt;?&gt; getClass() public native int hashCode() public boolean equals(Object obj) protected native Object clone() throws CloneNotSupportedException public String toString() public final native void notify() public final native void notifyAll() public final native void wait(long timeout) throws InterruptedException public final void wait(long timeout, int nanos) throws InterruptedException public final void wait() throws InterruptedException protected void finalize() throws Throwable { } 2. clone()浅拷贝 引用类型引用的是同一个对象，clone() 方法默认就是浅拷贝实现。 深拷贝 可以使用序列化实现。 How do I copy an object in Java? 3. equals() 对于基本类型，== 就是判断两个值是否相等； 对于引用类型，== 是判断两个引用是否引用同一个对象，而 equals() 是判断引用的对象是否等价。 等价性： 散列 继承1. 访问权限Java 中有三个访问权限修饰符：private、protected 以及 public，如果不加访问修饰符，表示包级可见。 可以对类或类中的成员（字段以及方法）加上访问修饰符。成员可见表示其它类可以用成员所在类的对象访问到该成员；类可见表示其它类可以用这个类创建对象，可以把类当做包中的一个成员，然后包表示一个类，这样就好理解了。 protected 用于修饰成员，表示在继承体系中成员对于子类可见。但是这个访问修饰符对于类没有意义，因为包没有继承体系。 更详细的内容： 浅析 Java 中的访问权限控制 2. 抽象类与接口的区别抽象类至少包含一个抽象方法，该抽象方法必须在子类中实现。由于抽象类没有抽象方法的具体实现，因此不能对抽象类进行实例化。 123456789public abstract class GenericServlet implements Servlet, ServletConfig, Serializable &#123; // abstract method abstract void service(ServletRequest req, ServletResponse res); void init() &#123; // Its implementation &#125; // other method related to Servlet&#125; 接口定义了一组方法，但是接口都没有方法的实现，也就是说这些方法都是抽象方法。 123456public interface Externalizable extends Serializable &#123; void writeExternal(ObjectOutput out) throws IOException; void readExternal(ObjectInput in) throws IOException, ClassNotFoundException;&#125; 更详细的内容：Java 抽象类与接口的区别 3. super()用来访问父类的构造函数父类的方法，第二种情况中，子类需要重载父类的方法。 1234567891011public class Subclass extends Superclass &#123; // overrides printMethod in Superclass public void printMethod() &#123; super.printMethod(); System.out.println(\"Printed in Subclass\"); &#125; public static void main(String[] args) &#123; Subclass s = new Subclass(); s.printMethod(); &#125;&#125; Using the Keyword super String1. String, StringBuffer and StringBuilder是否可变 String 不可变，StringBuffer 和 StringBuilder 可变。 是否线程安全 String 不可变，因此是线程安全的。 StringBuilder 不是线程安全的；StringBuffer 是线程安全的，使用 synchronized 来同步。 String, StringBuffer, and StringBuilder 2. String 不可变的原因可以缓存 hash 值 因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 等。不可变的特性可以使得 hash 值也不可变，因此就只需要进行一次计算。 String Pool 的需要 如果 String 已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。 安全性 String 经常作为参数，例如网络连接参数等，在作为网络连接参数的情况下，如果 String 是可变的，那么在网络连接过程中，String 被改变，改变 String 对象的那一方以为现在连接的是其它主机，而实际情况却不一定是。String 不可变性可以保证参数不可变。 线程安全 String 不可变性天生具备线程安全，可以在多个线程中使用。 Why String is immutable in Java? 3. String.intern()使用 String.intern() 可以保证所有相同内容的字符串变量引用相同的内存对象。 更详细的内容： 揭开 String.intern() 那神秘的面纱 基本类型与运算1. 包装类型八个基本类型：boolean 1 byte 8 char 16 short 16 int 32 float 32 long 64 double 64 基本类型都有对应的包装类型，它们之间的赋值使用自动装箱与拆箱完成。 12Integer x = 2; // 装箱int y = x; // 拆箱 new Integer(123) 与 Integer.valueOf(123) 的区别在于，Integer.valueOf(123) 可能会使用缓存对象，因此多次使用 Integer.valueOf(123) 会取得同一个对象的引用。 12345678910111213public static void main(String[] args) &#123; Integer a = new Integer(1); Integer b = new Integer(1); System.out.println(\"a==b? \" + (a==b)); Integer c = Integer.valueOf(1); Integer d = Integer.valueOf(1); System.out.println(\"c==d? \" + (c==d)); &#125; 12a==b? falsec==d? true valueOf() 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接使用缓存池的内容。 1234567public static Integer valueOf(int i) &#123; final int offset = 128; if (i &gt;= -128 &amp;&amp; i &lt;= 127) &#123; // must cache return IntegerCache.cache[i + offset]; &#125; return new Integer(i);&#125; The following is the list of primitives stored as immutable objects: boolean values true and false all byte values short values between -128 and 127 int values between -128 and 127 char in the range \\u0000 to \\u007F 自动装箱过程编译器会调用 valueOf() 方法，因此多个 Integer 对象使用装箱来创建并且值相同，那么就会引用相同的对象，这样做很显然是为了节省内存开销。 123Integer x = 1;Integer y = 1;System.out.println(c==d); // true Differences between new Integer(123), Integer.valueOf(123) and just 123 2. switchA switch works with the byte, short, char, and int primitive data types. It also works with enumerated types (discussed in Classes and Inheritance) and a few special classes that “wrap” certain primitive types: Character, Byte, Short, and Integer (discussed in Simple Data Objects). In the JDK 7 release, you can use a String object in the expression of a switch statement. switch 不支持 long，是因为 swicth 的设计初衷是为那些只需要对少数几个值进行等值判断，如果值过于复杂，那么还是用 if 比较合适。 Why can’t your switch statement data type be long, Java? switch 使用查找表的方式来实现，JVM 中使用的指令是 lookupswitch。 12345678910111213141516171819public static void main(String... args) &#123; switch (1) &#123; case 1: break; case 2: break; &#125;&#125;public static void main(java.lang.String[]); Code: Stack=1, Locals=1, Args_size=1 0: iconst_1 1: lookupswitch&#123; //2 1: 28; 2: 31; default: 31 &#125; 28: goto 31 31: return How does Java’s switch work under the hood? 反射每个类都有一个 Class 对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。 类加载相当于 Class 对象的加载。类在第一次使用时才动态加载到 JVM 中，可以使用 Class.forName(‘com.mysql.jdbc.Driver.class’) 这种方式来控制类的加载，该方法会返回一个 Class 对象。 反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。 Class 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库包含了 Field 、Method 以及 Constructor 类。可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段，可以使用 invoke() 方法调用与 Method 对象关联的方法，可以用 Constructor 创建新的对象。 IDE 使用反射机制获取类的信息，在使用一个类的对象时，能够把类的字段、方法和构造函数等信息列出来供用户选择。 更详细的内容： 深入解析 Java 反射（1）- 基础 异常Throwable 可以用来表示任何可以作为异常抛出的类，分为两种： Error 和 Exception，其中 Error 用来表示编译时系统错误。 Exception 分为两种： 受检异常 和 非受检异常。受检异常需要用 try…catch… 语句捕获并进行处理，并且可以从异常中恢复；非受检异常是程序运行时错误，例如除 0 会引发 Arithmetic Exception，此时程序奔溃并且无法恢复。 更详细的内容： Java 入门之异常处理 Java 异常的面试问题及答案 -Part 1 泛型泛型提供了编译时的类型检测机制，该机制允许程序员在编译时检测到非法的类型。泛型是 Java 中一个非常重要的知识点，在 Java 集合类框架中泛型被广泛应用。 123456public class Box&lt;T&gt; &#123; // T stands for \"Type\" private T t; public void set(T t) &#123; this.t = t; &#125; public T get() &#123; return t; &#125;&#125; 更详细的内容： Java 泛型详解 10 道 Java 泛型面试题 特性1. 三大特性 封装、继承、多态 2. Java 各版本的新特性New highlights in Java SE 8 Lambda Expressions Pipelines and Streams Date and Time API Default Methods Type Annotations Nashhorn JavaScript Engine Concurrent Accumulators Parallel operations PermGen Error Removed New highlights in Java SE 7 Strings in Switch Statement Type Inference for Generic Instance Creation Multiple Exception Handling Support for Dynamic Languages Try with Resources Java nio Package Binary Literals, Underscore in literals Diamond Syntax Difference between Java 1.8 and Java 1.7? 更详细的内容：Java 8 特性 3. Java 与 C++ 的区别Java 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object，C++ 为了兼容 C 即支持面向对象也支持面向过程。 比较详细的内容： Java C++ Java does not support pointers, templates, unions, operator overloading, structures etc. The Java language promoters initially said “No pointers!”, but when many programmers questioned how you can work without pointers, the promoters began saying “Restricted pointers.” Java supports what it calls “references”. References act a lot like pointers in C++ languages but you cannot perform arithmetic on pointers in Java. References have types, and they’re type-safe. These references cannot be interpreted as raw address and unsafe conversion is not allowed. C++ supports structures, unions, templates, operator overloading, pointers and pointer arithmetic. Java support automatic garbage collection. It does not support destructors as C++ does. C++ support destructors, which is automatically invoked when the object is destroyed. Java does not support conditional compilation and inclusion. Conditional inclusion (#ifdef #ifndef type) is one of the main features of C++. Java has built in support for threads. In Java, there is a Thread class that you inherit to create a new thread and override the run() method. C++ has no built in support for threads. C++ relies on non-standard third-party libraries for thread support. Java does not support default arguments. There is no scope resolution operator (::) in Java. The method definitions must always occur within a class, so there is no need for scope resolution there either. C++ supports default arguments. C++ has scope resolution operator (::) which is used to to define a method outside a class and to access a global variable within from the scope where a local variable also exists with the same name. There is no goto statement in Java. The keywords const and goto are reserved, even though they are not used. C++ has goto statement. However, it is not considered good practice to use of goto statement. Java doesn’t provide multiple inheritance, at least not in the same sense that C++ does. C++ does support multiple inheritance. The keyword virtual is used to resolve ambiguities during multiple inheritance if there is any. Exception handling in Java is different because there are no destructors. Also, in Java, try/catch must be defined if the function declares that it may throw an exception. While in C++, you may not include the try/catch even if the function throws an exception. Java has method overloading, but no operator overloading. The String class does use the + and += operators to concatenate strings and Stringexpressions use automatic type conversion, but that’s a special built-in case. C++ supports both method overloading and operator overloading. Java has built-in support for documentation comments (/** ... */); therefore, Java source files can contain their own documentation, which is read by a separate tool usually javadoc and reformatted into HTML. This helps keeping documentation maintained in easy way. C++ does not support documentation comments. Java is interpreted for the most part and hence platform independent. C++ generates object code and the same code may not run on different platforms. What are the main differences between Java and C++? 4. JRE or JDK JRE is the JVM program, Java application need to run on JRE. JDK is a superset of JRE, JRE + tools for developing java programs. e.g, it provides the compiler “javac” 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"Java 容器","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/Java 容器.html","text":"概览 1. List 2. Set 3. Queue 4. Map 5. Java 1.0/1.1 容器 容器中的设计模式 1. 迭代器模式 2. 适配器模式 散列 源码分析 1. ArraList 2. Vector 与 Stack 3. LinkedList 4. TreeMap 5. HashMap 6. LinkedHashMap 7. ConcurrentHashMap 参考资料 概览 容器主要包括 Collection 和 Map 两种，Collection 又包含了 List、Set 以及 Queue。 1. List ArrayList：基于动态数组实现，支持随机访问； LinkedList：基于双向循环链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双端队列。 2. Set HashSet：基于 Hash 实现，支持快速查找，但是失去有序性； TreeSet：基于红黑树实现，保持有序，但是查找效率不如 HashSet； LinkedHashSet：具有 HashSet 的查找效率，且内部使用链表维护元素的插入顺序，因此具有有序性。 3. Queue只有两个实现：LinkedList 和 PriorityQueue，其中 LinkedList 支持双向队列，PriorityQueue 是基于堆结构实现。 4. Map HashMap：基于 Hash 实现 LinkedHashMap：使用链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序 TreeMap：基于红黑树实现 ConcurrentHashMap：线程安全 Map，不涉及类似于 HashTable 的同步加锁 5. Java 1.0/1.1 容器对于旧的容器，我们决不应该使用它们，只需要对它们进行了解。 Vector：和 ArrayList 类似，但它是线程安全的 HashTable：和 HashMap 类似，但它是线程安全的 容器中的设计模式1. 迭代器模式从概览图可以看到，每个集合类都有一个 Iterator 对象，可以通过这个迭代器对象来遍历集合中的元素。 Java 中的迭代器模式 2. 适配器模式java.util.Arrays#asList() 可以把数组类型转换为 List 类型。 123List list = Arrays.asList(1, 2, 3);int[] arr = &#123;1, 2, 3&#125;;list = Arrays.asList(arr); 散列使用 hasCode() 来返回散列值，使用的是对象的地址。 而 equals() 是用来判断两个对象是否相等的，相等的两个对象散列值一定要相同，但是散列值相同的两个对象不一定相等。 相等必须满足以下五个性质： 自反性 对称性 传递性 一致性（多次调用 x.equals(y)，结果不变） 对任何不是 null 的对象 x 调用 x.equals(nul) 结果都为 false 源码分析建议先阅读 算法 - 查找 部分，对集合类源码的理解有很大帮助。 源码下载：OpenJDK 1.7 1. ArraListArraList.java 实现了 RandomAccess 接口，因此支持随机访问，这是理所当然的，因为 ArrayList 是基于数组实现的。 12public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable 基于数组实现，保存元素的数组使用 transient 修饰，这是因为该数组不一定所有位置都占满元素，因此也就没必要全部都进行序列化。需要重写 writeObject() 和 readObject()。 1private transient Object[] elementData; 数组的默认大小为 10 12345678910public ArrayList(int initialCapacity) &#123; super(); if (initialCapacity &lt; 0) throw new IllegalArgumentException(\"Illegal Capacity: \"+ initialCapacity); this.elementData = new Object[initialCapacity];&#125;public ArrayList() &#123; this(10);&#125; 删除元素时调用 System.arraycopy() 对元素进行复制，因此删除操作成本很高，最好在创建时就指定大概的容量大小，减少复制操作的执行次数。 12345678910111213public E remove(int index) &#123; rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved &gt; 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // Let gc do its work return oldValue;&#125; 添加元素时使用 ensureCapacity() 方法来保证容量足够，如果不够时，需要进行扩容，使得新容量为旧容量的 1.5 倍。 modCount 用来记录 ArrayList 发生变化的次数，因为每次在进行 add() 和 addAll() 时都需要调用 ensureCapacity()，因此直接在 ensureCapacity() 中对 modCount 进行修改。 123456789101112131415161718192021222324252627282930313233public void ensureCapacity(int minCapacity) &#123; if (minCapacity &gt; 0) ensureCapacityInternal(minCapacity);&#125;private void ensureCapacityInternal(int minCapacity) &#123; modCount++; // overflow-conscious code if (minCapacity - elementData.length &gt; 0) grow(minCapacity);&#125;private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;private void grow(int minCapacity) &#123; // overflow-conscious code int oldCapacity = elementData.length; int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity);&#125;private static int hugeCapacity(int minCapacity) &#123; if (minCapacity &lt; 0) // overflow throw new OutOfMemoryError(); return (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;&#125; 在进行序列化或者迭代等操作时，需要比较操作前后 modCount 是否改变，如果改变了需要抛出 ConcurrentModificationException。 123456789101112131415161718private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException&#123; // Write out element count, and any hidden stuff int expectedModCount = modCount; s.defaultWriteObject(); // Write out array length s.writeInt(elementData.length); // Write out all elements in the proper order. for (int i=0; i&lt;size; i++) s.writeObject(elementData[i]); if (modCount != expectedModCount) &#123; throw new ConcurrentModificationException(); &#125;&#125; 和 Vector 的区别 Vector 和 ArrayList 几乎是完全相同的，唯一的区别在于 Vector 是同步的，因此开销就比 ArrayList 要大，访问要慢。最好使用 ArrayList 而不是 Vector，因为同步完全可以由程序员自己来控制； Vector 每次扩容请求其大小的 2 倍空间，而 ArrayList 是 1.5 倍。 为了使用线程安全的 ArrayList，可以使用 Collections.synchronizedList(new ArrayList&lt;&gt;()); 返回一个线程安全的 ArrayList，也可以使用 concurrent 并发包下的 CopyOnWriteArrayList 类； 和 LinkedList 的区别 ArrayList 基于动态数组实现，LinkedList 基于双向循环链表实现； ArrayList 支持随机访问，LinkedList 不支持； LinkedList 在任意位置添加删除元素更快。 2. Vector 与 StackVector.java 3. LinkedListLinkedList.java 4. TreeMapTreeMap.java 5. HashMapHashMap.java 使用拉链法来解决冲突。 默认容量 capacity 为 16，需要注意的是容量必须保证为 2 的次方。容量就是 Entry[] table 数组的长度，size 是数组的实际使用量。 threshold 规定了一个 size 的临界值，size 必须小于 threshold，如果大于等于，就必须进行扩容操作。 threshold = capacity * load_factor，其中 load_factor 为 table 数组能够使用的比例，load_factor 过大会导致聚簇的出现，从而影响查询和插入的效率，详见算法笔记。 123456789101112131415static final int DEFAULT_INITIAL_CAPACITY = 16;static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;static final float DEFAULT_LOAD_FACTOR = 0.75f;transient Entry[] table;transient int size;int threshold;final float loadFactor;transient int modCount; 从下面的添加元素代码中可以看出，当需要扩容时，令 capacity 为原来的两倍。 123456void addEntry(int hash, K key, V value, int bucketIndex) &#123; Entry&lt;K,V&gt; e = table[bucketIndex]; table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e); if (size++ &gt;= threshold) resize(2 * table.length);&#125; Entry 用来表示一个键值对元素，其中的 next 指针在序列化时会使用。 123456static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123; final K key; V value; Entry&lt;K,V&gt; next; final int hash;&#125; get() 操作需要分成两种情况，key 为 null 和 不为 null，从中可以看出 HashMap 允许插入 null 作为键。 1234567891011public V get(Object key) &#123; if (key == null) return getForNullKey(); int hash = hash(key.hashCode()); for (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)]; e != null; e = e.next) &#123; Object k; if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) return e.value; &#125; return null;&#125; put() 操作也需要根据 key 是否为 null 做不同的处理，需要注意的是如果本来没有 key 为 null 的键值对，新插入一个 key 为 null 的键值对时默认是放在数组的 0 位置，这是因为 null 不能计算 hash 值，也就无法知道应该放在哪个链表上。 12345678910111213141516171819public V put(K key, V value) &#123; if (key == null) return putForNullKey(value); int hash = hash(key.hashCode()); int i = indexFor(hash, table.length); for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123; Object k; if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123; V oldValue = e.value; e.value = value; e.recordAccess(this); return oldValue; &#125; &#125; modCount++; addEntry(hash, key, value, i); return null;&#125; 12345678910111213private V putForNullKey(V value) &#123; for (Entry&lt;K,V&gt; e = table[0]; e != null; e = e.next) &#123; if (e.key == null) &#123; V oldValue = e.value; e.value = value; e.recordAccess(this); return oldValue; &#125; &#125; modCount++; addEntry(0, null, value, 0); return null;&#125; 6. LinkedHashMapLinkedHashMap.java 7. ConcurrentHashMapConcurrentHashMap.java 探索 ConcurrentHashMap 高并发性的实现机制 参考资料 Java 编程思想 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"Java 并发","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/Java 并发.html","text":"使用线程 1. 实现 Runnable 接口 2. 实现 Callable 接口 3. 继承 Tread 类 4. 实现接口 vs 继承 Thread Executor 基础线程机制 1. sleep() 2. yield() 3. join() 4. deamon 线程之间的协作 1. 线程通信 2. 线程同步 2.1 synchronized 2.2 Lock 2.3 BlockingQueue 线程状态 结束线程 1. 阻塞 2. 中断 原子性 volatile 1. 内存可见性 2. 禁止指令重排 多线程开发良好的实践 未完待续 参考资料 使用线程有三种使用线程的方法： 实现 Runnable 接口； 实现 Callable 接口； 继承 Tread 类； 实现 Runnable 和 Callable 接口的类只能当做一个可以在线程中运行的任务，不是真正意义上的线程，因此最后还需要通过 Thread 来调用。可以说任务是通过线程驱动从而执行的。 1. 实现 Runnable 接口需要实现 run() 方法 通过 Thread 调用 start() 方法来启动线程 12345678910public class MyRunnable implements Runnable &#123; public void run() &#123; // ... &#125; public static void main(String[] args) &#123; MyRunnable instance = new MyRunnable(); Tread thread = new Thread(instance); thread.start(); &#125;&#125; 2. 实现 Callable 接口与 Runnable 相比，Callable 可以有返回值，返回值通过 FutureTask 进行封装。 123456789101112public class MyCallable implements Callable&lt;Integer&gt; &#123; public Integer call() &#123; // ... &#125; public static void main(String[] args) &#123; MyCallable mc = new MyCallable(); FutureTask&lt;Integer&gt; ft = new FutureTask&lt;&gt;(mc); Thread thread = new Thread(ft); thread.start(); System.out.println(ft.get()); &#125;&#125; 3. 继承 Tread 类同样也是需要实现 run() 方法，并且最后也是调用 start() 方法来启动线程。 123456789class MyThread extends Thread &#123; public void run() &#123; // ... &#125; public static void main(String[] args) &#123; MyThread mt = new MyThread(); mt.start(); &#125;&#125; 4. 实现接口 vs 继承 Thread实现接口会更好一些，因为： Java 不支持多重继承，因此继承了 Thread 类就无法继承其它类，但是可以实现多个接口。 类可能只要求可执行即可，继承整个 Thread 类开销会过大。 ExecutorExecutor 管理多个异步任务的执行，而无需程序员显示地管理线程的生命周期。 主要有三种 Excutor： CachedTreadPool：一个任务创建一个线程； FixedThreadPool：所有任务只能使用固定大小的线程； SingleThreadExecutor：相当于大小为 1 的 FixedThreadPool。 1234ExecutorService exec = Executors.newCachedThreadPool();for(int i = 0; i &lt; 5; i++) &#123; exec.execute(new MyRunnable());&#125; 基础线程机制1. sleep()Thread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。也可以使用 TimeUnit.TILLISECONDS.sleep(millisec)。 sleep() 可能会抛出 InterruptedException。因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。 123456789public void run() &#123; try &#123; // ... Thread.sleep(1000); // ... &#125; catch(InterruptedException e) &#123; System.err.println(e); &#125;&#125; 2. yield()对静态方法 Thread.yield() 的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。 1234public void run() &#123; // ... Thread.yield();&#125; 3. join()在线程中调用另一个线程的 join() 方法，会将当前线程挂起，直到目标线程结束。 可以加一个超时参数。 4. deamon后台线程（ deamon ）是程序运行时在后台提供服务的线程，并不属于程序中不可或缺的部分。 当所有非后台线程结束时，程序也就终止，同时会杀死所有后台线程。 main() 属于非后台线程。 使用 setDaemon() 方法将一个线程设置为后台线程。 线程之间的协作 线程通信 ：保证线程以一定的顺序执行； 线程同步 ：保证线程对临界资源的互斥访问。 线程通信往往是基于线程同步的基础上完成的，因此很多线程通信问题也是线程同步问题。 1. 线程通信wait()、notify() 和 notifyAll() 三者实现了线程之间的通信。 wait() 会在等待时将线程挂起，而不是忙等待，并且只有在 notify() 或者 notifyAll() 到达时才唤醒。 sleep() 和 yield() 并没有释放锁，但是 wait() 会释放锁。实际上，只有在同步控制方法或同步控制块里才能调用 wait() 、notify() 和 notifyAll()。 这几个方法属于基类的一部分，而不属于 Thread。 12345678910111213private boolean flag = false;public synchronized void after() &#123; while(flag == false) &#123; wait(); // ... &#125;&#125;public synchronized void before() &#123; flag = true; notifyAll();&#125; wait() 和 sleep() 的区别 wait() 是 Object 类的方法，而 sleep() 是 Thread 的静态方法； wait() 会放弃锁，而 sleep() 不会。 2. 线程同步给定一个进程内的所有线程，都共享同一存储空间，这样有好处又有坏处。这些线程就可以共享数据，非常有用。不过，在两个线程同时修改某一资源时，这也会造成一些问题。Java 提供了同步机制，以控制对共享资源的互斥访问。 2.1 synchronized同步一个方法 使多个线程不能同时访问该方法。 123public synchronized void func(String name) &#123; // ...&#125; 同步一个代码块 12345public void func(String name) &#123; synchronized(this) &#123; // ... &#125;&#125; 2.2 Lock若要实现更细粒度的控制，我们可以使用锁（lock）。 123456private Lock lock;public int func(int value) &#123; lock.lock(); // ... lock.unlock();&#125; 2.3 BlockingQueuejava.util.concurrent.BlockingQueue 接口有以下阻塞队列的实现： FIFO 队列 ：LinkedBlockingQueue、ArrayListBlockingQueue（固定长度） 优先级队列 ：PriorityBlockingQueue 提供了阻塞的 take() 和 put() 方法：如果队列为空 take() 将一直阻塞到队列中有内容，如果队列为满 put() 将阻塞到队列有空闲位置。它们响应中断，当收到中断请求的时候会抛出 InterruptedException，从而提前结束阻塞状态。 使用 BlockingQueue 实现生产者消费者问题 123456789101112131415161718192021// 生产者import java.util.concurrent.BlockingQueue;public class Producer implements Runnable &#123; private BlockingQueue&lt;String&gt; queue; public Producer(BlockingQueue&lt;String&gt; queue) &#123; this.queue = queue; &#125; @Override public void run() &#123; System.out.println(Thread.currentThread().getName() + \" is making product...\"); String product = \"made by \" + Thread.currentThread().getName(); try &#123; queue.put(product); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 1234567891011121314151617181920// 消费者import java.util.concurrent.BlockingQueue;public class Consumer implements Runnable&#123; private BlockingQueue&lt;String&gt; queue; public Consumer(BlockingQueue&lt;String&gt; queue) &#123; this.queue = queue; &#125; @Override public void run() &#123; try &#123; String product = queue.take(); System.out.println(Thread.currentThread().getName() + \" is consuming product \" + product + \"...\"); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 12345678910111213141516171819// 客户端import java.util.concurrent.BlockingQueue;import java.util.concurrent.LinkedBlockingQueue;public class Client &#123; public static void main(String[] args) &#123; BlockingQueue&lt;String&gt; queue = new LinkedBlockingQueue&lt;&gt;(5); for (int i = 0; i &lt; 2; i++) &#123; new Thread(new Consumer(queue), \"Producer\" + i).start(); &#125; for (int i = 0; i &lt; 5; i++) &#123; // 只有两个 Product，因此只能消费两个，其它三个消费者被阻塞 new Thread(new Producer(queue), \"Consumer\" + i).start(); &#125; for (int i = 2; i &lt; 5; i++) &#123; new Thread(new Consumer(queue), \"Producer\" + i).start(); &#125; &#125;&#125; 1234567891011// 运行结果Consumer0 is making product...Producer0 is consuming product made by Consumer0...Consumer1 is making product...Producer1 is consuming product made by Consumer1...Consumer2 is making product...Consumer3 is making product...Consumer4 is making product...Producer2 is consuming product made by Consumer2...Producer3 is consuming product made by Consumer3...Producer4 is consuming product made by Consumer4... 线程状态JDK 从 1.5 开始在 Thread 类中增添了 State 枚举，包含以下六种状态： NEW （新建） RUNNABLE （当线程正在运行或者已经就绪正等待 CPU 时间片） BLOCKED （阻塞，线程在等待获取对象同步锁） Waiting （调用不带超时的 wait() 或 join()） TIMED_WAITING （调用 sleep()、带超时的 wait() 或者 join()） TERMINATED （死亡） 结束线程1. 阻塞一个线程进入阻塞状态可能有以下原因： 调用 Thread.sleep() 方法进入休眠状态； 通过 wait() 使线程挂起，直到线程得到 notify() 或 notifyAll() 消息（或者 java.util.concurrent 类库中等价的 signal() 或 signalAll() 消息； 等待某个 I/O 的完成； 试图在某个对象上调用其同步控制方法，但是对象锁不可用，因为另一个线程已经获得了这个锁。 2. 中断使用中断机制即可终止阻塞的线程。 使用 interrupt() 方法来中断某个线程，它会设置线程的中断状态。Object.wait(), Thread.join() 和 Thread.sleep() 三种方法在收到中断请求的时候会清除中断状态，并抛出 InterruptedException。 应当捕获这个 InterruptedException 异常，从而做一些清理资源的操作。 不可中断的阻塞 不能中断 I/O 阻塞和 synchronized 锁阻塞。 Executor 的中断操作 Executor 避免对 Thread 对象的直接操作，但是使用 interrupt() 方法必须持有 Thread 对象。Executor 使用 shutdownNow() 方法来中断所有它里面的所有线程，shutdownNow() 方法会发送 interrupt() 调用给所有线程。 如果只想中断一个线程，那么使用 Executor 的 submit() 而不是 executor() 来启动线程，就可以持有线程的上下文。submit() 将返回一个泛型 Futrue，可以在它之上调用 cancel()，如果将 true 传递给 cancel()，那么它将会发送 interrupt() 调用给特定的线程。 检查中断 通过中断的方法来终止线程，需要线程进入阻塞状态才能终止。如果编写的 run() 方法循环条件为 true，但是该线程不发生阻塞，那么线程就永远无法终止。 interrupt() 方法会设置中断状态，可以通过 interrupted() 方法来检查中断状，从而判断一个线程是否已经被中断。 interrupted() 方法在检查完中断状态之后会清除中断状态，这样做是为了确保一次中断操作只会产生一次影响。 原子性对于除 long 和 double 之外的基本类型变量的读写，可以看成是具有原子性的，以不可分割的步骤操作内存。 JVM 将 64 位变量（long 和 double）的读写当做两个分离的 32 位操作来执行，在两个操作之间可能会发生上下文切换，因此不具有原子性。可以使用 volatile 关键字来定义 long 和 double 变量，从而获得原子性。 AtomicInteger、AtomicLong、AtomicReference 等特殊的原子性变量类提供了下面形式的原子性条件更新语句，使得比较和更新这两个操作能够不可分割地执行。 1boolean compareAndSet(expectedValue, updateValue); AtomicInteger 使用举例： 12345private AtomicInteger ai = new AtomicInteger(0);public int next() &#123; return ai.addAndGet(2)&#125; 原子性具有很多复杂问题，应当尽量使用同步而不是原子性。 volatile保证了内存可见性和禁止指令重排，没法保证原子性。 1. 内存可见性普通共享变量被修改之后，什么时候被写入主存是不确定的。 volatile 关键字会保证每次修改共享变量之后该值会立即更新到内存中，并且在读取时会从内存中读取值。 synchronized 和 Lock 也能够保证内存可见性。它们能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。不过只有对共享变量的 set() 和 get() 方法都加上 synchronized 才能保证可见性，如果只有 set() 方法加了 synchronized，那么 get() 方法并不能保证会从内存中读取最新的数据。 2. 禁止指令重排在 Java 内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。 volatile 关键字通过添加内存屏障的方式来进制指令重排，即重排序时不能把后面的指令放到内存屏障之前。 可以通过 synchronized 和 Lock 来保证有序性，它们保证每个时刻只有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。 多线程开发良好的实践 给线程命名； 最小化同步范围； 优先使用 volatile； 尽可能使用更高层次的并发工具而非 wait 和 notify() 来实现线程通信，如 BlockingQueue, Semeaphore； 多用并发容器，少用同步容器，并发容器壁同步容器的可扩展性更好。 考虑使用线程池 最低限度的使用同步和锁，缩小临界区。因此相对于同步方法，同步块会更好。 未完待续参考资料 Java 编程思想 Java 线程面试题 Top 50 Java 面试专题 - 多线程 &amp; 并发编程 可重入内置锁 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"Linux","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/Linux.html","text":"常用操作以及概念 求助 关机 查看进程 查看端口 PATH 运行等级 sudo GNU 包管理工具 常见发行版本 分区 磁盘的文件名 分区表 1. MBR 2. GPT 开机检测程序 1. BIOS 2. UEFI 挂载 文件权限与目录配置 文件权限概念 文件属性以及权限的修改 1. 修改文件所属群组 2. 修改文件拥有者 3. 修改权限 目录的权限 文件默认权限 目录配置 文件与目录 文件时间 文件与目录的基本操作 1. ls 2. cp 3. rm 4. mv 获取文件内容 1. cat 2. tac 3. more 4. less 5. head 6. tail 7. od 8. touch 指令与文件搜索 1. which 2. whereis 3. locate 4. find 4.1 与时间有关的选项 4.2 与文件拥有者和所属群组有关的选项 4.3 与文件权限和名称有关的选项 磁盘与文件系统 文件系统的组成 inode 目录的 inode 与 block 实体链接与符号链接 1. 实体链接 2. 符号链接 压缩与打包 压缩 1. gzip 2. bzip2 3. xz 打包 Bash Bash 特性 变量操作 指令搜索顺序 数据流重定向 管线指令 1. 提取指令：cut 2. 排序命令：sort、uniq 3. 双向输出重定向：tee 4. 字符转换指令：tr、col、expand、join、paste 5. 分区指令：split 正规表示法与文件格式化处理 grep printf awk vim 三个模式 参考资料 常用操作以及概念求助1. –help 指令的基本用法与选项介绍。 2. man man 是 manual 的缩写，将指令的具体信息显示出来。 当执行 man date 时，有 DATE(1) 出现，其中的数字代表指令的类型，常用的数字及其类型如下： 代号 类型 1 用户在 shell 环境中可以操作的指令或者可执行文件 5 配置文件 8 系统管理员可以使用的管理指令 3. info info 与 man 类似，但是 info 将文档分成一个个页面，每个页面可以进行跳转。 关机1. sync 为了加快对磁盘上文件的读写速度，位于内存中的文件数据不会立即同步到磁盘上，因此关机之前需要先进行 sync 同步操作。 2. shutdown 12345# /sbin/shutdown [-krhc] [时间] [警告讯息]-k ： 不会关机，只是发送警告讯息，通知所有在线的用户-r ： 将系统的服务停掉后就重新启动-h ： 将系统的服务停掉后就立即关机-c ： 取消已经在进行的 shutdown 指令内容 3. 其它关机指令 reboot、halt、poweroff。 查看进程1ps aux | grep threadx 查看端口1netstat -anp | grep 80 PATH可以在环境变量 PATH 中声明可执行文件的路径，路径之间用 : 分隔。 1/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin 运行等级 0：关机模式 1：单用户模式（可用于破解root密码） 2：无网络支持的多用户模式 3：有网络支持的多用户模式（文本模式，工作中最常用的模式） 4：保留，未使用 5：有网络支持的 X-windows 多用户模式（桌面） 6：重新引导系统，即重启 sudo使用 sudo 允许一般用户使用 root 可执行的命令，只有在 /etc/sudoers 配置文件中添加的用户才能使用该指令。 GNUGNU 计划，又译为革奴计划，它的目标是创建一套完全自由的操作系统，称为 GNU，其内容软件完全以 GPL 方式发布。其中 GPL 全称为 GNU 通用公共许可协议，包含了以下内容： 以任何目的运行此程序的自由； 再复制的自由； 改进此程序，并公开发布改进的自由。 包管理工具RPM 和 DPKG 为最常见的两类软件包管理工具。RPM 全称为 Redhat Package Manager，最早由 Red Hat 公司制定实施，随后被 GNU 开源操作系统接受并成为很多 Linux 系统 (RHEL) 的既定软件标准。与 RPM 进行竞争的是基于 Debian 操作系统 (UBUNTU) 的 DEB 软件包管理工具－ DPKG，全称为 Debian Package，功能方面与 RPM 相似。 YUM 基于 RPM 包管理工具，具有依赖管理功能，并具有软件升级的功能。 常见发行版本Linux 发行版是 Linux 内核及各种应用软件的集成版本。 基于的包管理工具 商业发行版 社区发行版 DPKG Ubuntu Debian RPM Red Hat Fedora / CentOS 分区磁盘的文件名Linux 中每个硬件都被当做一个文件。 常见磁盘的文件名： SCSI/SATA/USB 磁盘：/dev/sd[a-p] IDE 磁盘：/dev/hd[a-d] 其中文件名后面的序号的确定与磁盘插入的顺序有关，而与磁盘所插入的插槽位置无关。 分区表磁盘分区表主要有两种格式，一种是限制较多的 MBR 分区表，一种是较新且限制较少的 GPT 分区表。 1. MBRMBR 中，第一个扇区最重要，里面有：主要开机记录（Master boot record, MBR）及分区表（partition table），其中 MBR 占 446 bytes，partition table 占 64 bytes。 分区表只有 64 bytes，最多只能存储 4 个分区，这 4 个分区为主分区（Primary）和扩展分区（Extended）。其中扩展分区只有一个，它将其它空间用来记录分区表，可以记录更多的分区，因此通过扩展分区可以分出更多区分，这些分区称为逻辑分区。 Linux 也把分区当成文件，分区文件的命名方式为：磁盘文件名+编号，例如 /dev/sda1。注意，逻辑分区的编号从 5 开始。 2. GPT不同的磁盘有不同的扇区大小，例如 512 bytes 和最新磁盘的 4k。GPT 为了兼容所有磁盘，在定义扇区上使用逻辑区块地址（Logical Block Address, LBA）。 GPT 第 1 个区块记录了 MBR，紧接着是 33 个区块记录分区信息，并把最后的 33 个区块用于对分区信息进行备份。 GPT 没有扩展分区概念，都是主分区，最多可以分 128 个分区。 开机检测程序1. BIOSBIOS 是开机的时候计算机执行的第一个程序，这个程序知道可以开机的磁盘，并读取磁盘第一个扇区的 MBR，由 MBR 执行其中的开机管理程序，这个开机管理程序的会加载操作系统的核心文件。 MBR 中的开机管理程序提供以下功能：选单、载入核心文件以及转交其它开机管理程序。转交这个功能可以用来实现了多重引导，只需要将另一个操作系统的开机管理程序安装在其它分区的启动扇区上，在启动 MBR 中的开机管理程序时，就可以选择启动当前的操作系统或者转交给其它开机管理程序从而启动另一个操作系统。 安装多重引导，最好先安装 Windows 再安装 Linux。因为安装 Windows 时会覆盖掉 MBR，而 Linux 可以选择将开机管理程序安装在 MBR 或者其它分区的启动扇区，并且可以设置开机管理程序的选单。 2. UEFIUEFI 相比于 BIOS 来说功能更为全面，也更为安全。 挂载挂载利用目录作为分区的进入点，也就是说，进入目录之后就可以读取分区的数据。 文件权限与目录配置文件权限概念把用户分为三种：文件拥有者、群组以及其它人，对不同的用户有不同的文件权限。 使用 ls 查看一个文件时，会显示一个文件的信息，例如 drwxr-xr-x. 3 root root 17 May 6 00:14 .config，对这个信息的解释如下： drwxr-xr-x：文件类型以及权限，第 1 位为文件类型字段，后 9 位为文件权限字段。 3：链接数； root：文件拥有者； root：所属群组； 17：文件大小； May 6 00:14：文件最后被修改的时间； .config：文件名。 常见的文件类型及其含义有： d：目录； -：文件； l：链接文件； 9 位的文件权限字段中，每 3 个为一组，共 3 组，每一组分别代表对文件拥有者、所属群组以及其它人的文件权限。一组权限中的 3 位分别为 r、w、x 权限，表示可读、可写、可执行。 文件属性以及权限的修改1. 修改文件所属群组12# chgrp [-R] groupname dirname/filename-R：递归修改 2. 修改文件拥有者不仅可以修改文件拥有者，也可以修改文件所属群组。 1# chown [-R] 用户名:群组名 dirname/filename 3. 修改权限可以将一组权限用数字来表示，此时一组权限的 3 个位当做二进制数字的位，从左到右每个位的权值为 4、2、1，即每个权限对应的数字权值为 r：4、w：2、x：1。 1# chmod [-R] xyz dirname/filename 范例：将 .bashrc 文件的权限修改为 -rwxr-xr–。 1# chmod 754 .bashrc 也可以使用符号来设定权限。 12345678# chmod [ugoa] [+-=] [rwx] dirname/filename- u：拥有者- g：所属群组- o：其他人- a：所有人- +：添加权限- -：移除权限- =：设定权限 范例：为 .bashrc 文件的所有用户添加写权限。 1# chmod a+w .bashrc 目录的权限文件名不是存储在一个文件的内容中，而是存储在一个文件所在的目录中。因此，拥有文件的 w 权限并不能对文件名进行修改。 目录存储文件列表，一个目录的权限也就是对其文件列表的权限。因此，目录的 r 权限表示可以读取文件列表；w 权限表示可以修改文件列表，具体来说，就是添加删除文件，对文件名进行修改；x 权限可以让该目录成为工作目录，x 权限是 r 和 w 权限的基础，如果不能使一个目录成为工作目录，也就没办法读取文件列表以及对文件列表进行修改了。 文件默认权限文件默认权限：文件默认没有可执行权限，因此为 666，也就是 -rw-rw-rw- 。目录默认权限：目录必须要能够进入，也就是必须拥有可执行权限，因此为 777 ，也就是 drwxrwxrwx。 可以通过 umask 设置或者查看文件的默认权限，通常以掩码的形式来表示，例如 002 表示其它用户的权限去除了一个 2 的权限，也就是写权限，因此建立新文件时默认的权限为 -rw-rw-r– 。 目录配置为了使不同 Linux 发行版本的目录结构保持一致性，Filesystem Hierarchy Standard (FHS) 规定了 Linux 的目录结构。最基础的三个目录如下： / (root, 根目录) /usr (unix software resource)：所有系统默认软件都会安装到这个目录； /var (variable)：存放系统或程序运行过程中的数据文件。 完整的目录树如下： 文件与目录文件时间 modification time (mtime)：文件的内容更新就会更新； status time (ctime)：文件的状态（权限、属性）更新就会更新； access time (atime)：读取文件时就会更新。 文件与目录的基本操作1. ls列出文件或者目录的信息，目录的信息就是其中包含的文件。 1234# ls [-aAdfFhilnrRSt] file|dir-a ：列出全部的文件-d ：仅列出目录本身-l ：以长数据串行列出，包含文件的属性与权限等等数据 2. cp复制操作。 如果源文件有两个以上，则目的文件一定要是目录才行。 12345678cp [-adfilprsu] source destination-a ：相当于 -dr --preserve=all 的意思，至于 dr 请参考下列说明-d ：若来源文件为链接文件，则复制链接文件属性而非文件本身-i ：若目标文件已经存在时，在覆盖前会先询问-p ：连同文件的属性一起复制过去-r ：递归持续复制-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了 3. rm移除操作。 12# rm [-fir] 文件或目录-r ：递归删除 4. mv移动操作。 123# mv [-fiu] source destination# mv [options] source1 source2 source3 .... directory-f ： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖 获取文件内容1. cat取得文件内容。 12# cat [-AbEnTv] filename-n ：打印出行号，连同空白行也会有行号，-b 不会 2. tac是 cat 的反向操作，从最后一行开始打印。 3. more可以一页一页查看文件内容，和文本编辑器类似。 4. less和 more 类似。 5. head可以取得文件前几行。 12# head [-n number] filename-n ：后面接数字，代表显示几行的意思 6. tail是 head 的反向操作，只是取得是后几行。 7. od可以以字符或者十六进制的形式显示二进制文件。 8. touch修改文件时间或者建立新文件。 123456# touch [-acdmt] filename-a ： 更新 atime-c ： 更新 ctime，若该文件不存在则不建立新文件-m ： 更新 mtime-d ： 后面可以接欲更新的日期而不用当前的日期，也可以使用 --date=\"日期或时间\"-t ：后面可以接欲更新的时间而不用当前的时间，格式为[YYYYMMDDhhmm] 指令与文件搜索1. which指令搜索。 12# which [-a] command-a ：将所有指令列出，而不是只列第一个 2. whereiswhereis 搜索文件的速度比较快，因为它只搜索几个特定的目录。 1# whereis [-bmsu] dirname/filename 3. locatelocate 可以用关键字或者正则表达式进行搜索。 locate 使用 /var/lib/mlocate/ 这个数据库来进行搜索，它存储在内存中，并且每天更新一次，所以无法用 locate 搜索新建的文件。可以使用 updatedb 来立即更新数据库。 12# locate [-ir] keyword-r：接正则表达式 4. findfind 可以使用文件的属性和权限进行搜索。 1# find filename [option] 4.1 与时间有关的选项1234-mtime n ：列出在 n 天前的那一天修改过内容的文件-mtime +n ：列出在 n 天之前(不含 n 天本身)修改过内容的文件-mtime -n ：列出在 n 天之内(含 n 天本身)修改过内容的文件-newer file ： 列出比 file 更新的文件 +4、4 和 -4 的指示的时间范围如下： 4.2 与文件拥有者和所属群组有关的选项123456-uid n-gid n-user name-group name-nouser ：搜索拥有者不存在 /etc/passwd 的文件-nogroup：搜索所属群组不存在于 /etc/group 的文件 4.3 与文件权限和名称有关的选项123456-name filename-size [+-]SIZE：搜寻比 SIZE 还要大(+)或小(-)的文件。这个 SIZE 的规格有：c: 代表 byte，k: 代表 1024bytes。所以，要找比 50KB 还要大的文件，就是 -size +50k-type TYPE-perm mode ：搜索权限等于 mode 的文件-perm -mode ：搜索权限包含 mode 的文件-perm /mode ：搜索权限包含任一 mode 的文件 磁盘与文件系统文件系统的组成对分区进行格式化是为了在分区上建立文件系统。一个分区通常只能格式化为一个文件系统，但是磁盘阵列等技术可以将一个分区格式化为多个文件系统，因此只有文件系统能被挂载，而分区不能被挂载。 文件系统有以下三个结构： superblock：记录文件系统的整体信息，包括 inode 和 block 的总量、使用量、剩余量，以及文件系统的格式与相关信息等； inode：一个文件占用一个 inode，记录文件的属性，同时记录此文件的内容所在的 block 号码； block：记录文件的内容，文件太大时，会占用多个 block。 当要读取一个文件的内容时，先在 inode 中去查找文件内容所在的所有 block，然后把所有 block 的内容读出来。 磁盘碎片是指一个文件内容所在的 block 过于分散。 Ext2 文件系统使用了上述的文件结构，并在此之上加入了 block 群组的概念，也就是将一个文件系统划分为多个 block 群组，方便管理。 inodeExt2 文件系统支持的 block 大小有 1k、2k 和 4k 三种，不同的 block 大小限制了单一文件的大小。而每个 inode 大小是固定为 128 bytes。 inode 中记录了文件内容所在的 block，但是每个 block 非常小，一个大文件随便都需要几十万的 block，而一个 inode 大小有限，无法直接引用这么多 block。因此引入了间接、双间接、三间接引用。间接引用是指，让 inode 记录的引用 block 块当成 inode 用来记录引用信息。 inode 具体包含以下信息： 该文件的存取模式(read/write/excute)； 该文件的拥有者与群组(owner/group)； 该文件的容量； 该文件建立或状态改变的时间(ctime)； 最近一次的读取时间(atime)； 最近修改的时间(mtime)； 定义文件特性的旗标(flag)，如 SetUID…； 该文件真正内容的指向 (pointer)。 目录的 inode 与 block建立一个目录时，会分配一个 inode 与至少一个 block。block 记录的内容是目录下所有文件的 inode 编号以及文件名。可以看出文件的 inode 本身不记录文件名，文件名记录在目录中，因此新增文件、删除文件、更改文件名这些操作与目录的 w 权限有关。 实体链接与符号链接123# ln [-sf] source_filename dist_filename-s ：默认是 hard link，加 -s 为 symbolic link-f ：如果目标文件存在时，先删除目标文件 1. 实体链接hard link 只是在某个目录下新增一个条目，使得新增的条目链接到文件的 inode 上。删除任意一个条目，文件还是存在，只要引用数量不为 0。 有以下限制：不能跨越 File System；不能对目录进行链接。 1234# ln /etc/crontab .# ll -i /etc/crontab crontab34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 crontab34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 /etc/crontab 2. 符号链接symbolic link 可以理解为 Windows 的快捷方式，通过建立一个独立的文件，这个文件的数据的读取指向链接的那个文件。当源文件被删除了，链接文件就打不开了。 symbolic link 可以为目录建立链接。 123# ll -i /etc/crontab /root/crontab234474855 -rw-r--r--. 2 root root 451 Jun 10 2014 /etc/crontab53745909 lrwxrwxrwx. 1 root root 12 Jun 23 22:31 /root/crontab2 -&gt; /etc/crontab 压缩与打包压缩Linux 底下有很多压缩文件的扩展名，常见的如下： 扩展名 压缩程序 *.Z compress *.zip zip *.gz gzip *.bz2 bzip2 *.xz xz *.tar tar 程序打包的数据，没有经过压缩 *.tar.gz tar 程序打包的文件，经过 gzip 的压缩 *.tar.bz2 tar 程序打包的文件，经过 bzip2 的压缩 *.tar.xz tar 程序打包的文件，经过 xz 的压缩 1. gzipgzip 是 Linux 使用最广的压缩指令，可以解开 compress、zip 与 gzip 所压缩的文件。 经过 gzip 压缩过，源文件就不存在了。 有 9 个不同的压缩等级可以使用。 可以使用 zcat、zmore、zless 来读取压缩文件的内容。 123456$ gzip [-cdtv#] filename-c ：将压缩的数据输出到屏幕上-d ：解压缩-t ：检验压缩文件是否出错-v ：显示压缩比等信息-# ： # 为数字的意思，代表压缩等级，数字越大压缩比越高，默认为6 2. bzip2提供比 gzip 更高的压缩比。 查看命令：bzcat、bzmore、bzless、bzgrep。 12$ bzip2 [-cdkzv#] filename-k ：保留源文件 3. xz提供比 bzip2 更佳的压缩比。 可以看到，gzip、bzip2、xz 的压缩比不断优化。不过要注意，压缩比越高，压缩的时间也越长。 查看命令：xzcat、xzmore、xzless、xzgrep。 1$ xz [-dtlkc#] filename 打包压缩指令只能对一个文件进行压缩，而打包能够将多个文件打包成一个大文件。tar 不仅可以用于打包，也可以使用 gip、bzip2、xz 将打包文件进行压缩。 123456789101112$ tar [-z|-j|-J] [cv] [-f 新建的tar文件] filename... ==打包压缩$ tar [-z|-j|-J] [tv] [-f 已有的tar文件] ==查看$ tar [-z|-j|-J] [xv] [-f 已有的tar文件] [-C 目录] ==解压缩-z ：使用zip；-j ：使用bzip2；-J ：使用xz；-c ：新建打包文件；-t ：查看打包文件里面有哪些文件；-x ：解打包或解压缩的功能；-v ：在压缩/解压缩的过程中，显示正在处理的文件名；-f : filename：要处理的文件；-C 目录 ： 在特定目录解压缩。 使用方式 命令 打包压缩 tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称 查 看 tar -jtv -f filename.tar.bz2 解压缩 tar -jxv -f filename.tar.bz2 -C 要解压缩的目录 Bash可以通过 Shell 请求内核提供服务，Bash 正是 Shell 的一种。 Bash 特性1. 命令历史 记录使用过的命令。本次登录所执行的命令都会暂时存放到内存中， ~/.bash_history 文件中记录的是前一次登录所执行过的命令。 2. 命令与文件补全 快捷键：tab 3. 命名别名 例如 lm 是 ls -al 的别名。 4. shell scripts 5. 通配符 例如 ls -l /usr/bin/X* 列出 /usr/bin 下面所有以 X 开头的文件。 变量操作 对一个变量赋值直接使用 = ； 对变量取用需要在变量前加上 \\$ ，也可以用 \\${} 的形式； 输出变量使用 echo 命令。 123$ var=abc$ echo $var$ echo $&#123;var&#125; 变量内容如果有空格，需要使用双引号或者单引号。双引号内的特殊字符可以保留原本特性，例如var=”lang is \\$LANG”，则 var 的值为 lang is zh_TW.UTF-8；而单引号内的特殊字符就是特殊字符本身，例如 var=’lang is \\$LANG’，则 var 的值为 lang is \\$LANG。 可以使用 `指令` 或者 \\$(指令) 的方式将指令的执行结果赋值给变量。例如 version=\\$(uname -r)，则 version 的值为 3.10.0-229.el7.x86_64。 可以使用 export 命令将自定义变量转成环境变量，环境变量可以在子程序中使用，所谓子程序就是由当前 Bash 而产生的子 Bash。 Bash 的变量可以声明为数组和整数数字。注意数字类型没有浮点数。如果不进行声明，默认是字符串类型。变量的声明使用 declare 命令： 12345$ declare [-aixr] variable-a ： 定义为数组类型-i ： 定义为整数类型-x ： 定义为环境变量-r ： 定义为readonly类型 使用 [ ] 来对数组进行操作： 123$ array[1]=a$ array[2]=b$ echo $&#123;array[1]&#125; 指令搜索顺序 以绝对或相对路径来执行指令，例如 /bin/ls 或者 ./ls ； 由别名找到该指令来执行； 由 Bash 内建的指令来执行； 按 \\$PATH 变量指定的搜索路径的顺序找到第一个指令来执行。 数据流重定向重定向就是使用文件代替标准输入、标准输出和标准错误输出。 标准输入(stdin) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;：代码为 0 ，使用 &lt; 或 &lt;&lt; ； 标准输出(stdout)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;：代码为 1 ，使用 &gt; 或 &gt;&gt; ； 标准错误输出(stderr)：代码为 2 ，使用 2&gt; 或 2&gt;&gt; ； 其中，有一个箭头的表示以覆盖的方式重定向，而有两个箭头的表示以追加的方式重定向。 可以将不需要的标准输出以及标准错误输出重定向到 /dev/null，相当于扔进垃圾箱。 如果需要将标准输出以及标准错误输出同时重定向到一个文件，需要将某个输出转换为另一个输出，例如 2&gt;&amp;1 表示将标准错误输出转换为标准输出。 1$ find /home -name .bashrc &gt; list 2&gt;&amp;1 管线指令管线是将一个命令的标准输出作为另一个命令的标准输入，在数据需要经过多个步骤的处理之后才能得到我们想要的格式时就可以使用管线。在命令之间使用 | 分隔各个管线命令。 1$ ls -al /etc | less 1. 提取指令：cut提取过程一行一行地进行。 cut 对数据进行切分，取出想要的部分。 1234$ cut-d ：分隔符-f ：经过 -d 分隔后，使用 -f n 取出第 n 个区间-c ：以字符为单位取出区间 范例 1：last 将显示的登入者的信息，要求仅显示用户名。 123456$ lastroot pts/1 192.168.201.101 Sat Feb 7 12:35 still logged inroot pts/1 192.168.201.101 Fri Feb 6 12:13 - 18:46 (06:33)root pts/1 192.168.201.254 Thu Feb 5 22:37 - 23:53 (01:16)$ last | cut -d ' ' -f 1 范例 2：将 export 输出的讯息，取得第 12 字符以后的所有字符串。 12345678$ exportdeclare -x HISTCONTROL=\"ignoredups\"declare -x HISTSIZE=\"1000\"declare -x HOME=\"/home/dmtsai\"declare -x HOSTNAME=\"study.centos.vbird\".....(其他省略).....$ export | cut -c 12 2. 排序命令：sort、uniqsort 进行排序。 123456789$ sort [-fbMnrtuk] [file or stdin]-f ：忽略大小写-b ：忽略最前面的空格-M ：以月份的名字来排序，例如 JAN，DEC-n ：使用数字-r ：反向排序-u ：相当于 unique，重复的内容只出现一次-t ：分隔符，默认为 tab-k ：指定排序的区间 范例：/etc/passwd 内容是以 : 来分隔的，以第三栏来排序。 12345$ cat /etc/passwd | sort -t ':' -k 3root:x:0:0:root:/root:/bin/bashdmtsai:x:1000:1000:dmtsai:/home/dmtsai:/bin/bashalex:x:1001:1002::/home/alex:/bin/basharod:x:1002:1003::/home/arod:/bin/bash uniq 可以将重复的数据只取一个。 123$ uniq [-ic]-i ：忽略大小写-c ：进行计数 范例：取得每个人的登录总次数 1234567$ last | cut -d ' ' -f 1 | sort | uniq -c16 (unknown47 dmtsai4 reboot7 root1 wtmp 3. 双向输出重定向：tee输出重定向会将输出内容重定向到文件中，而 tee 不仅能够完成这个功能，还能保留屏幕上的输出。也就是说，使用 tee 指令，一个输出会同时传送到文件和屏幕上。 1$ tee [-a] file 4. 字符转换指令：tr、col、expand、join、paste tr 用来删除一行中的字符，或者对字符进行替换。 12$ tr [-ds] SET1 ...-d ： 删除行中 SET1 这个字符串 范例，将 last 输出的信息所有小写转换为大写。 1$ last | tr '[a-z]' '[A-Z]' col 将 tab 字符转为空格字符。 12$ col [-xb]-x ： 将 tab 键转换成对等的空格键 expand 将 tab 转换一定数量的空格，默认是 8 个。 12$ expand [-t] file-t ：tab 转为空格的数量 join 将有相同数据的那一行合并在一起。 12345$ join [-ti12] file1 file2-t ：分隔符，默认为空格-i ：忽略大小写的差异-1 ：第一个文件所用的比较字段-2 ：第二个文件所用的比较字段 paste 直接将两行粘贴在一起。 12$ paste [-d] file1 file2-d ：分隔符，默认为 tab 5. 分区指令：splitsplit 将一个文件划分成多个文件。 1234$ split [-bl] file PREFIX-b ：以大小来进行分区，可加单位，例如 b, k, m 等-l ：以行数来进行分区。- PREFIX ：分区文件的前导名称 正规表示法与文件格式化处理grep使用正则表示式把匹配的行提取出来。 1234567$ grep [-acinv] [--color=auto] 搜寻字符串 filename-a ： 将 binary 文件以 text 文件的方式进行搜寻-c ： 计算找到个数-i ： 忽略大小写-n ： 输出行号-v ： 反向选择，亦即显示出没有 搜寻字符串 内容的那一行--color=auto ：找到的关键字加颜色显示 范例：把含有 the 字符串的行提取出来（注意默认会有 –color=auto 选项，因此以下内容在 Linux 中有颜色显示 the 字符串） 123456$ grep -n 'the' regular_express.txt8:I can't finish the test.12:the symbol '*' is represented as start.15:You are the best is mean you are the no. 1.16:The world Happy is the same with \"glad\".18:google is the best tools for search keyword 因为 { 与 } 的符号在 shell 是有特殊意义的，因此必须要使用使用转义字符进行转义。 1$ grep -n 'go\\&#123;2,5\\&#125;g' regular_express.txt printf用于格式化输出。 它不属于管道命令，在给 printf 传数据时需要使用 $( ) 形式。 1234$ printf '%10s %5i %5i %5i %8.2f \\n' $(cat printf.txt) DmTsai 80 60 92 77.33 VBird 75 55 80 70.00 Ken 60 90 70 73.33 awk1$ awk '条件类型1&#123;动作1&#125; 条件类型2&#123;动作2&#125; ...' filename awk 每次处理一行，处理的最小单位是字段，每个字段的命名方式为：\\$n，n 为字段号，从 1 开始，\\$0 表示一整行。 范例 1：取出登录用户的用户名和 ip 12345678$ last -n 5dmtsai pts/0 192.168.1.100 Tue Jul 14 17:32 still logged indmtsai pts/0 192.168.1.100 Thu Jul 9 23:36 - 02:58 (03:22)dmtsai pts/0 192.168.1.100 Thu Jul 9 17:23 - 23:36 (06:12)dmtsai pts/0 192.168.1.100 Thu Jul 9 08:02 - 08:17 (00:14)dmtsai tty1 Fri May 29 11:55 - 12:11 (00:15)$ last -n 5 | awk '&#123;print $1 \"\\t\" $3&#125; awk 变量： 变量名称 代表意义 NF 每一行拥有的字段总数 NR 目前所处理的是第几行数据 FS 目前的分隔字符，默认是空格键 范例 2：输出正在处理的行号，并显示每一行有多少字段 123456$ last -n 5 | awk '&#123;print $1 \"\\t lines: \" NR \"\\t columns: \" NF&#125;'dmtsai lines: 1 columns: 10dmtsai lines: 2 columns: 10dmtsai lines: 3 columns: 10dmtsai lines: 4 columns: 10dmtsai lines: 5 columns: 9 可以使用大于等于逻辑，其中等于使用 ==。 范例 3：/etc/passwd 文件第三个字段为 UID，对 UID 小于 10 的数据进行处理。 1234cat /etc/passwd | awk &apos;BEGIN &#123;FS=&quot;:&quot;&#125; $3 &lt; 10 &#123;print $1 &quot;\\t &quot; $3&#125;&apos;root 0bin 1daemon 2 vim 三个模式 在指令列模式下，有以下命令用于离开或者存储文件。 命令 作用 :w 写入磁盘 :w! 当文件为只读时，强制写入磁盘。到底能不能写入，与用户对该文件的权限有关 :q 离开 :q! 强制离开不保存 :wq 写入磁盘后离开 :wq! 强制写入磁盘后离开 参考资料 鸟哥. 鸟 哥 的 Linux 私 房 菜 基 础 篇 第 三 版[J]. 2009. Linux 平台上的软件包管理 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"MySQL","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/MySQL.html","text":"存储引擎 1. InnoDB 2. MyISAM 3. InnoDB 与 MyISAM 的比较 数据类型 1. 整型 2. 浮点数 3. 字符串 4. 时间和日期 索引 1. 索引分类 1.1 B-Tree 索引 1.2 哈希索引 1.3. 空间索引（R-Tree） 1.4 全文索引 2. 索引的优点 3. 索引优化 3.1 独立的列 3.2 前缀索引 3.3 多列索引 3.4 索引列的顺序 3.5 聚簇索引 3.6 覆盖索引 4. B-Tree 和 B+Tree 原理 4. 1 B-Tree 4.2 B+Tree 4.3 带有顺序访问指针的 B+Tree 4.4 为什么使用 B-Tree 和 B+Tree 查询性能优化 1. Explain 2. 减少返回的列 3. 减少返回的行 4. 拆分大的 DELETE 或 INSERT 语句 分库与分表 故障转移和故障恢复 1. 故障转移 2. 故障恢复 参考资料 存储引擎1. InnoDBInnoDB 是 MySQL 默认的事务型存储引擎，只有在需要 InnoDB 不支持的特性时，才考虑使用其它存储引擎。 采用 MVCC 来支持高并发，并且实现了四个标准的隔离级别，默认级别是可重复读。 表是基于聚簇索引建立的，它对主键的查询性能有很高的提升。 内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够自动在内存中创建哈希索引以加速读操作的自适应哈希索引、能够加速插入操作的插入缓冲区等。 通过一些机制和工具支持真正的热备份。 2. MyISAMMyISAM 提供了大量的特性，包括全文索引、压缩、空间函数（GIS）等。但 MyISAM 不支持事务和行级锁，而且崩溃后无法安全恢复。 只能对整张表加锁，而不是针对行。 可以手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。 可以包含动态或者静态的行。 如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机崩溃时会造成索引损坏，需要执行修复操作。 如果表在创建并导入数据以后，不会再进行修改操作，那么这样的表适合采用 MyISAM 压缩表。 对于只读数据，或者表比较小、可以容忍修复操作，则依然可以继续使用 MyISAM。 MyISAM 设计简单，数据以紧密格式存储，所以在某些场景下性能很好。 3. InnoDB 与 MyISAM 的比较事务 InnoDB 是事务型的。 备份 InnoDB 支持在线热备份。 崩溃恢复 MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。 并发 MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。 其它特性 MyISAM 支持全文索引，地理空间索引。 数据类型1. 整型TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT 分别使用 8, 16, 24, 32, 64 位存储空间，一般情况下越小的列越好。 INT(11) 中的数字只是规定了交互工具显示字符的个数，对于存储和计算来说是没有意义的。 2. 浮点数FLOAT 和 DOUBLE 为浮点类型，DECIMAL 为高精度小数类型。CPU 原生支持浮点运算，但是不支持 DECIMAl 类型的计算，因此 DECIMAL 的计算比浮点类型需要更高的代价。 FLOAT、DOUBLE 和 DECIMAL 都可以指定列宽，例如 DECIMAL(18, 9) 表示总共 18 位，取 9 位存储小数部分，剩下 9 位存储整数部分。 3. 字符串主要有 CHAR 和 VARCHAR 两种类型，一种是定长的，一种是变长的。 VARCHAR 这种变长类型能够节省空间，因为只需要存储必要的内容。但是在执行 UPDATE 时可能会使行变得比原来长，当超出一个页所能容纳的大小时，就要执行额外的操作。MyISAM 会将行拆成不同的片段存储，而 InnoDB 则需要分裂页来使行放进页内。 VARCHAR 会保留字符串末尾的空格，而 CHAR 会删除。 4. 时间和日期MySQL 提供了两种相似的日期时间类型：DATATIME 和 TIMESTAMP。 DATATIME 能够保存从 1001 年到 9999 年的日期和时间，精度为秒，使用 8 字节的存储空间。 它与时区无关。 默认情况下，MySQL 以一种可排序的、无歧义的格式显示 DATATIME 值，例如“2008-01-16 22:37:08”，这是 ANSI 标准定义的日期和时间表示方法。 TIMESTAMP 和 UNIX 时间戳相同，保存从 1970 年 1 月 1 日午夜（格林威治时间）以来的秒数，使用 4 个字节，只能表示从 1970 年 到 2038 年。 它和时区有关。 MySQL 提供了 FROM_UNIXTIME() 函数把 UNIX 时间戳转换为日期，并提供了 UNIX_TIMESTAMP() 函数把日期转换为 UNIX 时间戳。 默认情况下，如果插入时没有指定 TIMESTAMP 列的值，会将这个值设置为当前时间。 应该尽量使用 TIMESTAMP，因为它比 DATETIME 空间效率更高。 索引索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。 索引能够轻易将查询性能提升几个数量级。 对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效。对于中到大型的表，索引就非常有效。但是对于特大型的表，建立和使用索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。 1. 索引分类1.1 B-Tree 索引B-Tree 索引是大多数 MySQL 存储引擎的默认索引类型。 因为不再需要进行全表扫描，只需要对树进行搜索即可，因此查找速度快很多。 可以指定多个列作为索引列，多个索引列共同组成键。B-Tree 索引适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。 除了用于查找，还可以用于排序和分组。 如果不是按照索引列的顺序进行查找，则无法使用索引。 1.2 哈希索引基于哈希表实现，优点是查找非常快。 在 MySQL 中只有 Memory 引擎显式支持哈希索引。 InnoDB 引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B-Tree 索引之上再创建一个哈希索引，这样就让 B-Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。 限制：哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行。不过，访问内存中的行的速度很快，所以大部分情况下这一点对性能影响并不明显；无法用于分组与排序；只支持精确查找，无法用于部分查找和范围查找；如果哈希冲突很多，查找速度会变得很慢。 1.3. 空间索引（R-Tree）MyISAM 存储引擎支持空间索引，可以用于地理数据存储。 空间索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。 1.4 全文索引MyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较索引中的值。 使用 MATCH AGAINST，而不是普通的 WHERE。 2. 索引的优点 大大减少了服务器需要扫描的数据量； 帮助服务器避免进行排序和创建临时表； 将随机 I/O 变为顺序 I/O。 3. 索引优化3.1 独立的列在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。 例如下面的查询不能使用 actor_id 列的索引： 1SELECT actor_id FROM sakila.actor WHERE actor_id + 1 = 5; 3.2 前缀索引对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。 对于前缀长度的选取需要根据 索引选择性 来确定：不重复的索引值和记录总数的比值。选择性越高，查询效率也越高。最大值为 1 ，此时每个记录都有唯一的索引与其对应。 3.3 多列索引在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。例如下面的语句中，最好把 actor_id 和 file_id 设置为多列索引。 12SELECT file_id, actor_ id FROM sakila.film_actorWhERE actor_id = 1 OR film_id = 1; 3.4 索引列的顺序让选择性最强的索引列放在前面，例如下面显示的结果中 customer_id 的选择性比 staff_id 更高，因此最好把 customer_id 列放在多列索引的前面。 1234SELECT COUNT(DISTINCT staff_id)/COUNT(*) AS staff_id_selectivity,COUNT(DISTINCT customer_id)/COUNT(*) AS customer_id_selectivity,COUNT(*)FROM payment; 123 staff_id_selectivity: 0.0001customer_id_selectivity: 0.0373 COUNT(*): 16049 3.5 聚簇索引 聚簇索引并不是一种索引类型，而是一种数据存储方式。 术语“聚簇”表示数据行和相邻的键值紧密地存储在一起，InnoDB 的聚簇索引的数据行存放在 B-Tree 的叶子页中。 因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。 优点 可以把相关数据保存在一起，减少 I/O 操作； 因为数据保存在 B-Tree 中，因此数据访问更快。 缺点 聚簇索引最大限度提高了 I/O 密集型应用的性能，但是如果数据全部放在内存，就没必要用聚簇索引。 插入速度严重依赖于插入顺序，按主键的顺序插入是最快的。 更新操作代价很高，因为每个被更新的行都会移动到新的位置。 当插入到某个已满的页中，存储引擎会将该页分裂成两个页面来容纳该行，页分裂会导致表占用更多的磁盘空间。 如果行比较稀疏，或者由于页分裂导致数据存储不连续时，聚簇索引可能导致全表扫描速度变慢。 3.6 覆盖索引索引包含所有需要查询的字段的值。 4. B-Tree 和 B+Tree 原理4. 1 B-Tree 为了描述 B-Tree，首先定义一条数据记录为一个二元组 [key, data]，key 为记录的键，data 为数据记录除 key 外的数据。 B-Tree 是满足下列条件的数据结构： 所有叶节点具有相同的深度，也就是说 B-Tree 是平衡的； 一个节点中的 key 从左到右非递减排列； 如果某个指针的左右相邻 key 分别是 keyi 和 keyi+1，且不为 null，则该指针指向节点的所有 key 大于 keyi 且小于 keyi+1。 在 B-Tree 中按 key 检索数据的算法非常直观：首先从根节点进行二分查找，如果找到则返回对应节点的 data，否则对相应区间的指针指向的节点递归进行查找，直到找到节点或找到 null 指针，前者查找成功，后者查找失败。 由于插入删除新的数据记录会破坏 B-Tree 的性质，因此在插入删除时，需要对树进行一个分裂、合并、转移等操作以保持 B-Tree 性质。 4.2 B+Tree 与 B-Tree 相比，B+Tree 有以下不同点： 每个节点的指针上限为 2d 而不是 2d+1； 内节点不存储 data，只存储 key，叶子节点不存储指针。 4.3 带有顺序访问指针的 B+Tree 一般在数据库系统或文件系统中使用的 B+Tree 结构都在经典 B+Tree 基础上进行了优化，在叶子节点增加了顺序访问指针，做这个优化的目的是为了提高区间访问的性能。 4.4 为什么使用 B-Tree 和 B+Tree红黑树等数据结构也可以用来实现索引，但是文件系统及数据库系统普遍采用 B-/+Tree 作为索引结构。 页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为 4k），主存和磁盘以页为单位交换数据。 一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。为了减少磁盘 I/O，磁盘往往不是严格按需读取，而是每次都会预读。这样做的理论依据是计算机科学中著名的局部性原理：当一个数据被用到时，其附近的数据也通常会马上被使用。数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次 I/O 就可以完全载入。B-Tree 中一次检索最多需要 h-1 次 I/O（根节点常驻内存），渐进复杂度为 O(h)=O(logdN)。一般实际应用中，出度 d 是非常大的数字，通常超过 100，因此 h 非常小（通常不超过 3）。而红黑树这种结构，h 明显要深的多。并且于逻辑上很近的节点（父子）物理上可能很远，无法利用局部性，效率明显比 B-Tree 差很多。 B+Tree 更适合外存索引，原因和内节点出度 d 有关。由于 B+Tree 内节点去掉了 data 域，因此可以拥有更大的出度，拥有更好的性能。 查询性能优化1. Explain用来分析 SQL 语句，分析结果中比较重要的字段有： select_type : 查询类型，有简单查询、联合查询和子查询 key : 使用的索引 rows : 扫描的行数 2. 减少返回的列慢查询主要是因为访问了过多数据，除了访问过多行之外，也包括访问过多列。 最好不要使用 SELECT * 语句，要根据需要选择查询的列。 3. 减少返回的行最好使用 LIMIT 语句来取出想要的那些行。 还可以建立索引来减少条件语句的全表扫描。例如对于下面的语句，不适用索引的情况下需要进行全表扫描，而使用索引只需要扫描几行记录即可，使用 Explain 语句可以通过观察 rows 字段来看出这种差异。 1SELECT * FROM sakila.film_actor WHERE film_id = 1; 4. 拆分大的 DELETE 或 INSERT 语句如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。 1DELEFT FROM messages WHERE create &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH); 12345rows_affected = 0do &#123; rows_affected = do_query( \"DELETE FROM messages WHERE create &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000\")&#125; while rows_affected &gt; 0 分库与分表1. 分表与分区的不同 分表，就是讲一张表分成多个小表，这些小表拥有不同的表名；而分区是将一张表的数据分为多个区块，这些区块可以存储在同一个磁盘上，也可以存储在不同的磁盘上，这种方式下表仍然只有一个。 2. 使用分库与分表的原因 随着时间和业务的发展，数据库中的表会越来越多，并且表中的数据量也会越来越大，那么读写操作的开销也会随着增大。 3. 垂直切分 将表按功能模块、关系密切程度划分出来，部署到不同的库上。例如，我们会建立商品数据库 payDB、用户数据库 userDB 等，分别用来存储项目与商品有关的表和与用户有关的表。 4. 水平切分 把表中的数据按照某种规则存储到多个结构相同的表中，例如按 id 的散列值、性别等进行划分， 5. 垂直切分与水平切分的选择 如果数据库中的表太多，并且项目各项业务逻辑清晰，那么垂直切分是首选。 如果数据库的表不多，但是单表的数据量很大，应该选择水平切分。 6. 水平切分的实现方式 最简单的是使用 merge 存储引擎。 7. 分库与分表存在的问题 (1) 事务问题 在执行分库分表之后，由于数据存储到了不同的库上，数据库事务管理出现了困难。如果依赖数据库本身的分布式事务管理功能去执行事务，将付出高昂的性能代价；如果由应用程序去协助控制，形成程序逻辑上的事务，又会造成编程方面的负担。 (2) 跨库跨表连接问题 在执行了分库分表之后，难以避免会将原本逻辑关联性很强的数据划分到不同的表、不同的库上。这时，表的连接操作将受到限制，我们无法连接位于不同分库的表，也无法连接分表粒度不同的表，导致原本只需要一次查询就能够完成的业务需要进行多次才能完成。 故障转移和故障恢复故障转移也叫做切换，当主库出现故障时就切换到备库，使备库成为主库。故障恢复顾名思义就是从故障中恢复过来，并且保证数据的正确性。 1. 故障转移1.1 提升备库或切换角色 提升一台备库为主库，或者在一个主-主复制结构中调整主动和被动角色。 1.2 虚拟 IP 地址和 IP 托管 为 MySQL 实例指定一个逻辑 IP 地址，当 MySQL 实例失效时，可以将 IP 地址转移到另一台 MySQL 服务器上。 1.3 中间件解决方案 通过代理，可以路由流量到可以使用的服务器上。 1.4 在应用中处理故障转移 将故障转移整合到应用中可能导致应用变得太过笨拙。 2. 故障恢复参考资料 高性能 MySQL MySQL 索引背后的数据结构及算法原理 MySQL 索引优化全攻略 20+ 条 MySQL 性能优化的最佳经验 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"SQL语法","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/SQL 语法.html","text":"基础 创建表 插入 更新 删除 修改表 查询 排序 过滤 通配符 计算字段 函数 文本处理 日期和时间处理 数值处理 汇总 分组 子查询 连接 内连接 自连接 自然连接 外连接 组合查询 视图 存储过程 游标 触发器 事务处理 字符集 权限管理 基础模式定义了数据如何存储、存储什么样的数据以及数据如何分解等信息，数据库和表都有模式。 主键的值不允许修改，也不允许复用（不能使用已经删除的主键值赋给新数据行的主键）。 SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。 SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。 SQL 支持以下三种注释： 12345# 注释SELECT *FROM mytable; -- 注释/* 注释1 注释2 */ 创建表123456CREATE TABLE mytable ( id INT NOT NULL AUTO_INCREMENT, col1 INT NOT NULL DEFAULT 1, col2 VARCHAR(45) NULL, col3 DATE NULL, PRIMARY KEY (`id`)); 插入普通插入 12INSERT INTO mytable(col1, col2)VALUES(val1, val2); 插入检索出来的数据 123INSERT INTO mytable1(col1, col2)SELECT col1, col2FROM mytable2; 将一个表的内容复制到一个新表 12CREATE TABLE newtable ASSELECT * FROM mytable; 更新123UPDATE mytableSET col = valWHERE id = 1; 删除12DELETE FROM mytableWHERE id = 1; TRUNCATE TABLE 可以清空表，也就是删除所有行。 使用更新和删除操作时一定要用 WHERE 子句，不然会把整张表的数据都破坏。可以先用 SELECT 语句进行测试，防止错误删除。 修改表添加列 12ALTER TABLE mytableADD col CHAR(20); 删除列 12ALTER TABLE mytableDROP COLUMN col; 删除表 1DROP TABLE mytable; 查询DISTINCT 相同值只会出现一次。它作用于所有列，也就是说所有列的值都相同才算相同。 12SELECT DISTINCT col1, col2FROM mytable; LIMIT 限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。 返回前 5 行： 123SELECT *FROM mytableLIMIT 5; 123SELECT *FROM mytableLIMIT 0, 5; 返回第 3 ~ 5 行： 123SELECT *FROM mytableLIMIT 2, 3; 排序 ASC ：升序（默认） DESC ：降序 可以按多个列进行排序，并且为每个列指定不同的排序方式： 123SELECT *FROM mytableORDER BY col1 DESC, col2 ASC; 过滤不进行过滤的数据非常大，导致通过网络传输了很多多余的数据，从而浪费了网络带宽。因此尽量使用 SQL 语句来过滤不必要的数据，而不是传输所有的数据到客户端中然后由客户端进行过滤。 123SELECT *FROM mytableWHERE col IS NULL; 下表显示了 WHERE 子句可用的操作符 操作符 说明 = &lt; &gt; 等于 小于 大于 &lt;&gt; != 不等于 &lt;= !&gt; 小于等于 &gt;= !&lt; 大于等于 BETWEEN 在两个值之间 IS NULL 为NULL值 应该注意到，NULL 与 0 、空字符串都不同。 AND OR 用于连接多个过滤条件。优先处理 AND，因此当一个过滤表达式涉及到多个 AND 和 OR 时，应当使用 () 来决定优先级。 IN 操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。 NOT 操作符用于否定一个条件。 通配符通配符也是用在过滤语句中，但它只能用于文本字段。 % 匹配 &gt;=0 个任意字符，类似于 *； _ 匹配 ==1 个任意字符，类似于 .； [ ] 可以匹配集合内的字符，例如 [ab] 将匹配字符 a 或者 b。用脱字符 ^ 可以对其进行否定，也就是不匹配集合内的字符。 使用 Like 来进行通配符匹配。 123SELECT *FROM mytableWHERE col LIKE '[^AB]%' -- 不以 A 和 B 开头的任意文本 不要滥用通配符，通配符位于开头处匹配会非常慢。 计算字段在数据库服务器上完成数据的转换和格式化的工作往往比客户端上快得多，并且转换和格式化后的数据量更少的话可以减少网络通信量。 计算字段通常需要使用 AS 来取别名，否则输出的时候字段名为计算表达式。 12SELECT col1*col2 AS aliasFROM mytable Concat() 用于连接两个字段。许多数据库会使用空格把一个值填充为列宽，因此连接的结果会出现一些不必要的空格，使用 TRIM() 可以去除首尾空格。 12SELECT Concat(TRIM(col1), ' (', TRIM(col2), ')')FROM mytable 函数各个 DBMS 的函数都是不相同的，因此不可移植。 文本处理 函数 说明 LEFT() RIGHT() 左边或者右边的字符 LOWER() UPPER() 转换为小写或者大写 LTRIM() RTIM() 去除左边或者右边的空格 LENGTH() 长度 SUNDEX() 转换为语音值 其中， SOUNDEX() 是将一个字符串转换为描述其语音表示的字母数字模式的算法，它是根据发音而不是字母比较。 123SELECT *FROM mytableWHERE SOUNDEX(col1) = SOUNDEX('apple') 日期和时间处理 日期格式：YYYY-MM-DD 时间格式：HH:MM:SS 函 数 说 明 AddDate() 增加一个日期（天、周等） AddTime() 增加一个时间（时、分等） CurDate() 返回当前日期 CurTime() 返回当前时间 Date() 返回日期时间的日期部分 DateDiff() 计算两个日期之差 Date_Add() 高度灵活的日期运算函数 Date_Format() 返回一个格式化的日期或时间串 Day() 返回一个日期的天数部分 DayOfWeek() 对于一个日期，返回对应的星期几 Hour() 返回一个时间的小时部分 Minute() 返回一个时间的分钟部分 Month() 返回一个日期的月份部分 Now() 返回当前日期和时间 Second() 返回一个时间的秒部分 Time() 返回一个日期时间的时间部分 Year() 返回一个日期的年份部分 12mysql&gt; SELECT NOW(); -&gt; '2017-06-28 14:01:52' 数值处理 函数 说明 SIN() 正弦 COS() 余弦 TAN() 正切 ABS() 绝对值 SQRT() 平方根 MOD() 余数 EXP() 指数 PI() 圆周率 RAND() 随机数 汇总 函 数 说 明 AVG() 返回某列的平均值 COUNT() 返回某列的行数 MAX() 返回某列的最大值 MIN() 返回某列的最小值 SUM() 返回某列值之和 AVG() 会忽略 NULL 行。 使用 DISTINCT 可以汇总函数值汇总不同的值。 12SELECT AVG(DISTINCT col1) AS avg_colFROM mytable 分组分组就是把具有相同的数据值的行放在同一组中。 可以对同一分组数据使用汇总函数进行处理，例如求分组数据的平均值等。 指定的分组字段除了能让数组按该字段进行分组，也可以按该字段进行排序，例如按 col 字段排序并分组数据： 123SELECT col, COUNT(*) AS numFROM mytableGROUP BY col; WHERE 过滤行，HAVING 过滤分组。行过滤应当先与分组过滤； 12345SELECT col, COUNT(*) AS numFROM mytableWHERE col &gt; 2GROUP BY colHAVING COUNT(*) &gt;= 2; GROUP BY 的排序结果为分组字段，而 ORDER BY 也可以以聚集字段来进行排序。 1234SELECT col, COUNT(*) AS numFROM mytableGROUP BY colORDER BY num; 分组规定： GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前； 除了汇总计算语句的字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出； NULL 的行会单独分为一组； 大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。 子查询子查询中只能返回一个字段的数据。 可以将子查询的结果作为 WHRER 语句的过滤条件： 1234SELECT *FROM mytable1WHERE col1 IN (SELECT col2 FROM mytable2); 下面的语句可以检索出客户的订单数量，子查询语句会对第一个查询检索出的每个客户执行一次： 123456SELECT cust_name, (SELECT COUNT(*) FROM Orders WHERE Orders.cust_id = Customers.cust_id) AS orders_numFROM CustomersORDER BY cust_name; 连接连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON 而不是 Where。 连接可以替换子查询，并且比子查询的效率一般会更快。 可以用 AS 给列名、计算字段和表名取别名，给表名取别名是为了简化 SQL 语句以及连接相同表。 内连接内连接又称等值连接，使用 INNER JOIN 关键字。 123select a, b, cfrom A inner join Bon A.key = B.key 可以不明确使用 INNER JOIN，而使用普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来。 123select a, b, cfrom A, Bwhere A.key = B.key 在没有条件语句的情况下返回笛卡尔积。 自连接自连接可以看成内连接的一种，只是连接的表是自身而已。 一张员工表，包含员工姓名和员工所属部门，要找出与 Jim 处在同一部门的所有员工姓名。 子查询版本 123456select namefrom employeewhere department = ( select department from employee where name = \"Jim\"); 自连接版本 1234select namefrom employee as e1, employee as e2where e1.department = e2.department and e1.name = \"Jim\"; 连接一般比子查询的效率高。 自然连接自然连接是把同名列通过等值测试连接起来的，同名列可以有多个。 内连接和自然连接的区别：内连接提供连接的列，而自然连接自动连接所有同名列。 12select *from employee natural join department; 外连接外连接保留了没有关联的那些行。分为左外连接，右外连接以及全外连接，左外连接就是保留左表没有关联的行。 检索所有顾客的订单信息，包括还没有订单信息的顾客。 123select Customers.cust_id, Orders.order_num from Customers left outer join Orders on Customers.cust_id = Orders.curt_id; 如果需要统计顾客的订单数，使用聚集函数。 12345select Customers.cust_id, COUNT(Orders.order_num) as num_ordfrom Customers left outer join Orderson Customers.cust_id = Orders.curt_idgroup by Customers.cust_id; 组合查询使用 UNION 来组合两个查询，如果第一个查询返回 M 行，第二个查询返回 N 行，那么组合查询的结果为 M+N 行。 每个查询必须包含相同的列、表达式或者聚集函数。 默认会去除相同行，如果需要保留相同行，使用 UNION ALL。 只能包含一个 ORDER BY 子句，并且必须位于语句的最后。 1234567SELECT colFROM mytableWHERE col = 1UNIONSELECT colFROM mytableWHERE col =2; 视图视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。对视图的操作和对普通表的操作一样。 视图具有如下好处： 简化复杂的 SQL 操作，比如复杂的联结； 只使用实际表的一部分数据； 通过只给用户访问视图的权限，保证数据的安全性； 更改数据格式和表示。 1234CREATE VIEW myview ASSELECT Concat(col1, col2) AS concat_col, col3*col4 AS count_colFROM mytableWHERE col5 = val; 存储过程存储过程可以看成是对一系列 SQL 操作的批处理； 使用存储过程的好处 代码封装，保证了一定的安全性； 代码复用； 由于是预先编译，因此具有很高的性能。 创建存储过程 命令行中创建存储过程需要自定义分隔符，因为命令行是以 ; 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。 包含 in、out 和 inout 三种参数。 给变量赋值都需要用 select into 语句。 每次只能给一个变量赋值，不支持集合的操作。 1234567891011delimiter //create procedure myprocedure( out ret int ) begin declare y int; select sum(col1) from mytable into y; select y*y into ret; end //delimiter ; 12call myprocedure(@ret);select @ret; 游标在存储过程中使用游标可以对一个结果集进行移动遍历。 游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。 使用游标的四个步骤： 声明游标，这个过程没有实际检索出数据； 打开游标； 取出数据； 关闭游标； 1234567891011121314151617181920delimiter //create procedure myprocedure(out ret int) begin declare done boolean default 0; declare mycursor cursor for select col1 from mytable; # 定义了一个continue handler，当 sqlstate '02000' 这个条件出现时，会执行 set done = 1 declare continue handler for sqlstate '02000' set done = 1; open mycursor; repeat fetch mycursor into ret; select ret; until done end repeat; close mycursor; end // delimiter ; 触发器触发器会在某个表执行以下语句时而自动执行：DELETE、INSERT、UPDATE 触发器必须指定在语句执行之前还是之后自动执行，之前执行使用 BEFORE 关键字，之后执行使用 AFTER 关键字。BEFORE 用于数据验证和净化。 INSERT 触发器包含一个名为 NEW 的虚拟表。 12CREATE TRIGGER mytrigger AFTER INSERT ON mytableFOR EACH ROW SELECT NEW.col; DELETE 触发器包含一个名为 OLD 的虚拟表，并且是只读的。 UPDATE 触发器包含一个名为 NEW 和一个名为 OLD 的虚拟表，其中 NEW 是可以被修改地，而 OLD 是只读的。 可以使用触发器来进行审计跟踪，把修改记录到另外一张表中。 MySQL 不允许在触发器中使用 CALL 语句 ，也就是不能调用存储过程。 事务处理基本术语 事务（transaction）指一组 SQL 语句； 回退（rollback）指撤销指定 SQL 语句的过程； 提交（commit）指将未存储的 SQL 语句结果写入数据库表； 保留点（savepoint）指事务处理中设置的临时占位符（placeholder），你可以对它发布回退（与回退整个事务处理不同）。 不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CRETE 和 DROP 语句。 MySQL 的事务提交默认是隐式提交，也就是每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。 通过设置 autocommit 为 0 可以取消自动提交，直到 autocommit 被设置为 1 才会提交；autocommit 标记是针对每个连接而不是针对服务器的。 如果没有设置保留点，ROLLBACK 会回退到 START TRANSACTION 语句处；如果设置了保留点，并且在 ROLLBACK 中指定该保留点，则会回退到该保留点。 1234567START TRANSACTION// ...SAVEPOINT delete1// ...ROLLBACK TO delete1// ...COMMIT 字符集基本术语 字符集为字母和符号的集合； 编码为某个字符集成员的内部表示； 校对字符指定如何比较，主要用于排序和分组。 除了给表指定字符集和校对外，也可以给列指定： 123CREATE TABLE mytable(col VARCHAR(10) CHARACTER SET latin COLLATE latin1_general_ci )DEFAULT CHARACTER SET hebrew COLLATE hebrew_general_ci; 可以在排序、分组时指定校对： 123SELECT *FROM mytableORDER BY col COLLATE latin1_general_ci; 权限管理MySQL 的账户信息保存在 mysql 这个数据库中。 12USE mysql;SELECT user FROM user; 创建账户 1CREATE USER myuser IDENTIFIED BY 'mypassword'; 新创建的账户没有任何权限。 修改账户名 1RENAME myuser TO newuser; 删除账户 1DROP USER myuser; 查看权限 1SHOW GRANTS FOR myuser; 授予权限 1GRANT SELECT, INSERT ON mydatabase.* TO myuser; 账户用 username@host 的形式定义，username@% 使用的是默认主机名。 删除权限 1REVOKE SELECT, INSERT ON mydatabase.* FROM myuser; GRANT 和 REVOKE 可在几个层次上控制访问权限： 整个服务器，使用 GRANT ALL 和 REVOKE ALL； 整个数据库，使用 ON database.*； 特定的表，使用 ON database.table； 特定的列； 特定的存储过程。 更改密码 必须使用 Password() 函数 1SET PASSWROD FOR myuser = Password('newpassword'); 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"代码可读性","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/代码可读性.html","text":"可读性的重要性 用名字表达代码含义 名字不能带来歧义 良好的代码风格 编写注释 如何编写注释 提高控制流的可读性 拆分长表达式 变量与可读性 抽取函数 一次只做一件事 用自然语言表述代码 减少代码量 可读性的重要性编程有很大一部分时间是在阅读代码，不仅要阅读自己的代码，而且要阅读别人的代码。因此，可读性良好的代码能够大大提高编程效率。 可读性良好的代码往往会让代码架构更好，因为程序员更愿意去修改这部分代码，而且也更容易修改。 只有在核心领域为了效率才可以放弃可读性，否则可读性是第一位。 用名字表达代码含义一些比较有表达力的单词： 单词 可替代单词 send deliver、dispatch、announce、distribute、route find search、extract、locate、recover start launch、create、begin、open make create、set up、build、generate、compose、add、new 使用 i、j、k 作为循环迭代器的名字过于简单，user_i、member_i 这种名字会更有表达力。因为循环层次越多，代码越难理解，有表达力的迭代器名字可读性会更高 为名字添加形容词等信息能让名字更具有表达力，但是名字也会变长。名字长短的准则是：作用域越大，名字越长。因此只有在短作用域才能使用一些简单名字。 名字不能带来歧义起完名字要思考一下别人会对这个名字有何解读，会不会误解了原本想表达的含义。 用 min、max 表示数量范围；用 first、last 表示访问空间的包含范围，begin、end 表示访问空间的排除范围，即 end 不包含尾部。 布尔相关的命名加上 is、can、should、has 等前缀。 良好的代码风格适当的空行和缩进。 排列整齐的注释： 123int a = 1; // 注释int b = 11; // 注释int c = 111; // 注释 语句顺序不能随意，比如与 html 表单相关联的变量的赋值应该和表单在 html 中的顺序一致； 把相关的代码按块组织起来放在一起。 编写注释阅读代码首先会注意到注释，如果注释没太大作用，那么就会浪费代码阅读的时间。那些能直接看出含义的代码不需要写注释，特别是并不需要为每个方法都加上注释，比如那些简单的 getter 和 setter 方法，为这些方法写注释反而让代码可读性更差。 不能因为有注释就随便起个名字，而是争取起个好名字而不写注释。 可以用注释来记录采用当前解决办法的思考过程，从而让读者更容易理解代码。 注释用来提醒一些特殊情况。 用 TODO 等做标记： 标记 用法 TODO 待做 FIXME 待修复 HACH 粗糙的解决方案 XXX 危险！这里有重要的问题 如何编写注释尽量简洁明了： 123// The first String is student's name// The Second Integer is student's scoreMap&lt;String, Integer&gt; scoreMap = new HashMap&lt;&gt;(); 12// Student' name -&gt; Student's scoreMap&lt;String, Integer&gt; scoreMap = new HashMap&lt;&gt;(); 添加测试用例来说明： 12345//...// Example: add(1, 2), return 3int add(int x, int y) &#123; return x + y;&#125; 在很复杂的函数调用中对每个参数标上名字： 123int a = 1;int b = 2;int num = add(\\* x = *\\ a, \\* y = *\\ b); 使用专业名词来缩短概念上的解释，比如用设计模式名来说明代码。 提高控制流的可读性条件表达式中，左侧是变量，右侧是常数。比如下面第一个语句正确： 12if(len &lt; 10)if(10 &gt; len) if / else 条件语句，逻辑的处理顺序为：① 正逻辑；② 关键逻辑；③ 简单逻辑。12345if(a == b) &#123; // 正逻辑&#125; else&#123; // 反逻辑&#125; 只有在逻辑简单的情况下使用 ? : 三目运算符来使代码更紧凑，否则应该拆分成 if / else； do / while 的条件放在后面，不够简单明了，并且会有一些迷惑的地方，最好使用 while 来代替。 如果只有一个 goto 目标，那么 goto 尚且还能接受，但是过于复杂的 goto 会让代码可读性特别差，应该避免使用 goto。 在嵌套的循环中，用一些 return 语句往往能减少嵌套的层数。 拆分长表达式长表达式的可读性很差，可以引入一些解释变量从而拆分表达式： 12if line.split(':')[0].strip() == \"root\": ... 123username = line.split(':')[0].strip()if username == \"root\": ... 使用摩根定理简化一些逻辑表达式： 123if(!a &amp;&amp; !b) &#123; ...&#125; 123if(a || b) &#123; ...&#125; 变量与可读性去除控制流变量 。在循环中通过使用 break 或者 return 可以减少控制流变量的使用。 12345678boolean done = false;while(/* condition */ &amp;&amp; !done) &#123; ... if(...) &#123; done = true; continue; &#125;&#125; 123456while(/* condition */) &#123; ... if(...) &#123; break; &#125;&#125; 减小变量作用域 。作用域越小，越容易定位到变量所有使用的地方。 JavaScript 可以用闭包减小作用域。以下代码中 submit_form 是函数变量，submitted 变量控制函数不会被提交两次。第一个实现中 submitted 是全局变量，第二个实现把 submitted 放到匿名函数中，从而限制了起作用域范围。 1234567submitted = false;var submit_form = function(form_name) &#123; if(submitted) &#123; return; &#125; submitted = true;&#125;; 123456789var submit_form = (function() &#123; var submitted = false; return function(form_name) &#123; if(submitted) &#123; return; &#125; submitted = true; &#125;&#125;()); // () 使得外层匿名函数立即执行 JavaScript 中没有用 var 声明的变量都是全局变量，而全局变量很容易造成迷惑，因此应当总是用 var 来声明变量。 变量定义的位置应当离它使用的位置最近。 实例解析 在一个网页中有以下文本输入字段： 1234&lt;input type = \"text\" id = \"input1\" value = \"a\"&gt;&lt;input type = \"text\" id = \"input2\" value = \"b\"&gt;&lt;input type = \"text\" id = \"input3\" value = \"\"&gt;&lt;input type = \"text\" id = \"input4\" value = \"d\"&gt; 现在要接受一个字符串并把它放到第一个空的 input 字段中，初始实现如下： 123456789101112131415var setFirstEmptyInput = function(new_alue) &#123; var found = false; var i = 1; var elem = document.getElementById('input' + i); while(elem != null) &#123; if(elem.value === '') &#123; found = true; break; &#125; i++; elem = document.getElementById('input' + i); &#125; if(found) elem.value = new_value; return elem;&#125; 以上实现有以下问题： found 可以去除； elem 作用域过大； 可以用 for 循环代替 while 循环； 123456789101112var setFirstEmptyInput = function(new_value) &#123; for(var i = 1; true; i++) &#123; var elem = document.getElementById('input' + i); if(elem === null) &#123; return null; &#125; if(elem.value === '') &#123; elem.value = new_value; return elem; &#125; &#125;&#125;; 抽取函数工程学就是把大问题拆分成小问题再把这些问题的解决方案放回一起。 首先应该明确一个函数的高层次目标，然后对于不是直接为了这个目标工作的代码，抽取出来放到独立的函数中。 介绍性的代码： 12345678910111213141516int findClostElement(int[] arr) &#123; int clostIdx; int clostDist = Interger.MAX_VALUE; for(int i = 0; i &lt; arr.length; i++) &#123; int x = ...; int y = ...; int z = ...; int value = x * y * z; int dist = Math.sqrt(Math.pow(value, 2), Math.pow(arr[i], 2)); if(dist &lt; clostDist) &#123; clostIdx = i; clostDist = value; &#125; &#125; return clostIdx;&#125; 以上代码中循环部分主要计算距离，这部分不属于代码高层次目标，高层次目标是寻找最小距离的值，因此可以把这部分代替提取到独立的函数中。这样做也带来一个额外的好处有：可以单独进行测试、可以快速找到程序错误并修改。 123456789101112public int findClostElement(int[] arr) &#123; int clostIdx; int clostDist = Interger.MAX_VALUE; for(int i = 0; i &lt; arr.length; i++) &#123; int dist = computDist(arr, i); if(dist &lt; clostDist) &#123; clostIdx = i; clostDist = value; &#125; &#125; return clostIdx;&#125; 并不是函数抽取的越多越好，如果抽取过多，在阅读代码的时候可能需要不断跳来跳去。只有在当前函数不需要去了解某一块代码细节而能够表达其内容时，把这块代码抽取成子函数才是好的。 函数抽取也用于减小代码的冗余。 一次只做一件事只做一件事的代码很容易让人知道其要做的事； 基本流程：列出代码所做的所有任务；把每个任务拆分到不同的函数，或者不同的段落。 用自然语言表述代码先用自然语言书写代码逻辑，也就是伪代码，然后再写代码，这样代码逻辑会更清晰。 减少代码量不要过度设计，编码过程会有很多变化，过度设计的内容到最后往往是无用的。 多用标准库实现。 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"算法","date":"2018-03-11T03:58:00.000Z","path":"20180311/Interview/算法.html","text":"算法分析 1. 函数转换 2. 数学模型 3. ThreeSum 4. 倍率实验 5. 注意事项 排序 1. 初级排序算法 1.1 约定 1.2 选择排序 1.3 插入排序 1.4 选择排序和插入排序的比较 1.5 希尔排序 2 归并排序 2.1 归并方法 2.2 自顶向下归并排序 2.3 自底向上归并排序 3. 快速排序 3.1 基本算法 3.2 切分 3.3 性能分析 3.4 算法改进 3.4.1 切换到插入排序 3.4.2 三取样 3.4.3 三向切分 4. 优先队列 4.1 堆 4.2 上浮和下沉 4.3 插入元素 4.4 删除最大元素 4.5 堆排序 4.6 分析 5. 应用 5.1 排序算法的比较 5.2 Java 的排序算法实现 5.3 基于切分的快速选择算法 查找 1. 符号表 1.1 无序符号表 1.2 有序符号表 1.3 二分查找实现有序符号表 2. 二叉查找树 2.1 get() 2.2 put() 2.3 分析 2.4 floor() 2.5 rank() 2.6 min() 2.7 deleteMin() 2.8 delete() 2.9 keys() 2.10 性能分析 3. 平衡查找树 3.1 2-3 查找树 3.1.1 插入操作 3.1.2 性质 3.2 红黑二叉查找树 3.2.1 左旋转 3.2.2 右旋转 3.2.3 颜色转换 3.2.4 插入 3.2.5 删除最小键 3.2.6 分析 4. 散列表 4.1 散列函数 4.2 基于拉链法的散列表 4.3 基于线性探测法的散列表 4.3.1 查找 4.3.2 插入 4.3.3 删除 4.3.4 调整数组大小 5. 应用 5.1 各种符号表实现的比较 5.2 Java 的符号表实现 5.3 集合类型 5.4 稀疏向量乘法 算法分析1. 函数转换指数函数可以转换为线性函数，从而在函数图像上显示的更直观。 T(N)=aN3 转换为 lg(T(N))=3lgN+lga 2. 数学模型近似 使用 ~f(N) 来表示所有随着 N 的增大除以 f(N) 的结果趋近于 1 的函数 , 例如 N3/6-N2/2+N/3 ~ N3/6。 增长数量级 增长数量级将算法与它的实现隔离开来，一个算法的增长数量级为 N3 与它是否用 Java 实现，是否运行于特定计算机上无关。 内循环 执行最频繁的指令决定了程序执行的总时间，把这些指令称为程序的内循环。 成本模型 使用成本模型来评估算法，例如数组的访问次数就是一种成本模型。 3. ThreeSumThreeSum 程序用于统计一个数组中三元组的和为 0 的数量。 12345678910111213141516public class ThreeSum &#123; public static int count(int[] a) &#123; int N = a.length; int cnt = 0; for (int i = 0; i &lt; N; i++) &#123; for (int j = i + 1; j &lt; N; j++) &#123; for (int k = j + 1; k &lt; N; k++) &#123; if (a[i] + a[j] + a[k] == 0) &#123; cnt++; &#125; &#125; &#125; &#125; return cnt; &#125;&#125; 该程序的内循环为 if (a[i] + a[j] + a[k] == 0) 语句，总共执行的次数为 N3/6-N2/2+N/3，因此它的近似执行次数为 ~N3/6，增长数量级为 N3。 改进 通过将数组先排序，对两个元素求和，并用二分查找方法查找是否存在该和的相反数，如果存在，就说明存在三元组的和为 0。 该方法可以将 ThreeSum 算法增长数量级降低为 N2logN。 123456789101112131415161718public class ThreeSumFast &#123; public static int count(int[] a) &#123; Arrays.sort(a); int N = a.length; int cnt = 0; for (int i = 0; i &lt; N; i++) &#123; for (int j = i + 1; j &lt; N; j++) &#123; for (int k = j + 1; k &lt; N; k++) &#123; // rank() 方法返回元素在数组中的下标，如果元素不存在，这里会返回 -1。应该注意这里的下标必须大于 j，这样就不会重复统计了。 if (BinarySearch.rank(-a[i] - a[j], a) &gt; j) &#123; cnt++; &#125; &#125; &#125; &#125; return cnt; &#125;&#125; 4. 倍率实验如果 T(N) ~ aNblgN，那么 T(2N)/T(N) ~ 2b，例如对于暴力方法的 ThreeSum 算法，近似时间为 ~N3/6，对它进行倍率实验得到如下结果： 可见 T(2N)/T(N)~23，也就是 b 为 3。 5. 注意事项大常数 在求近似时，如果低级项的常数系数很大，那么近似的结果就是错误的。 缓存 计算机系统会使用缓存技术来组织内存，访问数组相邻的元素会比访问不相邻的元素快很多。 对最坏情况下的性能的保证 在核反应堆、心脏起搏器或者刹车控制器中的软件，最坏情况下的性能是十分重要的。 随机化算法 通过打乱输入，去除算法对输入的依赖。 均摊分析 将所有操作的总成本所以操作总数来将成本均摊。例如对一个空栈进行 N 次连续的 push() 调用需要访问数组的元素为 N+4+8+16+…+2N=5N-4（N 是向数组写入元素，其余的都是调整数组大小时进行复制需要的访问数组操作），均摊后每次操作访问数组的平均次数为常数。 排序1. 初级排序算法1.1 约定待排序的元素需要实现 Java 的 Comparable 接口，该接口有 compareTo() 方法。 研究排序算法的成本模型时，计算的是比较和交换的次数。 使用辅助函数 less() 和 exch() 来进行比较和交换的操作，使得代码的可读性和可移植性更好。 123456789private boolean less(Comparable v, Comparable w)&#123; return v.compareTo(w) &lt; 0;&#125;private void exch(Comparable[] a, int i, int j)&#123; Comparable t = a[i]; a[i] = a[j]; a[j] = t;&#125; 1.2 选择排序找到数组中的最小元素，然后将它与数组的第一个元素交换位置。然后再从剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。不断进行这样的操作，直到将整个数组排序。 123456789101112public class Selection &#123; public static void sort(Comparable[] a) &#123; int N = a.length; for (int i = 0; i &lt; N; i++) &#123; int min = i; for (int j = i + 1; j &lt; N; j++) &#123; if (less(a[j], a[min])) min = j; &#125; exch(a, i, min); &#125; &#125;&#125; 选择排序需要 ~N2/2 次比较和 ~N 次交换，它的运行时间与输入无关，这个特点使得它对一个已经排序的数组也需要这么多的比较和交换操作。 1.3 插入排序将一个元素插入到已排序的数组中，使得插入之后的数组也是有序的。插入排序从左到右插入每个元素，每次插入之后左部的子数组是有序的。 12345678910public class Insertion &#123; public static void sort(Comparable[] a) &#123; int N = a.length; for (int i = 1; i &lt; N; i++) &#123; for (int j = i; j &gt; 0 &amp;&amp; less(a[j], a[j - 1]); j--) &#123; exch(a, j, j - 1); &#125; &#125; &#125;&#125; 插入排序的复杂度取决于数组的初始顺序，如果数组已经部分有序了，那么插入排序会很快。平均情况下插入排序需要 ~N2/4 比较以及 ~N2/4 次交换，最坏的情况下需要 ~N2/2 比较以及 ~N2/2 次交换，最坏的情况是数组是逆序的；而最好的情况下需要 N-1 次比较和 0 次交换，最好的情况就是数组已经有序了。 插入排序对于部分有序数组和小规模数组特别高效。 1.4 选择排序和插入排序的比较对于随机排序的无重复主键的数组，插入排序和选择排序的运行时间是平方级别的，两者之比是一个较小的常数。 1.5 希尔排序对于大规模的数组，插入排序很慢，因为它只能交换相邻的元素，如果要把元素从一端移到另一端，就需要很多次操作。 希尔排序的出现就是为了改进插入排序的这种局限性，它通过交换不相邻的元素，使得元素更快的移到正确的位置上。 希尔排序使用插入排序对间隔 h 的序列进行排序，如果 h 很大，那么元素就能很快的移到很远的地方。通过不断减小 h，最后令 h=1，就可以使得整个数组是有序的。 1234567891011121314151617public class Shell &#123; public static void sort(Comparable[] a) &#123; int N = a.length; int h = 1; while (h &lt; N / 3) &#123; h = 3 * h + 1;// 1, 4, 13, 40, ... &#125; while (h &gt;= 1) &#123; for (int i = h; i &lt; N; i++) &#123; for (int j = i; j &gt;= h &amp;&amp; less(a[j], a[j - h]); j -= h) &#123; exch(a, j, j - h); &#125; &#125; h = h / 3; &#125; &#125;&#125; 希尔排序的运行时间达不到平方级别，使用递增序列 1, 4, 13, 40, … 的希尔排序所需要的比较次数不会超过 N 的若干倍乘于递增序列的长度。后面介绍的高级排序算法只会比希尔排序快两倍左右。 2 归并排序归并排序的思想是将数组分成两部分，分别进行排序，然后归并起来。 2.1 归并方法123456789101112131415161718public class MergeSort &#123; private static Comparable[] aux; private static void merge(Comparable[] a, int lo, int mid, int hi) &#123; int i = lo, j = mid + 1; for (int k = lo; k &lt;= hi; k++) &#123; aux[k] = a[k]; // 将数据复制到辅助数组 &#125; for (int k = lo; k &lt;= hi; k++) &#123; if (i &gt; mid) a[k] = aux[j++]; else if (j &gt; hi) a[k] = aux[i++]; else if (aux[i].compareTo(a[j]) &lt; 0) a[k] = aux[i++]; // 先进行这一步，保证稳定性 else a[k] = aux[j++]; &#125; &#125;&#125; 2.2 自顶向下归并排序123456789101112public static void sort(Comparable[] a) &#123; aux = new Comparable[a.length]; sort(a, 0, a.length - 1);&#125;private static void sort(Comparable[] a, int lo, int hi) &#123; if (hi &lt;= lo) return; int mid = lo + (hi - lo) / 2; sort(a, lo, mid); sort(a, mid + 1, hi); merge(a, lo, mid, hi);&#125; 很容易看出该排序算法的时间复杂度为 O(NlgN)。 因为小数组的递归操作会过于频繁，因此使用插入排序来处理小数组将会获得更高的性能。 2.3 自底向上归并排序先归并那些微型数组，然后成对归并得到的子数组。 123456789public static void busort(Comparable[] a) &#123; int N = a.length; aux = new Comparable[N]; for (int sz = 1; sz &lt; N; sz += sz) &#123; for (int lo = 0; lo &lt; N - sz; lo += sz + sz) &#123; merge(a, lo, lo + sz - 1, Math.min(lo + sz + sz - 1, N - 1)); &#125; &#125;&#125; 3. 快速排序3.1 基本算法归并排序将数组分为两个子数组分别排序，并将有序的子数组归并使得整个数组排序；快速排序通过一个切分元素将数组分为两个子数组，左子数组小于等于切分元素，右子数组大于等于切分元素，将这两个子数组排序也就将整个数组排序了。 12345678910111213public class QuickSort &#123; public static void sort(Comparable[] a) &#123; shuffle(a); sort(a, 0, a.length - 1); &#125; private static void sort(Comparable[] a, int lo, int hi) &#123; if (hi &lt;= lo) return; int j = partition(a, lo, hi); sort(a, lo, j - 1); sort(a, j + 1, hi); &#125;&#125; 3.2 切分取 a[lo] 作为切分元素，然后从数组的左端向右扫描直到找到第一个大于等于它的元素，再从数组的右端向左扫描找到第一个小于等于它的元素，交换这两个元素，并不断继续这个过程，就可以保证左指针的左侧元素都不大于切分元素，右指针 j 的右侧元素都不小于切分元素。当两个指针相遇时，将切分元素 a[lo] 和左子数组最右侧的元素 a[j] 交换然后返回 j 即可。 123456789101112private static int partition(Comparable[] a, int lo, int hi) &#123; int i = lo, j = hi + 1; Comparable v = a[lo]; while (true) &#123; while (less(a[++i], v)) if (i == hi) break; while (less(v, a[--j])) if (j == lo) break; if (i &gt;= j) break; exch(a, i, j); &#125; exch(a, lo, j); return j;&#125; 3.3 性能分析快速排序是原地排序，不需要辅助数组，但是递归调用需要辅助栈。 快速排序最好的情况下是每次都正好能将数组对半分，这样递归调用次数才是最少的。这种情况下比较次数为 CN=2CN/2+N，也就是复杂度为 O(NlgN)。 最坏的情况下，第一次从最小的元素切分，第二次从第二小的元素切分，如此这般。因此最坏的情况下需要比较 N2/2。为了防止数组最开始就是有序的，在进行快速排序时需要随机打乱数组。 3.4 算法改进3.4.1 切换到插入排序因为快速排序在小数组中也会调用自己，对于小数组，插入排序比快速排序的性能更好，因此在小数组中可以切换到插入排序。 3.4.2 三取样最好的情况下是每次都能取数组的中位数作为切分元素，但是计算中位数的代价很高。人们发现取 3 个元素并将大小居中的元素作为切分元素的效果最好。 3.4.3 三向切分对于有大量重复元素的数组，可以将数组切分为三部分，分别对应小于、等于和大于切分元素。 三向切分快速排序对于只有若干不同主键的随机数组可以在线性时间内完成排序。 123456789101112131415public class Quick3Way &#123; public static void sort(Comparable[] a, int lo, int hi) &#123; if (hi &lt;= lo) return; int lt = lo, i = lo + 1, gt = hi; Comparable v = a[lo]; while (i &lt;= gt) &#123; int cmp = a[i].compareTo(v); if (cmp &lt; 0) exch(a, lt++, i++); else if (cmp &gt; 0) exch(a, i, gt--); else i++; &#125; sort(a, lo, lt - 1); sort(a, gt + 1, hi); &#125;&#125; 4. 优先队列优先队列主要用于处理最大元素。 4.1 堆定义：一颗二叉树的每个节点都大于等于它的两个子节点。 堆可以用数组来表示，因为堆是一种完全二叉树，而完全二叉树很容易就存储在数组中。位置 k 的节点的父节点位置为 k/2，而它的两个子节点的位置分别为 2k 和 2k+1。这里我们不使用数组索引为 0 的位置，是为了更清晰地理解节点的关系。 1234567891011121314151617181920212223242526public class MaxPQ&lt;Key extends Comparable&lt;Key&gt; &#123; private Key[] pq; private int N = 0; public MaxPQ(int maxN) &#123; pq = (Key[]) new Comparable[maxN + 1]; &#125; public boolean isEmpty() &#123; return N == 0; &#125; public int size() &#123; return N; &#125; private boolean less(int i, int j) &#123; return pq[i].compareTo(pq[j]) &lt; 0; &#125; private void exch(int i, int j) &#123; Key t = pq[i]; pq[i] = pq[j]; pq[j] = t; &#125;&#125; 4.2 上浮和下沉在堆中，当一个节点比父节点大，那么需要交换这个两个节点。交换后还可能比它新的父节点大，因此需要不断地进行比较和交换操作。把这种操作称为上浮。 123456private void swim(int k) &#123; while (k &gt; 1 &amp;&amp; less(k / 2, k)) &#123; exch(k / 2, k); k = k / 2; &#125;&#125; 类似地，当一个节点比子节点来得小，也需要不断的向下比较和交换操作，把这种操作称为下沉。一个节点有两个子节点，应当与两个子节点中最大那么节点进行交换。 123456789private void sink(int k) &#123; while (2 * k &lt;= N) &#123; int j = 2 * k; if (j &lt; N &amp;&amp; less(j, j + 1)) j++; if (!less(k, j)) break; exch(k, j); k = j; &#125;&#125; 4.3 插入元素将新元素放到数组末尾，然后上浮到合适的位置。 1234public void insert(Key v) &#123; pq[++N] = v; swim(N);&#125; 4.4 删除最大元素从数组顶端删除最大的元素，并将数组的最后一个元素放到顶端，并让这个元素下沉到合适的位置。 1234567public Key delMax() &#123; Key max = pq[1]; exch(1, N--); pq[N + 1] = null; sink(1); return max;&#125; 4.5 堆排序由于堆可以很容易得到最大的元素并删除它，不断地进行这种操作可以得到一个递减序列。如果把最大元素和当前堆中数组的最后一个元素交换位置，并且不删除它，那么就可以得到一个从尾到头的递减序列，从正向来看就是一个递增序列。因此很容易使用堆来进行排序，并且堆排序是原地排序，不占用额外空间。 堆排序要分两个阶段，第一个阶段是把无序数组建立一个堆；第二个阶段是交换最大元素和当前堆的数组最后一个元素，并且进行下沉操作维持堆的有序状态。 无序数组建立堆最直接的方法是从左到右遍历数组，然后进行上浮操作。一个更高效的方法是从右至左进行下沉操作，如果一个节点的两个节点都已经是堆有序，那么进行下沉操作可以使得这个节点为根节点的堆有序。叶子节点不需要进行下沉操作，因此可以忽略叶子节点的元素，因此只需要遍历一半的元素即可。 12345678910public static void sort(Comparable[] a)&#123; int N = a.length; for(int k = N/2; k &gt;= 1; k--)&#123; sink(a, k, N); &#125; while(N &gt; 1)&#123; exch(a, 1, N--); sink(a, 1, N); &#125;&#125; 4.6 分析一个堆的高度为 lgN，因此在堆中插入元素和删除最大元素的复杂度都为 lgN。 对于堆排序，由于要对 N 个节点进行下沉操作，因此复杂度为 NlgN。 堆排序时一种原地排序，没有利用额外的空间。 现代操作系统很少使用堆排序，因为它无法利用缓存，也就是数组元素很少和相邻的元素进行比较。 5. 应用5.1 排序算法的比较 快速排序时最快的通用排序算法，它的内循环的指令很少，而且它还能利用缓存，因为它总是顺序地访问数据。它的运行时间增长数量级为 ~cNlgN，这里的 c 比其他线性对数级别的排序算法都要小。使用三向切分之后，实际应用中可能出现的某些分布的输入能够达到线性级别，而其它排序算法仍然需要线性对数时间。 5.2 Java 的排序算法实现Java 系统库中的主要排序方法为 java.util.Arrays.sort()，对于原始数据类型使用三向切分的快速排序，对于引用类型使用归并排序。 5.3 基于切分的快速选择算法快速排序的 partition() 方法，会将数组的 a[lo] 至 a[hi] 重新排序并返回一个整数 j 使得 a[lo..j-1] 小于等于 a[j]，且 a[j+1..hi] 大于等于 a[j]。那么如果 j=k，a[j] 就是第 k 个数。 该算法是线性级别的，因为每次正好将数组二分，那么比较的总次数为 (N+N/2+N/4+..)，直到找到第 k 个元素，这个和显然小于 2N。 12345678910public static Comparable select(Comparable[] a, int k) &#123; int lo = 0, hi = a.length - 1; while (hi &gt; lo) &#123; int j = partion(a, lo, hi); if (j == k) return a[k]; else if (j &gt; k) hi = j - 1; else lo = j + 1; &#125; return a[k];&#125; 查找本章使用三种经典的数据类型来实现高效的符号表：二叉查找树、红黑树和散列表。 1. 符号表1.1 无序符号表 1.2 有序符号表 有序符号表的键需要实现 Comparable 接口。 查找的成本模型：键的比较次数，在不进行比较时使用数组的访问次数。 1.3 二分查找实现有序符号表使用一对平行数组，一个存储键一个存储值。 需要创建一个 Key 类型的 Comparable 对象数组和一个 Value 类型的 Object 对象数组。 rank() 方法至关重要，当键在表中时，它能够知道该键的位置；当键不在表中时，它也能知道在何处插入新键。 复杂度：二分查找最多需要 lgN+1 次比较，使用二分查找实现的符号表的查找操作所需要的时间最多是对数级别的。但是插入操作需要移动数组元素，是线性级别的。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public class BinarySearchST&lt;Key extends Comparable&lt;Key&gt;, Value&gt; &#123; private Key[] keys; private Value[] values; private int N; public BinarySearchST(int capacity) &#123; keys = (Key[]) new Comparable[capacity]; values = (Value[]) new Object[capacity]; &#125; public int size() &#123; return N; &#125; public Value get(Key key) &#123; int i = rank(key); if (i &lt; N &amp;&amp; keys[i].compareTo(key) == 0) &#123; return values[i]; &#125; return null; &#125; public int rank(Key key) &#123; int lo = 0, hi = N - 1; while (lo &lt;= hi) &#123; int mid = lo + (hi - lo) / 2; int cmp = key.compareTo(keys[mid]); if (cmp == 0) return mid; else if (cmp &lt; 0) hi = mid - 1; else lo = mid + 1; &#125; return lo; &#125; public void put(Key key, Value value) &#123; int i = rank(key); if (i &lt; N &amp;&amp; keys[i].compareTo(key) == 0) &#123; values[i] = value; return; &#125; for (int j = N; j &gt; i; j--) &#123; keys[j] = keys[j - 1]; values[j] = values[j - 1]; &#125; keys[i] = key; values[i] = value; N++; &#125; public Key ceiling(Key key)&#123; int i = rank(key); return keys[i]; &#125;&#125; 2. 二叉查找树二叉树 定义为一个空链接，或者是一个有左右两个链接的节点，每个链接都指向一颗子二叉树。 二叉查找树 （BST）是一颗二叉树，并且每个节点的键都大于其左子树中的任意节点的键而小于右子树的任意节点的键。 二叉查找树的查找操作每次迭代都会让区间减少一半，和二分查找类似。 1234567891011121314151617181920212223242526public class BST&lt;Key extends Comparable&lt;Key&gt;, Value&gt; &#123; private Node root; private class Node &#123; private Key key; private Value val; private Node left, right; // 以该节点为根的子树中节点总数 private int N; public Node(Key key, Value val, int N) &#123; this.key = key; this.val = val; this.N = N; &#125; &#125; public int size() &#123; return size(root); &#125; private int size(Node x) &#123; if (x == null) return 0; return x.N; &#125;&#125; 2.1 get()如果树是空的，则查找未命中；如果被查找的键和根节点的键相等，查找命中，否则递归地在子树中查找：如果被查找的键较小就在左子树中查找，较大就在右子树中查找。 12345678910public Value get(Key key) &#123; return get(root, key);&#125;private Value get(Node x, Key key) &#123; if (x == null) return null; int cmp = key.compareTo(x.key); if (cmp == 0) return x.val; else if (cmp &lt; 0) return get(x.left, key); else return get(x.right, key);&#125; 2.2 put()当插入的键不存在于树中，需要创建一个新节点，并且更新上层节点的链接使得该节点正确链接到树中。 123456789101112public void put(Key key, Value val) &#123; root = put(root, key, val);&#125;private Node put(Node x, Key key, Value val) &#123; if (x == null) return new Node(key, val, 1); int cmp = key.compareTo(x.key); if (cmp == 0) x.val = val; else if (cmp &lt; 0) x.left = put(x.left, key, val); else x.right = put(x.right, key, val); x.N = size(x.left) + size(x.right) + 1; return x;&#125; 2.3 分析二叉查找树的算法运行时间取决于树的形状，而树的形状又取决于键被插入的先后顺序。最好的情况下树是完全平衡的，每条空链接和根节点的距离都为 lgN。在最坏的情况下，树的高度为 N。 复杂度：查找和插入操作都为对数级别。 2.4 floor()如果 key 小于根节点的 key，那么小于等于 key 的最大键节点一定在左子树中；如果 key 大于根节点的 key，只有当根节点右子树中存在小于等于 key 的节点，小于等于 key 的最大键节点才在右子树中，否则根节点就是小于等于 key 的最大键节点。 1234567891011121314151617public Key floor(Key key) &#123; Node x = floor(root, key); if (x == null) return null; return x.key;&#125;private Node floor(Node x, Key key) &#123; if (x == null) return null; int cmp = key.compareTo(x.key); if (cmp == 0) return x; if (cmp &lt; 0) return floor(x.left, key); Node t = floor(x.right, key); if (t != null) &#123; return t; &#125; else &#123; return x; &#125;&#125; 2.5 rank()12345678910public int rank(Key key) &#123; return rank(key, root);&#125;private int rank(Key key, Node x) &#123; if (x == null) return 0; int cmp = key.compareTo(x.key); if (cmp == 0) return size(x.left); else if (cmp &lt; 0) return rank(key, x.left); else return 1 + size(x.left) + rank(key, x.right);&#125; 2.6 min()1234private Node min(Node x) &#123; if (x.left == null) return x; return min(x.left);&#125; 2.7 deleteMin()令指向最小节点的链接指向最小节点的右子树。 123456789public void deleteMin() &#123; root = deleteMin(root);&#125;public Node deleteMin(Node x) &#123; if (x.left == null) return x.right; x.left = deleteMin(x.left); x.N = size(x.left) + size(x.right) + 1; return x;&#125; 2.8 delete()如果待删除的节点只有一个子树，那么只需要让指向待删除节点的链接指向唯一的子树即可；否则，让右子树的最小节点替换该节点。 12345678910111213141516171819public void delete(Key key) &#123; root = delete(root, key);&#125;private Node delete(Node x, Key key) &#123; if (x == null) return null; int cmp = key.compareTo(x.key); if (cmp &lt; 0) x.left = delete(x.left, key); else if (cmp &gt; 0) x.right = delete(x.right, key); else &#123; if (x.right == null) return x.left; if (x.left == null) return x.right; Node t = x; x = min(t.right); x.right = deleteMin(t.right); x.left = t.left; &#125; x.N = size(x.left) + size(x.right) + 1; return x;&#125; 2.9 keys()利用二叉查找树中序遍历的结果为有序序列的特点。 12345678910111213public Iterable&lt;Key&gt; keys(Key lo, Key hi) &#123; Queue&lt;Key&gt; queue = new LinkedList&lt;&gt;(); keys(root, queue, lo, hi); return queue;&#125;private void keys(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi) &#123; if (x == null) return; int cmpLo = lo.compareTo(x.key); int cmpHi = hi.compareTo(x.key); if (cmpLo &lt; 0) keys(x.left, queue, lo, hi); if (cmpLo &lt;= 0 &amp;&amp; cmpHi &gt;= 0) queue.add(x.key); if (cmpHi &gt; 0) keys(x.right, queue, lo, hi);&#125; 2.10 性能分析复杂度：二叉查找树所有操作在最坏的情况下所需要的时间都和树的高度成正比。 3. 平衡查找树3.1 2-3 查找树 一颗完美平衡的 2-3 查找树的所有空链接到根节点的距离应该是相同的。 3.1.1 插入操作当插入之后产生一个临时 4- 节点时，需要将 4- 节点分裂成 3 个 2- 节点，并将中间的 2- 节点移到上层节点中。如果上移操作继续产生临时 4- 节点则一直进行分裂上移，直到不存在临时 4- 节点。 3.1.2 性质2-3 查找树插入操作的变换都是局部的，除了相关的节点和链接之外不必修改或者检查树的其它部分，而这些局部变换不会影响树的全局有序性和平衡性。 2-3 查找树的查找和插入操作复杂度和插入顺序 无关 ，在最坏的情况下查找和插入操作访问的节点必然不超过 logN 个，含有 10 亿个节点的 2-3 查找树最多只需要访问 30 个节点就能进行任意的查找和插入操作。 3.2 红黑二叉查找树2-3 查找树需要用到 2- 节点和 3- 节点，红黑树使用红链接来实现 3- 节点。指向一个节点的链接颜色如果为红色，那么这个节点和上层节点表示的是一个 3- 节点，而黑色则是普通链接。 红黑树具有以下性质： 红链接都为左链接； 完美黑色平衡，即任意空链接到根节点的路径上的黑链接数量相同。 画红黑树时可以将红链接画平。 12345678910111213141516171819202122232425public class RedBlackBST&lt;Key extends Comparable&lt;Key&gt;, Value&gt; &#123; private Node root; private static final boolean RED = true; private static final boolean BLACK = false; private class Node &#123; Key key; Value val; Node left, right; int N; boolean color; Node(Key key, Value val, int n, boolean color) &#123; this.key = key; this.val = val; N = n; this.color = color; &#125; &#125; private boolean isRed(Node x) &#123; if (x == null) return false; return x.color == RED; &#125;&#125; 3.2.1 左旋转因为合法的红链接都为左链接，如果出现右链接为红链接，那么就需要进行左旋转操作。 12345678910public Node rotateLeft(Node h) &#123; Node x = h.right; h.right = x.left; x.left = h; x.color = h.color; h.color = RED; x.N = h.N; h.N = 1 + size(h.left) + size(h.right); return x;&#125; 3.2.2 右旋转进行右旋转是为了转换两个连续的左红链接，这会在之后的插入过程中探讨。 123456789public Node rotateRight(Node h) &#123; Node x = h.left; h.left = x.right; x.color = h.color; h.color = RED; x.N = h.N; h.N = 1 + size(h.left) + size(h.right); return x;&#125; 3.2.3 颜色转换一个 4- 节点在红黑树中表现为一个节点的左右子节点都是红色的。分裂 4- 节点除了需要将子节点的颜色由红变黑之外，同时需要将父节点的颜色由黑变红，从 2-3 树的角度看就是将中间节点移到上层节点。 12345void flipColors(Node h)&#123; h.color = RED; h.left.color = BLACK; h.right.color = BLACK;&#125; 3.2.4 插入先将一个节点按二叉查找树的方法插入到正确位置，然后再进行如下颜色操作： 如果右子节点是红色的而左子节点是黑色的，进行左旋转； 如果左子节点是红色的且它的左子节点也是红色的，进行右旋转； 如果左右子节点均为红色的，进行颜色转换。 12345678910111213141516171819public void put(Key key, Value val) &#123; root = put(root, key, val); root.color = BLACK;&#125;private Node put(Node x, Key key, Value val) &#123; if (x == null) return new Node(key, val, 1, RED); int cmp = key.compareTo(x.key); if (cmp == 0) x.val = val; else if (cmp &lt; 0) x.left = put(x.left, key, val); else x.right = put(x.right, key, val); if (isRed(x.right) &amp;&amp; !isRed(x.left)) x = rotateLeft(x); if (isRed(x.left) &amp;&amp; isRed(x.left.left)) x = rotateRight(x); if (isRed(x.left) &amp;&amp; isRed(x.right)) flipColors(x); x.N = size(x.left) + size(x.right) + 1; return x;&#125; 可以看到该插入操作和 BST 的插入操作类似，只是在最后加入了旋转和颜色变换操作即可。 根节点一定为黑色，因为根节点没有上层节点，也就没有上层节点的左链接指向根节点。flipColors() 有可能会使得根节点的颜色变为红色，每当根节点由红色变成黑色时树的黑链接高度加 1. 3.2.5 删除最小键如果最小键在一个 2- 节点中，那么删除该键会留下一个空链接，就破坏了平衡性，因此要确保最小键不在 2- 节点中。将 2- 节点转换成 3- 节点或者 4- 节点有两种方法，一种是向上层节点拿一个 key，一种是向兄弟节点拿一个 key。如果上层节点是 2- 节点，那么就没办法从上层节点拿 key 了，因此要保证删除路径上的所有节点都不是 2- 节点。在向下删除的过程中，保证以下情况之一发生： 如果当前节点的左子节点不是 2- 节点，完成； 如果当前节点的左子节点是 2- 节点而它的兄弟节点不是 2- 节点，向兄弟节点拿一个 key 过来； 如果当前节点的左子节点和它的兄弟节点都是 2- 节点，将左子节点、父节点中的最小键和最近的兄弟节点合并为一个 4- 节点。 最后得到一个含有最小键的 3- 节点或者 4- 节点，直接从中删除。然后再从头分解所有临时的 4- 节点。 3.2.6 分析一颗大小为 N 的红黑树的高度不会超过 2lgN。最坏的情况下是它所对应的 2-3 树中构成最左边的路径节点全部都是 3- 节点而其余都是 2- 节点。 红黑树大多数的操作所需要的时间都是对数级别的。 4. 散列表散列表类似于数组，可以把散列表的散列值看成数组的索引值。访问散列表和访问数组元素一样快速，它可以在常数时间内实现查找和插入的符号表。 由于无法通过散列值知道键的大小关系，因此散列表无法实现有序性操作。 4.1 散列函数对于一个大小为 M 的散列表，散列函数能够把任意键转换为 [0, M-1] 内的正整数，该正整数即为 hash 值。 散列表有冲突的存在，也就是两个不同的键可能有相同的 hash 值。 散列函数应该满足以下三个条件： 一致性：相等的键应当有相等的 hash 值。 高效性：计算应当简便，有必要的话可以把 hash 值缓存起来，在调用 hash 函数时直接返回。 均匀性：所有键的 hash 值应当均匀地分布到 [0, M-1] 之间，这个条件至关重要，直接影响到散列表的性能。 除留余数法可以将整数散列到 [0, M-1] 之间，例如一个正整数 k，计算 k%M 既可得到一个 [0, M-1] 之间的 hash 值。注意 M 必须是一个素数，否则无法利用键包含的所有信息。例如 M 为 10k，那么只能利用键的后 k 位。 对于其它数，可以将其转换成整数的形式，然后利用除留余数法。例如对于浮点数，可以将其表示成二进制形式，然后使用二进制形式的整数值进行除留余数法。 对于有多部分组合的键，每部分都需要计算 hash 值，并且最后合并时需要让每部分 hash 值都具有同等重要的地位。可以将该键看成 R 进制的整数，键中每部分都具有不同的权值。 例如，字符串的散列函数实现如下 123int hash = 0;for(int i = 0; i &lt; s.length(); i++) hash = (R * hash + s.charAt(i)) % M; 再比如，拥有多个成员的自定义类的哈希函数如下 1int hash = (((day * R + month) % M) * R + year) % M; R 的值不是很重要，通常取 31。 Java 中的 hashCode() 实现了 hash 函数，但是默认使用对象的内存地址值。在使用 hashCode() 函数时，应当结合除留余数法来使用。因为内存地址是 32 位整数，我们只需要 31 位的非负整数，因此应当屏蔽符号位之后再使用除留余数法。 1int hash = (x.hashCode() &amp; 0x7fffffff) % M; 使用 Java 自带的 HashMap 等自带的哈希表实现时，只需要去实现 Key 类型的 hashCode() 函数即可。Java 规定 hashCode() 能够将键均匀分布于所有的 32 位整数，Java 中的 String、Integer 等对象的 hashCode() 都能实现这一点。以下展示了自定义类型如何实现 hashCode()。 12345678910111213public class Transaction&#123; private final String who; private final Date when; private final double amount; public int hashCode()&#123; int hash = 17; hash = 31 * hash + who.hashCode(); hash = 31 * hash + when.hashCode(); hash = 31 * hash + ((Double) amount).hashCode(); return hash; &#125;&#125; 4.2 基于拉链法的散列表拉链法使用链表来存储 hash 值相同的键，从而解决冲突。此时查找需要分两步，首先查找 Key 所在的链表，然后在链表中顺序查找。 对于 N 个键，M 条链表 (N&gt;M)，如果哈希函数能够满足均匀性的条件，每条链表的大小趋向于 N/M，因此未命中的查找和插入操作所需要的比较次数为 ~N/M。 4.3 基于线性探测法的散列表线性探测法使用空位来解决冲突，当冲突发生时，向前探测一个空位来存储冲突的键。使用线程探测法，数组的大小 M 应当大于键的个数 N（M&gt;N)。 123456789101112131415161718192021222324public class LinearProbingHashST&lt;Key, Value&gt; &#123; private int N; private int M = 16; private Key[] keys; private Value[] vals; public LinearProbingHashST() &#123; init(); &#125; public LinearProbingHashST(int M) &#123; this.M = M; init(); &#125; private void init() &#123; keys = (Key[]) new Object[M]; vals = (Value[]) new Object[M]; &#125; private int hash(Key key) &#123; return (key.hashCode() &amp; 0x7fffffff) % M; &#125;&#125; 4.3.1 查找12345678public Value get(Key key) &#123; for (int i = hash(key); keys[i] != null; i = (i + 1) % M) &#123; if (keys[i].equals(key)) &#123; return vals[i]; &#125; &#125; return null;&#125; 4.3.2 插入12345678910111213public void put(Key key, Value val) &#123; int i; for (i = hash(key); keys[i] != null; i = (i + 1) % M) &#123; if (keys[i].equals(key)) &#123; vals[i] = val; return; &#125; &#125; keys[i] = key; vals[i] = val; N++; resize();&#125; 4.3.3 删除删除操作应当将右侧所有相邻的键值重新插入散列表中。 123456789101112131415161718192021public void delete(Key key) &#123; if (!contains(key)) return; int i = hash(key); while (!key.equals(keys[i])) &#123; i = (i + 1) % M; &#125; keys[i] = null; vals[i] = null; i = (i + 1) % M; while (keys[i] != null) &#123; Key keyToRedo = keys[i]; Value valToRedo = vals[i]; keys[i] = null; vals[i] = null; N--; put(keyToRedo, valToRedo); i = (i + 1) % M; &#125; N--; resize();&#125; 4.3.4 调整数组大小线性探测法的成本取决于连续条目的长度，连续条目也叫聚簇。当聚簇很长时，在查找和插入时也需要进行很多次探测。 α = N/M，把 α 称为利用率。理论证明，当 α 小于 1/2 时探测的预计次数只在 1.5 到 2.5 之间。 为了保证散列表的性能，应当调整数组的大小，使得 α 在 [1/4, 1/2] 之间。 12345678910111213141516private void resize() &#123; if (N &gt;= M / 2) resize(2 * M); else if (N &lt;= M / 8) resize(M / 2);&#125;private void resize(int cap) &#123; LinearProbingHashST&lt;Key, Value&gt; t = new LinearProbingHashST&lt;&gt;(cap); for (int i = 0; i &lt; M; i++) &#123; if (keys[i] != null) &#123; t.put(keys[i], vals[i]); &#125; &#125; keys = t.keys; vals = t.vals; M = t.M;&#125; 虽然每次重新调整数组都需要重新把每个键值对插入到散列表，但是从摊还分析的角度来看，所需要的代价却是很小的。从下图可以看出，每次数组长度加倍后，累计平均值都会增加 1，因为表中每个键都需要重新计算散列值，但是随后平均值会下降。 5. 应用5.1 各种符号表实现的比较 应当优先考虑散列表，当需要有序性操作时使用红黑树。 5.2 Java 的符号表实现Java 的 java.util.TreeMap 和 java.util.HashMap 分别是基于红黑树和拉链法的散列表的符号表实现。 5.3 集合类型除了符号表，集合类型也经常使用，它只有键没有值，可以用集合类型来存储一系列的键然后判断一个键是否在集合中。 5.4 稀疏向量乘法当向量为稀疏向量时，可以使用符号表来存储向量中的非 0 索引和值，使得乘法运算只需要对那些非 0 元素进行即可。 1234567891011121314151617181920212223242526import java.util.HashMap;public class SparseVector &#123; private HashMap&lt;Integer, Double&gt; hashMap; public SparseVector(double[] vector) &#123; hashMap = new HashMap&lt;&gt;(); for (int i = 0; i &lt; vector.length; i++) &#123; if (vector[i] != 0) &#123; hashMap.put(i, vector[i]); &#125; &#125; &#125; public double get(int i) &#123; return hashMap.getOrDefault(i, 0.0); &#125; public double dot(SparseVector other) &#123; double sum = 0; for (int i : hashMap.keySet()) &#123; sum += this.get(i) * other.get(i); &#125; return sum; &#125;&#125; 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"interview","date":"2018-03-11T03:18:00.000Z","path":"20180311/Interview/README.html","text":"网络 :cloud: 计算机网络 整理自《计算机网络 第七版》，重点内容会在标题后面加 *。 HTTP 整理自《图解 HTTP》 操作系统 :computer: 计算机操作系统 整理自《现代操作系统》和《计算机操作系统》 Linux 整理自《鸟哥的 Linux 私房菜》 数据结构与算法 :pencil2: 算法 整理自《算法 第四版》，主要整理了面试常问的排序和查找算法。 剑指 Offer 题解 《剑指 Offer 第二版》的最优解，在牛客网在线编程中出现的题目都已 AC。 Leetcode 题解 对题目做了一个分类，并对每种题型的解题思路做了总结。已经整理了 300+ 的题目，基本涵盖所有经典题目。 面向对象 :couple: 设计模式 整理自《Head First 设计模式》 面向对象思想 一些面向对象思想和原则。 数据库 :floppy_disk: SQL 语法 整理自《SQL 必知必会》 MySQL 整理自《高性能 MySQL》，整理了一些重点内容。 Java :coffee: JVM 整理自《深入理解 Java 虚拟机》，主要整理了内存模型、垃圾回收以及类加载机制。 Java 并发 只整理了一些比较基础的概念，之后会继续添加更多内容。 Java 容器 容器的一些总结，包含容器源码的分析。 Java IO File、InputStream OutputStream、Reader Writer、Serializable、Socket、NIO Java 基础 整理了一些常见考点。 编码实践 :hammer: 重构 重构是对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。 代码可读性 编程有很大一部分时间是在阅读代码，可读性良好的代码能够大大提高编程效率。 代码风格规范 Google 开源项目的代码风格规范。 资料下载 :arrow_down: 百度网盘 一些 PDF 书籍 后记 :memo:网上有很多相关的资料，但是这些资料都比较零散。本仓库的笔记是从经典的书籍和材料中整理而来，在整理出重点的同时会尽可能保证知识的系统性，因此比较适合作为应对面试的学习资料。 笔记内容按照 中文文案排版指北 进行排版，以保证内容的可读性。这里提供了本人实现的 Markdown 排版工具的下载：Markdown-Typesetting。 由于 Github 使用的 GFM 不支持 MathJax 公式，也不支持 TOC 标记，为了把本地的 Markdown 文档转换为 GFM 支持的格式，需要替换 MathJax 公式为 CodeCogs 的云服务和重新生成 TOC 目录。并且为了让图片显示效果更好，笔记内容基本使用了 &lt;center&gt; 标记来让图片居中显示，但是 GFM 却不支持 &lt;center&gt; 标记，因此也需要进行一定的转换。这里提供了本人实现的 GFM 文档转换工具的下载：GFM-Converter。 因为大部分内容是一个字一个字打上去的，难免会有一些笔误，如果发现，可以直接在相应的文档上编辑修改。 想要发表反馈意见的话，可以到 原贴 的评论区进行留言。 本来来自 Interview-Notebook 本作品采用 知识共享署名-非商业性使用-相同方式共享 3.0 中国大陆许可协议 进行许可。","tags":[{"name":"interview","slug":"interview","permalink":"https://jiangshaobo.cn/tags/interview/"}]},{"title":"springboot应用war包部署tomcat","date":"2018-03-01T15:46:57.000Z","path":"20180301/springboot应用war包部署tomcat.html","text":"又要使用springboot，又得用tomcat部署。还不如只用传统的。springboot默认打包成jar包。1mvn package 1234567891011[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ xpay ---[INFO] Building jar: /media/abel/Dev/java_src/springbootdemo/target/springbootdemo-1.0-SNAPSHOT.jar[INFO] [INFO] --- spring-boot-maven-plugin:1.5.9.RELEASE:repackage (default) @ xpay ---[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 4.679 s[INFO] Finished at: 2018-03-01T23:27:10+08:00[INFO] Final Memory: 28M/343M[INFO] ------------------------------------------------------------------------ 开始尝试直接打包成war包，发现路径什么的不对，在tomcat无法运行。springboot使用外部tomcat需要如下： 1.更改pom.xml打包成war。1234&lt;groupId&gt;cn.jiangshaobo&lt;/groupId&gt;&lt;artifactId&gt;springbootdemo&lt;/artifactId&gt;&lt;packaging&gt;war&lt;/packaging&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; 2、添加maven的war打包插件如下：并且给war包起一个名字，tomcat部署后的访问路径会需要，如：http:localhost:8080/myweb/** 12345678&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;warSourceExcludes&gt;src/main/resources/**&lt;/warSourceExcludes&gt; &lt;warName&gt;myweb&lt;/warName&gt; &lt;/configuration&gt; &lt;/plugin&gt; 3、排除org.springframework.boot依赖中的tomcat内置容器，这是很重要的一步12345678910&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; 4、添加对servlet API的依赖1234&lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;/dependency&gt;","tags":[{"name":"springboot","slug":"springboot","permalink":"https://jiangshaobo.cn/tags/springboot/"}]},{"title":"express基础教程","date":"2018-02-23T08:39:24.000Z","path":"20180223/express基础教程.html","text":"express官网http://expressjs.com/1npm install express --save 全局安装1npm install express -g github地址1https://github.com/expressjs/express 官方demo12345678var express = require('express')var app = express()app.get('/', function (req, res) &#123; res.send('Hello World')&#125;)app.listen(3000) 用npm初始化一个项目。1npm init 安装express1npm install express --save 新建server.js1234567891011var express = require('express');var app = express();app.get('/', function(req, res)&#123; res.send('1111');&#125;);app.listen(3000);console.log('listen 3000'); 安装nodemon1npm i nodemon -g 运行1nodemon server 123456nodemon server[nodemon] 1.14.12[nodemon] to restart at any time, enter `rs`[nodemon] watching: *.*[nodemon] starting `node server.js`listen 3000 访问localhost:3000可以看到页面显示1111 express官方API1http://expressjs.com/en/4x/api.html 查看右侧菜单栏，点击Request查看123app.get('/user/:id', function(req, res) &#123; res.send('user ' + req.params.id);&#125;); 或者123app.get('/user/:id', function(request, response) &#123; response.send('user ' + request.params.id);&#125;); 访问http://localhost:3000/user/1页面显示user 1","tags":[{"name":"express","slug":"express","permalink":"https://jiangshaobo.cn/tags/express/"}]},{"title":"Kafka运行环境的搭建","date":"2018-02-08T08:52:05.000Z","path":"20180208/Kafka运行环境的搭建.html","text":"准备学习下Kafka神器，Kafka是用Scala语言开发的，首先需要安装JDK环境。Java环境还是比较容易配置的，目前系统是Win10. 先到官网下载JDK，这里下载的是JDK 1.8，下载后双击运行安装，选择路径。 桌面此电脑右键选择属性，打开高级系统设置，点击环境变量，在系统变量中新增变量名JAVA_HOME，变量值为 JDK 1.8 安装路径，也就是刚刚安装的路径。由于默认安装在 Program Files目录下，目录名之间有空格，有可能在运行某些应用时因JDK安装路径有空格而报错，这个有点坑。再新增变量名 CLASSPATH，变量值为1.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar 最后的结果如下：123系统变量 JAVA_HOME C:\\Program Files\\Java\\jdk1.8.0_131用户变量 CLASSPATH .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar新增PATH变量 PATH %JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin; 设置好了后，重新打开一个终端，运行1java -version 显示类似下面结果，说明JDK环境搭建成功。123java version \"1.8.0_131\"Java(TM) SE Runtime Environment (build 1.8.0_131-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode) 类似的有maven环境，tomcat环境，Java开发必备，当然也可以Docker。 还有Git环境。 第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key： 1ssh-keygen -t rsa -C \"youremail@example.com\" 你需要把邮件地址youremail@example.com换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。 如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。","tags":[]},{"title":"Hello World Hexo 命令笔记","date":"2018-02-04T14:22:00.585Z","path":"20180204/hello-world.html","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Hexo简写12345hexo n \"我的博客\" == hexo new \"我的博客\" #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署 服务器12345678hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo g #生成静态网页hexo d #开始部署 监视文件变动12hexo generate #使用 Hexo 生成静态文件快速而且简单hexo generate --watch #监视文件变动 完成后部署两个命令的作用是相同的1234hexo generate --deployhexo deploy --generatehexo deploy -ghexo server -g 草稿1hexo publish [layout] &lt;title&gt; 模版123456789hexo new \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #将.deploy目录部署到GitHubhexo new [layout] &lt;title&gt;hexo new photo \"My Gallery\"hexo new \"Hello World\" --lang tw 变量 描述12345678910111213layout 布局title 标题date 文件建立日期title: 使用Hexo搭建个人博客layout: postdate: 2018-01-14 23:18:00comments: truecategories: Blogtags: [Hexo]keywords: Hexo, Blogdescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。模版（Scaffold）hexo new photo \"My Gallery\" 变量 描述layout 布局title 标题date 文件建立日期设置文章摘要以上是文章摘要 以下是余下全文写作12hexo new page &lt;title&gt;hexo new post &lt;title&gt; 变量 描述12345678910:title 标题:year 建立的年份（4 位数）:month 建立的月份（2 位数）:i_month 建立的月份（去掉开头的零）:day 建立的日期（2 位数）:i_day 建立的日期（去掉开头的零）推送到服务器上hexo n #写文章hexo g #生成hexo d #部署 #可与hexo g合并为 hexo d -g 报错1.找不到git部署ERROR Deployer not found: git解决方法1npm install hexo-deployer-git --save 3.部署类型设置githexo 3.0 部署类型不再是github，_config.yml 中修改123456# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repository: git@***.github.com:***/***.github.io.git branch: master xcodebuildxcode-select: error: tool ‘xcodebuild’ requires Xcode, but active developer directory ‘/Library/Developer/CommandLineTools’ is a command line tools instance 1npm install bcrypt RSS不显示安装RSS插件 1npm install hexo-generator-feed --save 开启RSS功能 编辑hexo/_config.yml，添加如下代码： rss: /atom.xml #rss地址 默认即可 添加站点地图站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站 安装插件打开hexo目录下的dos命令行，分别安装百度和google插件12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 在博客目录的_config.yml中添加如下代码自动生成sitemap1234sitemap:path: sitemap.xmlbaidusitemap:path: baidusitemap.xml 编译你的博客","tags":[{"name":"hexo","slug":"hexo","permalink":"https://jiangshaobo.cn/tags/hexo/"},{"name":"hexo g","slug":"hexo-g","permalink":"https://jiangshaobo.cn/tags/hexo-g/"},{"name":"hexo d","slug":"hexo-d","permalink":"https://jiangshaobo.cn/tags/hexo-d/"},{"name":"hexo s","slug":"hexo-s","permalink":"https://jiangshaobo.cn/tags/hexo-s/"},{"name":"hexo p","slug":"hexo-p","permalink":"https://jiangshaobo.cn/tags/hexo-p/"},{"name":"hexo n","slug":"hexo-n","permalink":"https://jiangshaobo.cn/tags/hexo-n/"}]},{"title":"如何安装 Ruby","date":"2018-02-04T13:59:29.000Z","path":"20180204/如何安装-Ruby.html","text":"安装 Ruby可以使用多种工具安装 Ruby。本页介绍如何使用主流的包管理系统和第三方工具管理和安装 Ruby，以及如何通过源码编译安装。 选择安装方式安装 Ruby 的方式有多种： 如果使用的是类 UNIX 操作系统，使用系统的包管理器是最简单的安装方式。但是，包管理器中的 Ruby 版本通常都不是最新的。安装工具能够安装指定的一个或多个 Ruby 版本。有针对 Windows 的安装包。管理工具能帮助你在系统中安装的多个 Ruby 版本之间切换。最后，也可以通过源码编译安装 Ruby。下面概述针对不同需求和不同平台的安装方式。 包管理系统Debian, UbuntuCentOS, Fedora, RHELGentooArch LinuxOS XSolaris, OpenIndiana其他发行版安装工具ruby-buildruby-installRubyInstaller (Windows)RailsInstaller 和 Ruby Stack管理工具chrubyrbenvRVMuru通过源码编译安装包管理系统如果不能自己编译 Ruby，也不想使用第三方工具，可以使用系统中的包管理器安装 Ruby。 许多 Ruby 社区的成员强烈建议，应该使用第三方工具来安装 Ruby，不要用系统的包管理器。详细的优缺点超出了本页的讨论范畴，基本原因是大多数系统包管理器里的 Ruby 版本比较老。如果想使用最新的 Ruby 版本，要确保包的名称正确，或者使用后面列出的工具。 apt（Debian 或 Ubuntu）Debian GNU/Linux 和 Ubuntu 使用 apt 包管理器。用法如下：1$ sudo apt-get install ruby-full 撰写本文时，在 Debian 和 Ubuntu 下，ruby-full 包提供的是老旧的 Ruby 2.3.1。 yum（CentOS、Fedora 或 RHEL）CentOS、Fedora 和 RHEL 使用 yum 包管理器。用法如下： 1$ sudo yum install ruby 安装的 Ruby 版本通常是发行版发行日能打包的最新版。 portage（Gentoo）Gentoo 使用 portage 包管理器。1$ sudo emerge dev-lang/ruby 一般来说，这将安装 1.9 和 2.0 版本，不过还有更多版本可供安装。如果想安装指定的版本，要在 make.conf 文件中设置 RUBY_TARGETS。详见 Gentoo Ruby Project 网站。 pacman（Arch Linux）Arch Linux 使用 pacman 包管理器。要安装 Ruby，只需要执行下述命令：1$ sudo pacman -S ruby 这将安装最新的 Ruby 稳定版。 Homebrew（OS X）OS X El Capitan、Yosemite 和 Mavericks 内置了 Ruby 2.0。OS X Mountain Lion、Lion 和 Snow Leopard 内置了 Ruby 1.8.7。 许多 OS X 用户使用 Homebrew 作为包管理器。用 Homebrew 能够非常简单地获取到最新版的 Ruby：1$ brew install ruby 这将安装最新版的 Ruby。 Solaris 和 OpenIndianaSunfreeware 上的 Solaris 8 到 10 内置了 Ruby 1.8.7，Blastwave 同样如此。Ruby 1.9.2p0 在 Sunfreeware 上也有，但是这一版已经过时。 若想在 OpenIndiana 上安装 Ruby，要使用 Image Packaging System (IPS) 客户端。这将直接从 OpenSolaris 代码库安装 Ruby 1.9 和 RubyGems：1$ pkg install runtime/ruby-18 然而，第三方工具或许是获取最新版 Ruby 更好的方法。 其它发行版在其它操作系统中，可以使用包管理器在包仓库中搜索 Ruby，或许使用第三方工具是更好的选择。 安装工具如果系统或者包管理器提供的 Ruby 版本已经过时，可以使用第三方安装工具来安装更新的版本。其中许多工具允许在同一个系统中安装多个 Ruby 版本，相关的工具能帮你在不同的版本之间切换。如果打算用 RVM 作为版本管理工具，不需要其它的安装工具，它自己就具有这些功能。 ruby-buildruby-build 是 rbenv 的一个插件，能在任意目录中编译和安装不同版本的 Ruby。ruby-build 也可以不依赖 rbenv 而单独使用。支持的平台有 OS X、Linux 和其它类 UNIX 操作系统。 ruby-installruby-install 能在任意目录中编译和安装不同版本的 Ruby。还有个兄弟工具，chruby，可以用来切换不同的 Ruby 版本。支持的平台有 OS X、Linux 和其它类 UNIX 操作系统。 RubyInstaller如果使用 Windows，有个不错的项目能帮你安装 Ruby：RubyInstaller。它能帮你在 Windows 中安装所需的所有 Ruby 开发环境。 下载、运行，即可! RailsInstaller 和 Ruby Stack如果是为了使用 Ruby on Rails 而安装 Ruby，可以使用下列安装工具： RailsInstaller，使用的是 RubyInstaller，但包括了其它能够帮助 Rails 开发的工具。支持 OS X 和 Windows。Bitnami Ruby Stack，提供了完整的 Rails 开发环境。支持 OS X、Linux、Windows、虚拟机和云镜像。管理工具许多 Ruby 程序员使用 Ruby 管理工具管理不同版本的 Ruby。这些管理工具有很多额外的优点，但没有官方支持。不过，这些工具背后的社群都乐于助人。 chrubychruby 用于在不同的 Ruby 版本之间切换。chruby 能够管理用 ruby-install 或者通过源码编译安装的 Ruby。 rbenvrbenv 用于管理系统中安装的多个 Ruby 版本。它不能直接安装 Ruby，但有个流行的插件叫 ruby-build 能够安装 Ruby。这两个工具都支持 OS X、Linux 和其它类 UNIX 操作系统。 RVM（“Ruby Version Manager”）RVM 能在系统中安装和管理多个 Ruby 版本。同时还能管理不同的 gem 集。支持 OS X、Linux 和其它类 UNIX 操作系统。 uruUru 是一个轻量级的命令行工具，支持多平台，能够帮你在 OS X、Linux 和 Windows 上使用不同的 Ruby 版本。 通过源码编译安装当然，也可以通过源码安装 Ruby。下载，解压，然后执行：123$ ./configure$ make$ sudo make install 默认情况下，Ruby 安装到 /usr/local 目录。如果想使用其他目录，可以把 –prefix=DIR 选项传给 ./configure 脚本。 因为无法使用任何工具来管理通过源码编译安装的 Ruby，所以使用第三方工具或者包管理器或许是更好的选择。 这边ubuntu环境选择的是1sudo apt-get install ruby-full 安装的，简单方便。 详情请查看 http://www.ruby-lang.org/zh_cn/documentation/installation/","tags":[{"name":"ruby","slug":"ruby","permalink":"https://jiangshaobo.cn/tags/ruby/"}]},{"title":"Hexo渲染时排除目录文件夹或部分文件","date":"2018-01-31T05:28:03.000Z","path":"20180131/Hexo渲染时排除目录文件夹或部分文件.html","text":"使用Hexo的时候，有时候需要写点Demo实验，发现Hexo也渲染了，那么怎么才可以让Hexo跳过目录或者部分文件，在查看_config.yml的时候发现 12345678910111213141516171819# Directory# 资源文件夹，这个文件夹用来存放内容source_dir: source# 公共文件夹，这个文件夹用于存放生成的站点文件public_dir: public# 标签文件夹tag_dir: tags# 归档文件夹archive_dir: archives# 分类文件夹category_dir: categories# Include code 文件夹code_dir: downloads/code# 资源文件夹assets_dir: assets# 国际化（i18n）文件夹i18n_dir: :lang# 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径# skip_render: *.html 注意skip_render，跳过指定文件的渲染，您可使用 glob 表达式来匹配路径，把注释去掉，让此配置起效。 在提交网址的时候，搜索引擎确认网站所有权时(站长统计验证)需要下载一个验证文件来进行验证，要是这个文件被渲染了，验证就可能会失败了。或者，有时候会写一些简单的html示例页面，这也是不希望Hexo渲染的。因此有必要针对某个文件或者目录进行排除。Hexo的配置文件中提供了配置项skip_render。 注意只有source目录下的文件才会发布到public（能够在网络上访问到），因此Hexo只渲染source目录下的文件。skip_render参数设置的路径是相对于source目录的路径。 设置排除项假设source目录下的文件如以下目录树所示,Ubuntu下 tree 命令以树形结构显示文件夹目录结构，先安装tree1sudo apt-get install tree 只查看当前第一级的目录和文件1tree -L 1 123456789.├── assets├── CNAME├── demo├── instagram├── labs├── photos├── _posts└── t 只查看当前第二级的目录和文件 1tree -L 2 结果如下：12345678910111213141516171819202122232425262728293031.├── assets│ ├── demo│ └── img├── CNAME├── demo│ ├── baidu.html│ ├── google.html│ └── index.html├── instagram│ └── index.md├── labs│ ├── index│ └── index.md├── photos│ ├── index.ejs│ ├── ins.css│ ├── ins.js│ ├── ins.json│ ├── lazyload.min.js│ └── tools.js├── _posts│ ├── centos-ubuntu下安装nodejs环境.md│ ├── CNAME│ └── hello-world.md└── t ├── index.ejs ├── ins.css ├── ins.js ├── ins.json └── lazyload.min.js 排除单个文件排除demo/index.html1skip_render: 'demo/index.html' 排除多个文件排除baidu.html和google.html123skip_render: - 'demo/baidu.html' - 'demo/google.html' 或者 1skip_render: '*.html' 后者会排除source目录下所有后缀为html的文件，但是不会排除子目录如demo及其子目录中的html文件。 排除demo目录下baidu.html和google.html以及index.html1234skip_render: - 'demo/baidu.html' - 'demo/google.html' - 'demo/index.html' 或者1skip_render: 'demo/*.html' demo目录下新增other目录，另外新增几个文件1234mkdir demo/othertouch demo/other/test.htmltouch demo/other/test1.htmltouch demo/other/test2.md 排除source/demo/other目录中的所有html文件 1skip_render: 'demo/other/*.html' 这不会排除test2.md文件 排除source/demo/other目录中的所有文件 1skip_render: 'demo/other/**' 排除baidu.html和google.html以及整个source/demo目录 123skip_render: - 'demo/*.html' - 'demo/other/**' 可以到public文件下查看排除所有特定后缀的文件，使用 glob 表达式来匹配路径，那么什么是glob表达式呢？","tags":[{"name":"hexo","slug":"hexo","permalink":"https://jiangshaobo.cn/tags/hexo/"},{"name":"skip_render","slug":"skip-render","permalink":"https://jiangshaobo.cn/tags/skip-render/"}]},{"title":"OpenLayers 3 进阶实例","date":"2018-01-18T12:29:59.000Z","path":"20180118/openlayers/ch12/index.html","text":"进阶实例前面的基础知识，用于应对基本应用没有问题，但如果想更进一步的结合在一起应用，或者解决更为复杂一点的问题，则稍显困难。本章节针对这类问题给出一些实例讲解，以解决广大ol3使用者的困惑，用于感谢大家对本教程的支持。针对这类问题，曾经在Openlayer3 QQ群里面收集统计过，下面的例子就是基于这些统计数据分析讨论而出的。如果你有什么其他的想法或意见，请在下方留言或QQ联系我（11364382），谢谢。 通过wfs增删改查要素本节将讲解ol3使用wfs同后台geoserver进行交互，从而实现要素的增删改查。由于geoserver需要服务器端，所以我们将从环境搭建开始讲解，使用公开的数据源，进行查询，修改，添加，删除操作的演示，使得大家最终学会。 在windows环境下配置GeoServer由于wfs协议涉及到跨域的问题，在配置过程中，我们也将把跨域的环境配置好。虽然跨域的解决方式有很多，但此处选择一个稍微简单的方式，详见下面的具体步骤。 安装Java环境我们使用tomcat作为服务器，所以需要java环境，如果你不确定是否安装有java环境，则可以在命令终端执行： java -version，比如我的环境： 如果提示java命令找不到的错误，说明你得优先安装java环境，请到官网下载最新的Java进行安装。 下载Tomcat安装好java环境后，我们就到Tomcat官网下载Tomcat，如果java环境是64位的，记得下载64位的Tomcat，如果是32位的java环境，就需要下载32位的tomcat。如上图所示，我的是64位java环境，我选择下载8.5.4版本，64位的windows环境的tomcat： apache-tomcat-8.5.4-windows-x64.zip。 下载后，解压到一个指定的目录， 我放在了F:\\apache-tomcat-8.5.4。记住，解压就可以了，免安装，此时需要验证一下是否能正常启动Tomcat，启动命令终端，执行tomcat目录下的bin\\startup.bat，如下： 从上图可以发现，我们还没有配置环境变量JAVA_HOME或者JRE_HOME。那么我先配置一个JAVA_HOME的环境变量，配置好后，记得注销或者重启电脑，让环境变量生效。 然后重新执行命令，正确启动如下： 成功启动会弹出一个新的tomcat命令行窗口，参见上图左边的命令行窗口。 安装GeoServer此时，我们需要到GeoServer官网去下载geoserver，我选择了最新的2.9.1版本，由于我使用tomcat作为服务器，所以我选择下载Web Archive格式的geoserver-2.9.1-war.zip。 下载后解压到得到war文件：geoserver.war，把该文件放置到tomcat目录下的webapps目录下，比如放置该文件后，我的路径为：F:\\apache-tomcat-8.5.4\\webapps\\geoserver.war。 然后在命令行终端启动tomcat，可能需要稍微等待一下，因为要部署geoserver，待tomcat命令行终端启动完成，就可以打开浏览器输入http://localhost:8080/geoserver打开geoserver的管理页面，如下： 见到这个页面，也就安装成功了。如果没有出现该页面，请按照前面的步骤检查一下什么地方出问题了。 跨域配置由于tomcat从7.0.41版本开始就支持跨域了，参见CORS on Tomcat，我们下载的tomcat是8.5.4，自然就能很好的支持了，只需要进行下面的简单配置： 找到geoserver的web.xml文件，我的电脑对应的路径为F:\\apache-tomcat-8.5.4\\webapps\\geoserver\\WEB-INF\\web.xml 打开该文件，把下面的配置添加在该文件中：12345678 &lt;filter&gt; &lt;filter-name&gt;CorsFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.apache.catalina.filters.CorsFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;CorsFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; 然后再重新启动tomcat即可。 配置数据源为了后续进行wfs的各项使用演示，我就使用geoserver官方中使用的数据nyc_roads.zip。这份数据的配置，官网也提供了指导，参见Publishing a shapefile。 下面就以我的计算机配置为例，进行说明： 下载后解压，把压缩包里面的nyc_roads.dbf, nyc_roads.prj, nyc_roads.shp, nyc_roads.shx放在目录F:\\apache-tomcat-8.5.4\\webapps\\geoserver\\data\\data\\nyc_roads下，nyc_roads这个目录没有，就新建一个。 启动tomcat，在浏览器中打开geoserver的配置页面http://localhost:8080/geoserver，使用用户admin登录，密码为geoserver。 创建工作区： 创建数据存储： 创建图层，数据源配置好后，保存，就出现下面这个界面： 点击发布创建新图层： 最后点击页面最下方的保存按钮，就配置好了。 最后预览一下，点击左边的Layer Preview，在右边找到刚才创建的图层nyc_roads:nyc_roads，点击右边的OpenLayers，就可以打开新页面，显示预览结果。 出现最后一个页面，就说明数据源配置好了。 通过wfs查询要素一切都准备好了，现在终于可以通过ol3加载配置好的数据了。上一节中最后的预览结果，大家已经看到了，此处我们自己通过ol3来实现这个预览页面，效果图如下： 对应的代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;html&gt;&lt;head&gt; &lt;title&gt;wfs demo&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"../ol3.15.1/ol.css\" type=\"text/css\" /&gt; &lt;script src=\"../ol3.17.1/ol-debug.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"map\" style=\"width:100%;height:100%;\"&gt;&lt;/div&gt; &lt;script&gt; var vector = new ol.layer.Vector(&#123; source: new ol.source.Vector(&#123; format: new ol.format.GeoJSON(), url: 'http://localhost:8080/geoserver/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeNames=nyc_roads:nyc_roads&amp;outputFormat=application/json&amp;srsname=EPSG:4326' &#125;), style: function(feature, resolution) &#123; return new ol.style.Style(&#123; stroke: new ol.style.Stroke(&#123; color: 'blue', width: 1 &#125;) &#125;); &#125; &#125;); var map = new ol.Map(&#123; layers: [new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), vector], target: 'map', view: new ol.View(&#123; center: [-73.99710639567148, 40.742270050255556], maxZoom: 19, zoom: 14, projection: 'EPSG:4326' &#125;) &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 和一般的矢量地图加载没什么两样，对于wfs而言，需要弄明白的是ol.source.Vector的url参数： http://localhost:8080/geoserver/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeNames=nyc_roads:nyc_roads&amp;outputFormat=application/json&amp;srsname=EPSG:4326。 如果对wfs协议不太清楚的，建议优先看一下geoserver的官网文档WFS。 此处我们要获取所有的要素，所以设置request=GetFeature，typeNames的值设置为nyc_roads:nyc_roads，是因为我们之前配置的图层命名如此，可以在geoserver管理页面的Layer Preview里面看对应图层的Name。 对于outputFormat和srsname就不做过多解释，大家看值就容易明白了。因为view设置的projection: &#39;EPSG:4326&#39;，所以此处设置srsname=EPSG:4326。 BTW: 上面是全部查询，我们知道wfs也支持filter，所以我们可以在url里面设置filter，从而实现更细粒度的查询，比如这样：http://localhost:8080/geoserver/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeNames=nyc_roads:nyc_roads&amp;outputFormat=application/json&amp;srsname=EPSG:4326&amp;cql_filter=in (&#39;nyc_roads.1162&#39;)。 大家可以自行用这个url进行测试一下。关于filter更详细的信息参见Supported filter languages。 因为这不是教程的重点，所以此处不进行细说。 通过wfs修改要素在查询的基础上，本小节我们更进一步对界面上呈现的要素进行修改，然后通过wfs协议保存到服务器端。界面效果如下: 在界面上方，先点击查询按钮，通过wfs协议把所有的要素查询到前端界面上显示，然后选择复选框编辑，就可以选择界面上的线段，进行编辑，比如把直线编辑成W形状，然后点击按钮保存，就可以把编辑后的线段保存下来。 在点击保存按钮之前，请打开开发者面板，然后再点击保存，之后就可以看到发起了一个wfs的http请求到geoserver服务器，请求的url为：http://localhost:8080/geoserver/wfs?service=wfs，发送的内容大致为:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;Transaction xmlns=\"http://www.opengis.net/wfs\" service=\"WFS\" version=\"1.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd\"&gt; &lt;Update typeName=\"feature:nyc_roads\" xmlns:feature=\"http://geoserver.org/nyc_roads\"&gt; &lt;Property&gt; &lt;Name&gt;the_geom&lt;/Name&gt; &lt;Value&gt; &lt;MultiLineString xmlns=\"http://www.opengis.net/gml\" srsName=\"EPSG:4326\"&gt; &lt;lineStringMember&gt; &lt;LineString srsName=\"EPSG:4326\"&gt; &lt;posList&gt;-73.98528635501862 40.768332481384284 -73.98608637 40.76719342 -73.98449242115021 40.767849683761604 -73.98447096347809 40.76647639274598 -73.98299038410187 40.767334699630744 -73.98336657 40.76604531&lt;/posList&gt; &lt;/LineString&gt; &lt;/lineStringMember&gt; &lt;/MultiLineString&gt; &lt;/Value&gt; &lt;/Property&gt; &lt;Property&gt; &lt;Name&gt;modified&lt;/Name&gt; &lt;Value&gt;5/28/2001&lt;/Value&gt; &lt;/Property&gt; &lt;Property&gt; &lt;Name&gt;name&lt;/Name&gt; &lt;Value&gt;W 56 ST&lt;/Value&gt; &lt;/Property&gt; &lt;Property&gt; &lt;Name&gt;vsam&lt;/Name&gt; &lt;Value&gt;15060&lt;/Value&gt; &lt;/Property&gt; &lt;Property&gt; &lt;Name&gt;sourcedate&lt;/Name&gt; &lt;Value&gt;3/31/1996&lt;/Value&gt; &lt;/Property&gt; &lt;Property&gt; &lt;Name&gt;sourcetype&lt;/Name&gt; &lt;Value&gt;Photogrammetric&lt;/Value&gt; &lt;/Property&gt; &lt;Property&gt; &lt;Name&gt;source_id&lt;/Name&gt; &lt;Value&gt;96083&lt;/Value&gt; &lt;/Property&gt; &lt;Property&gt; &lt;Name&gt;borough&lt;/Name&gt; &lt;Value&gt;Manhattan&lt;/Value&gt; &lt;/Property&gt; &lt;Property&gt; &lt;Name&gt;feat_code&lt;/Name&gt; &lt;Value&gt;2900&lt;/Value&gt; &lt;/Property&gt; &lt;Property&gt; &lt;Name&gt;feat_desc&lt;/Name&gt; &lt;Value&gt;Paved Road&lt;/Value&gt; &lt;/Property&gt; &lt;Property&gt; &lt;Name&gt;exported&lt;/Name&gt; &lt;Value&gt;05/19/2004&lt;/Value&gt; &lt;/Property&gt; &lt;Property&gt; &lt;Name&gt;feat_type&lt;/Name&gt; &lt;Value&gt;0&lt;/Value&gt; &lt;/Property&gt; &lt;Filter xmlns=\"http://www.opengis.net/ogc\"&gt; &lt;FeatureId fid=\"nyc_roads.882\" /&gt; &lt;/Filter&gt; &lt;/Update&gt;&lt;/Transaction&gt; 如果保存成功，则response的内容大致如下：1234567891011121314151617181920212223242526&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;wfs:TransactionResponse xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sf=\"http://www.openplans.org/spearfish\" xmlns:wfs=\"http://www.opengis.net/wfs\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:nyc_roads=\"http://geoserver.org/nyc_roads\" xmlns:ogc=\"http://www.opengis.net/ogc\" xmlns:ows=\"http://www.opengis.net/ows\" xmlns:tiger=\"http://www.census.gov\" xmlns:topp=\"http://www.openplans.org/topp\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x mlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"1.1.0\" xsi:schemaLocation=\"http://www.opengis.net/wfs http://localhost:8080/geoserver/schemas/wfs/1.1.0/wfs.xsd\"&gt; &lt;wfs:TransactionSummary&gt; &lt;wfs:totalInserted&gt;0&lt;/wfs:totalInserted&gt; &lt;wfs:totalUpdated&gt;1&lt;/wfs:totalUpdated&gt; &lt;wfs:totalDeleted&gt;0&lt;/wfs:totalDeleted&gt; &lt;/wfs:TransactionSummary&gt; &lt;wfs:TransactionResults/&gt; &lt;wfs:InsertResults&gt; &lt;wfs:Feature&gt;&lt;ogc:FeatureId fid=\"none\"/&gt;&lt;/wfs:Feature&gt; &lt;/wfs:InsertResults&gt;&lt;/wfs:TransactionResponse&gt; 重新刷新页面后，再次点击查询按钮，可以验证之前修改的线段是否修改成功。由于不能提供geoserver服务器，所以只能让大家自行用下面的代码在本地验证： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159&lt;html&gt;&lt;head&gt; &lt;title&gt;wfs modify demo&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"../ol3.17.1/ol.css\" type=\"text/css\" /&gt; &lt;script src=\"../ol3.17.1/ol-debug.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;script src=\"../3rdparty/zepto.min.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=\"button\" value=\"查询\" onclick=\"queryWfs();\" /&gt; &lt;input id=\"select\" type=\"checkbox\" value=\"select\" /&gt;选择 &lt;input id=\"modify\" type=\"checkbox\" value=\"modify\" /&gt;编辑 &lt;input id=\"save\" type=\"button\" value=\"保存\" onclick=\"onSave();\" /&gt; &lt;div id=\"map\" style=\"width:100%;height:100%;\"&gt;&lt;/div&gt; &lt;script&gt; var wfsVectorLayer = null; var modifiedFeatures = null; // 选择器 var selectInteraction = new ol.interaction.Select(&#123; style: new ol.style.Style(&#123; stroke: new ol.style.Stroke(&#123; color: 'red', width: 2 &#125;) &#125;) &#125;); // 修改器 var modifyInteraction = new ol.interaction.Modify(&#123; style: new ol.style.Style(&#123; stroke: new ol.style.Stroke(&#123; color: 'red', width: 5 &#125;) &#125;), features: selectInteraction.getFeatures() &#125;); modifyInteraction.on('modifyend', function(e) &#123; // 把修改完成的feature暂存起来 modifiedFeatures = e.features; &#125;); var map = new ol.Map(&#123; layers: [new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;)], target: 'map', view: new ol.View(&#123; center: [-73.99710639567148, 40.742270050255556], maxZoom: 19, zoom: 13, projection: 'EPSG:4326' &#125;) &#125;); // 通过wfs查询所有的要素 function queryWfs() &#123; // 支持重新查询 if (wfsVectorLayer) &#123; map.removeLayer(wfsVectorLayer); &#125; // 创建新的图层来加载wfs的要素 wfsVectorLayer = new ol.layer.Vector(&#123; source: new ol.source.Vector(&#123; format: new ol.format.GeoJSON(&#123; geometryName: 'the_geom' // 因为数据源里面字段the_geom存储的是geometry，所以需要指定 &#125;), url: 'http://localhost:8080/geoserver/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeNames=nyc_roads:nyc_roads&amp;outputFormat=application/json&amp;srsname=EPSG:4326' &#125;), style: function(feature, resolution) &#123; return new ol.style.Style(&#123; stroke: new ol.style.Stroke(&#123; color: 'blue', width: 5 &#125;) &#125;); &#125; &#125;); map.addLayer(wfsVectorLayer); &#125; $('#select').change(function() &#123; if (this.checked) &#123; // 勾选选择复选框时，添加选择器到地图 map.removeInteraction(selectInteraction); map.addInteraction(selectInteraction); &#125; else &#123; // 不勾选选择复选框的情况下，移出选择器和修改器 map.removeInteraction(selectInteraction); document.getElementById('modify').checked = false; map.removeInteraction(modifyInteraction); modifiedFeatures = null; &#125; &#125;); $('#modify').change(function() &#123; if (this.checked) &#123; // 勾选修改复选框时，添加选择器和修改器到地图 document.getElementById('select').checked = true; map.removeInteraction(modifyInteraction); map.addInteraction(modifyInteraction); map.removeInteraction(selectInteraction); map.addInteraction(selectInteraction); &#125; else &#123; // 不勾选修改复选框时，移出修改器 map.removeInteraction(modifyInteraction); modifiedFeatures = null; &#125; &#125;); // 保存已经编辑的要素 function onSave() &#123; if (modifiedFeatures &amp;&amp; modifiedFeatures.getLength() &gt; 0) &#123; // 转换坐标 var modifiedFeature = modifiedFeatures.item(0).clone(); // 注意ID是必须，通过ID才能找到对应修改的feature modifiedFeature.setId(modifiedFeatures.item(0).getId()); // 调换经纬度坐标，以符合wfs协议中经纬度的位置 modifiedFeature.getGeometry().applyTransform(function(flatCoordinates, flatCoordinates2, stride) &#123; for (var j = 0; j &lt; flatCoordinates.length; j += stride) &#123; var y = flatCoordinates[j]; var x = flatCoordinates[j + 1]; flatCoordinates[j] = x; flatCoordinates[j + 1] = y; &#125; &#125;); modifyWfs([modifiedFeature]); &#125; &#125; // 把修改提交到服务器端 function modifyWfs(features) &#123; var WFSTSerializer = new ol.format.WFS(); var featObject = WFSTSerializer.writeTransaction(null, features, null, &#123; featureType: 'nyc_roads', featureNS: 'http://geoserver.org/nyc_roads', // 注意这个值必须为创建工作区时的命名空间URI srsName: 'EPSG:4326' &#125;); // 转换为xml内容发送到服务器端 var serializer = new XMLSerializer(); var featString = serializer.serializeToString(featObject); var request = new XMLHttpRequest(); request.open('POST', 'http://localhost:8080/geoserver/wfs?service=wfs'); // 指定内容为xml类型 request.setRequestHeader('Content-Type', 'text/xml'); request.send(featString); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 通过wfs添加要素现在我们该介绍一下如何在前端绘制一个新的要素，并且保存到服务器端。还是先看一下界面： 勾选新增复选框之后，就可以在界面上绘制新的线段，如图，绘制了一个W形状的线，绘制完成后，点击按钮保存就可以把界面上新增的线保存到服务器端，在开发者工具界面可以看到http请求: http://localhost:8080/geoserver/wfs?service=wfs，请求发送的内容为：1234567891011121314151617181920212223242526&lt;Transaction xmlns=\"http://www.opengis.net/wfs\" service=\"WFS\" version=\"1.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd\"&gt; &lt;Insert&gt; &lt;nyc_roads xmlns=\"http://geoserver.org/nyc_roads\" fid=\"nyc_roads.new.1\"&gt; &lt;the_geom&gt; &lt;MultiLineString xmlns=\"http://www.opengis.net/gml\" srsName=\"EPSG:4326\"&gt; &lt;lineStringMember&gt; &lt;LineString srsName=\"EPSG:4326\"&gt; &lt;posList&gt;-73.99970054626465 40.732669830322266 -73.98974418640137 40.71481704711914 -73.98545265197754 40.730438232421875 -73.98064613342285 40.71636199951172 -73.97360801696777 40.73284149169922&lt;/posList&gt; &lt;/LineString&gt; &lt;/lineStringMember&gt; &lt;/MultiLineString&gt; &lt;/the_geom&gt; &lt;name&gt;nyc_roads.new.1&lt;/name&gt; &lt;modified&gt;nyc_roads.new.1&lt;/modified&gt; &lt;vsam&gt;0&lt;/vsam&gt; &lt;sourcedate&gt;&lt;/sourcedate&gt; &lt;sourcetype&gt;&lt;/sourcetype&gt; &lt;source_id&gt;1&lt;/source_id&gt; &lt;borough&gt;&lt;/borough&gt; &lt;feat_code&gt;0&lt;/feat_code&gt; &lt;feat_desc&gt;11&lt;/feat_desc&gt; &lt;feat_type&gt;0&lt;/feat_type&gt; &lt;exported&gt;true&lt;/exported&gt; &lt;/nyc_roads&gt; &lt;/Insert&gt;&lt;/Transaction&gt; 服务器端response的内容为：1234567891011121314&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;wfs:TransactionResponse xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sf=\"http://www.openplans.org/spearfish\" xmlns:wfs=\"http://www.opengis.net/wfs\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:nyc_roads=\"http://geoserver.org/nyc_roads\" xmlns:ogc=\"http://www.opengis.net/ogc\" xmlns:ows=\"http://www.opengis.net/ows\" xmlns:tiger=\"http://www.census.gov\" xmlns:topp=\"http://www.openplans.org/topp\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"1.1.0\" xsi:schemaLocation=\"http://www.opengis.net/wfs http://localhost:8080/geoserver/schemas/wfs/1.1.0/wfs.xsd\"&gt; &lt;wfs:TransactionSummary&gt; &lt;wfs:totalInserted&gt;1&lt;/wfs:totalInserted&gt; &lt;wfs:totalUpdated&gt;0&lt;/wfs:totalUpdated&gt; &lt;wfs:totalDeleted&gt;0&lt;/wfs:totalDeleted&gt; &lt;/wfs:TransactionSummary&gt; &lt;wfs:TransactionResults/&gt; &lt;wfs:InsertResults&gt; &lt;wfs:Feature&gt; &lt;ogc:FeatureId fid=\"new0\" /&gt; &lt;/wfs:Feature&gt; &lt;/wfs:InsertResults&gt; &lt;/wfs:TransactionResponse&gt; 通过再次刷新界面，点击查询按钮查看所有的feature，可以确认是否添加成功，请自行验证。下面给出对应的代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162&lt;html&gt;&lt;head&gt; &lt;title&gt;wfs add demo&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"../ol3.17.1/ol.css\" type=\"text/css\" /&gt; &lt;script src=\"../ol3.17.1/ol-debug.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;script src=\"../3rdparty/zepto.min.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=\"button\" value=\"查询\" onclick=\"queryWfs();\" /&gt; &lt;input id=\"add\" type=\"checkbox\" value=\"add\" /&gt;新增 &lt;input id=\"saveNew\" type=\"button\" value=\"保存\" onclick=\"onSaveNew();\" /&gt; &lt;div id=\"map\" style=\"width:100%;height:100%;\"&gt;&lt;/div&gt; &lt;script&gt; var newId = 1; var wfsVectorLayer = null; var drawedFeature = null; // 创建用于新绘制feature的layer var drawLayer = new ol.layer.Vector(&#123; source: new ol.source.Vector(), style: new ol.style.Style(&#123; stroke: new ol.style.Stroke(&#123; color: 'blue', width: 5 &#125;) &#125;) &#125;); // 添加绘制新图形的interaction，用于添加新的线条 var drawInteraction = new ol.interaction.Draw(&#123; type: 'LineString', // 设定为线条 style: new ol.style.Style(&#123; stroke: new ol.style.Stroke(&#123; color: 'red', width: 10 &#125;) &#125;), source: drawLayer.getSource() &#125;); drawInteraction.on('drawend', function(e) &#123; // 绘制结束时暂存绘制的feature drawedFeature = e.feature; &#125;); var map = new ol.Map(&#123; layers: [new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), drawLayer], target: 'map', view: new ol.View(&#123; center: [-73.99710639567148, 40.742270050255556], maxZoom: 19, zoom: 13, projection: 'EPSG:4326' &#125;) &#125;); function queryWfs() &#123; if (wfsVectorLayer) &#123; map.removeLayer(wfsVectorLayer); &#125; wfsVectorLayer = new ol.layer.Vector(&#123; source: new ol.source.Vector(&#123; format: new ol.format.GeoJSON(&#123; geometryName: 'the_geom' &#125;), url: 'http://localhost:8080/geoserver/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeNames=nyc_roads:nyc_roads&amp;outputFormat=application/json&amp;srsname=EPSG:4326' &#125;), style: function(feature, resolution) &#123; return new ol.style.Style(&#123; stroke: new ol.style.Stroke(&#123; color: 'blue', width: 5 &#125;) &#125;); &#125; &#125;); map.addLayer(wfsVectorLayer); &#125; $('#add').change(function() &#123; if (this.checked) &#123; // 勾选新增复选框时，添加绘制的Interaction map.removeInteraction(drawInteraction); map.addInteraction(drawInteraction); &#125; else &#123; // 取消勾选新增复选框时，移出绘制的Interaction，删除已经绘制的feature map.removeInteraction(drawInteraction); if (drawedFeature) &#123; drawLayer.getSource().removeFeature(drawedFeature); &#125; drawedFeature = null; &#125; &#125;); // 保存新绘制的feature function onSaveNew() &#123; // 转换坐标 var geometry = drawedFeature.getGeometry().clone(); geometry.applyTransform(function(flatCoordinates, flatCoordinates2, stride) &#123; for (var j = 0; j &lt; flatCoordinates.length; j += stride) &#123; var y = flatCoordinates[j]; var x = flatCoordinates[j + 1]; flatCoordinates[j] = x; flatCoordinates[j + 1] = y; &#125; &#125;); // 设置feature对应的属性，这些属性是根据数据源的字段来设置的 var newFeature = new ol.Feature(); newFeature.setId('nyc_roads.new.' + newId); newFeature.setGeometryName('the_geom'); newFeature.set('the_geom', null); newFeature.set('name', newFeature.getId()); newFeature.set('modified', newFeature.getId()); newFeature.set('vsam', 0); newFeature.set('sourcedate', ''); newFeature.set('sourcetype', ''); newFeature.set('source_id', newId); newFeature.set('borough', ''); newFeature.set('feat_code', 0); newFeature.set('feat_desc', '11'); newFeature.set('feat_type', 0); newFeature.set('exported', 'true'); newFeature.setGeometry(new ol.geom.MultiLineString([geometry.getCoordinates()])); addWfs([newFeature]); // 更新id newId = newId + 1; // 3秒后，自动刷新页面上的feature setTimeout(function() &#123; drawLayer.getSource().clear(); queryWfs(); &#125;, 3000); &#125; // 添加到服务器端 function addWfs(features) &#123; var WFSTSerializer = new ol.format.WFS(); var featObject = WFSTSerializer.writeTransaction(features, null, null, &#123; featureType: 'nyc_roads', featureNS: 'http://geoserver.org/nyc_roads', srsName: 'EPSG:4326' &#125;); var serializer = new XMLSerializer(); var featString = serializer.serializeToString(featObject); var request = new XMLHttpRequest(); request.open('POST', 'http://localhost:8080/geoserver/wfs?service=wfs'); request.setRequestHeader('Content-Type', 'text/xml'); request.send(featString); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 通过wfs删除要素删除feature是wfs协议中的最后一个例子了，和之前的修改，添加差不多，大同小异。还是先看界面： 选择查询按钮，把所有的feature加载到前端，然后勾选选择复选框，就可以在地图上选择要删除的feature，图示选择之前添加的W形状的线条，然后点击删除选中Feature按钮，就可以把feature删除掉。 在开发者工具窗口里面可以看到删除feature的http请求： http://localhost:8080/geoserver/wfs?service=wfs，其发送的内容为：1234567&lt;Transaction xmlns=\"http://www.opengis.net/wfs\" service=\"WFS\" version=\"1.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd\"&gt; &lt;Delete typeName=\"feature:nyc_roads\" xmlns:feature=\"http://geoserver.org/nyc_roads\"&gt; &lt;Filter xmlns=\"http://www.opengis.net/ogc\"&gt; &lt;FeatureId fid=\"nyc_roads.1302\" /&gt; &lt;/Filter&gt; &lt;/Delete&gt;&lt;/Transaction&gt; 服务器端response的内容为：1234567891011121314&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;wfs:TransactionResponse xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:sf=\"http://www.openplans.org/spearfish\" xmlns:wfs=\"http://www.opengis.net/wfs\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:nyc_roads=\"http://geoserver.org/nyc_roads\" xmlns:ogc=\"http://www.opengis.net/ogc\" xmlns:ows=\"http://www.opengis.net/ows\" xmlns:tiger=\"http://www.census.gov\" xmlns:topp=\"http://www.openplans.org/topp\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"1.1.0\" xsi:schemaLocation=\"http://www.opengis.net/wfs http://localhost:8080/geoserver/schemas/wfs/1.1.0/wfs.xsd\"&gt; &lt;wfs:TransactionSummary&gt; &lt;wfs:totalInserted&gt;0&lt;/wfs:totalInserted&gt; &lt;wfs:totalUpdated&gt;0&lt;/wfs:totalUpdated&gt; &lt;wfs:totalDeleted&gt;1&lt;/wfs:totalDeleted&gt; &lt;/wfs:TransactionSummary&gt; &lt;wfs:TransactionResults/&gt; &lt;wfs:InsertResults&gt; &lt;wfs:Feature&gt; &lt;ogc:FeatureId fid=\"none\" /&gt; &lt;/wfs:Feature&gt; &lt;/wfs:InsertResults&gt; &lt;/wfs:TransactionResponse&gt; 通过再次刷新查询，可以确认刚才的feature是否成功删除。请自行验证，对应实例的代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108&lt;html&gt;&lt;head&gt; &lt;title&gt;wfs crud demo&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"../ol3.17.1/ol.css\" type=\"text/css\" /&gt; &lt;script src=\"../ol3.17.1/ol-debug.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt; &lt;script src=\"../3rdparty/zepto.min.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=\"button\" value=\"查询\" onclick=\"queryWfs();\" /&gt; &lt;input id=\"select\" type=\"checkbox\" value=\"select\" /&gt;选择 &lt;input id=\"delete\" type=\"button\" value=\"删除选中Feature\" onclick=\"onDeleteFeature();\" /&gt; &lt;div id=\"map\" style=\"width:100%;height:100%;\"&gt;&lt;/div&gt; &lt;script&gt; var wfsVectorLayer = null; // 选择器 var selectInteraction = new ol.interaction.Select(&#123; style: new ol.style.Style(&#123; stroke: new ol.style.Stroke(&#123; color: 'red', width: 10 &#125;) &#125;) &#125;); var map = new ol.Map(&#123; layers: [new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;)], target: 'map', view: new ol.View(&#123; center: [-73.99710639567148, 40.742270050255556], maxZoom: 19, zoom: 13, projection: 'EPSG:4326' &#125;) &#125;); function queryWfs() &#123; if (wfsVectorLayer) &#123; map.removeLayer(wfsVectorLayer); &#125; wfsVectorLayer = new ol.layer.Vector(&#123; source: new ol.source.Vector(&#123; format: new ol.format.GeoJSON(&#123; geometryName: 'the_geom' &#125;), url: 'http://localhost:8080/geoserver/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeNames=nyc_roads:nyc_roads&amp;outputFormat=application/json&amp;srsname=EPSG:4326' &#125;), style: function(feature, resolution) &#123; return new ol.style.Style(&#123; stroke: new ol.style.Stroke(&#123; color: 'blue', width: 5 &#125;) &#125;); &#125; &#125;); map.addLayer(wfsVectorLayer); &#125; $('#select').change(function() &#123; if (this.checked) &#123; map.removeInteraction(selectInteraction); map.addInteraction(selectInteraction); &#125; else &#123; map.removeInteraction(selectInteraction); &#125; &#125;); function onDeleteFeature() &#123; // 删选择器选中的feature if (selectInteraction.getFeatures().getLength() &gt; 0) &#123; deleteWfs([selectInteraction.getFeatures().item(0)]); // 3秒后自动更新features setTimeout(function() &#123; selectInteraction.getFeatures().clear(); queryWfs(); &#125;, 3000); &#125; &#125; // 在服务器端删除feature function deleteWfs(features) &#123; var WFSTSerializer = new ol.format.WFS(); var featObject = WFSTSerializer.writeTransaction(null, null, features, &#123; featureType: 'nyc_roads', featureNS: 'http://geoserver.org/nyc_roads', srsName: 'EPSG:4326' &#125;); var serializer = new XMLSerializer(); var featString = serializer.serializeToString(featObject); var request = new XMLHttpRequest(); request.open('POST', 'http://localhost:8080/geoserver/wfs?service=wfs'); request.setRequestHeader('Content-Type', 'text/xml'); request.send(featString); &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"OpenLayers 3 Source和Layer","date":"2018-01-18T12:29:59.000Z","path":"20180118/openlayers/ch05/index.html","text":"Source和Layer在前面的例子中，已经对Source和Layer有所了解了。比如我们加载了Open Street Map的地图。然而世界上的地图并不只有Open Street Map，还有很多其他的地图，比如Google地图，天地图，高德地图，百度地图等。如果OpenLayers支持的地图来源越多，就会越适用，越强大。除了加载基本的地图之外，GIS还需要加载很多其他的信息，比如街道名称，商店名称，公交站点，道路等等。那么在OpenLayers 3中，具体该如何把这些添加在地图上呢？ 首先需要明白的一点是，Source和Layer是一对一的关系，有一个Source，必然需要一个Layer，然后把这个Layer添加到Map上，就可以显示出来了。通过官网的API搜索ol.source可以发现有很多不同的Source，但归纳起来共三种：ol.source.Tile，ol.source.Image和ol.source.Vector。 ol.source.Tile对应的是瓦片数据源，现在网页地图服务中，绝大多数都是使用的瓦片地图，而OpenLayers 3作为一个WebGIS引擎，理所当然应该支持瓦片。 ol.source.Image对应的是一整张图，而不像瓦片那样很多张图，从而无需切片，也可以加载一些地图，适用于一些小场景地图。 ol.source.Vector对应的是矢量地图源，点，线，面等等常用的地图元素(Feature)，就囊括到这里面了。这样看来，只要这两种Source就可以搞定80%的需求了。 从复杂度来分析，ol.source.Image和ol.source.Vector都不复杂，其数据格式和来源方式都简单。而ol.source.Tile则不一样，由于一些历史问题，多个服务提供商，多种标准等诸多原因，导致要支持世界上大多数的瓦片数据源，就需要针对这些差异提供不同的Tile数据源支持。在更进一步了解之前，我们先来看一下OpenLayers 3现在支持的Source具体有哪些： 上图中的类是按照继承关系，从左向右展开的，左边的为父类，右边的为子类。在使用时，一般来说，都是直接使用叶子节点上的类，基本就可以完成需求。父类需要自己进一步扩展或者处理才能有效使用的。 我们先了解最为复杂的ol.source.Tile，其叶子节点类有很多，大致可以分为几类： 在线服务的Source，包括ol.source.BingMaps(使用的是微软提供的Bing在线地图数据)，ol.source.MapQuest(使用的是MapQuest提供的在线地图数据)(注: 由于MapQuest开始收费，ol v3.17.0就移除了ol.source.MapQuest)，ol.source.OSM(使用的是Open Street Map提供的在线地图数据)，ol.source.Stamen(使用的是Stamen提供的在线地图数据)。没有自己的地图服务器的情况下，可直接使用它们，加载地图底图。 支持协议标准的Source，包括ol.source.TileArcGISRest，ol.source.TileWMS，ol.source.WMTS，ol.source.UTFGrid，ol.source.TileJSON。如果要使用它们，首先你得先学习对应的协议，之后必须找到支持这些协议的服务器来提供数据源，这些服务器可以是地图服务提供商提供的，也可以是自己搭建的服务器，关键是得支持这些协议。 ol.source.XYZ，这个需要单独提一下，因为是可以直接使用的，而且现在很多地图服务（在线的，或者自己搭建的服务器）都支持xyz方式的请求。国内在线的地图服务，高德，天地图等，都可以通过这种方式加载，本地离线瓦片地图也可以，用途广泛，且简单易学，需要掌握。 ol.source.Image虽然有几种不同的子类，但大多比较简单，因为不牵涉到过多的协议和服务器提供商。而ol.source.Vector就更加的简单了，但有时候其唯一的子类ol.source.Cluster在处理大量的Feature时，我们可能需要使用。 在大概了解了整个Source之后，紧接着该介绍它的搭档Layer了，同样的，我们还是先从OpenLayers 3现有的Layer类图大致了解一下： 为了便于了解和使用，图中标注了每一个Layer对应的Source。通过上图可以看到Layer相对于Source而言，真是太简单了。 对于初学者而言，如何选择和应用不同的Source和Layer是一个非常迷惑和困难的问题。为此，本章将围绕着Source和Layer展开，为大家解决这个问题。 加载瓦片地图瓦片地图源于一种大地图解决方案，针对一整块非常大的地图进行切片，分成很多相同大小的小块地图，在用户访问的时候，再一块一块小地图加载，拼接在一起，从而还原成一整块大的地图。这样做的优点在于，用户在同一时间，同一个可见视图内，只能看到地图的一部分，而不是全部。如果一次加载整个大地图，会导致加载很慢，且不可用的问题。这对于在线服务来说，是非常致命的。所以几乎所有的在线网页地图服务，都使用的是瓦片地图。自然加载瓦片地图成了必不可少的功能，也是必须要掌握的，为此本节将重点介绍如何选择和加载瓦片地图，不用担心，都会结合具体的实例来讲解。 最简单的加载在线地图本小节所介绍的这些在线地图，加载起来会非常简单，因为OpenLayers 3已经做了很好的封装，对于开发者而言，无须做过多的编码，即可直接使用。主要包括开源的Open Street Map，微软的Bing地图，Map Quest地图(注: 由于MapQuest开始收费，ol v3.17.0就移除了ol.source.MapQuest)，Stamen地图。 OpenStreetMap地图Bing地图Stamen地图MapQuest地图 // Open Street Map 地图层 var openStreetMapLayer = new ol.layer.Tile({ source: new ol.source.OSM() }); // Bing地图层 var bingMapLayer = new ol.layer.Tile({ source: new ol.source.BingMaps({ key: ‘AkjzA7OhS4MIBjutL21bkAop7dc41HSE0CNTR5c6HJy8JKc7U9U9RveWJrylD3XJ’, imagerySet: ‘Road’ }) }); // Stamen地图层 var stamenLayer = new ol.layer.Tile({ source: new ol.source.Stamen({ layer: ‘watercolor’ }) }); // MapQuest地图层 var mapQuestLayer = new ol.layer.Tile({ source: new ol.source.MapQuest({ layer: ‘osm’ }) }); // 创建地图 var map = new ol.Map({ layers: [ openStreetMapLayer ], view: new ol.View({ // 设置成都为地图中心 center: [104.06, 30.67], projection: ‘EPSG:4326’, zoom: 10 }), target: ‘map’ }); function switch2OSM() { // 先移除当前的地图，再添加Open Street Map 地图 map.removeLayer(map.getLayers().item(0)); map.addLayer(openStreetMapLayer); } function switch2BingMap() { // 先移除当前的地图，再添加Bing地图 map.removeLayer(map.getLayers().item(0)); map.addLayer(bingMapLayer); } function switch2StamenMap() { // 先移除当前的地图，再添加stamen地图 map.removeLayer(map.getLayers().item(0)); map.addLayer(stamenLayer); } function switch2MapQuest() { // 先移除当前的地图，再添加MapQuest地图 map.removeLayer(map.getLayers().item(0)); map.addLayer(mapQuestLayer); }12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;input type=\"radio\" checked=\"checked\" name=\"mapSource\" onclick=\"switch2OSM();\" /&gt;OpenStreetMap地图&lt;input type=\"radio\" name=\"mapSource\" onclick=\"switch2BingMap();\" /&gt;Bing地图&lt;input type=\"radio\" name=\"mapSource\" onclick=\"switch2StamenMap();\" /&gt;Stamen地图&lt;input type=\"radio\" name=\"mapSource\" onclick=\"switch2MapQuest();\" /&gt;MapQuest地图&lt;script&gt; // Open Street Map 地图层 var openStreetMapLayer = new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;); // Bing地图层 var bingMapLayer = new ol.layer.Tile(&#123; source: new ol.source.BingMaps(&#123; key: 'AkjzA7OhS4MIBjutL21bkAop7dc41HSE0CNTR5c6HJy8JKc7U9U9RveWJrylD3XJ', imagerySet: 'Road' &#125;) &#125;); // Stamen地图层 var stamenLayer = new ol.layer.Tile(&#123; source: new ol.source.Stamen(&#123; layer: 'watercolor' &#125;) &#125;); // MapQuest地图层 var mapQuestLayer = new ol.layer.Tile(&#123; source: new ol.source.MapQuest(&#123; layer: 'osm' &#125;) &#125;); // 创建地图 var map = new ol.Map(&#123; layers: [ openStreetMapLayer ], view: new ol.View(&#123; // 设置成都为地图中心 center: [104.06, 30.67], projection: 'EPSG:4326', zoom: 10 &#125;), target: 'map' &#125;); function switch2OSM() &#123; // 先移除当前的地图，再添加Open Street Map 地图 map.removeLayer(map.getLayers().item(0)); map.addLayer(openStreetMapLayer); &#125; function switch2BingMap() &#123; // 先移除当前的地图，再添加Bing地图 map.removeLayer(map.getLayers().item(0)); map.addLayer(bingMapLayer); &#125; function switch2StamenMap() &#123; // 先移除当前的地图，再添加stamen地图 map.removeLayer(map.getLayers().item(0)); map.addLayer(stamenLayer); &#125; function switch2MapQuest() &#123; // 先移除当前的地图，再添加MapQuest地图 map.removeLayer(map.getLayers().item(0)); map.addLayer(mapQuestLayer); &#125;&lt;/script&gt;代码很简单，因为OpenLayers 3对这几个在线服务都做了很好的封装，只用简单的配置一下Source的构造参数就可以了。此处并没有列出每一个类的所有构造参数，但可以通过API文档查询了解。上面这个地图涉及到多个地图源，如果都放在地图上，就涉及到图层管理，这一部分的知识将在后续章节图层叠加及管理有更详细的介绍。# 万能瓦片地图加载秘籍其实加载瓦片地图基本是大同小异，你可能会觉得很惊讶，因为网上在线的地图服务，看起都不一样，本节即将为你解开这层神秘的面纱。在前面已基本介绍了瓦片地图的解决方案和作用，此处再用一张图来直观地认识一下瓦片结构：从上图可知，大家常用的瓦片地图是一个三维的概念，我们通常使用xyz这样的坐标来精确定位一张瓦片。通常z用于表示地图层级，而xy表示某个层级内的瓦片平面，x为横纵坐标，y为纵轴坐标，类似于数学上常见的笛卡尔坐标系。在这个瓦片平面上的每一个瓦片在横轴和纵轴上都有对应的坐标：x和y。## 加载简单的瓦片地图虽然现在大多数网页地图都使用的是瓦片地图，但还是有必要先介绍一下如何识别它。在浏览器中打开任意一个在线的网页地图，然后打开浏览器的开发者工具，再随意拖动，放大缩小地图。之后在开发者工具里查看新发起的请求，是否有一些图片请求，查看请求返回的图片，是否为正在浏览的地图的一部分，如果是，则基本为瓦片地图。下面以百度地图为例，说明一下在线瓦片地图请求信息：在请求的url中，我们可以很明显地看到xyz这三个参数，这进一步说明了百度地图就是用了瓦片地图。如果你多分析一下现有的在线网页地图，基本都是瓦片地图。正因为如此，OpenLayers 3提供了ol.source.XYZ这种通用的Source来适应广大的在线瓦片地图数据源，具备很好的适用性。通常情况下，开发者想要加载不同的在线瓦片地图源，则只需要更改ol.source.XYZ的构造参数中url就可以了。 比如我们就可以不用ol.source.OSM，而用ol.source.XYZ来加载Open Street Map地图，结果一样：12345678910111213141516171819202122232425&lt;body&gt; &lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt; &lt;script&gt; // Open Street Map 地图层 var openStreetMapLayer = new ol.layer.Tile(&#123; source: new ol.source.XYZ(&#123; url: 'http://&#123;a-c&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png' &#125;) &#125;); // 创建地图 var map = new ol.Map(&#123; layers: [ openStreetMapLayer ], view: new ol.View(&#123; // 设置成都为地图中心 center: [104.06, 30.67], projection: 'EPSG:4326', zoom: 10 &#125;), target: 'map' &#125;); &lt;/script&gt;&lt;/body&gt;除了Open Street Map可以这样加载外，还有很多其他的在线瓦片地图源也可以，比如高德地图：123456// 高德地图层var gaodeMapLayer = new ol.layer.Tile(&#123; source: new ol.source.XYZ(&#123; url:'http://webst0&#123;1-4&#125;.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;' &#125;)&#125;);比如Yahoo地图：1234567// yahoo地图层var yahooMapLayer = new ol.layer.Tile(&#123; source: new ol.source.XYZ(&#123; tileSize: 512, url:'https://&#123;0-3&#125;.base.maps.api.here.com/maptile/2.1/maptile/newest/normal.day/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;/512/png8?lg=ENG&amp;ppi=250&amp;token=TrLJuXVK62IQk0vuXFzaig%3D%3D&amp;requestid=yahoo.prod&amp;app_id=eAdkWGYRoc4RfxVo0Z4B' &#125;)&#125;);大同小异，非常简单。上面的三个例子，只有Yahoo地图的代码有点不一样：多了tileSize参数的设置。默认情况下，tileSize为256，这也是现在绝大多数瓦片采用的大小。但Yahoo地图使用的是512，所以我们需要显示指定。## 瓦片地图之百度地图通过上面的示例我们已经发现，其实可以非常轻松地加载多种不同来源的在线瓦片地图。但遗憾地是，上面这种简单方法并不适用于所有的在线瓦片地图，总有一些是特殊的，比如百度地图，上面这种方式就不生效了。此时，我们需要回过头来思考一下瓦片地图加载的整个过程：瓦片地图加载的关键在于找对瓦片，但要找对瓦片，就得知道瓦片的坐标，而坐标又需要明确的坐标系。我们在坐标里说过，任何坐标都得有坐标系才有意义。在OpenLayers 3中，默认使用的瓦片地图的坐标系是如何定义的？经分析可知，OpenLayers 3的瓦片坐标系的原点在左上角，向上为y轴正方向，向右为x轴正方向。具体到地图上来讲，地球经过投影，投影到一个平面上，平面最左边对应地球最西边，平面最上边对应地球最北边。原点就处于整个平面的左上角，即地球的西北角，从北向南为y轴负方向，从西向东为x轴正方向。理解这一点非常重要，因为并不是所有在线的瓦片地图都是采用这样的坐标系。用OpenLayers 3加载它们的时候，如果坐标系不同，计算出来的瓦片地址就获取不到对应的瓦片，为解决这个问题，我们必须要先对瓦片坐标进行转换。那么，具体该怎么实现转换？最详细明了的方式还是看实例，下面我们看一下加载百度地图一种实现方式： // 百度地图层 var baiduMapLayer = new ol.layer.Tile({ source: new ol.source.XYZ({ tilePixelRatio: 2, tileUrlFunction: function(tileCoord){ // 参数tileCoord为瓦片坐标 var z = tileCoord[0]; var x = tileCoord[1]; var y = tileCoord[2]; var halfTileNum = Math.pow(2, z-1); var baiduX = x - halfTileNum; var baiduY = y + halfTileNum; if (baiduX &lt; 0) { baiduX = ‘M’ + (-baiduX); } if (baiduY &lt; 0) { baiduY = ‘M’ + (-baiduY); } return ‘http://online2.map.bdimg.com/onlinelabel/?qt=tile&amp;x=&#39; + baiduX + ‘&amp;y=’ + baiduY + ‘&amp;z=’ + z + ‘&amp;styles=pl&amp;udt=20160321&amp;scaler=2&amp;p=0’; } }) }); // 创建地图 var map = new ol.Map({ layers: [ baiduMapLayer ], view: new ol.View({ // 设置成都为地图中心 center: [104.06, 30.67], projection: ‘EPSG:4326’, zoom: 4 }), target: ‘baiduMap’ });代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;div id=\"baiduMap\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script&gt; // 百度地图层 var baiduMapLayer = new ol.layer.Tile(&#123; source: new ol.source.XYZ(&#123; tilePixelRatio: 2, tileUrlFunction: function(tileCoord)&#123; // 参数tileCoord为瓦片坐标 var z = tileCoord[0]; var x = tileCoord[1]; var y = tileCoord[2]; // 计算当前层级下瓦片总数的一半，用于定位整个地图的中心点 var halfTileNum = Math.pow(2, z-1); // 原点移到中心点后，计算xy方向上新的坐标位置 var baiduX = x - halfTileNum; var baiduY = y + halfTileNum; // 百度瓦片服务url将负数使用M前缀来标识 if (baiduX &lt; 0) &#123; baiduX = 'M' + (-baiduX); &#125; if (baiduY &lt; 0) &#123; baiduY = 'M' + (-baiduY); &#125; // 返回经过转换后，对应于百度在线瓦片的url return 'http://online2.map.bdimg.com/onlinelabel/?qt=tile&amp;x=' + baiduX + '&amp;y=' + baiduY + '&amp;z=' + z + '&amp;styles=pl&amp;udt=20160321&amp;scaler=2&amp;p=0'; &#125; &#125;) &#125;); // 创建地图 var map = new ol.Map(&#123; layers: [ baiduMapLayer ], view: new ol.View(&#123; // 设置成都为地图中心 center: [104.06, 30.67], projection: 'EPSG:4326', zoom: 4 &#125;), target: 'baiduMap' &#125;);&lt;/script&gt;和前面几个加载在线瓦片地图的例子不一样的地方在于，我们没有设置url，而是设置了tileUrlFunction，这是一个获取瓦片url的函数，如果自定义这个函数，就可以实现不同坐标系之间的转换，从而返回在线地图服务对应瓦片的url。通过代码可以看到，函数入参是一个瓦片坐标，然后进行一系列的转换，得到百度在线地图的瓦片地址。效果参见上方地图，不妨拖动、缩放试试，拼接无缝，并没有什么问题。tileUrlFunction这个自定义函数的代码实现有可能看不懂，虽然知道在进行坐标转换，但并不知道为什么要这样实现。为了彻底弄明白代码，我们必须得把之前遗漏的一个很重要环节补上：弄明白待加载的在线瓦片地图的坐标系。对百度在线瓦片坐标系进行简单分析发现，它是以某一个位置为原点，向右为x正方向，向上为y正方向的坐标系，进一步分析发现，原点应该在中心位置，为此，我们假设百度地图是以经纬度[0,0]为原点，在此基础上编写函数tileUrlFunction的实现。halfTileNum表示的是在当前缩放层级之下，总的瓦片个数的一半，意味着它就是中心位置。对于baiduX小于0的情况，百度使用了M来表示负号，所以要特殊处理一下。想必这下应该更加理解代码实现了。不同的在线瓦片地图的转换代码可能不同，需要根据对应的坐标系来确定。但上面这个地图并不完美，因为我们设定的地图中心为成都，然而实际上显示的地图中心并不在成都。虽然无缝拼接，但位置偏差有点远。由此基本可以排除坐标转换的问题，看起来应该是OpenLayers 3的分辨率和百度在线瓦片地图使用的分辨率对不上。经过分析发现，确实如此，在网上也有很多分析文章可以查阅。那么我们是否可以重新定义分辨率呢？ 答案是肯定的，我们可以使用ol.source.XYZ的父类来解决问题。## 重新定义OpenLayers 3的瓦片坐标系ol.source.TileImage作为ol.source.XYZ的父类，除了可以转换坐标之外，还具备更加强大的功能，修改分辨率。下面我们使用它来加载百度地图，这次是正确的： // 自定义分辨率和瓦片坐标系 var resolutions = []; var maxZoom = 18; for(var i=0; i&lt;=maxZoom; i++){ resolutions[i] = Math.pow(2, maxZoom-i); } var tilegrid = new ol.tilegrid.TileGrid({ origin: [0,0], resolutions: resolutions }); // 创建百度地图的数据源 var baiduSource = new ol.source.TileImage({ projection: ‘EPSG:3857’, tileGrid: tilegrid, tileUrlFunction: function(tileCoord, pixelRatio, proj){ var z = tileCoord[0]; var x = tileCoord[1]; var y = tileCoord[2]; if(x&lt;0){ x = “M”+(-x); } if(y&lt;0){ y = “M”+(-y); } return “http://online3.map.bdimg.com/onlinelabel/?qt=tile&amp;x=&quot;+x+&quot;&amp;y=&quot;+y+&quot;&amp;z=&quot;+z+&quot;&amp;styles=pl&amp;udt=20160321&amp;scaler=2&amp;p=1&quot;; } }); // 百度地图层 var baiduMapLayer2 = new ol.layer.Tile({ source: baiduSource }); // 创建地图 new ol.Map({ layers: [ baiduMapLayer2 ], view: new ol.View({ // 设置成都为地图中心 center: [104.06, 30.67], projection: ‘EPSG:4326’, zoom: 10 }), target: ‘baiduMap2’ });对应的代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;div id=\"baiduMap2\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script&gt; // 自定义分辨率和瓦片坐标系 var resolutions = []; var maxZoom = 18; // 计算百度使用的分辨率 for(var i=0; i&lt;=maxZoom; i++)&#123; resolutions[i] = Math.pow(2, maxZoom-i); &#125; var tilegrid = new ol.tilegrid.TileGrid(&#123; origin: [0,0], // 设置原点坐标 resolutions: resolutions // 设置分辨率 &#125;); // 创建百度地图的数据源 var baiduSource = new ol.source.TileImage(&#123; projection: 'EPSG:3857', tileGrid: tilegrid, tileUrlFunction: function(tileCoord, pixelRatio, proj)&#123; var z = tileCoord[0]; var x = tileCoord[1]; var y = tileCoord[2]; // 百度瓦片服务url将负数使用M前缀来标识 if(x&lt;0)&#123; x = 'M' + (-x); &#125; if(y&lt;0)&#123; y = 'M' + (-y); &#125; return \"http://online0.map.bdimg.com/onlinelabel/?qt=tile&amp;x=\"+x+\"&amp;y=\"+y+\"&amp;z=\"+z+\"&amp;styles=pl&amp;udt=20160426&amp;scaler=1&amp;p=0\"; &#125; &#125;); // 百度地图层 var baiduMapLayer2 = new ol.layer.Tile(&#123; source: baiduSource &#125;); // 创建地图 new ol.Map(&#123; layers: [ baiduMapLayer2 ], view: new ol.View(&#123; // 设置成都为地图中心 center: ol.proj.transform([104.06, 30.67], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;), target: 'baiduMap2' &#125;);&lt;/script&gt;这个代码同上面的代码相比，引入了ol.tilegrid.TileGrid，由名字可见，这是定义瓦片网格，其实就是瓦片坐标系，构造时需要设定原点，紧接着设置分辨率，其作用在于设定每一地图层级的分辨率。我们是否遗漏了坐标系的正向和负向的设定？默认情况下，从左向右为x正方向，从下向上为y轴正方向。这和我们数学上通常定义的笛卡尔坐标系是一样的，这一点需要大家记住。如代码所示，就可以重新定义OpenLayers 3的瓦片地图坐标系，这种方式的代码比上一种方式更加的可读和简洁。 如果用通用的方法解决不了，请别忘记还有这一强大灵活的处理方式。## 分析瓦片地图坐标系如何分析不同在线瓦片地图的坐标系呢？非常重要的一点是，先从特例出发，找简单的情况分析，比如选择z为2或者3进行分析，这种情况下，瓦片的数量比较少，可以查看整个地球范围内的地图的瓦片请求，注意分析其请求的url参数。上述的所有地图都可以以这样的方式入手来分析，包括百度地图，可以自行尝试该方法。如果你有更好的方法，愿意的话，请给大家一起分享一下。## 解密瓦片url瓦片的url解析对于想直接使用在线瓦片服务的开发者而言，是一项经常要做的事。根据难度，大致可以分为三种情况： 第一种是最简单的，请求瓦片的url明确有xyz参数，比如高德地图和百度地图。 第二种稍微难一点，xyz作为路径直接存在于url里面，没有明确的参数表明哪些是xyz，比如Open Street Map和Yahoo地图，这种情况下，地图服务器接收到请求后，就直接在服务器按照这个路径获取图片，按照这个逻辑，一般第一个参数表示是z，第二个参数为x，第三个参数为y。要想确认是否真是这样，可以写一个小程序来验证一下，如果还有问题，建议按照上面分析地图坐标系中的方法，从z比较小的情况入手来分析x，y，z的位置。 第三种则最难，地图服务提供商为了防止大家直接非法使用瓦片地图，对瓦片的url进行了加密，比如现在的微软Bing中文地图和Google地图，这种情况下只有知道如何解密才能使用。## 加载微软Bing中文地图前面两种url的实例已经有了，此处分享一下第三种情况的url解密，以微软Bing中文地图为例：图中显示的瓦片地图请求的url，没有明显的xyz参数，最有可能的存放xyz参数的地方在于url前面那一串数字，真实情况确实是这样的，经过分析和解码，最终实现了加载Bing中文地图： // Bing中文地图层 var bingMapLayer = new ol.layer.Tile({ source: new ol.source.XYZ({ tilePixelRatio: 2, tileUrlFunction: function(tileCoord){ var z = tileCoord[0]; var x = tileCoord[1]; var y = -tileCoord[2] - 1; var result=’’, zIndex=0; for(; zIndex&lt;z; zIndex++) { result = ((x&amp;1)+2(y&amp;1)).toString() + result; x &gt;&gt;= 1; y &gt;&gt;= 1; } return ‘http://dynamic.t0.tiles.ditu.live.com/comp/ch/&#39; + result + ‘?it=G,VE,BX,L,LA&amp;mkt=zh-cn,syr&amp;n=z&amp;og=111&amp;ur=CN’; } }) }); // 创建地图 var map = new ol.Map({ layers: [ bingMapLayer ], view: new ol.View({ // 设置成都为地图中心 center: [104.06, 30.67], projection: ‘EPSG:4326’, zoom: 10 }), target: ‘bingMap’ });代码如下：1234567891011121314151617181920212223242526272829303132333435&lt;div id=\"bingMap\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script&gt; // Bing中文地图层 var bingMapLayer = new ol.layer.Tile(&#123; source: new ol.source.XYZ(&#123; tileUrlFunction: function(tileCoord)&#123; var z = tileCoord[0]; var x = tileCoord[1]; var y = -tileCoord[2] - 1; var result='', zIndex=0; for(; zIndex&lt;z; zIndex++) &#123; result = ((x&amp;1)+2*(y&amp;1)).toString() + result; x &gt;&gt;= 1; y &gt;&gt;= 1; &#125; return 'http://dynamic.t0.tiles.ditu.live.com/comp/ch/' + result + '?it=G,VE,BX,L,LA&amp;mkt=zh-cn,syr&amp;n=z&amp;og=111&amp;ur=CN'; &#125; &#125;) &#125;); // 创建地图 var map = new ol.Map(&#123; layers: [ bingMapLayer ], view: new ol.View(&#123; // 设置成都为地图中心 center: [104.06, 30.67], projection: 'EPSG:4326', zoom: 10 &#125;), target: 'bingMap' &#125;);&lt;/script&gt;需要注意的是地图数据是非常昂贵的，如果使用某一个在线地图服务，请先核实对方的版权和数据使用申明，不要侵犯对方的权益，按照要求合法使用地图。几乎所有的在线地图服务都提供了响应的服务接口，强烈建议在商用项目中使用这些接口。对于这些接口的使用，服务商都有详细的说明，在此不累述。# google地图加载有许多人都在问google地图加载的问题，因为地图url是加密的，通过分析url，可以采用下面的方式来加载： // google地图层 var googleMapLayer = new ol.layer.Tile({ source: new ol.source.XYZ({ url:’http://www.google.cn/maps/vt/pb=!1m4!1m3!1i{z}!2i{x}!3i{y}!2m3!1e0!2sm!3i345013117!3m8!2szh-CN!3scn!5e1105!12m4!1e68!2m2!1sset!2sRoadmap!4e0&#39; }) }); // 创建地图 var map = new ol.Map({ layers: [ googleMapLayer ], view: new ol.View({ // 设置成都为地图中心 center: [104.06, 30.67], projection: ‘EPSG:4326’, zoom: 10 }), target: ‘googleMap’ });代码如下：1234567891011121314151617181920212223&lt;div id=\"googleMap\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script&gt; // google地图层 var googleMapLayer = new ol.layer.Tile(&#123; source: new ol.source.XYZ(&#123; url:'http://www.google.cn/maps/vt/pb=!1m4!1m3!1i&#123;z&#125;!2i&#123;x&#125;!3i&#123;y&#125;!2m3!1e0!2sm!3i345013117!3m8!2szh-CN!3scn!5e1105!12m4!1e68!2m2!1sset!2sRoadmap!4e0' &#125;) &#125;); // 创建地图 var map = new ol.Map(&#123; layers: [ googleMapLayer ], view: new ol.View(&#123; // 设置成都为地图中心 center: [104.06, 30.67], projection: 'EPSG:4326', zoom: 10 &#125;), target: 'googleMap' &#125;);&lt;/script&gt;至此，关于通用瓦片地图加载的秘籍就介绍完毕，希望大家都掌握了。# 加载离线瓦片地图其实离线瓦片地图和在线瓦片地图是一样的原理，都是瓦片，只是离线瓦片地图的存取方式，是由开发者自己来定义的，而在线瓦片地图则不一定。 在不理解原理的情况下，很多人拥有了离线瓦片，却不知道如何加载，所以这里单独列出一个小节来讲解。在很早之前，我在github上放出了一个加载离线瓦片的地图demo，现在还是使用这个demo来讲解： // 地图设置中心，设置到成都，在本地离线地图 offlineMapTiles刚好有一张zoom为4的成都瓦片 var center = ol.proj.transform([104.06667, 30.66667], ‘EPSG:4326’, ‘EPSG:3857’); //创建地图 var map = new ol.Map({ view: new ol.View({ center: center, zoom: 4 }), target: ‘map’ }); // 添加一个使用离线瓦片地图的层 var offlineMapLayer = new ol.layer.Tile({ source: new ol.source.XYZ({ // 设置本地离线瓦片所在路径，由于例子里面只有一张瓦片，页面显示时就只看得到一张瓦片。 url: ‘../src/05-04/offlineMapTiles/{z}/{x}/{y}.png’ }) }); map.addLayer(offlineMapLayer);只是演示效果，所以瓦片就只有1张。 如果放大或者缩小，就可能看不到地图瓦片了。 先看代码：12345678910111213141516171819202122232425&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; // 地图设置中心，设置到成都，在本地离线地图 offlineMapTiles刚好有一张zoom为4的成都瓦片 var center = ol.proj.transform([104.06667, 30.66667], 'EPSG:4326', 'EPSG:3857'); //创建地图 var map = new ol.Map(&#123; view: new ol.View(&#123; center: center, zoom: 4 &#125;), target: 'map' &#125;); // 添加一个使用离线瓦片地图的层 var offlineMapLayer = new ol.layer.Tile(&#123; source: new ol.source.XYZ(&#123; // 设置本地离线瓦片所在路径，由于例子里面只有一张瓦片，页面显示时就只看得到一张瓦片。 url: '../src/05-04/offlineMapTiles/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png' &#125;) &#125;); map.addLayer(offlineMapLayer);&lt;/script&gt;代码很简单，就不再做任何说明，参照注释。 这个例子中唯一的瓦片图片相对路径是： offlineMapTiles/4/12/6.png。 在开发时，会考虑这样一个问题： 是先在代码里面写url，还是先在本地放好瓦片地图？ 我建议瓦片地图数据优先，而且很多瓦片地图都是工具下载的，量大，如果需要修改目录结构，会比较费事。相对的，修改url的代码明显就要简单很多。url必须根据瓦片地图存放路径来编写，比如这个例子里面，4表示的是层级，12表示的是x，6表示的是y，我们的url参数就写成： {z}/{x}/{y}.png。 如果瓦片地图都放在一个目录下，采用z-x-y.png的方式命名，那么url参数就得写成： {z}-{x}-{y}.png。在上一节中，我们提到过，瓦片地图最主要的是要考虑瓦片的坐标系和分辨率，对于离线瓦片地图也同样成立。 在使用之前，你必须要了解清楚这一点，方能正确加载和使用。## 常见问题&gt; Q: 为什么本地有离线瓦片地图，但在网页中没有显示地图？&gt; A: 存在多种原因可能导致这个问题的出现，你需要逐一检查：&gt; 打开开发者工具，检查一下代码是否有错误提示。&gt; 检查一下HTTP请求的瓦片地址是否正确。&gt; 检查一下离线瓦片地图，是否包含了当前地图显示层级的瓦片地图。&gt; 检查一下离线瓦片地图的整个区域，是否包含了当前地图设置的中心点。&gt; 检查一下地图使用的坐标系，是否正确。 OpenLayers 3默认使用的是mercator，而不是wgs84。所以如果中心点想设置为经度30度，纬度30度，就需要显示设置projection: &#39;EPSG:4326&#39;，或者使用ol.proj.transform([30, 30], &#39;EPSG:4326&#39;, &#39;EPSG:3857&#39;)进行转换。同一个坐标，不同的坐标系，位置可能截然不同。&gt; Q: 为什么加载的地图有瓦片错位，拼接不上？&gt; A: 检查一下离线瓦片地图的坐标系，是否和OpenLayers 3默认的坐标系不一致，如果不一致，请按照上一小节的处理方式处理。# 静态地图及应用此处说的静态地图指没有经过地理投影什么的普通地图，比如一些规划图，室内建筑图，平面示意图等等，这些图一般都不会很大，但常用于一些演示系统中。 会涉及到一些简单的定位，标注等。 OpenLayers 3也充分考虑到了这样的需求，提供了对应的source类： ol.source.ImageStatic。 示例请看下面这个地图，显示的是成都熊猫基地的平面图： // 地图设置中心，设置到成都，在本地离线地图 offlineMapTiles刚好有一张zoom为4的成都瓦片 var center = ol.proj.transform([104.06667, 30.66667], ‘EPSG:4326’, ‘EPSG:3857’); // 计算熊猫基地地图映射到地图上的范围，图片像素为 550344，保持比例的情况下，把分辨率放大一些 var extent = [center[0]- 5501000/2, center[1]-3441000/2, center[0]+5501000/2, center[1]+3441000/2]; //创建地图 var map = new ol.Map({ view: new ol.View({ center: center, zoom: 7 }), target: ‘map’ }); // 加载熊猫基地静态地图层 map.addLayer(new ol.layer.Image({ source: new ol.source.ImageStatic({ url: ‘../img/pandaBase.jpg’, // 熊猫基地地图 imageExtent: extent // 映射到地图的范围 }) }));因为应用于OpenLayers 3中，所以地图可以放大缩小，具备相应的功能，对于演示而言，无疑加快了开发效率。 对应的代码如下：12345678910111213141516171819202122232425&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; // 地图设置中心，设置到成都，在本地离线地图 offlineMapTiles刚好有一张zoom为4的成都瓦片 var center = ol.proj.transform([104.06667, 30.66667], 'EPSG:4326', 'EPSG:3857'); // 计算熊猫基地地图映射到地图上的范围，图片像素为 550*344，保持比例的情况下，把分辨率放大一些 var extent = [center[0]- 550*1000/2, center[1]-344*1000/2, center[0]+550*1000/2, center[1]+344*1000/2]; //创建地图 var map = new ol.Map(&#123; view: new ol.View(&#123; center: center, zoom: 7 &#125;), target: 'map' &#125;); // 加载熊猫基地静态地图层 map.addLayer(new ol.layer.Image(&#123; source: new ol.source.ImageStatic(&#123; url: '../img/pandaBase.jpg', // 熊猫基地地图 imageExtent: extent // 映射到地图的范围 &#125;) &#125;));&lt;/script&gt;代码中有详细注释，可帮助理解，要应用静态地图，需要注意设置图片在地图中占据的extent。 如果没有这个设置，图片就不能和位置关联在一起，也就不能应用于OpenLayers 3中。 大家肯定非常关心extent的计算[center[0]- 550*1000/2, center[1]-344*1000/2, center[0]+550*1000/2, center[1]+344*1000/2]，为什么这样计算？ 这个地方我想让图片本身的大小和地理范围产生联系，图片的大小为550344像素，在此基础上同比放大1000倍，作地理范围。当然也可以不用放大，直接作为地理范围，只是这样需要放大地图到很高的层级才能看到它。 有了这样的映射关系后，图片能保持长宽比不变，从而不变形。 为什么引入center，除以2相关的计算？ 这是一个简单计算，目的在于设置图片显示在地图中心。把地图加载出来只是第一步，我们最重要的是在地图上定位，并处理相应的业务。比如我们希望在图片[390,145]像素位置添加一个活动图标表示这个地方有现场活动，就像下面这样： // 地图设置中心，设置到成都，在本地离线地图 offlineMapTiles刚好有一张zoom为4的成都瓦片 var center2 = ol.proj.transform([104.06667, 30.66667], ‘EPSG:4326’, ‘EPSG:3857’); // 计算熊猫基地地图映射到地图上的范围，图片像素为 550344，保持比例的情况下，把分辨率放大一些 var extent2 = [center[0]- 5501000/2, center[1]-3441000/2, center[0]+5501000/2, center[1]+3441000/2]; //创建地图 var map2 = new ol.Map({ view: new ol.View({ center: center, zoom: 7 }), target: ‘map2’ }); // 加载熊猫基地静态地图层 map2.addLayer(new ol.layer.Image({ source: new ol.source.ImageStatic({ url: ‘../img/pandaBase.jpg’, // 熊猫基地地图 imageExtent: extent2 // 映射到地图的范围 }) })); var activityLayer = new ol.layer.Vector({ source: new ol.source.Vector() }); var activity = new ol.Feature({ geometry: new ol.geom.Point([center[0]- 5501000/2 + 390 1000, center[1]-3441000/2 + (344 - 145) 1000]) }) activity.setStyle(new ol.style.Style({ image: new ol.style.Icon({ src: ‘../img/flag_right.png’, anchor: [0, 1], scale: 0.2 }) })); activityLayer.getSource().addFeature(activity); map2.addLayer(activityLayer);看到地图上的小旗帜没有，它就是新加上去的活动图标。 那么我们是如何做到的呢：123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;div id=\"map2\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; // 地图设置中心，设置到成都，在本地离线地图 offlineMapTiles刚好有一张zoom为4的成都瓦片 var center2 = ol.proj.transform([104.06667, 30.66667], 'EPSG:4326', 'EPSG:3857'); // 计算熊猫基地地图映射到地图上的范围，图片像素为 550*344，保持比例的情况下，把分辨率放大一些 var extent2 = [center[0]- 550*1000/2, center[1]-344*1000/2, center[0]+550*1000/2, center[1]+344*1000/2]; //创建地图 var map2 = new ol.Map(&#123; view: new ol.View(&#123; center: center, zoom: 7 &#125;), target: 'map2' &#125;); // 加载熊猫基地静态地图层 map2.addLayer(new ol.layer.Image(&#123; source: new ol.source.ImageStatic(&#123; url: '../img/pandaBase.jpg', // 熊猫基地地图 imageExtent: extent2 // 映射到地图的范围 &#125;) &#125;)); // 创建一个用于放置活动图标的layer var activityLayer = new ol.layer.Vector(&#123; source: new ol.source.Vector() &#125;); // 创建一个活动图标需要的Feature，并设置位置 var activity = new ol.Feature(&#123; geometry: new ol.geom.Point([center[0]- 550*1000/2 + 390 * 1000, center[1]-344*1000/2 + (344 - 145) * 1000]) &#125;) // 设置Feature的样式，使用小旗子图标 activity.setStyle(new ol.style.Style(&#123; image: new ol.style.Icon(&#123; src: '../img/flag_right.png', anchor: [0, 1], scale: 0.2 &#125;) &#125;)); // 添加活动Feature到layer上，并把layer添加到地图中 activityLayer.getSource().addFeature(activity); map2.addLayer(activityLayer);&lt;/script&gt;注释足够帮助大家理解代码意图，我想最关键的在于activity这个feature的位置为什么要这样计算： [center[0]- 550*1000/2 + 390 * 1000, center[1]-344*1000/2 + (344 - 145) * 1000]。 如果翻译成下面这样，你可能会更容易理解：extentLeft+picX, extentTop+picY，此处的picX和picY显然是需要在图片像素位置的基础上放大1000倍，才能对应于地理位置。 [center[0]- 550*1000/2对应的就是extentLeft, center[1]-344*1000/2对应的是extentBottom，并不是extentTop，所以我们要做一个简单的计算(344 - 145) * 1000，而不是直接用145*1000。从图片的像素坐标转换为地图的地理坐标，关键在于通过像素大小，映射到一个地理的extent，希望能理解这个过程。 在此基础上，就能充分应用OpenLayers 3的功能了。对于图片比较大的情况，可以自行切片，然后分片加载，从而拼成一整张地图，可按照上面的方法自行尝试，作为课后练习。# 加载WMS服务地图# 矢量地图矢量图使用直线和曲线来描述图形，这些图形的元素是一些点、线、矩形、多边形、圆和弧线等等，它们都是通过数学公式计算获得的。由于矢量图形可通过公式计算获得，所以矢量图形文件体积一般较小。矢量图形最大的优点是无论放大、缩小或旋转等不会失真。在地图中存在着大量的应用，是地图数据中非常重要的组成部分。为了便于存储，传递，使用，矢量地图会按照一定的格式来表达，比如常见的GeoJSON，TopoJSON，GML，KML，ShapeFile等等。 除了最后一个ShapeFile，其他几个格式的矢量地图OpenLayers 3都支持，使用起来也是非常的简单，下面这个地图就加载了GeoJSON格式的矢量地图。 //创建地图 var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), new ol.layer.Vector({ source: new ol.source.Vector({ url: ‘../data/geojson/line-samples.geojson’, format: new ol.format.GeoJSON() }) }) ], view: new ol.View({ center: [-72.980624870461128, 48.161307640513321], zoom: 8, projection: ‘EPSG:4326’ }), target: ‘map’ });代码非常简单：1234567891011121314151617181920212223242526&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; //创建地图 var map = new ol.Map(&#123; layers: [ // 底图用Open Street Map 地图 new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), // 再加载一个geojson的矢量地图 new ol.layer.Vector(&#123; source: new ol.source.Vector(&#123; url: '../data/geojson/line-samples.geojson', // 地图来源 format: new ol.format.GeoJSON() // 解析矢量地图的格式化类 &#125;) &#125;) ], view: new ol.View(&#123; center: [-72.980624870461128, 48.161307640513321], zoom: 8, projection: 'EPSG:4326' &#125;), target: 'map' &#125;);&lt;/script&gt;注释对代码进行了很好的说明，但有两点需要进一步说明： 加载矢量图使用的source是ol.source.Vector, layer是ol.layer.Vector，不要错误的使用。 加载代码之所以这么简单，是因为OpenLayers 3内置了对应矢量地图格式的解析类，比如ol.format.GeoJSON。 它们都位于包ol.format下面，可以在API官方文档中查询得到。 如果是shapefile这种不支持的，则需要自己解析。 解析后，矢量地图都会转换为对应于OpenLayers 3中的feature。 所以，当加载完成后，可以通过source的getFeatures方法来获取所有的矢量图形。 需要注意坐标系，因为.geojson文档里用的是和当前地图用的不一样的坐标系。对于不同格式的矢量地图，会有相应的一些不同用法，下面就针对一些大家经常会遇到的问题，给出相应的实例，用以说明。# 获取加载后的所有feature这是一个很多人会遇到的问题，因为在加载矢量地图后，需要对矢量地图做一些简单的查询，分析等。 但是经常会遇到获取不到加载后的feature的问题。 原因就在于获取的时机不对，因为矢量地图是异步加载的。 下面就看一下正确的获取所有feature的做法是什么： 矢量地图Feature总数： //创建地图 var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], view: new ol.View({ center: [-72.980624870461128, 48.161307640513321], zoom: 8, projection: ‘EPSG:4326’ }), target: ‘map’ }); var vectorLayer = new ol.layer.Vector({ source: new ol.source.Vector({ url: ‘../data/geojson/line-samples.geojson’, format: new ol.format.GeoJSON() }) }); var listenerKey = vectorLayer.getSource().on(‘change’, function(){ if (vectorLayer.getSource().getState() === ‘ready’) { document.getElementById(‘count’).innerHTML = vectorLayer.getSource().getFeatures().length; vectorLayer.getSource().unByKey(listenerKey); } }); map.addLayer(vectorLayer);从图上可以看到，共有9个feature， 在地图下方的统计数据也是9。 下面看看代码是如何实现的：12345678910111213141516171819202122232425262728293031323334353637&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;div&gt;矢量地图Feature总数： &lt;span id=\"count\"&gt;&lt;/span&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; //创建地图 var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], view: new ol.View(&#123; center: [-72.980624870461128, 48.161307640513321], zoom: 8, projection: 'EPSG:4326' &#125;), target: 'map' &#125;); var vectorLayer = new ol.layer.Vector(&#123; source: new ol.source.Vector(&#123; url: '../data/geojson/line-samples.geojson', format: new ol.format.GeoJSON() &#125;) &#125;); // 因为是异步加载，所以要采用事件监听的方式来判定是否加载完成 var listenerKey = vectorLayer.getSource().on('change', function()&#123; if (vectorLayer.getSource().getState() === 'ready') &#123; // 判定是否加载完成 document.getElementById('count').innerHTML = vectorLayer.getSource().getFeatures().length; vectorLayer.getSource().unByKey(listenerKey); // 注销监听器 &#125; &#125;); map.addLayer(vectorLayer); // 如果在此处调用vectorLayer.getSource().getFeatures()是完全有可能获取不到任何Feature的，这是常犯错误&lt;/script&gt;对于其他格式的矢量地图加载也需要这样编写代码，才能正确获取到加载完成的所有feature。# 坐标转换坐标转换也是矢量地图经常会遇到的问题，比如当前地图用的是EPSG:3857，但是矢量地图用的是EPSG:4326，这样就需要进行坐标转换。 由于OpenLayers 3为我们内置了地图格式解析器，那么自然只能依靠它来处理。 上一节中使用的.geojson文件内的坐标使用的是wgs84坐标，那么如果我们地图使用EPSG:3857，该怎么来加载？ //创建地图 var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), ], view: new ol.View({ center: ol.proj.fromLonLat([-72.980624870461128, 48.161307640513321]), zoom: 8 }), target: ‘map’ }); function addGeoJSON(src) { var layer = new ol.layer.Vector({ source: new ol.source.Vector({ features: (new ol.format.GeoJSON()).readFeatures(src, { dataProjection: ‘EPSG:4326’, featureProjection: ‘EPSG:3857’ }) }) }); map.addLayer(layer); } $.ajax({ url: ‘../data/geojson/line-samples.geojson’, success: function(data, status) { addGeoJSON(data); } });详细实现参见代码：12345678910111213141516171819202122232425262728293031323334353637383940&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; //创建地图 var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), ], view: new ol.View(&#123; center: ol.proj.fromLonLat([-72.980624870461128, 48.161307640513321]), zoom: 8 &#125;), target: 'map' &#125;); // 加载矢量地图 function addGeoJSON(src) &#123; var layer = new ol.layer.Vector(&#123; source: new ol.source.Vector(&#123; features: (new ol.format.GeoJSON()).readFeatures(src, &#123; // 用readFeatures方法可以自定义坐标系 dataProjection: 'EPSG:4326', // 设定JSON数据使用的坐标系 featureProjection: 'EPSG:3857' // 设定当前地图使用的feature的坐标系 &#125;) &#125;) &#125;); map.addLayer(layer); &#125; // 使用ajax获取矢量地图数据 $.ajax(&#123; url: '../data/geojson/line-samples.geojson', success: function(data, status) &#123; // 成功获取到数据内容后，调用方法添加到地图 addGeoJSON(data); &#125; &#125;);&lt;/script&gt;代码稍微麻烦了一点，是因为目前ol.format.GeoJSON的构造参数不支持设定创建feature的坐标系，如果要支持也并不麻烦，期望后续官网能够改进。注意，该方法可以适用于其他几种矢量地图。readFeatures这个方法在内置的几个解析类中都有。# 样式设置对矢量元素进行样式设置，OpenLayers3 支持两种方式，一种是直接给feature设置样式，一种是给layer设置样式。系统默认优先考虑feature的样式，如果没有，则使用layer的样式，还有一种情况是layer也没有设置样式，则会采用系统默认的样式。对于矢量地图而言，要想修改样式也只有这两种途径可选。比如之前例子中使用的GeoJSON，如果要改变线条的颜色成下面这样，可以考虑在layer上设置样式： //创建地图 var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], view: new ol.View({ center: [-72.980624870461128, 48.161307640513321], zoom: 8, projection: ‘EPSG:4326’ }), target: ‘map’ }); var vectorLayer = new ol.layer.Vector({ source: new ol.source.Vector({ url: ‘../data/geojson/line-samples.geojson’, format: new ol.format.GeoJSON() }), style: new ol.style.Style({ stroke: new ol.style.Stroke({ color: ‘red’, size: 1 }) }) }); map.addLayer(vectorLayer);代码很简单：12345678910111213141516171819202122232425262728293031323334&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; //创建地图 var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], view: new ol.View(&#123; center: [-72.980624870461128, 48.161307640513321], zoom: 8, projection: 'EPSG:4326' &#125;), target: 'map' &#125;); var vectorLayer = new ol.layer.Vector(&#123; source: new ol.source.Vector(&#123; url: '../data/geojson/line-samples.geojson', format: new ol.format.GeoJSON() &#125;), // 设置样式，颜色为红色，线条粗细为1个像素 style: new ol.style.Style(&#123; stroke: new ol.style.Stroke(&#123; color: 'red', size: 1 &#125;) &#125;) &#125;); map.addLayer(vectorLayer);&lt;/script&gt;如果要在feature上设置样式，就必须先获取到所有加载的feature，然后依次设置，显然直接设置layer的样式，会在代码编写上更容易一些。## 自带样式的矢量地图修改样式有些矢量地图数据自带样式，比如KML格式的矢量地图，如果要修改样式，则相对比较麻烦。得分情况考虑： 一种是所有矢量地图都不使用自带的样式；* 一种是部分矢量地图不使用自带的样式。对于第一种情况，则相对比较简单一些，只需要把ol.format.KML的构造参数extractStyles设置为false即可，然后为layer设定自定义的样式。对于第二种情况，则相对麻烦一些，必须要读取加载的所有feature，并进行过滤，对符合条件的feature重新设置样式。# 图层叠加及管理分层管理是GIS渲染引擎及其他图形系统常用的策略，为业务的应用提高了较大的适用性。比如更换地图底图，不能影响在上地图上添加的一些标注。如果把地图底图和标注分开，放在不同的图层上，就很容易解决这个问题。有了图层的概念，自然需要对图层进行控制，比如增删改查等，图层之间的顺序，图层可见度等等。这些都是大家经常会遇到的问题。下面先来看一下三个图层叠加的情况： 显示/隐藏： 底图 圆 点 图层顺序： 底图最上 圆最上 点最上 // 创建3个图层 var osmLayer = new ol.layer.Tile({ source: new ol.source.OSM() }); var pointLayer = new ol.layer.Vector({ source: new ol.source.Vector() }); var circleLayer = new ol.layer.Vector({ source: new ol.source.Vector() }); var map = new ol.Map({ layers: [osmLayer, pointLayer, circleLayer], view: new ol.View({ center: [0, 0], zoom: 2 }), target: ‘map’ }); // 添加点 var point = new ol.Feature({ geometry: new ol.geom.Point([0, 0]) }); point.setStyle(new ol.style.Style({ image: new ol.style.Circle({ radius: 1, fill: new ol.style.Fill({ color: ‘red’ }), stroke: new ol.style.Stroke({ color: ‘red’, size: 1 }) }) })); pointLayer.getSource().addFeature(point); // 添加圆 var circle = new ol.Feature({ geometry: new ol.geom.Point([0, 0]) }); circle.setStyle(new ol.style.Style({ image: new ol.style.Circle({ radius: 10, stroke: new ol.style.Stroke({ color: ‘blue’, size: 1 }) }) })); circleLayer.getSource().addFeature(circle); function checkOsm(elem) { osmLayer.setVisible(elem.checked); } function checkPoint(elem) { pointLayer.setVisible(elem.checked); } function checkCircle(elem) { circleLayer.setVisible(elem.checked); } function upOsm (elem) { if (elem.checked) { osmLayer.setZIndex(3); circleLayer.setZIndex(circleLayer.getZIndex()-1); pointLayer.setZIndex(pointLayer.getZIndex()-1); } } function upCircle (elem) { if (elem.checked) { circleLayer.setZIndex(3); osmLayer.setZIndex(osmLayer.getZIndex()-1); pointLayer.setZIndex(pointLayer.getZIndex()-1); } } function upPoint(elem) { if (elem.checked) { pointLayer.setZIndex(3); osmLayer.setZIndex(osmLayer.getZIndex()-1); circleLayer.setZIndex(circleLayer.getZIndex()-1); } } 上面这个地图示范了显示和隐藏的控制，以及图层顺序的控制。可以勾选上面的复选框和单选框试试。具体实现，参见下面的代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;div&gt; 显示/隐藏： &lt;input type=\"checkbox\" checked=\"checked\" onclick=\"checkOsm(this);\" /&gt;底图 &lt;input type=\"checkbox\" checked=\"checked\" onclick=\"checkCircle(this);\"/&gt;圆 &lt;input type=\"checkbox\" checked=\"checked\" onclick=\"checkPoint(this);\"/&gt;点&lt;/div&gt;&lt;div&gt; 图层顺序： &lt;input name=\"seq\" type=\"radio\" value=\"\" onclick=\"upOsm(this);\" /&gt;底图最上 &lt;input name=\"seq\" type=\"radio\" value=\"\" checked=\"checked\" onclick=\"upCircle(this);\"/&gt;圆最上 &lt;input name=\"seq\" type=\"radio\" value=\"\" onclick=\"upPoint(this);\"/&gt;点最上&lt;/div&gt;&lt;script&gt; // 创建3个图层 var osmLayer = new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;); var pointLayer = new ol.layer.Vector(&#123; source: new ol.source.Vector() &#125;); var circleLayer = new ol.layer.Vector(&#123; source: new ol.source.Vector() &#125;); new ol.Map(&#123; // 在地图上添加上面创建的三个图层，图层顺序自下而上，依次是osm，point，circle layers: [osmLayer, pointLayer, circleLayer], view: new ol.View(&#123; center: [0, 0], zoom: 2 &#125;), target: 'map' &#125;); // 添加点 var point = new ol.Feature(&#123; geometry: new ol.geom.Point([0, 0]) &#125;); point.setStyle(new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 1, fill: new ol.style.Fill(&#123; color: 'red' &#125;), stroke: new ol.style.Stroke(&#123; color: 'red', size: 1 &#125;) &#125;) &#125;)); pointLayer.getSource().addFeature(point); // 添加圆 var circle = new ol.Feature(&#123; geometry: new ol.geom.Point([0, 0]) &#125;); circle.setStyle(new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 10, stroke: new ol.style.Stroke(&#123; color: 'blue', size: 1 &#125;) &#125;) &#125;)); circleLayer.getSource().addFeature(circle); // 隐藏显示osm图层 function checkOsm(elem) &#123; osmLayer.setVisible(elem.checked); &#125; // 隐藏显示point图层 function checkPoint(elem) &#123; pointLayer.setVisible(elem.checked); &#125; // 隐藏显示circle图层 function checkCircle(elem) &#123; circleLayer.setVisible(elem.checked); &#125; // 置顶osm图层到最上面 function upOsm (elem) &#123; if (elem.checked) &#123; osmLayer.setZIndex(3); circleLayer.setZIndex(circleLayer.getZIndex()-1); pointLayer.setZIndex(pointLayer.getZIndex()-1); &#125; &#125; // 置顶circle图层到最上面 function upCircle (elem) &#123; if (elem.checked) &#123; circleLayer.setZIndex(3); osmLayer.setZIndex(osmLayer.getZIndex()-1); pointLayer.setZIndex(pointLayer.getZIndex()-1); &#125; &#125; // 置顶point图层到最上面 function upPoint(elem) &#123; if (elem.checked) &#123; pointLayer.setZIndex(3); osmLayer.setZIndex(osmLayer.getZIndex()-1); circleLayer.setZIndex(circleLayer.getZIndex()-1); &#125; &#125;&lt;/script&gt; 简而言之，就是可以利用方法setVisible和setZIndex来控制图层，满足80%的这种需求。 除此之外，大家也可以使用很早之前使用的一种方式来实现管理，即删除/添加图层，参见最简单的加载在线地图。 openlayers3瓦片加载的源码浅析与小结–感谢作者：老羽 (QQ：274103592, 邮箱：michael.zy@163.com, 简书：老羽 ) 一、类图与逻辑 上图中列了关于瓦片图层加载相关的重要方法。 Map对象初始化时根据options.renderer创建ol.renderer.Map的实例，默认是ol.renderer.canvas.Map； ol.render.canvas.Map实现了抽象方法createLayerRenderer，这是一个简单工厂，根据不同的图层创建对应的ol.renderer.Layer。其中ol.layer.Tile对应的就是ol.renderer.canvas.TileLayer； ol.renderer.canvas.TileLayer.prepareFrame调用source对应的TileGrid.getTileRangeForExtentAndResolution获取可视范围内的瓦片范围，并循环遍历加载瓦片； TileGrid在初始化时就计算出了对应layer的所有瓦片范围： calculateTileRanges_-》循环遍历resolutions_，调用getTileRangeForExtentAndZ，根据extent计算瓦片范围； getTileRangeForExtentAndResolution计算瓦片的范围： 1234567891011121314151617181920212223242526272829303132333435363738394041424344ol.tilegrid.TileGrid.prototype.getTileRangeForExtentAndResolution = function( extent, resolution, opt_tileRange) &#123; var tileCoord = ol.tilegrid.TileGrid.tmpTileCoord_; // 根据extent的左下角的计算瓦片坐标； this.getTileCoordForXYAndResolution_( extent[0], extent[1], resolution, false, tileCoord); var minX = tileCoord[1]; var minY = tileCoord[2]; // 根据extent的右上角的计算瓦片坐标； this.getTileCoordForXYAndResolution_( extent[2], extent[3], resolution, true, tileCoord); // 得到某个resolution级别下的瓦片范围（左下角瓦片坐标 - 右上角瓦片坐标） return ol.TileRange.createOrUpdate( minX, tileCoord[1], minY, tileCoord[2], opt_tileRange); &#125;;// 根据extent左下角及右上角的坐标-origin后得到地图的长宽 / resolution得到像素值；// 然后 / tileSize 得到需要多少张瓦片；// 当计算extent右上角的瓦片坐标时，因为瓦片坐标是从0开始计算，当瓦片数量为例如1.5此类小数时，// 应该是2张瓦片，从0开始计算，那么XY就应该向下取整，取1；0，1两张瓦片；ol.tilegrid.TileGrid.prototype.getTileCoordForXYAndResolution_ = function( x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) &#123; var z = this.getZForResolution(resolution); var scale = resolution / this.getResolution(z); var origin = this.getOrigin(z); var tileSize = ol.size.toSize(this.getTileSize(z), this.tmpSize_); var adjustX = reverseIntersectionPolicy ? 0.5 : 0; var adjustY = reverseIntersectionPolicy ? 0 : 0.5; var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX); var yFromOrigin = Math.floor((y - origin[1]) / resolution + adjustY); var tileCoordX = scale * xFromOrigin / tileSize[0]; var tileCoordY = scale * yFromOrigin / tileSize[1]; if (reverseIntersectionPolicy) &#123; tileCoordX = Math.ceil(tileCoordX) - 1; tileCoordY = Math.ceil(tileCoordY) - 1; &#125; else &#123; tileCoordX = Math.floor(tileCoordX); tileCoordY = Math.floor(tileCoordY); &#125; return ol.tilecoord.createOrUpdate(z, tileCoordX, tileCoordY, opt_tileCoord);&#125;; 二、各种瓦片加载的小结通过上述分析后，应该能较好的理解瓦片的坐标是如何计算的，当应用到不同的地图瓦片加载时就可以得心应手。以下通过不同的几种类型继续说明瓦片计算的方式： 1、TMS瓦片加载先看看TMS瓦片的规则，origin在左下角，X轴从左至右递增，Y轴从下往上递增（先计算左下角，然后计算右上角）。 而TileGrid设置origin为ol.extent.getBottomLeft(extent)后，规则也是从左下角到右上角，X轴从左至右递增，Y轴从下往上递增，与TMS规则是完全一致的，参考代码与参考效果如下： 1234567891011121314151617181920212223242526272829303132333435363738var resolutions = [];var tileSize = 256;var extent = [12665080.52765571, 2550703.6338763316, 12725465.780000998, 2601457.820657688]; //深圳地区var projection = new ol.proj.get(\"EPSG:3857\");var projectionExtent = projection.getExtent();for (var i = 0; i &lt; 19; i++) &#123; resolutions[i] = Math.pow(2, 18 - i);&#125; var tilegrid = new ol.tilegrid.TileGrid(&#123; origin: ol.extent.getBottomLeft(projectionExtent), resolutions: resolutions, extent: projectionExtent,//extent, tileSize: [256, 256],&#125;); var map = new ol.Map(&#123; target: \"map\", layers: [ // 调试瓦片 new ol.layer.Tile(&#123; source: new ol.source.TileDebug(&#123; projection: projection, tileGrid: tilegrid, tileSize: [256, 256], extent : projectionExtent, wrapX: false &#125;), &#125;) ], view: new ol.View(&#123; projection: projection, center: [12697184.079535482, 2563239.3065151004],//深圳 resolutions: resolutions, &#125;),&#125;);map.getView().setZoom(1); 假如上面代码中，我想只显示深圳地区的瓦片，其余的瓦片不显示，这种场景是很普遍的，那么代码调整如下： 123456789101112131415161718var tilegrid = new ol.tilegrid.TileGrid(&#123; origin: ol.extent.getBottomLeft(projectionExtent), //origin位置不能变！！！！！！ resolutions: resolutions, extent: extent,//projectionExtent //设置extent为深圳片区的extent； tileSize: [256, 256],&#125;);// ..................// 调试瓦片new ol.layer.Tile(&#123; source: new ol.source.TileDebug(&#123; projection: projection, tileGrid: tilegrid, extent: extent,//projectionExtent //设置extent为深圳片区的extent； wrapX: false &#125;),&#125;) 2、WMTS瓦片加载WMTS规则如下，origin在左上角，X轴从左至右递增，Y轴是从上往下递增（先计算左上角，然后计算右下角） 那么将tileGrid设置origin为ol.extent.getTopLeft(projectionExtent), 但是TileGrid始终都是先计算左下角的瓦片坐标，然后计算右上角的瓦片坐标，因此Y轴是相反的。那么修改Y轴坐标就可以得到正确值： 123456789101112131415161718192021222324var tilegrid = new ol.tilegrid.TileGrid(&#123; origin: ol.extent.getTopLeft(projectionExtent), // WMTS Origin在左上角，origin位置不能变； resolutions: resolutions, extent: extent, tileSize: [256, 256],&#125;); // 其余代码略.....new ol.layer.Tile(&#123; source: new ol.source.TileImage(&#123; projection: projection, tileGrid: tilegrid(), tileUrlFunction: function (tileCoord, pixelRatio, proj) &#123; if (!tileCoord) &#123; return \"\"; &#125; var z = tileCoord[0]; var x = tileCoord[1]; var y = -tileCoord[2] - 1; // y轴取反，-1目的是为了从0开始计数； return ''; // 自行设置URL ，请注意 WMTS中用TileRow标识Y，用TileCol表示X； &#125; &#125;),&#125;) 3、百度地图瓦片加载百度瓦片片规则如下：Origin在[0,0]，X轴从左至右递增，Y轴从下往上递增（从左下角到右上角）。 从百度的瓦片规则看出来，与TileGrid的规则是完全一致，将origin设置为[0,0]即可。参考代码如下：1234567891011121314151617181920212223242526 var tilegrid = new ol.tilegrid.TileGrid(&#123; origin: [0, 0], resolutions: resolutions, extent: extent,//projectionExtent, tileSize: [256, 256], &#125;);var tilesource = new ol.source.TileImage(&#123; projection: projection, tileGrid: tilegrid, tileUrlFunction: function (xyz, obj1, obj2) &#123; if (!xyz) &#123; return \"\"; &#125; var z = xyz[0]+ 11; // 从第11级开始加载；深圳地区； var x = xyz[1]; var y = xyz[2]; if (x &lt; 0) &#123; x = \"M\" + (-x); &#125; if (y &lt; 0) &#123; y = \"M\" + (-y); &#125; return \"http://online3.map.bdimg.com/tile/?qt=tile&amp;x=\" + x + \"&amp;y=\" + y + \"&amp;z=\" + z + \"&amp;styles=pl&amp;udt=20141119&amp;scaler=1\"; &#125; &#125;); 4、腾讯地图瓦片加载腾讯地图完全遵守TMS规则，地图投影坐标系采用Web Mercator投影，最小缩放级别为第4级。参考代码如下：123456789101112131415161718192021// QQ地图完全遵守TMS规则;var tileGrid = new ol.tilegrid.TileGrid(&#123; resolutions: resolutions3857, tileSize: [256, 256], extent: projection3857Extent, origin: ol.extent.getBottomLeft(projection3857Extent), // Origin左下角&#125;);var tilesource = new ol.source.TileImage(&#123; tileUrlFunction: function (xyz, obj1, obj2) &#123; if (!xyz) &#123; return \"\"; &#125; var z = xyz[0]; var x = xyz[1]; var y = xyz[2]; return \"http://rt1.map.gtimg.com/realtimerender?z=\" + z + \"&amp;x=\" + x + \"&amp;y=\" + y + \"&amp;type=vector&amp;style=0&amp;v=1.1.2\" &#125;, projection: projection3857, tileGrid : tileGrid&#125;);","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"OpenLayers 3 注意事项","date":"2018-01-18T12:29:59.000Z","path":"20180118/openlayers/ch14/index.html","text":"注意事项 EasyUI和OL3有冲突，体现在浏览器大小缩放时，地图会变形，具体原因未知。 ol.js这个文件千万不能使用源码目录中的src\\ol\\ol.js。请下载官网的*-dist.zip，用解压后文件夹里面的ol.js。","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"OpenLayers 3地图","date":"2018-01-18T12:29:59.000Z","path":"20180118/openlayers/ch03/index.html","text":"OpenLayers 3地图本章节将围绕前面那个简单的地图展开，从源码分析入手，逐步延伸到地图组成部分的分析，并学会借助API文档来帮助我们理解。 在此基础上，还提供了一些关于ol.Map类的应用实例，以帮助大家进一步的实践，为接下来更深入的学习和使用打下坚实的基础。 初步解析地图组成创建地图的代码如此简单，以致于让一部分初学者误认为在此基础上的深入开发也很简单，这是一个非常错误的理解。此时，最关键的第一步是先弄明白每一句代码的含义，理解他们是如何组织起来的。否则，在后续的学习和使用过程中，犹如瞎子摸象，会找不到问题的关键点而迷失方向。让我们再次回顾一下之前那个简单地图的代码： 123456789101112131415// 创建地图 new ol.Map(&#123; // 设置地图图层 layers: [ // 创建一个使用Open Street Map地图源的瓦片图层 new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], // 设置显示地图的视图 view: new ol.View(&#123; center: [0, 0], // 定义地图显示中心于经度0度，纬度0度处 zoom: 2 // 并且定义地图显示层级为2 &#125;), // 让id为map的div作为地图的容器 target: 'map' &#125;); 注意，其实上面这段代码就只有一条语句:1new ol.Map(&#123;...&#125;); 其他代码只是用于设置地图的构造参数。由此可以推测出ol.Map是最主要的地图类，创建地图就需要构造这么一个对象。接下来依次分析每一个参数部分的代码。 参数layers:1234layers: [ // 创建一个使用Open Street Map地图源的瓦片图层 new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], 从名字和具体的值可见这个地方可以设置多个layer，它是OpenLayers 3地图的组成结构单元，地图是由多个layer组成的，这种设计类似于Photoshop里面的图层，多个图层是可以叠加的，在最上面的会覆盖下面的，以此类推。在代码中我们添加了一个Open Street Map的地图layer。 参数view：1234view: new ol.View(&#123; center: [0, 0], // 定义地图显示中心于经度0度，纬度0度处 zoom: 2 // 并且定义地图显示层级为2 &#125;), 通过字面意思可以看出，它为地图定义显示窗口，对应ol.View类，可以自定义地图显示的中心点，缩放层级等。 参数target：1target: 'map' 指定地图在页面中具体哪个位置进行显示，为此要记住地图显示还是离不开使用dom来实现。虽然和地图业务没什么关系，但也必不可少，因为它是Web GIS，最基本的还是依赖于HTML。 通过上面的源码解读，我们可以发现OpenLayers 3地图主要是由layer和view组成，layer可以有多个，view只能有一个。 上图能明确看到的是layer，看不出view在哪儿，只知道地图显示中心确实在经度0，纬度0处。除此之外，还能看到左上角的放大缩小按钮，以及右下角的属性信息按钮。如果在地图上双击鼠标左键，或者按住鼠标左键拖动，可以看到地图也是会放大或者移动的。这些都是分析代码并没有看到的。很明显OpenLayers 3有很多默认行为，一个地图的完整构成，远不是只有view和layer就行了。 地图所有组成部分那么OpenLayers 3究竟由哪些部分组成？下面就将核心组成部分一一罗列出来： 地图(Map)，对应的类是ol.Map，之前已有接触。从代码上来看，它就像是一个空壳子，感觉没做什么实事，因为具体事务都由其他组成部分处理了。但没有它，整个地图的其他组成部分就不能有效协调，组织在一起。同时对于开发者而言，它就是第一个入口，我们必须要掌握。 视图(View)，对应的类是ol.View，之前已有接触，控制地图显示的中心位置，范围，层级等，此处不再过多介绍。关于其详细说明参见View。 图层(Layer)，OpenLayers 3有多种多样用于不同业务的图层，每一种图层在实现上都对应于一个类，放在包ol.layer下面，之前已接触过的ol.layer.Tile就是其中的一种。OpenLayers 3允许多个layer重叠在一起，相互之间互不干扰，是一种图形显示和管理的有效方式。应用这种方式能有效处理地图数据来源的多样性和复杂性问题。对开发者而言，它更多的表现为组织管理的类。 数据源(Source)，它是和图层一一对应的，OpenLayers 3也存在多种不同的数据源，每一种在实现上也对应于一个具体的类，它们都放在包ol.source下面，之前接触过的ol.source.OSM就是其中的一种。 毫无 疑问，它是整个地图背后真正的核心。 如果没有数据，那么渲染引擎将没有任何价值。在数据技术(Data Technology)大行其道的今天，GIS引擎将需要支持各式各样的数据来源。目前ol3也确实是这样做的，已支持多种多样在线或离线的数据源；可以是静态图或者瓦片图；也可以是栅格化的或者矢量的。如果你想在地图上加载某种格式的数据，或者某种服务提供的数据，都可以优先查看一下OpenLayers 3是否已经支持了。图层和数据源是密不可分的，详情可参见Source和Layer。 控件(Control)，它为用户提供了和地图交互的入口。 针对不同的用途，具有不同的控件。其实现类都放在包ol.control下面，在此之前还没有具体接触过，但我们在地图上看到的放大缩小按钮就是众多控件中的一种。控件具备相同的一个特性，就是一直保持在地图的某个固定位置，不会随着地图移动而移动，也不会随着地图放大缩小而变化，一直处于地图的最上层。关于控件更详细的说明参见Control。 交互(Interaction)，这是所有软件都具备的一个组成部分，直观地是看不见的，其实现类放在包ol.interaction下面，之前也没具体接触过，但其实是使用到了，如果没有它，我们就没有办法直接用鼠标控制地图放大、缩小、移动。这并不仅仅存在于GIS引擎中，它存在于任何产品中。任何优秀的产品必然有着良好的交互能力，即使没有任何GIS知识，也能体会到它的作用和重要性。 以上就是一个OpenLayer 3地图所有核心的组成部分， 他们有机的组合在一起，从而构成整个地图，实现了我们对地图的完整需要。 OpenLayer 3采用这样的模块化设计，不管是在实现上，还是对外提供API，都简化了整个系统。我们只要完整地了解每一个组成部分，就能游刃有余地运用它。在这些组成部分中，只有Layer和Source有直接的强联系，其他的组成部分，相互之间的联系很少。为此，在掌握某一部分后，就可以有效地处理这一部分的开发工作，从而不一定要掌握所有组成部分。 本教程的章节也是按照各个模块来分别介绍的，并不一定需要按照章节顺序进行学习。 看懂API或许你已经迫不及待的想开始学习第一个组成部分Map了，但在此之前，还是不得不先学会使用官网的API文档。因为API的重要性众人皆知，对于一个快速开发中的开源项目，更是如此，每一个小版本之间都可能有些许变化。所以在更新版本后，如果遇到API方法不存在或者功能不正确，则需要优先核对官网API文档。本着授之以鱼不如授之以渔的原则，学会看懂API文档是关键，而不是翻译API文档。。 API文档入口在浏览器中打开OpenLayers官网 http://openlayers.org/，下图箭头所指向的地方即为API文档链接： 点击进入即为整个API文档的首页，页面上方为工具栏，左边为搜索栏和列表，右边为OpenLayers 3组成部分的介绍，都是相关的类和一些简介。 上方工具栏中的Stable Only复选框选中后，API文档就只会显示功能已经稳定的类，参数，接口等信息。在查找新功能或新特性时，建议不要勾选。 右边页面显示了地图组成的介绍，Map、View、Layers列在第一排，第二排及第三排依次列出了其他的组成部分。有简单的介绍，及对应的包和类，可以通过这些资料加深对他们的认识。 查找左边的列表会根据搜索栏的内容进行过滤。大家可以尝试一下，在这里能搜索包名，类名，方法名和事件名。包名比如ol.layer，ol.source等，方法名比如setCenter，setZoom等，类名比如View，Map等，事件名比如`change:layers。但目前还不支持文档里面的内容的文本搜索。 API文档介绍此处以ol.Map类的API文档为例进行说明。在搜索栏输入ol.Map，很快下方列表中的内容就变了，排在中第一项的就是ol.Map类，点击它，右边页面内容就变成了它的说明文档。文档内容从上向下，共分为三部分： 类介绍，主要介绍该类用途，建议仔细阅读，这样才能根据具体业务找对需要的类。 构造参数、事件及继承关系，该内容的重要性无需多言，看不明白，就无法创建该类的对象。 类的所有方法，建议浏览一下，了解每个方法所实现的功能，在需要时，再详细查看对应的参数和使用方式。 请结合上面的内容快速浏览一下ol.Map的说明文档，感受一下，总的来说，OpenLayers 3的API文档是比较全面的，内容也挺详实(ol3的API文档是从代码的注释中通过工具提取生产的，所以时刻能保持更新，且完全符合JSDoc规范，文档和代码完全匹配)。 文档中类的介绍部分是否能看懂，因人而异，当了解的越多，就越容易看明白。因为它只是类的一些简要说明，谈不上详细，也没有对应的应用说明。有些类的用途需要结合到其他的知识才能更明白。在不是很明白的情况下，建议多结合类提供的方法的用途来一起理解。 类的构造参数采用的是JSDoc规范定义的，使用工具提取而出，生成了下面的参数文档，在此对其格式进行简要说明，参见下面图解： 页面右边的文件和行号标注都是可点击的，点击打开跳转到对应的源码，对于探究背后实现，或者分析Bug非常有用。然后是参数说明，很多对象的构造参数都是对象，以{key1:value1, key2:value2}这样的方式设置。这种方式有两方面的好处： 可以只设置需要的参数，或者增加自定义参数 易于为指定参数设置正确的值，避免值对应到错误的参数上。 需要注意的是参数类型Type的说明，使用符号|表示该参数可以赋予多种类型的值，对开发者是非常友好的，灵活强大。参数类型如果是容器，都会使用&lt;&gt;来表示。如果是OpenLayers 3自定义的类型，都是可以点击查看的。若为JavaScript的原生类型或DOM类型，则只给出类型名。对于各个参数的描述信息，就是一段文字，都比较详细。 除了参数之外，在OpenLayers 3中还大量使用了事件，用于解决实时通知的问题，这是典型的观察者模式。当对象改变时，能触发相应的操作。在API文档中，明确标注了各个类的事件，以及触发该事件的条件和时机。它们都列在Fires:这一栏，比如ol.Map就有很多事件，click、dbclick、singleclick、moveend等等。这些事件对于开发者来说非常重要，除了OpenLayers 3需要大量使用这些事件，很多应用开发也需要使用它们来实现一些关键功能。关于事件更详细的说明参见事件。 在事件说明之后，还有类继承的说明。Subclasses列出了当前类的所有子类；Extends列出了当前类的父类。不要小瞧这个说明，因为在面向对象编程范式中，所有能用父类的地方，都可以用子类。比如ol.Map的构造参数options可以设置layers属性，它的值是ol.layer.Base类型元素的集合，那么就可以用ol.layer.Base的子类ol.layer.Group或ol.layer.Layer，以此类推，也可以用这两个类的子类ol.layer.Image、ol.layer.Tile、ol.layer.Vector等。这样我们就知道具体哪些参数能用哪些类了。 最后就是这个类所有方法的说明了。方法的说明包含方法名，参数，以及方法功能描述。同类的说明差不多，为此不再累述。 最后，提醒一下，在遇到任何问题时，请优先查询API文档来排忧解惑。 结合API文档分析代码这次，有了API文档这个利器，必然会对代码有更深入的理解和认识。让我们再一次回顾之前那个简单的地图的代码： 123456789101112131415// 创建地图 new ol.Map(&#123; // 设置地图图层 layers: [ // 创建一个使用Open Street Map地图源的瓦片图层 new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], // 设置显示地图的视图 view: new ol.View(&#123; center: [0, 0], // 定义地图显示中心于经度0度，纬度0度处 zoom: 2 // 并且定义地图显示层级为2 &#125;), // 让id为map的div作为地图的容器 target: 'map' &#125;); 之前我们并不知道ol.Map类具体有什么构造参数，也不知道参数值可以设置什么类型的对象等等，现在就可以通过API文档查看。通过API文档可以看到，构造参数远不止上面代码中设置的这些参数，还存在很多其他的参数。这些参数在文档中注明是可以不设置的，OpenLayers3 会自动使用特定的默认值。通过这些参数，你是否已经发现它们其实就是地图的组成部分。为什么有些参数可以不设置而使用默认值，而有些参数就必须设置呢？请自行思考。 文档显示ol.Map的构造参数layers，可以是ol.Collection，也可以是Javascript数组，此处用了数组。我们统称为容器类型，包含的元素为ol.layer.Base类型。但代码里面创建了一个ol.layer.Tile类的实例，这样也行？通过API文档中的继承关系信息，我们可以了解到ol.layer.Tile继承于ol.layer.Layer，而ol.layer.Layer又继承于ol.layer.Base，所以这是可行的。 ，若对ol.layer.Tile不了解，请使用API文档，在此之前，我们也可以通过包名大致推断出它是一个layer，属于地图层的一种。官网API文档说明：它是一种应用瓦片图片作为地图源的地图层。构造函数的参数里包含一个必须设置值的属性：source，用于设置地图源，类型为ol.source.Tile，但是代码里使用的是ol.source.OSM，这个问题同上，请自行查询API文档解答吧。注意，Layer和Source就是这样绑定在一起的。有什么样的Layer，就需要什么样的Source，看起来是Layer决定Source，其实Layer是为Source服务的，还是之前说的那样，数据才是最重要的。所以应该是Source起决定作用，根据需要构造对应的Layer。为此在做开发时，应该优先考虑需要什么样的Source。这个也可以通过API文档来查找，搜索ol.source即可查看到现有哪些不同类型的source，在结果中逐个查看，直到找到需要的source类。假设找到了ol.source.Test，那么要找layer就简单了，一般情况下，会有ol.layer.Test。 如果没有，请查找ol.source.Test的父类对应的layer，以此类推。 参数View是一个必须设置的属性，对应于ol.View类，通过官网API了解详细信息，顺便详细看看它的构造参数中的center和zoom表示什么？View至关重要，后续将更深入的了解。 认真查看API文档，可以发现一些你意想不到的东西，从而有所启发，或学到新知识，或排忧解难，所以请重视API文档。至此，你应该对上面的代码有了非常深入的理解了，此时不妨试试修改一些参数的值，查看地图有什么变化。 ol.Map的应用到此，已经学习了足够多的知识，对ol.Map也比较熟悉了，如果遇到问题，也能从API文档中得到帮助，是时候动动手练习一下了。这之后就给出一些简单的应用，有兴趣的可以看看，没兴趣的可以直接跳过，进入下一章节。 定制地图logoOpenLayers 3作为一个引擎，供开发者二次开发来发布产品，必然需要重新设置logo，具体怎么做？通过ol.Map的API文档发现它的构造参数里面logo的设置，简单动动手就能做出下面这样带自定义logo的地图，注意右下角的猴子： new ol.Map({ controls: ol.control.defaults({ attributionOptions: ({ collapsible: false }) }), // logo: false, // 不显示logo // logo: 'face_monkey.png', // 用一个图片 face_monkey.png 作为logo logo: {src: '../img/face_monkey.png', href: 'http://www.openstreetmap.org/'}, // 点击能跳转到对应页面 layers: [ new ol.layer.Tile({source: new ol.source.OSM()}) ], view: new ol.View({ center: [0, 0], zoom: 2 }), target: 'map' }); 因为今年是猴年，所以就用了它，当然你也可以换成任何其他想要的logo，代码如下： 123456789101112131415161718192021&lt;div id=\"map\" style=\"width: 100%, height: 400px\"&gt;&lt;/div&gt;&lt;script&gt; new ol.Map(&#123; controls: ol.control.defaults(&#123; attributionOptions: (&#123; collapsible: false &#125;) &#125;), // logo: false, // 不显示logo // logo: 'face_monkey.png', // 用一个图片 face_monkey.png 作为logo logo: &#123;src: '../img/face_monkey.png', href: 'http://www.openstreetmap.org/'&#125;, // 点击能跳转到对应页面 layers: [ new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], view: new ol.View(&#123; center: [0, 0], zoom: 2 &#125;), target: 'map' &#125;);&lt;/script&gt; 注意看代码中设置logo参数的注释，演示了最复杂的情况，注释掉的代码是一些简单的用法。可自行尝试换成它们有什么效果。 除了logo参数之外，我们还设置了controls，算是这个例子夹带的私货，其大致的作用，从官网API文档可以了解到，是设置地图控件的。有什么作用？注意对比现在的地图和之前的地图的右下角，一个是i，一个是展开的一串信息。 单页面多地图在某些业务中，可能需要在一个页面中加载多个地图，用于对比，或者多个业务方面的同时展示。那么OpenLayers 3能否做到单页面多地图互不干扰呢？ 地图1地图2 // 创建第一个地图 new ol.Map({ layers: [ new ol.layer.Tile({source: new ol.source.OSM()}) ], view: new ol.View({ center: [0, 0], zoom: 2 }), target: ‘map1’ }); // 创建第二个地图 new ol.Map({ layers: [ new ol.layer.Tile({source: new ol.source.OSM()}) ], view: new ol.View({ center: [0, 0], zoom: 2 }), target: ‘map2’ });试试两个地图都操作一下，确认相互之间是否有影响？对应的代码非常简单，无非就是数量多了一个，如下：1234567891011121314151617181920212223242526272829&lt;p&gt;地图1&lt;/p&gt;&lt;div id=\"map1\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;p&gt;地图2&lt;/p&gt;&lt;div id=\"map2\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script&gt; // 创建第一个地图 new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], view: new ol.View(&#123; center: [0, 0], zoom: 2 &#125;), target: 'map1' &#125;); // 创建第二个地图 new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], view: new ol.View(&#123; center: [0, 0], zoom: 2 &#125;), target: 'map2' &#125;);&lt;/script&gt;这段代码真没有什么需要解释的了。# 地图联动OpenLayers 3采用了MVC模型，V对应的就是View，这种设计模型有什么好处？我们还是直接看下面这两个地图： 地图1地图2 // 创建一个视图 var view = new ol.View({ center: [0, 0], zoom: 2 }); // 创建第一个地图 new ol.Map({ layers: [ new ol.layer.Tile({source: new ol.source.OSM()}) ], view: view, target: ‘map1’ }); // 创建第二个地图 new ol.Map({ layers: [ new ol.layer.Tile({source: new ol.source.OSM()}) ], view: view, target: ‘map2’ });拖动地图1的同时，看看地图2有什么变化，是不是很神奇，为什么呢？1234567891011121314151617181920212223242526272829&lt;p&gt;地图1&lt;/p&gt;&lt;div id=\"map1\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;p&gt;地图2&lt;/p&gt;&lt;div id=\"map2\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script&gt; // 创建一个视图 var view = new ol.View(&#123; center: [0, 0], zoom: 2 &#125;); // 创建第一个地图 new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], view: view, target: 'map1' &#125;); // 创建第二个地图 new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], view: view, target: 'map2' &#125;);&lt;/script&gt;代码只有一点不同，即两个ol.Map使用了同一个view，就是这么神奇。# 动态交换地图在创建地图时，我们可以指定对应的地图容器，其实在创建完成之后，我们还可以动态设置不同的地图容器，从而可以让地图不断的变换位置，比如交换两个地图： 地图1 地图2 // 创建第一个地图 var map1 = new ol.Map({ layers: [ new ol.layer.Tile({source: new ol.source.OSM()}) ], view: new ol.View({ center: [0, 0], zoom: 2 }), target: 'map1' }); // 创建第二个地图 var map2 = new ol.Map({ layers: [ new ol.layer.Tile({source: new ol.source.OSM()}) ], view: new ol.View({ center: [0, 0], zoom: 2 }), target: 'map2' }); function swapMap() { // 改变两个地图的容器 map1.setTarget('map2'); map2.setTarget('map1'); } 为了让两个地图有所差别，你可以先放大第一个地图，然后点击调换地图按钮，看一下效果。要实现这个功能，其实只需要使用setTarget方法即可： 123456789101112131415161718192021222324252627282930313233343536&lt;p&gt;地图1&lt;/p&gt;&lt;div id=\"map1\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;p&gt;地图2&lt;/p&gt;&lt;div id=\"map2\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;input type=\"button\" onClick=\"swapMap();\" value=\"调换地图\" /&gt;&lt;script&gt; // 创建第一个地图 var map1 = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], view: new ol.View(&#123; center: [0, 0], zoom: 2 &#125;), target: 'map1' &#125;); // 创建第二个地图 var map2 = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], view: new ol.View(&#123; center: [0, 0], zoom: 2 &#125;), target: 'map2' &#125;); function swapMap() &#123; // 改变两个地图的容器 map1.setTarget('map2'); map2.setTarget('map1'); &#125;&lt;/script&gt; 其实很多时候，只需要多留意一下API文档里面的方法，了解功能，就可能实现意想不到效果。","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"OpenLayers 3 介绍","date":"2018-01-18T12:29:59.000Z","path":"20180118/openlayers/ch01/index.html","text":"OpenLayers 3 介绍OpenLayers 3简称ol3，它是一个开源的Web GIS引擎，使用了JavaScript、最新的HTML5技术及CSS技术，支持dom，canvas和webgl三种渲染方式。除了支持网页端，还支持移动端（目前移动端还不成熟，有待进一步完善）。在地图数据源方面，支持各种类型的瓦片地图，既支持在线的，也支持离线的。比如OSM, Bing, MapBox, Stamen, MapQuest等等；还支持各种矢量地图，比如GeoJSON，TopoJSON，KML，GML等等。随着OpenLayers 3的进一步发展，将支持更多的地图类型。 不兼容OpenLayers 2在OpenLayers 3之前，还有OpenLayers 2，虽然从名字上看是一个升级版本，但OpenLayers 3完全是重新设计，采用全新的架构，使用方式及API都不一样，只是在功能上完全实现OpenLayers 2已有的功能。为此，使用OpenLayers 3不必先学习OpenLayers 2。但使用过OpenLayers 2，并不等于直接就会用OpenLayers 3，仍然需要从零开始学习。 浏览器支持由于OpenLayers 3使用了HTML5技术，所以对各种浏览器的版本有所要求。IE浏览器最低也需要IE9才行，以下的IE浏览器可以考虑使用OpenLayers 2。其他浏览器的最低版本要求为Firefox 3.5，Chrome 3.0，Safari 3.0，Opera 10.5。如果要使用webgl渲染方式，则又需要参考各大浏览器的支持程度进行选择。 代码规范 OpenLayers 3采用面向对象的编程范式，类在API中随处可见，比如ol.Map，ol.View等等。如果你有面向对象的思维，将较为容易的理解API及使用。 OpenLayers 3采用包管理的方式管理代码，比如layer的包名为ol.layer，命名方式类似于JAVA的包名。这源于OpenLayers 3采用了Google的Closure库。 OpenLayers 3采用驼峰式(Camel-Case)命名，变量名采用小驼峰命名，类名使用大驼峰命名。 资源OpenLayers 3的官网是http://openlayers.org/，若记不住，请保存到收藏夹。在官网首页上，即可看到相关的介绍，文档，API，以及Examples链接。这些资料都跟随最新的版本实时更新，如果发现本教程有些内容和官方不一致，请以官网资料为准，可能由于版本更新导致的。 喜欢研究源码的开发者，请关注github https://github.com/openlayers/ol3。有能力者，可以考虑为OpenLayers 3提交PR和issue，不过在此之前请先阅读贡献文档","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"OpenLayers 3 常见问题","date":"2018-01-18T12:29:59.000Z","path":"20180118/openlayers/ch13/index.html","text":"常见问题 Q: ol3支持gif吗？ A: ol.style.Icon并不支持，但可以通过ol.Overlay来加载dom的方式支持。注意：在一个地图中如果存在几千个overlay，将影响效率。 Q: 地图缩小后，在一个页面出现多个一样的地图，如何才能只显示一个？ A: 在创建source的时候，设置wrapX属性为false就可以。","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"一个简单的地图","date":"2018-01-18T12:29:59.000Z","path":"20180118/openlayers/ch02/index.html","text":"一个简单的地图在有了初步了解之后，从本节开始，我们将直接进入主题，体验一下使用OpenLayers 3做地图的难度，及地图的外观和功能： new ol.Map({ layers: [ new ol.layer.Tile({source: new ol.source.OSM()}) ], view: new ol.View({ center: [0, 0], zoom: 2 }), target: ‘map’ }); 要显示上面这个地图，仅需要新建一个html文档，在其中编写如下代码即可： 123456789101112131415161718192021222324252627282930313233&lt;!Doctype html&gt;&lt;html xmlns=http://www.w3.org/1999/xhtml&gt;&lt;head&gt; &lt;meta http-equiv=Content-Type content=\"text/html;charset=utf-8\"&gt; &lt;meta http-equiv=X-UA-Compatible content=\"IE=edge,chrome=1\"&gt; &lt;meta content=always name=referrer&gt; &lt;title&gt;OpenLayers 3地图示例&lt;/title&gt; &lt;link href=\"../ol3.13.1/ol.css\" rel=\"stylesheet\" type=\"text/css\" /&gt; &lt;script type=\"text/javascript\" src=\"../src/ol3.13.1/ol.js\" charset=\"utf-8\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt; &lt;script&gt; // 创建地图 new ol.Map(&#123; // 设置地图图层 layers: [ // 创建一个使用Open Street Map地图源的瓦片图层 new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], // 设置显示地图的视图 view: new ol.View(&#123; center: [0, 0], // 定义地图显示中心于经度0度，纬度0度处 zoom: 2 // 并且定义地图显示层级为2 &#125;), // 让id为map的div作为地图的容器 target: 'map' &#125;); &lt;/script&gt;&lt;/body&gt; &lt;/html&gt; 要想使用OpenLayers 3开发地图，首先你需要引入了OpenLayers 3的js库文件ol3.js及样式文件ol3.css，参见代码中html头部。它们可以在github上下载到。 请注意，每一个版本，都有4个下载链接，如果你不需要研究源码和例子，只用下载第一个 v*-dist.zip，下载解压后，里面包含ol.css，ol.js，ol-debug.js这三个文件，在初学时，尽量使用ol-debug.js，如果发生错误，堆栈信息更为可读，便于排查问题。 如果需要学习和研究源码，可以下载后面的三个文件，但注意，需要自己编译生成ol.css，ol.js，ol-debug.js，切不可直接使用源码中的同名文件。 注意： 上面这个段代码注明html文件编码为utf-8，所以你新建的html文件本身编码需要保证为utf-8，不然会导致中文乱码。 紧接着就是使用OpenLayers 3的API创建地图，对应于&lt;script&gt;...&lt;/script&gt;代码块，如代码所见，7行代码就搞定了，是不是非常的简单？！至于代码的含义，可以暂时参照代码中的注释来理解。 看不懂也没有关系，接下来我们将详细的介绍它们。","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"OpenLayers 3 动画","date":"2018-01-18T12:29:59.000Z","path":"20180118/openlayers/ch11/index.html","text":"动画在OpenLayers 3中，动画是随处可见的，比如平移地图时，地图移动会有惯性，停止移动后，还会继续沿着之前的方向移动一会。 比如下面这个地图具有回到原始点的功能，一个是有动画效果的，一个是没有动画效果的。 var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); function backNoAnim() { map.getView().setCenter(ol.proj.transform([104, 30], 'EPSG:4326', 'EPSG:3857')); } function backWithAnim() { var pan = ol.animation.pan({ duration: 2000, source: map.getView().getCenter() }); map.beforeRender(pan); map.getView().setCenter(ol.proj.transform([104, 30], 'EPSG:4326', 'EPSG:3857')); } 先把地图移动到北京，再点击下方的两个按钮，感受一下带动画，和不带动画的差别，绝大多数人还是会喜欢带动画的。 无疑，动画具有很大的吸引力。 本章节将把你带入OpenLayers 3的动画世界，让你也能应用动画效果，做出漂亮的效果。 动画简单应用前面那个回到原点的动画，使用了OpenLayers 3内置的动画效果，代码如下： 1234567891011121314151617181920212223242526272829303132333435363738&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;!--增加两个按钮，一个演示不带动画，一个演示带动画--&gt;&lt;input type=\"button\" value=\"回到原点-不带动画\" onclick=\"backNoAnim()\"&gt;&lt;/input&gt;&lt;input type=\"button\" value=\"回到原点-带动画\" onclick=\"backWithAnim()\"&gt;&lt;/input&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 不带动画的实现 function backNoAnim() &#123; map.getView().setCenter(ol.proj.transform([104, 30], 'EPSG:4326', 'EPSG:3857')); &#125; // 带动画的实现 function backWithAnim() &#123; // 注意： 应用内置的动画，实现平移动画 var pan = ol.animation.pan(&#123; duration: 2000, source: map.getView().getCenter() &#125;); // 注意： 使用beforeRender来添加 map.beforeRender(pan); // 然后才是重新设置地图中心点到原来的位置 map.getView().setCenter(ol.proj.transform([104, 30], 'EPSG:4326', 'EPSG:3857')); &#125; &lt;/script&gt; 关键的代码始终在最后，结合注释，应该可以理解。 我们使用的内置动画是ol.animation.pan，用于平移动画，更详细的信息请参考官网API。 可以看到它是一个函数，返回一个ol.PreRenderFunction，添加到ol.Map，从而在渲染的时候使用，实现动画。 除了上面应用的动画之外，还有一些内置的动画，都在ol.animation里面，从官网API可以看到，包括： ol.animation.bounce: 来回弹。 ol.animation.pan: 平移。 ol.animation.rotate: 旋转。 ol.animation.zoom: 缩放。 这些动画都可以尝试，或许就有你需要的。 动画高阶应用虽然内置动画并不多，但是细心的同学已经发现了内置动画有个参数easing，这是一个强大的参数，因为可以让开发者自定义动画实现，从而实现动画效果的扩展。 其实已经内置了一些相关的实现，在ol.easing里面，涉及到一些常用的效果，包括： ol.easing.easeIn: 加速 ol.easing.easeOut: 减速 ol.easing.inAndOut: 先加速再减速 ol.easing.linear: 匀速 ol.easing.upAndDown: 和inAndOut类似 在前面的地图的基础上修改一下，让大家体验一下不同的动画的效果： easeIn easeOut inAndOut linear upAndDown var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); function backNoAnim() { map.getView().setCenter(ol.proj.transform([104, 30], 'EPSG:4326', 'EPSG:3857')); } function getEasing() { var typeSelect = document.getElementById('easing-type'); var easing = typeSelect.options[typeSelect.selectedIndex].text; if (easing === 'easeIn') { return ol.easing.easeIn; } else if (easing === 'easeOut') { return ol.easing.easeOut; } else if (easing === 'inAndOut') { return ol.easing.inAndOut; } else if (easing === 'linear') { return ol.easing.linear; } else if (easing === 'upAndDown') { return ol.easing.upAndDown; } } function backWithAnim() { var pan = ol.animation.pan({ duration: 2000, source: map.getView().getCenter(), easing: getEasing() }); map.beforeRender(pan); map.getView().setCenter(ol.proj.transform([104, 30], 'EPSG:4326', 'EPSG:3857')); } 尝试完所有的动画方式后，可以看一下其实现代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;!--添加动画效果选择项--&gt;&lt;select id = \"easing-type\"&gt; &lt;option&gt;easeIn&lt;/option&gt; &lt;option&gt;easeOut&lt;/option&gt; &lt;option&gt;inAndOut&lt;/option&gt; &lt;option&gt;linear&lt;/option&gt; &lt;option&gt;upAndDown&lt;/option&gt;&lt;/select&gt;&lt;input type=\"button\" value=\"回到原点\" onclick=\"backWithAnim()\"&gt;&lt;/input&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 根据选择项，返回对应的动画，供下面的backWithAnim函数使用 function getEasing() &#123; var typeSelect = document.getElementById('easing-type'); var easing = typeSelect.options[typeSelect.selectedIndex].text; if (easing === 'easeIn') &#123; return ol.easing.easeIn; &#125; else if (easing === 'easeOut') &#123; return ol.easing.easeOut; &#125; else if (easing === 'inAndOut') &#123; return ol.easing.inAndOut; &#125; else if (easing === 'linear') &#123; return ol.easing.linear; &#125; else if (easing === 'upAndDown') &#123; return ol.easing.upAndDown; &#125; &#125; function backWithAnim() &#123; var pan = ol.animation.pan(&#123; duration: 2000, source: map.getView().getCenter(), easing: getEasing() // 设置对应选择的动画 &#125;); map.beforeRender(pan); map.getView().setCenter(ol.proj.transform([104, 30], 'EPSG:4326', 'EPSG:3857')); &#125; &lt;/script&gt; 通过上面这种方法，我们完全可以自定义动画函数，通过官网API文档可知，这些函数有一个参数t，范围在0-1之间，然后函数返回一个0-1之间的数。 结合动画业务来看，虽然官网没有说明参数表示什么意思，但是我们可以猜测它就是时间，返回的值应该目标达成比。 下面我们自己来实现一个sin曲线式的动画： var map2 = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map2', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); // sin曲线动画 function sin(t) { // 使用sin曲线公式 return Math.sin(t * Math.PI / 2); } function backWithAnim2() { var pan = ol.animation.pan({ duration: 2000, source: map2.getView().getCenter(), easing: sin }); map2.beforeRender(pan); map2.getView().setCenter(ol.proj.transform([104, 30], 'EPSG:4326', 'EPSG:3857')); } 速度一开始会快一点，然后慢下来， 对应的代码如下：12345678910111213141516171819202122232425262728293031323334&lt;div id=\"map2\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;input type=\"button\" value=\"回到原点\" onclick=\"backWithAnim2();\"&gt;&lt;/input&gt;&lt;script type=\"text/javascript\"&gt; var map2 = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map2', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // sin曲线动画 function sin(t) &#123; // 使用sin曲线公式 return Math.sin(t * Math.PI / 2); &#125; function backWithAnim2() &#123; var pan = ol.animation.pan(&#123; duration: 2000, source: map2.getView().getCenter(), easing: sin // 应用sin曲线动画 &#125;); map2.beforeRender(pan); map2.getView().setCenter(ol.proj.transform([104, 30], 'EPSG:4326', 'EPSG:3857')); &#125; &lt;/script&gt; 利用postcompose事件做动画前面的内置动画，几乎都是和地图浏览相关的，很多时候我们有更多的动画需求，在此向大家介绍另一种可以做出动画的方式。 那就是利用ol.Map的postcompose事件，这个事件在地图渲染时都会触发，而我们只要改变地图上的某个feature或者layer或者其他任何东西，就会触发重新渲染。 如果利用这个原理，我们不断的改变feature的样式，就会触发postcompose，在这个事件的监听器里再改变feature的样式，就又会触发postcompose，从而一只循环下去，出现动画效果。 比如像下面这样： var layer = new ol.layer.Vector({ source: new ol.source.Vector() }) var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); var circle = new ol.Feature({ geometry: new ol.geom.Point(ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857')) }); circle.setStyle(new ol.style.Style({ image: new ol.style.Circle({ radius: 0, stroke: new ol.style.Stroke({ color: 'red', size: 1 }) }) })); layer.getSource().addFeature(circle); var radius = 0; map.on('postcompose', function(){ radius++; radius = radius % 20; circle.setStyle(new ol.style.Style({ image: new ol.style.Circle({ radius: radius, stroke: new ol.style.Stroke({ color: 'red', size: 1 }) }) })); }) 地图中间的小圆圈，不断的重复变大动画，代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var layer = new ol.layer.Vector(&#123; source: new ol.source.Vector() &#125;) var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), layer ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); var circle = new ol.Feature(&#123; geometry: new ol.geom.Point(ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857')) &#125;); circle.setStyle(new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 0, stroke: new ol.style.Stroke(&#123; color: 'red', size: 1 &#125;) &#125;) &#125;)); layer.getSource().addFeature(circle); // 关键的地方在此：监听postcompose事件，在里面重新设置circle的样式 var radius = 0; map.on('postcompose', function()&#123; // 增大半径，最大20 radius++; radius = radius % 20; // 设置样式 circle.setStyle(new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: radius, stroke: new ol.style.Stroke(&#123; color: 'red', size: 1 &#125;) &#125;) &#125;)); &#125;)&lt;/script&gt; 使用过Javascript做动画的同学可能会想，为什么弄的这么麻烦，直接用requestAnimationFrame不就行了？ 是的，我也这么认为，这个会比较简单，但如果你非要用OpenLayers 3的事件，也就可以照着上面的方式来实现动画了。","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"OpenLayers 3 LOD与分辨率","date":"2018-01-18T12:29:59.000Z","path":"20180118/openlayers/ch06/index.html","text":"LOD与分辨率LOD是Levels of Detail的简写，用于根据当前的环境，渲染不同的图像，用于降低非重要的细节度，从而提高渲染效率，在电子游戏中经常运用，对于需要显示全球地图的GIS系统而言，更需要应用这项技术。在万能瓦片地图加载秘籍中，有简单的说明。 在不同的细节层次下，自然分辨率就可能不一样，这两者是紧密结合在一起的。 对于图形显示系统而言，分辨率作为屏幕坐标和世界坐标之间计算的纽带，其作用是非常重要的。 本章节将以实例的方式深入浅出的讲解这两个重要的概念，及在OpenLayers 3中的应用。 LOD原理在详细讲解之前，假设给你两张A4纸，在其中一张纸上把你家整个绘制上去，在另一张纸上只把你睡的房间绘制上去。如果别人想看你家，你会给哪一张纸？如果想看你睡的房间，你会给哪一张纸？ 相信你不会给错，LOD就是这种根据不同需要，采用不同图的技术方案。在地图应用中，最直观的体验，就是地图放大缩小。当地图放大后，能看到更详细的地理信息，比如街道，商店等等。当地图缩小再缩小，原来能看到的街道，商店就看不见了，当能看到更大的区域，我们的屏幕就相当于是A4纸，大小不变。 LOD这个技术方案非常棒，非常符合我们的自然习惯，所以在很多图形系统中都使用了这项技术。在GIS系统中，不断放大，就能看到更多地图细节，了解更加详细的信息。对于GIS引擎的开发者而言，需要实现这项技术，当发现用户放大地图时，就立马使用更有细节的地图图片，替换现在显示的地图图片。 现在问题来了：意思是说对于同一个地点而言，需要有很多张呈现不同细节程度的图片？是的，你没有猜错，虽然在使用地图的过程中，感觉放大缩小地图是浑然一体的，但其实就在你眼皮下发生了图片替换。 不同层级使用具有不同细节的地图图片，这就需要为每一个层级准备图片，如果使用离线工具下载瓦片地图，会看到下载的图片是按照层级Z进行存储的。开发者不用担心数据源的处理，只需要知道这个原理就可以了。 为了便于理解GIS系统中不同层级，使用不同的图片，下面使用google在线瓦片地图进行说明。 最小层级0情况下，只用了一张256*256像素的图片表示整个地球平面： 稍大一个层级1情况下，用了四张256*256像素的图片来表示整个地球： 对照一下，是否更加的明白了LOD原理及在GIS中的应用？ 瓦片计算不同环境条件下，加载具有不同细节的图片资源，可以提高效率，但这并不是终点。 瓦片技术可以更进一步提高效率。 其原理是将一张大图片切割成很多张小图片，按照呈现需要，加载其中的几张小图片即可。 为什么这样就能提高效率？因为屏幕显示窗口的大小是固定，比如屏幕分辨率是800*600，或者1024*768，又或者是1920*800等等。如果屏幕分辨率是800*600，一张大图是9000*9000，那么同一时间，你只能看到这张图片的十分之一。 但是在不切片的情况下，你却必须要加载整个地图。 如果是在本地浏览还好，假如是发布在网络上，则网络传输和渲染，都将耗时。如果我们按照500*500大小进行切片，我们则只需要加载4张500*500的小图片就可以了。 对于WebGIS而言，需要在网络上发布，同时需要显示整个地球，自然需要使用瓦片技术。 切片方式如果对整个地球图片进行切片，需要考虑的是整个地球图片大小，以及切片规则，切片大小。 对于WebGIS而言，在线地图几乎都采用墨卡托投影坐标系(Mercator)，对应的地图投影到平面上就是一个正方形。 为了方便使用，切片时大多按照正方形的方式来进行切片，比如切片大小为256*256。一个1024*1024的地图，就可以切成4张小的瓦片。 同时，瓦片大小几乎都是256*256，有一些则会增加到512*512。 LOD会使得不同层级下的全球地图大小不一致，结合瓦片技术一起，就出现了金字塔瓦片。 参见万能瓦片地图加载秘籍里面的图。 在WebGIS中，上一层级的一张瓦片，在更大一层级中，会用4张瓦片来表示，依次类推，比如上一节中看到的Google在线瓦片地图的第0级和第1级的瓦片地图。 这样做可以维持正方形的投影方式不变，同时按照2的幂次方放大，计算效率非常高。 计算通过上面切片的介绍，我们可以对每一层级瓦片的数量进行简单的计算。 层级0的瓦片数是$$1=2^02^0$$， 层级1的瓦片数是$$4=2^12^1$$，层级n的瓦片数是$$2^n*2^n$$。 这个地方计算的是所有瓦片数，因为是一个正方形，所以是边长的平方，如只计算x轴或者y轴一边的瓦片数，就是$$2^n$$个。 瓦片坐标任意一个层级的地图，切成多个瓦片后，我们需要给瓦片编号，才能通过编号找到瓦片。这个问题在这就涉及到坐标系，在万能瓦片地图加载秘籍里我们提到过，不同的在线地图服务商，可能定义不一样的瓦片坐标系，坐标系不一样，那么对应的同一个位置的瓦片的坐标也会不一样。 需要引起重视。 在OpenLayers 3提供了一个用于调试瓦片的source: ol.source.TileDebug。可以清晰的看到每一个瓦片的坐标： var osmSource = new ol.source.OSM(); var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: osmSource }), new ol.layer.Tile({ source: new ol.source.TileDebug({ projection: 'EPSG:3857', tileGrid: osmSource.getTileGrid() }) }) ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); 代码如下： 12345678910111213141516171819202122232425&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var osmSource = new ol.source.OSM(); var map = new ol.Map(&#123; layers: [ // 加载Open Street Map地图 new ol.layer.Tile(&#123; source: osmSource &#125;), // 添加一个显示Open Street Map地图瓦片网格的图层 new ol.layer.Tile(&#123; source: new ol.source.TileDebug(&#123; projection: 'EPSG:3857', tileGrid: osmSource.getTileGrid() &#125;) &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;)&#125;);&lt;/script&gt; 首先从上图可以看到地图上多了网格，每一个网格对应的就是一个瓦片。 其次网格中有三个数字，这些数字就表示当前瓦片的坐标，第一个数字是层级z，第二个数字是表示经度方向上的x，第三个数字是表示维度方向上的y。 同样的，可以采用上面的方式来看看在万能瓦片地图加载秘籍中提到的各种瓦片地图的瓦片坐标。 分辨率前面简单提到过，分辨率是屏幕坐标和世界坐标的纽带，通过它，才能知道你在屏幕上用鼠标点击的位置对应于世界地图具体的经纬度位置。 当然你不用自己来做这个计算，OpenLayers 3的ol.Map已提供了对应的方法getCoordinateFromPixel来帮助你实现坐标转换。 你可能经常使用这个函数，但却不知道背后是怎样的一个原理，本小节将理清其中的来龙去脉。 上一节说到了每一个层级，会使用不同的瓦片数来表示整个地球，那么无论是哪一个层级，所表示的实际地理空间范围都是一致的。但使用的瓦片个数却是不一样的，以Google在线地图为例，层级0使用了一个瓦片，层级1使用了4个瓦片。 通过计算可以知道层级0整个地球图像为$$256256$$像素大小，层级1整个地球图像为$$512512$$像素大小。 层级0和层级1表示的地球范围都是一样的经度[-180, 180]，纬度[-90, 90]。 在层级0的时候，一个像素就表示$$\\frac{360}{256} = 1.40625$$这么长的经度范围，$$\\frac{180}{256}=0.703125$$这么长的纬度范围。 而这两个数字就是分辨率了，即一个像素所表达的范围是多少，这个范围可能是度，可能是米，或者其他单位，根据具体的情况而定。 墨卡托投影坐标系下的分辨率我们知道，在WebGis中使用的在线瓦片地图是采用的墨卡托(Mercator)投影坐标系，经过投影后，整个地球是一个正方形，所能表示的地球范围为经度[-180, 180]，纬度[-85, 85]，单位为度。 对应的墨卡托坐标系的范围x[-20037508.3427892, 20037508.3427892]，范围y同样是[-20037508.3427892, 20037508.3427892]，单位为m。 或许你会好奇这个范围是怎么计算而来的，如果详细了解过它的定义，应该知道墨卡托只是简单的把地球球面剖开拉伸为一个正方形而来，由于南北极两端采用这种拉伸会严重变形，并且南北极在使用过程中很少用到，所以干脆就只投影了[-85, 85]纬度范围的地球。 而展开时，因为纬度范围有缩减，所以肯定只能以经度来展开，即在经度-180度的地方从上到下剖开地球，然后按照赤道方向来展开成一张平面，那么这个平面的长，就等于以地球赤道半径按照圆来计算的周长。 近似的按照6378137米为半径来计算，那么整个赤道周长的一半，即为 $$\\pir=3.14159266378137=20037508.0009862$$ 以上就是墨卡托投影坐标系范围的完整的计算过程，墨卡托也有很多变形，会有细微的不同，OpenLayers 3默认使用的是EPSG:3857，对于该坐标系的详细定义，可以参见epsg.io 3867。 有了范围之后，要想计算分辨率，按照上面的计算过程就非常简单了，还是以Google在线瓦片地图为例，x方向上的分辨率计算公式可以归纳为： $$ resolution = \\frac{rangeX}{256*2^{level}}$$ rangeX表示x方向上整个范围，比如 $$20037508.3427892 - (-20037508.3427892)$$，256表示的一个瓦片的宽度，单位为像素，$$2^{level}$$表示的在层级level下，x方向上的瓦片个数。 那么分母计算出来的结果就是在层级level下，整个地图在x方向上的宽度，单位为像素。 那么整个公式计算出来就是在x方向上一个像素所能代表的实际地理范围，即分辨率。 OpenLayers默认使用的分辨率 当前层级：分辨率： var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); map.getView().on('change:resolution', function(){ document.getElementById('zoom').innerHTML = this.getZoom() + '，'; document.getElementById('resolution').innerHTML = this.getResolution(); }) document.getElementById('zoom').innerHTML = map.getView().getZoom() + '，'; document.getElementById('resolution').innerHTML = + map.getView().getResolution(); 代码如下：1234567891011121314151617181920212223242526&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;当前层级：&lt;/span&gt;&lt;span id=\"zoom\"&gt;&lt;/span&gt;&lt;span&gt;分辨率：&lt;/span&gt;&lt;span id=\"resolution\"&gt;&lt;/span&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 监听层级变化，输出当前层级和分辨率 map.getView().on('change:resolution', function()&#123; document.getElementById('zoom').innerHTML = this.getZoom() + '，'; document.getElementById('resolution').innerHTML = this.getResolution(); &#125;) document.getElementById('zoom').innerHTML = map.getView().getZoom() + '，'; document.getElementById('resolution').innerHTML = + map.getView().getResolution();&lt;/script&gt; 缩放上面的地图，从层级0开始，用前面介绍的公式和当前地图显示的分辨率进行比较，你会发现OpenLayers默认采用的分辨率和Google在线瓦片地图一样。 注意事项为什么我们上面一直以Google在线瓦片地图举例说明？ 因为不同的在线瓦片地图可能采用不一样的分辨率，比如百度在线瓦片地图。 所以在使用在线瓦片地图或者自己制作的瓦片地图时，都需要知道使用的分辨率是多少。 如若不然，可能也会出现位置偏移。 自定义瓦片地图及加载","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"OpenLayers 3 图标及提示信息","date":"2018-01-18T12:29:59.000Z","path":"20180118/openlayers/ch07/index.html","text":"图标及提示信息图标是GIS应用中必不可少的要素，比如在地图上标注饭店，学校，加油站等，就需要添加图标，点击图标，可能需要提示更为详细的信息，比如地址，评价，或者更为复杂的业务信息。本节将从基本的应用入手讲解，直到比较高级一些的自定义特色图标和信息展示。 应用overlay在OpenLayer3中添加图标有两种方式，一种是我们这一小节马上就要介绍的，比较传统的overlay，另一种是下一小节马上就要介绍的Feature + Style的方式。 overlay之所以传统，是因为它就是传统的html方式显示图片。 下面就是用这种方式加载一个锚点的示例： var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: ‘map’, view: new ol.View({ projection: ‘EPSG:4326’, center: [104, 30], zoom: 10 }) }); var anchor = new ol.Overlay({ element: document.getElementById(‘anchor’) }); anchor.setPosition([104, 30]); map.addOverlay(anchor);代码如下：123456789101112131415161718192021222324252627&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;!--下面就是传统的显示一个图片图标的方式，用img--&gt;&lt;div id=\"anchor\"&gt;&lt;img src=\"../img/anchor.png\" alt=\"示例锚点\"/&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; projection: 'EPSG:4326', center: [104, 30], zoom: 10 &#125;) &#125;); // 下面把上面的图标附加到地图上，需要一个ol.Overlay var anchor = new ol.Overlay(&#123; element: document.getElementById('anchor') &#125;); // 关键的一点，需要设置附加到地图上的位置 anchor.setPosition([104, 30]); // 然后添加到map上 map.addOverlay(anchor);&lt;/script&gt;代码的说明参加注释，最终效果是在地图中间有一个锚点图标。## 缺点当图标比较多的情况下，如果采用这种方式，那么我们会加入非常多的HTML元素，从而造成效率降低。 关于效率的测试，大家可以自行测试。 为什么会这样呢？ 因为界面上元素的遍历在数量比较多的情况下，会变慢，基于此基础上的渲染，鼠标事件都会变慢。## 优点这种使用传统的方式显示图标可以应用传统的HTML技术，比如鼠标移动到图标上，鼠标图标变成手势。 我们可以用css来处理就可以了，比如在head里面添加下面的代码： #anchor { cursor:pointer; }12345&lt;style type=\"text/css\"&gt; #anchor &#123; cursor:pointer; &#125;&lt;/style&gt;就可以看到鼠标放到锚点上去的时候，鼠标图标从箭头，变成手了。 类似的其他技术都可以应用上去，比如css动画。 鉴于动画在前端的重要性，下面单独分出一个小节用实例来讲解。# 动画图标动起来的图标会更有吸引力，下面用overlay+css的方式来实现： @keyframes zoom { from {top: 0; left: 0; width: 32px; height: 32px;} 50% {top: -16px; left: -16px; width: 64px; height: 64px;} to {top: 0; left: 0; width: 32px; height: 32px;} } @-moz-keyframes zoom / Firefox / { from {top: 0; left: 0; width: 32px; height: 32px;} 50% {top: -16px; left: -16px; width: 64px; height: 64px;} to {top: 0; left: 0; width: 32px; height: 32px;} } @-webkit-keyframes zoom / Safari 和 Chrome / { from {top: 0; left: 0; width: 32px; height: 32px;} 50% {top: -16px; left: -16px; width: 64px; height: 64px;} to {top: 0; left: 0; width: 32px; height: 32px;} } @-o-keyframes zoom / Opera / { from {top: 0; left: 0; width: 32px; height: 32px;} 50% {top: -16px; left: -16px; width: 64px; height: 64px;} to {top: 0; left: 0; width: 32px; height: 32px;} } #anchorImg { display: block; position: absolute; animation: zoom 5s; animation-iteration-count: infinite; -moz-animation: zoom 5s; / Firefox / -moz-animation-iteration-count: infinite; -webkit-animation: zoom 5s; / Safari 和 Chrome / -webkit-animation-iteration-count: infinite; -o-animation: zoom 5s; / Opera / -o-animation-iteration-count: infinite; } var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map', view: new ol.View({ projection: 'EPSG:4326', center: [104, 30], zoom: 10 }) }); var anchor = new ol.Overlay({ element: document.getElementById('anchor') }); anchor.setPosition([104, 30]); map.addOverlay(anchor); 代码和之前的例子差不多，只是多了css动画的设置：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;head&gt; &lt;!--定义动画，图标先放大，再缩小--&gt; &lt;style type=\"text/css\"&gt; @keyframes zoom &#123; from &#123;top: 0; left: 0; width: 32px; height: 32px;&#125; 50% &#123;top: -16px; left: -16px; width: 64px; height: 64px;&#125; to &#123;top: 0; left: 0; width: 32px; height: 32px;&#125; &#125; @-moz-keyframes zoom /* Firefox */ &#123; from &#123;top: 0; left: 0; width: 32px; height: 32px;&#125; 50% &#123;top: -16px; left: -16px; width: 64px; height: 64px;&#125; to &#123;top: 0; left: 0; width: 32px; height: 32px;&#125; &#125; @-webkit-keyframes zoom /* Safari 和 Chrome */ &#123; from &#123;top: 0; left: 0; width: 32px; height: 32px;&#125; 50% &#123;top: -16px; left: -16px; width: 64px; height: 64px;&#125; to &#123;top: 0; left: 0; width: 32px; height: 32px;&#125; &#125; @-o-keyframes zoom /* Opera */ &#123; from &#123;top: 0; left: 0; width: 32px; height: 32px;&#125; 50% &#123;top: -16px; left: -16px; width: 64px; height: 64px;&#125; to &#123;top: 0; left: 0; width: 32px; height: 32px;&#125; &#125; /* 应用css动画到图标元素上 */ #anchorImg &#123; display: block; position: absolute; animation: zoom 5s; animation-iteration-count: infinite; /* 一直重复动画 */ -moz-animation: zoom 5s; /* Firefox */ -moz-animation-iteration-count: infinite; /* 一直重复动画 */ -webkit-animation: zoom 5s; /* Safari 和 Chrome */ -webkit-animation-iteration-count: infinite; /* 一直重复动画 */ -o-animation: zoom 5s; /* Opera */ -o-animation-iteration-count: infinite; /* 一直重复动画 */ &#125; &lt;/style&gt;&lt;/head&gt;&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;div id=\"anchor\" style=\"width: 64px;height: 64px;\" &gt;&lt;img id='anchorImg' src=\"../img/anchor.png\" alt=\"示例锚点\"/&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; projection: 'EPSG:4326', center: [104, 30], zoom: 10 &#125;) &#125;); var anchor = new ol.Overlay(&#123; element: document.getElementById('anchor') &#125;); anchor.setPosition([104, 30]); map.addOverlay(anchor);&lt;/script&gt; 除了这种css实现动画之外，你还可以直接加载gif动画，这是非常简单的，再此不表。 设置图标位置如果像之前那样设置图标，不做任何位置设置，那么默认情况下，图标的中心点对应于地图位置。下面这个地图显示了这个位置，中心那个红点所处位置就是[104, 30]，可以这个点对应于图标的中心位置： var layer2 = new ol.layer.Vector({ source: new ol.source.Vector() }) var map2 = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer2 ], target: 'map2', view: new ol.View({ projection: 'EPSG:4326', center: [104, 30], zoom: 10 }) }); var anchor2 = new ol.Feature({ geometry: new ol.geom.Point([104, 30]) }); anchor2.setStyle(new ol.style.Style({ image: new ol.style.Icon({ src: '../img/anchor.png' }) })); layer2.getSource().addFeature(anchor2); var refFeature = new ol.Feature({ geometry: new ol.geom.Point([104, 30]) }) refFeature.setStyle(new ol.style.Style({ image: new ol.style.Circle({ radius: 2, fill: new ol.style.Fill({ color: 'red' }) }) })); layer2.getSource().addFeature(refFeature); 有时候我们可能并不想这样，比如我们希望锚点图标下方的箭头指向地图位置。 比如这样： var layer3 = new ol.layer.Vector({ source: new ol.source.Vector() }) var map3 = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer3 ], target: 'map3', view: new ol.View({ projection: 'EPSG:4326', center: [104, 30], zoom: 10 }) }); var anchor3 = new ol.Feature({ geometry: new ol.geom.Point([104, 30]) }); anchor3.setStyle(new ol.style.Style({ image: new ol.style.Icon({ src: '../img/anchor.png', anchor: [0.5, 1] }) })); layer3.getSource().addFeature(anchor3); var refFeature3 = new ol.Feature({ geometry: new ol.geom.Point([104, 30]) }) refFeature3.setStyle(new ol.style.Style({ image: new ol.style.Circle({ radius: 2, fill: new ol.style.Fill({ color: 'red' }) }) })); layer3.getSource().addFeature(refFeature3); 要做到这个效果，我们只需要把设置样式的代码加上anchor的设置： 1234image: new ol.style.Icon(&#123; src: '../img/anchor.png', anchor: [0.5, 1] // 设置图标位置&#125;) 为什么是[0.5, 1]这种值，表示什么？ 默认情况下，位置坐标是按照比例的方式来设置的，范围从0到1，x轴上0表示最左边，1表示最右边，y轴上0表示最上边，1表示最下边。 如代码所示，x设置为0.5可以让图片在x方向上居中，y设置为1可以让图片在y方向上移动到最底端。 大家可以给予上面这个代码修改一下，试试[0, 0]会让图标处于什么位置？ 除了按照比例进行移动之外，还可以按照像素来计算位置，但必须显示设置anchorXUnits或 anchorYUnits为pixels。 根据不同的需要，可以采用不同的单位来设置。 根据层级放大缩小图标由于图标不会跟随图层的放大缩小而放大缩小，所以在某些业务应用中，可能并不合适，需要也跟随变化。 之前就有同学提到这个问题，在ol.style.Icon中是可以设置scale的，这样就为我们提供了方便。 通过设置它，就可以做到。 下面这个地图中的锚点图标，就会随着地图放大缩小而变化大小： var layer = new ol.layer.Vector({ source: new ol.source.Vector() }) var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer ], target: 'map', view: new ol.View({ projection: 'EPSG:4326', center: [104, 30], zoom: 10 }) }); var anchor = new ol.Feature({ geometry: new ol.geom.Point([104, 30]) }); anchor.setStyle(new ol.style.Style({ image: new ol.style.Icon({ src: '../img/anchor.png' }) })); layer.getSource().addFeature(anchor); map.getView().on('change:resolution', function(){ var style = anchor.getStyle(); style.getImage().setScale(this.getZoom() / 10); anchor.setStyle(style); }) 和之前的代码绝大部分都是相同的：1234567891011121314151617181920212223242526272829303132333435363738&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var layer = new ol.layer.Vector(&#123; source: new ol.source.Vector() &#125;) var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), layer ], target: 'map', view: new ol.View(&#123; projection: 'EPSG:4326', center: [104, 30], zoom: 10 &#125;) &#125;); var anchor = new ol.Feature(&#123; geometry: new ol.geom.Point([104, 30]) &#125;); anchor.setStyle(new ol.style.Style(&#123; image: new ol.style.Icon(&#123; src: '../img/anchor.png' &#125;) &#125;)); layer.getSource().addFeature(anchor); // 监听地图层级变化 map.getView().on('change:resolution', function()&#123; var style = anchor.getStyle(); // 重新设置图标的缩放率，基于层级10来做缩放 style.getImage().setScale(this.getZoom() / 10); anchor.setStyle(style); &#125;)&lt;/script&gt; 利用一个监听和scale改变，就实现了这个同比缩放。 具体缩放多少，请根据业务来设置，可以设置的更加精细，此处只是功能示例。 其实还有另外一种方式，可以实现动态缩放大小，参见styleFunction应用。 另类设置svg图标图标除了可以直接设置png的文件url之外，也可以设置svg的文件url，但这并不是唯一的加载svg图标的方式。 OpenLayers 3提供了直接使用图像对象来设置的方式，对应于ol.style.Icon构造函数中的img参数。 如下： var layer = new ol.layer.Vector({ source: new ol.source.Vector() }) var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer ], target: 'map', view: new ol.View({ projection: 'EPSG:4326', center: [104, 30], zoom: 10 }) }); var anchor = new ol.Feature({ geometry: new ol.geom.Point([104, 30]) }); // 构建svg的Image对象 var svg = ''+ ''+ ''; var mysvg = new Image(); mysvg.src = 'data:image/svg+xml,' + escape(svg); anchor.setStyle(new ol.style.Style({ image: new ol.style.Icon({ img: mysvg, // 设置Image对象 imgSize: [30, 30] // 及图标大小 // src: 'http://www.williambuck.com/portals/0/Skins/WilliamBuck2014/images/location-icon.svg', // size: [30, 30] }) })); layer.getSource().addFeature(anchor); 对应的代码：123456789101112131415161718192021222324252627282930313233343536373839404142&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var layer = new ol.layer.Vector(&#123; source: new ol.source.Vector() &#125;) var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), layer ], target: 'map', view: new ol.View(&#123; projection: 'EPSG:4326', center: [104, 30], zoom: 10 &#125;) &#125;); var anchor = new ol.Feature(&#123; geometry: new ol.geom.Point([104, 30]) &#125;); // 构建svg的Image对象 var svg = '&lt;svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"30px\" height=\"30px\" viewBox=\"0 0 30 30\" enable-background=\"new 0 0 30 30\" xml:space=\"preserve\"&gt;'+ '&lt;path fill=\"#156BB1\" d=\"M22.906,10.438c0,4.367-6.281,14.312-7.906,17.031c-1.719-2.75-7.906-12.665-7.906-17.031S10.634,2.531,15,2.531S22.906,6.071,22.906,10.438z\"/&gt;'+'&lt;circle fill=\"#FFFFFF\" cx=\"15\" cy=\"10.677\" r=\"3.291\"/&gt;&lt;/svg&gt;'; var mysvg = new Image(); mysvg.src = 'data:image/svg+xml,' + escape(svg); anchor.setStyle(new ol.style.Style(&#123; image: new ol.style.Icon(&#123; img: mysvg, // 设置Image对象 imgSize: [30, 30] // 及图标大小// src: 'http://www.williambuck.com/portals/0/Skins/WilliamBuck2014/images/location-icon.svg',// size: [30, 30] &#125;) &#125;)); layer.getSource().addFeature(anchor);&lt;/script&gt; 前半部分代码都一样，最后设置样式的时候，可以根据注释来理解不一样的代码，构建Image对象，设置src是关键。 规则几何体图标相对于png而言，svg这样的矢量图在放大缩小方面更清晰，但对于规则几何体而言，如果也使用svg，未免复杂了一点，OpenLayers 3为了简化这样的操作，提供了一个规则几何体的样式类ol.style.RegularShape，使用它可以轻松绘制正方形，三角形等,也支持星形规则几何图形，比如下面这样： var layer = new ol.layer.Vector({ source: new ol.source.Vector() }) var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer ], target: 'map', view: new ol.View({ projection: 'EPSG:4326', center: [104, 30], zoom: 10 }) }); var shape = new ol.Feature({ geometry: new ol.geom.Point([104, 30]) }); shape.setStyle(new ol.style.Style({ image: new ol.style.RegularShape({ points: 3, radius: 10, stroke: new ol.style.Stroke({ color: 'red', size: 2 }) }) })); layer.getSource().addFeature(shape); var star = new ol.Feature({ geometry: new ol.geom.Point([104.1, 30.1]) }); star.setStyle(new ol.style.Style({ image: new ol.style.RegularShape({ points: 5, radius1: 20, radius2: 10, stroke: new ol.style.Stroke({ color: 'red', size: 2 }), fill: new ol.style.Fill({ // 设置五星填充样式 color: 'blue' }) }) })); layer.getSource().addFeature(star); 图上有一个三角形，一个5星，代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var layer = new ol.layer.Vector(&#123; source: new ol.source.Vector() &#125;) var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), layer ], target: 'map', view: new ol.View(&#123; projection: 'EPSG:4326', center: [104, 30], zoom: 10 &#125;) &#125;); // 添加一个三角形 var shape = new ol.Feature(&#123; geometry: new ol.geom.Point([104, 30]) &#125;); shape.setStyle(new ol.style.Style(&#123; image: new ol.style.RegularShape(&#123; points: 3, // 顶点数 radius: 10, // 图形大小，单位为像素 stroke: new ol.style.Stroke(&#123; // 设置边的样式 color: 'red', size: 2 &#125;) &#125;) &#125;)); layer.getSource().addFeature(shape); // 添加一个五星 var star = new ol.Feature(&#123; geometry: new ol.geom.Point([104.1, 30.1]) &#125;); star.setStyle(new ol.style.Style(&#123; image: new ol.style.RegularShape(&#123; points: 5, // 顶点个数 radius1: 20, // 外圈大小 radius2: 10, // 内圈大小 stroke: new ol.style.Stroke(&#123; // 设置边的样式 color: 'red', size: 2 &#125;), fill: new ol.style.Fill(&#123; // 设置五星填充样式 color: 'blue' &#125;) &#125;) &#125;)); layer.getSource().addFeature(star);&lt;/script&gt; 除了基本的设置之外，还支持图形旋转，以及跟随地图旋转而旋转，这些设置在其他的应用中也多有涉及，此处不再用实例来介绍，可自行验证。 用Canvas自绘图标除了规则的几何体之外，往往需要定义一些不规则的几何体，可以使用svg来实现，但也可以用canvas自己来绘制，比如像下面这个图标： var layer = new ol.layer.Vector({ source: new ol.source.Vector() }) var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer ], target: 'map', view: new ol.View({ projection: 'EPSG:4326', center: [104, 30], zoom: 10 }) }); // 使用canvas绘制一个不规则几何图形 var canvas =document.createElement('canvas'); canvas.width = 20; canvas.height = 20; var context = canvas.getContext(\"2d\"); context.strokeStyle = \"red\"; context.lineWidth = 1; context.beginPath(); context.moveTo(0, 0); context.lineTo(20, 10); context.lineTo(0, 20); context.lineTo(10, 10); context.lineTo(0, 0); context.stroke(); // 把绘制了的canvas设置到style里面 var style = new ol.style.Style({ image: new ol.style.Icon({ img: canvas, imgSize: [canvas.width, canvas.height], rotation: 90 * Math.PI / 180 }) }); // 创建一个Feature var shape = new ol.Feature({ geometry: new ol.geom.Point([104, 30]) }); // 应用具有不规则几何图形的样式到Feature shape.setStyle(style); layer.getSource().addFeature(shape); 代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var layer = new ol.layer.Vector(&#123; source: new ol.source.Vector() &#125;) var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), layer ], target: 'map', view: new ol.View(&#123; projection: 'EPSG:4326', center: [104, 30], zoom: 10 &#125;) &#125;); // 使用canvas绘制一个不规则几何图形 var canvas =document.createElement('canvas'); canvas.width = 20; canvas.height = 20; var context = canvas.getContext(\"2d\"); context.strokeStyle = \"red\"; context.lineWidth = 1; context.beginPath(); context.moveTo(0, 0); context.lineTo(20, 10); context.lineTo(0, 20); context.lineTo(10, 10); context.lineTo(0, 0); context.stroke(); // 把绘制了的canvas设置到style里面 var style = new ol.style.Style(&#123; image: new ol.style.Icon(&#123; img: canvas, imgSize: [canvas.width, canvas.height], rotation: 90 * Math.PI / 180 &#125;) &#125;); // 创建一个Feature var shape = new ol.Feature(&#123; geometry: new ol.geom.Point([104, 30]) &#125;); // 应用具有不规则几何图形的样式到Feature shape.setStyle(style); layer.getSource().addFeature(shape);&lt;/script&gt; 和svg的那个例子一样，使用了ol.style.Icon样式的img属性来设置，需要注意的是，必须设置imgSize属性，因为仅仅通过img设置的图像对象，没有办法自动获取宽高。 同时，官网也提供了一个类似的例子earthquake-custom-symbol，只是使用OpenLayers3 内部提供的封装库来绘制图像到canvas上，原理一样。 有了这种方式之后，相信做任何图标都不会遇到难题了。 动态改变图标在实际业务应用中，需要根据环境条件，动态的修改图标样式，以反馈数据变化。 比如像下面这样，点击五星，五星图标会用红色填充： var layer = new ol.layer.Vector({ source: new ol.source.Vector() }) var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer ], target: 'map', view: new ol.View({ projection: 'EPSG:4326', center: [104, 30], zoom: 10 }) }); var star = new ol.Feature({ geometry: new ol.geom.Point([104, 30]) }); star.setStyle(new ol.style.Style({ image: new ol.style.RegularShape({ points: 5, radius1: 20, radius2: 10, stroke: new ol.style.Stroke({ color: 'red', size: 2 }) }) })); layer.getSource().addFeature(star); map.on('click', function(event){ var feature = map.forEachFeatureAtPixel(event.pixel, function(feature){ return feature; }); if (feature) { var style = feature.getStyle().getImage(); feature.setStyle(new ol.style.Style({ image: new ol.style.RegularShape({ points: 5, radius1: 20, radius2: 10, stroke: style.getStroke(), fill: new ol.style.Fill({ color: 'red' }) }) })); } }); 对应的代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var layer = new ol.layer.Vector(&#123; source: new ol.source.Vector() &#125;) var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), layer ], target: 'map', view: new ol.View(&#123; projection: 'EPSG:4326', center: [104, 30], zoom: 10 &#125;) &#125;); // 添加一个空心的五星 var star = new ol.Feature(&#123; geometry: new ol.geom.Point([104, 30]) &#125;); star.setStyle(new ol.style.Style(&#123; image: new ol.style.RegularShape(&#123; points: 5, radius1: 20, radius2: 10, stroke: new ol.style.Stroke(&#123; color: 'red', size: 2 &#125;) &#125;) &#125;)); layer.getSource().addFeature(star); // 监听地图点击事件 map.on('click', function(event)&#123; var feature = map.forEachFeatureAtPixel(event.pixel, function(feature)&#123; return feature; &#125;); if (feature) &#123; // 将空心五星为红色实心五星 var style = feature.getStyle().getImage(); feature.setStyle(new ol.style.Style(&#123; image: new ol.style.RegularShape(&#123; points: 5, radius1: 20, radius2: 10, stroke: style.getStroke(), fill: new ol.style.Fill(&#123; color: 'red' &#125;) &#125;) &#125;)); &#125; &#125;);&lt;/script&gt; 文字标注前面基本都在围绕着图标进行说明，其实用Feature + Style的方式，也是可以单独添加文字的，虽然简单，但可能有些同学会忽略这样的做法，所以在此用一个简单的示例来说明： var layer = new ol.layer.Vector({ source: new ol.source.Vector() }) var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer ], target: 'map', view: new ol.View({ projection: 'EPSG:4326', center: [104.06, 30.67], zoom: 10 }) }); var anchor = new ol.Feature({ geometry: new ol.geom.Point([104.06, 30.67]) }); anchor.setStyle(new ol.style.Style({ text: new ol.style.Text({ text: '淡叔所在地成都', fill: new ol.style.Fill({ color: 'red' }) }) })); layer.getSource().addFeature(anchor); 代码如下： 1234567891011121314151617181920212223242526272829303132333435&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var layer = new ol.layer.Vector(&#123; source: new ol.source.Vector() &#125;) var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), layer ], target: 'map', view: new ol.View(&#123; projection: 'EPSG:4326', center: [104.06, 30.67], zoom: 10 &#125;) &#125;); var anchor = new ol.Feature(&#123; geometry: new ol.geom.Point([104.06, 30.67]) &#125;); // 设置文字style anchor.setStyle(new ol.style.Style(&#123; text: new ol.style.Text(&#123; // font: '10px sans-serif' 默认这个字体，可以修改成其他的，格式和css的字体设置一样 text: '淡叔所在地成都', fill: new ol.style.Fill(&#123; color: 'red' &#125;) &#125;) &#125;)); layer.getSource().addFeature(anchor);&lt;/script&gt; 还有很多属性可以设置，比如缩放，旋转，以及位移等等，非常简单，可自行设置调试。 style及应用前面已经介绍了第一种加载图标的方式，现在介绍第二种方式，使用Feature + Style来实现，用这种方式实现之前的效果如下： var layer = new ol.layer.Vector({ source: new ol.source.Vector() }) var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer ], target: 'map', view: new ol.View({ projection: 'EPSG:4326', center: [104, 30], zoom: 10 }) }); var anchor = new ol.Feature({ geometry: new ol.geom.Point([104, 30]) }); anchor.setStyle(new ol.style.Style({ image: new ol.style.Icon({ src: '../img/anchor.png' }) })); layer.getSource().addFeature(anchor); 代码如下：1234567891011121314151617181920212223242526272829303132333435&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; // 我们需要一个vector的layer来放置图标 var layer = new ol.layer.Vector(&#123; source: new ol.source.Vector() &#125;) var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), layer ], target: 'map', view: new ol.View(&#123; projection: 'EPSG:4326', center: [104, 30], zoom: 10 &#125;) &#125;); // 创建一个Feature，并设置好在地图上的位置 var anchor = new ol.Feature(&#123; geometry: new ol.geom.Point([104, 30]) &#125;); // 设置样式，在样式中就可以设置图标 anchor.setStyle(new ol.style.Style(&#123; image: new ol.style.Icon(&#123; src: '../img/anchor.png' &#125;) &#125;)); // 添加到之前的创建的layer中去 layer.getSource().addFeature(anchor);&lt;/script&gt; 效果是一样的，但从代码上来看，是不一样的: 首先overlay需要HTML元素img，但这种方式不需要 overlay是添加在map上的，但是这种方式需要一个Vector的layer，并添加在其上 我们没有办法像overlay那样使用一些HTML技术 应用虽然不能用css直接修改图标显示，但并不是说使用这种方式没有自定义的余地，大家可以先在官网API上看一下ol.style.Icon的构造参数，会看到可以设置位置，透明度，放大缩小，旋转等，基本能满足大多数的应用，由于和CSS不同，很多同学在应用时遇到一些问题，所以下面给出了一些具体的使用示例。 styleFunction应用很多时候，我们会忽略styleFunction的存在，但很明显的，它可以让我们的图标或者标签应用更加灵活，比如根据层级放大缩小图标也可以用styleFunction来实现： var layer = new ol.layer.Vector({ source: new ol.source.Vector() }) var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer ], target: 'map', view: new ol.View({ projection: 'EPSG:4326', center: [104, 30], zoom: 10 }) }); var anchor = new ol.Feature({ geometry: new ol.geom.Point([104, 30]) }); anchor.setStyle(function(resolution){ return [new ol.style.Style({ image: new ol.style.Icon({ src: '../img/anchor.png', scale: map.getView().getZoom() / 10 }) })]; }); layer.getSource().addFeature(anchor); 代码如下：1234567891011121314151617181920212223242526272829303132333435&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var layer = new ol.layer.Vector(&#123; source: new ol.source.Vector() &#125;) var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), layer ], target: 'map', view: new ol.View(&#123; projection: 'EPSG:4326', center: [104, 30], zoom: 10 &#125;) &#125;); var anchor = new ol.Feature(&#123; geometry: new ol.geom.Point([104, 30]) &#125;); // 应用style function，动态的获取样式 anchor.setStyle(function(resolution)&#123; return [new ol.style.Style(&#123; image: new ol.style.Icon(&#123; src: '../img/anchor.png', scale: map.getView().getZoom() / 10 &#125;) &#125;)]; &#125;); layer.getSource().addFeature(anchor);&lt;/script&gt; 对比一下前面同样功能的代码，你会发现这样更加的简单， 同时在此基础上扩展开来的应用也会更加的多。 比如动态替换图标，或者让图标不显示等等，可自行来实现这两个需求，以掌握此方式的使用。 在上面这个例子中，我们是在feature上应用了styleFunction，通过官网API文档可以看到，其类型为ol.FeatureStyleFunction，函数仅带有一个参数resolution，在上面的代码中看到了，在函数体内this指的是当前的feature，根据文档说明，这个函数要范围一个style数组。 这一点需要注意，虽然实际使用中，即使没有返回数组也不会出错，但还是希望大家能遵守官网API的说明来使用该接口。 我们知道，除了feature可以设置样式之外，layer也是可以设置样式的，同样地也支持styleFunction，但是需要注意的是，其定义和feature的不一样，类型为ol.style.StyleFunction，该函数具有两个参数，第一个参数为feature，第二个参数为resolution，同样地，该函数需要返回style数组。 styleFunction在feature上具有很好的灵活性，那么应用在layer上，同样威力无穷，比如像下面这个： var layerStyleFunction = function(feature, resolution) { var type = feature.get('type'); var style = null; if (type === 'point') { style = new ol.style.Style({ image: new ol.style.Circle({ radius: 1, fill: new ol.style.Fill({ color: 'red' }) }) }); } else if ( type === 'circle') { style = new ol.style.Style({ image: new ol.style.Circle({ radius: 10, stroke: new ol.style.Stroke({ color: 'red', size: 1 }) }) }); } else { style = new ol.style.Style({ image: new ol.style.RegularShape({ points: 5, radius: 10, fill: new ol.style.Fill({ color: 'blue' }) }) }); } return [style]; }; var layer2 = new ol.layer.Vector({ source: new ol.source.Vector(), style: layerStyleFunction }); var map2 = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer2 ], target: 'map2', view: new ol.View({ projection: 'EPSG:4326', center: [104, 30], zoom: 10 }) }); var rect = new ol.Feature({ geometry: new ol.geom.Point([104, 30]) }); layer2.getSource().addFeature(rect); var circle = new ol.Feature({ geometry: new ol.geom.Point([104, 30]) }); circle.set('type', 'circle'); layer2.getSource().addFeature(circle); var point = new ol.Feature({ geometry: new ol.geom.Point([104, 30]) }); point.set('type', 'point'); layer2.getSource().addFeature(point); 在地图上可以看到中心位置有一个圆，一个点，一个五边形，但这次都没有直接在这些feature上设置样式，具体的代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;div id=\"map2\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; // 创建layer使用的style function，根据feature的自定义type，返回不同的样式 var layerStyleFunction = function(feature, resolution) &#123; var type = feature.get('type'); var style = null; // 点 if (type === 'point') &#123; style = new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 1, fill: new ol.style.Fill(&#123; color: 'red' &#125;) &#125;) &#125;); &#125; else if ( type === 'circle') &#123; // 圆形 style = new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 10, stroke: new ol.style.Stroke(&#123; color: 'red', size: 1 &#125;) &#125;) &#125;); &#125; else &#123; // 其他形状 style = new ol.style.Style(&#123; image: new ol.style.RegularShape(&#123; points: 5, radius: 10, fill: new ol.style.Fill(&#123; color: 'blue' &#125;) &#125;) &#125;); &#125; // 返回 style 数组 return [style]; &#125;; var layer2 = new ol.layer.Vector(&#123; source: new ol.source.Vector(), style: layerStyleFunction // 应用上面创建的 style function &#125;); var map2 = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), layer2 ], target: 'map2', view: new ol.View(&#123; projection: 'EPSG:4326', center: [104, 30], zoom: 10 &#125;) &#125;); // 添加三个feature，并设置自定义属性 type var rect = new ol.Feature(&#123; geometry: new ol.geom.Point([104, 30]) &#125;); layer2.getSource().addFeature(rect); var circle = new ol.Feature(&#123; geometry: new ol.geom.Point([104, 30]) &#125;); circle.set('type', 'circle'); layer2.getSource().addFeature(circle); var point = new ol.Feature(&#123; geometry: new ol.geom.Point([104, 30]) &#125;); point.set('type', 'point'); layer2.getSource().addFeature(point);&lt;/script&gt; 这就是一个典型的根据feature的属性进行不同渲染的例子，可以在业务上无限扩展，比如feature的属性可以是速度，可以是大小，可以是时间，可以是权重等等。 由此可见，只要掌握了这个方法，前端按照条件渲染就不再困难。 大量图标方案此处的大量图标方案，不涉及服务器端，如果图标不进行交互，可以把图标渲染到底图上。 此处只介绍说明在前端可交互的大量图标方案，在图标数量不大的情况，无论使用什么方式加载，都不会有性能问题，当图标多了之后，就会出现卡顿，内存占用增大等问题。 在OpenLayers 3开发中，可以考虑下面两个方案来解决这个问题。 复用样式减少内存占用在应用大量图标的时候，其实图标样式差异化并不大，比如快餐店，公共厕所，公交站点等等有很多，但都是用同样的图标在地图上标准，在不注意的时候，我们是采用下面的方式来添加图标的： 12345678910for (var index = 0; index &lt; 10000; index++) &#123; var feature = new ol.Feature(&#123; geometry: new ol.geom.Point([latlon[index].lon, latlon[index].lat]) &#125;); feature.setStyle(new ol.style.Style(&#123; image: new ol.style.Icon(&#123; src: '../img/marker.png' &#125;) &#125;));&#125; 注意上面代码，对每个feature设置style的时候，都是直接new的，这样势必会创建很多对象，占用很多内存。 那么复用必然减少很多内存，重构上面的代码为： 1234567891011var style = new ol.style.Style(&#123; image: new ol.style.Icon(&#123; src: '../img/marker.png' &#125;)&#125;);for (var index = 0; index &lt; 10000; index++) &#123; var feature = new ol.Feature(&#123; geometry: new ol.geom.Point([latlon[index].lon, latlon[index].lat]) &#125;); feature.setStyle(style);&#125; 这样，我们就只创建了一个style对象，那么势必减少内存占用。 如果有多类图标，可以用数组缓存下来： 12345678910111213141516171819202122232425var styles = [ new ol.style.Style(&#123; image: new ol.style.Icon(&#123; src: '../img/marker1.png' &#125;) &#125;), new ol.style.Style(&#123; image: new ol.style.Icon(&#123; src: '../img/marker2.png' &#125;) &#125;), new ol.style.Style(&#123; image: new ol.style.Icon(&#123; src: '../img/marker3.png' &#125;) &#125;)];for (var index = 0; index &lt; 10000; index++) &#123; var feature = new ol.Feature(&#123; geometry: new ol.geom.Point([latlon[index].lon, latlon[index].lat]) &#125;); feature.setStyle(styles[index % styles.length]);&#125; 由于官网有实际的例子，大家请移步到icon-sprite-webgl。 下面是其中的一些代码片段，在里面加入了一些注释，便于大家理解： 12345678910111213141516171819202122232425262728// 预先设置好要使用的style，并缓存在icons数组中for (i = 0; i &lt; iconCount; ++i) &#123; var info = iconInfo[i]; icons[i] = new ol.style.Icon(&#123; offset: info.offset, opacity: info.opacity, rotateWithView: info.rotateWithView, rotation: info.rotation, scale: info.scale, size: info.size, src: 'data/Butterfly.png' &#125;);&#125;......for (i = 0; i &lt; featureCount; ++i) &#123; geometry = new ol.geom.Point( [2 * e * Math.random() - e, 2 * e * Math.random() - e]); feature = new ol.Feature(geometry); feature.setStyle( new ol.style.Style(&#123; // 直接使用上面缓存的icons里面的样式 image: icons[i % (iconCount - 1)] &#125;) ); features[i] = feature;&#125; 大家可在官网例子的基础上修改一下代码，验证一下复用和不复用的情况下，内存占用相差多少。 复用Canvas提高效率采用上一种方式基本能解决掉绝大部分的问题，但是OpenLayers 3还提供了一种复用图标渲染使用的Canvas的方式，对应的类是ol.style.AtlasManager。 在了解其作用之前，需要先了解一点图标的渲染机制，比如ol.style.Circle和ol.style.RegularShape这样的图标，在内部渲染时，都会创建一个HTML的canvas，然后在这个画布上绘制图像，然后再把图像复制到地图上。 这样创建一个图标，就会在内部创建一个canvas。 ol.style.AtlasManager解决的问题就是，用一个大的canvas来绘制多个图标，这样就能减少canvas的数量，从而提高效率。 官网有一个具体的例子来说明这种方法的使用，参见Symbols with WebGL。 其中，关键的代码在： 123456789101112131415161718192021222324var atlasManager = new ol.style.AtlasManager(&#123; // we increase the initial size so that all symbols fit into // a single atlas image initialSize: 512&#125;);...... // circle symbol symbols.push(new ol.style.Circle(&#123; opacity: info.opacity, scale: info.scale, radius: radiuses[j], fill: new ol.style.Fill(&#123; color: info.fillColor &#125;), stroke: new ol.style.Stroke(&#123; color: info.strokeColor, width: 1 &#125;), // by passing the atlas manager to the symbol, // the symbol will be added to an atlas atlasManager: atlasManager // 注意：在创建style的这个地方设置了 atlasManager &#125;)); 需要注意的是，在API官方文档上，并没有这个属性的设置，但内部实现是有这个优化的。 同时需要注意的是经常使用的ol.style.Icon目前是没有实现这个优化的。 提示信息提示信息在很多业务场景中都需要，比如显示当前位置周边的饭店列表，或者点击饭店，显示饭店详细信息，交通路线，电话号码等等。 鉴于显示的业务信息比较多，所以通常的做法都是采用overlay的方式来做。 用传统的HTML来布局和排版信息，然后附加到地图上的指定位置就可以了。 官网中提供了一个具体的例子： popup。 下面就解读一下这个例子的代码： 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!--此处用html布局，各种样式均在css中定义好了--&gt;&lt;div id=\"popup\" class=\"ol-popup\"&gt; &lt;a href=\"#\" id=\"popup-closer\" class=\"ol-popup-closer\"&gt;&lt;/a&gt; &lt;div id=\"popup-content\"&gt;&lt;/div&gt;&lt;/div&gt;......&lt;script&gt; // 获取到popup的节点 var container = document.getElementById('popup'); var content = document.getElementById('popup-content'); var closer = document.getElementById('popup-closer'); // 创建一个overlay, 绑定html元素container var overlay = new ol.Overlay(/** @type &#123;olx.OverlayOptions&#125; */ (&#123; element: container, autoPan: true, autoPanAnimation: &#123; duration: 250 &#125; &#125;)); ...... // 监听地图点击事件 map.on('singleclick', function(evt) &#123; // 获取当前点击坐标，并设置到HTML元素上去 var coordinate = evt.coordinate; var hdms = ol.coordinate.toStringHDMS(ol.proj.transform( coordinate, 'EPSG:3857', 'EPSG:4326')); content.innerHTML = '&lt;p&gt;You clicked here:&lt;/p&gt;&lt;code&gt;' + hdms + '&lt;/code&gt;'; // 设置overlay的位置，从而显示在鼠标点击处 overlay.setPosition(coordinate); &#125;);&lt;/script&gt;","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"OpenLayers 3 内置交互方式介绍","date":"2018-01-18T12:29:59.000Z","path":"20180118/openlayers/ch09/index.html","text":"Interaction交互是人机界面非常重要的一个部分，任何一个GIS引擎都会内置这一部分功能，而不是让开发者自己实现。 在交互方式上，几乎都是约定俗成的，比如用鼠标左键双击地图可以放大地图，按住鼠标左键拖动地图可以移动浏览地图，用滚动鼠标中间的滑轮可以放大缩小地图等等。 OpenLayers 3都内置支持这些交互方式，同时还具备更多的其他交互方式，这些都将一并在本章节介绍。 更为重要的是，了解其中的基本原理，并在此基础上，应用于自己的业务开发。 内置交互方式介绍OpenLayers 3提供了最基本的地图放大，缩小，平移等功能，以满足用户浏览地图的需要。 这些功能都是内置的，实现类都放在包ol.interaction下面，可以通过官网API查询到。 在做二次开发的时候，我们无需做任何设置，地图就具有这些功能，比如下面这个最简单的地图，你可以用鼠标对它进行浏览，不管是放大，还是缩小，平移都可以。 var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); 这个地图的代码在本教程最开始的时候，就已经见过了：12345678910111213141516&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;);&lt;/script&gt; 虽然代码中没有做任何的设置，ol.Map的默认行为中，设置了和地图的交互方式，如果表示出来，代码是这样的：1234567891011121314151617&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; interactions: ol.interaction.defaults(), // 不设置的情况下，默认会设置为ol.interaction.defaults() layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;);&lt;/script&gt; ol.interaction.defaults()这个函数用于返回默认的交互方式，通过API文档可知，还可以通过参数控制交互方式，非常的灵活。 在进一步深入之前，还是先了解一下默认都提供了那些交互方式： 按住alt+shift键，用鼠标左键拖动地图，就能让地图旋转，对应的交互类为ol.interaction.DragRotate。 用鼠标左键双击地图，就可以放大地图，对应的交互类为ol.interaction.DoubleClickZoom。 用鼠标左键，拖拽地图，就可以平移地图，对应的交互类为ol.interaction.DragPan。 在触摸屏上，用两个手指在触摸屏上旋转，就可以旋转地图，对应的交互类为ol.interaction.PinchRotate。 在触摸屏上，用两个手指在触摸屏上缩放，就可以缩放地图，对应的交互类为ol.interaction.PinchZoom。 用键盘上的上下左右键，就可以平移地图，对应的交互类为ol.interaction.KeyboardPan。 用键盘上的+/-键，就可以缩放地图，对应的交互类为ol.interaction.KeyboardZoom。 滚动鼠标中间的滑轮，就可以缩放地图，对应的交互类为ol.interaction.MouseWheelZoom。 按住shift键，同时用鼠标左键在地图上拖动，就可以放大地图，对应的交互类为ol.interaction.DragZoom。 从上面可以看到，支持的交互方式挺多的，归纳为缩放，平移，旋转三类。 同时支持键盘，鼠标，和触屏三种方式。 虽然默认的交互方式很全，但如果我们的地图只是在PC端提供或者只是在触屏提供，那么有些交互方式就会显得多余，最好是去掉不需要的，或者我们的地图因为业务需要，不允许用户平移，或者缩放地图。 为了满足这样的需求，ol.interaction.defaults()提供了相应的参数来控制交互方式，详见ol.interaction.defaults API文档。 下面简单演示一个不能缩放的地图： new ol.Map({ interactions: ol.interaction.defaults({ doubleClickZoom: false, mouseWheelZoom: false, shiftDragZoom: false, pinchZoom:false }), layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map2', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); 代码如下：1234567891011121314151617181920212223&lt;div id=\"map2\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; new ol.Map(&#123; // 让所有的zoom开关都设置为false interactions: ol.interaction.defaults(&#123; doubleClickZoom: false, mouseWheelZoom: false, shiftDragZoom: false, pinchZoom:false &#125;), layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map2', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;);&lt;/script&gt; 有时候也需要设置地图不能旋转，只要设置altShiftDragRotate:false, pinchRotate:false即可，可自行验证。 注意事项细心的读者有可能已经发现了，前面的第一个地图，我们并没有做任何的限制，但是用键盘控制鼠标平移和缩放，是不行的。 原因在于地图使用的target获取不到键盘事件，我们需要做个简单的设置才行： new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map3', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); 代码如下： 1234567891011121314151617&lt;!--注意：需要设置tabindex，才能使div获得键盘事件--&gt;&lt;div id=\"map3\" tabindex=\"0\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map3', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;);&lt;/script&gt; 实现原理不管是上一节中的哪一种交互方式，本质上都是通过监听事件，来处理相应的业务的，在ol.Map的实现代码中，有下面的代码： 1234567891011121314151617181920212223242526272829303132333435363738394041/** * @private * @type &#123;ol.MapBrowserEventHandler&#125; */ this.mapBrowserEventHandler_ = new ol.MapBrowserEventHandler(this); for (var key in ol.MapBrowserEvent.EventType) &#123; // 遍历所有的事件类型 ol.events.listen(this.mapBrowserEventHandler_, ol.MapBrowserEvent.EventType[key], this.handleMapBrowserEvent, this); // 监听事件，函数handleMapBrowserEvent为事件响应函数 &#125; ...... /** * @param &#123;ol.MapBrowserEvent&#125; mapBrowserEvent The event to handle. */ol.Map.prototype.handleMapBrowserEvent = function(mapBrowserEvent) &#123; if (!this.frameState_) &#123; // With no view defined, we cannot translate pixels into geographical // coordinates so interactions cannot be used. return; &#125; this.focus_ = mapBrowserEvent.coordinate; mapBrowserEvent.frameState = this.frameState_; var interactions = this.getInteractions(); goog.asserts.assert(interactions !== undefined, 'interactions should be defined'); var interactionsArray = interactions.getArray(); var i; if (this.dispatchEvent(mapBrowserEvent) !== false) &#123; // 注意：如果事件处理返回false，交互类就不起作用了 for (i = interactionsArray.length - 1; i &gt;= 0; i--) &#123; // 遍历所有的交互方式 var interaction = interactionsArray[i]; if (!interaction.getActive()) &#123; continue; &#125; var cont = interaction.handleEvent(mapBrowserEvent); // 让各个交互类处理响应的事件 if (!cont) &#123; break; &#125; &#125; &#125;&#125;; 至于每一个交互类如何处理，就和业务相关了，再此之前，先看一下具体有哪些事件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/** * Constants for event names. * @enum &#123;string&#125; */ol.MapBrowserEvent.EventType = &#123; /** * A true single click with no dragging and no double click. Note that this * event is delayed by 250 ms to ensure that it is not a double click. * @event ol.MapBrowserEvent#singleclick * @api stable */ SINGLECLICK: 'singleclick', /** * A click with no dragging. A double click will fire two of this. * @event ol.MapBrowserEvent#click * @api stable */ CLICK: ol.events.EventType.CLICK, /** * A true double click, with no dragging. * @event ol.MapBrowserEvent#dblclick * @api stable */ DBLCLICK: ol.events.EventType.DBLCLICK, /** * Triggered when a pointer is dragged. * @event ol.MapBrowserEvent#pointerdrag * @api */ POINTERDRAG: 'pointerdrag', /** * Triggered when a pointer is moved. Note that on touch devices this is * triggered when the map is panned, so is not the same as mousemove. * @event ol.MapBrowserEvent#pointermove * @api stable */ POINTERMOVE: 'pointermove', POINTERDOWN: 'pointerdown', POINTERUP: 'pointerup', POINTEROVER: 'pointerover', POINTEROUT: 'pointerout', POINTERENTER: 'pointerenter', POINTERLEAVE: 'pointerleave', POINTERCANCEL: 'pointercancel'&#125;; 这些事件在ol.Map的API文档里面，有些是能看到的，就是注释里面有@api的部分，其他的是暂时内部使用的。 按照这个逻辑，我们也可以实现自己的交互方式。 但有一点需要注意，ol.Map处理事件是有先后顺序的，注意看最前面的那段代码的注释，ol.Map会先派发事件给自己的监听器，然后才会把事件给interaction类处理。 如果前面的事件监听器返回false，那么后面的交互类就不会起作用。 比如像下面这样，用鼠标左键双击地图，并不能放大地图： var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); map.on('dblclick', function(event){ return false; }); 为什么？ 注意看代码：123456789101112131415161718192021&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 监听了dblclick事件，并返回了false map.on('dblclick', function(event)&#123; return false; &#125;);&lt;/script&gt; 这样做了后，后果非常的严重，出问题后，可能还不知道为什么？ 所以建议不要轻易在MapBrowserEvent事件的监听器里面返回false。 到此，我们可以进一步分析一下ol.interaction相关交互类的内部实现了，以ol.interaction.DoubleClickZoom为例，其核心必然是处理事件： 12345678910111213141516ol.interaction.DoubleClickZoom.handleEvent = function(mapBrowserEvent) &#123; var stopEvent = false; var browserEvent = mapBrowserEvent.originalEvent; if (mapBrowserEvent.type == ol.MapBrowserEvent.EventType.DBLCLICK) &#123; // 事件类型过滤 var map = mapBrowserEvent.map; var anchor = mapBrowserEvent.coordinate; var delta = browserEvent.shiftKey ? -this.delta_ : this.delta_; // 按住shift键，就缩小，否则就放大 var view = map.getView(); goog.asserts.assert(view, 'map must have a view'); ol.interaction.Interaction.zoomByDelta( map, view, delta, anchor, this.duration_); // 调用 ol.interaction.Interaction.zoomByDelta函数实现放大缩小 mapBrowserEvent.preventDefault(); stopEvent = true; &#125; return !stopEvent;&#125;; 代码其实很简单，如果要自己实现一种交互方式，对照ol.interaction.DoubleClickZoom这个学习，再加以应用就可以了。 Feature选取之选中样式OpenLayers 3除了在地图浏览方面提供内置的交互方式之外，还提供了地图上Feature选取的交互类： ol.interaction.Select。 这是一个经常会用到的类，应用范围非常的广。 我们可以先简单操作一下下面地图中的圆，点击一下，颜色就变了： var layer = new ol.layer.Vector({ source: new ol.source.Vector() }); var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); // 在地图上添加一个圆 var circle = new ol.Feature({ geometry: new ol.geom.Point(ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857')) }) circle.setStyle(new ol.style.Style({ image: new ol.style.Circle({ radius: 10, fill: new ol.style.Fill({ color: 'red' }) }) })); layer.getSource().addFeature(circle); // 添加一个用于选择Feature的交互方式 var selectSingleClick = new ol.interaction.Select({ // style: new ol.style.Style({ // image: new ol.style.Circle({ // radius: 10, // fill: new ol.style.Fill({ // color: 'blue' // }) // }) // }) }); map.addInteraction(selectSingleClick); selectSingleClick.on('select', function(event){ event.selected[0].setStyle(new ol.style.Style({ image: new ol.style.Circle({ radius: 10, fill: new ol.style.Fill({ color: 'blue' }) }) })); }) 在自定义事件及应用中，我们用了方法map.forEachFeatureAtPixel来获取当前选择的Feature，这个例子中，我们没有这样使用： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var layer = new ol.layer.Vector(&#123; source: new ol.source.Vector() &#125;); var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), layer ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 在地图上添加一个圆 var circle = new ol.Feature(&#123; geometry: new ol.geom.Point(ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857')) &#125;) circle.setStyle(new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 10, fill: new ol.style.Fill(&#123; color: 'red' &#125;) &#125;) &#125;)); layer.getSource().addFeature(circle); // 前面的代码我们已经看了很多遍了，关键是下面这段代码 // 添加一个用于选择Feature的交互方式 var selectSingleClick = new ol.interaction.Select(&#123; // API文档里面有说明，可以设置style参数，用来设置选中后的样式，但是这个地方我们注释掉不用，因为就算不注释，也没作用，为什么？ // style: new ol.style.Style(&#123; // image: new ol.style.Circle(&#123; // radius: 10, // fill: new ol.style.Fill(&#123; // color: 'blue' // &#125;) // &#125;) // &#125;) &#125;); map.addInteraction(selectSingleClick); // 监听选中事件，然后在事件处理函数中改变被选中的`feature`的样式 selectSingleClick.on('select', function(event)&#123; event.selected[0].setStyle(new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 10, fill: new ol.style.Fill(&#123; color: 'blue' &#125;) &#125;) &#125;)); &#125;)&lt;/script&gt; 官网其实有例子select-features，但是这里面还是有一些需要注意的地方，比如上面注释里面说到的，为什么style参数设置了没用？ 因为我们的circle本身就设置了样式，而style参数设置的样式，其实是设置在内部新建的一个layer上的，而OpenLayers 3中，feature的样式优先级是大于layer的样式的优先级的。所以没生效，如果换成下面这种方式，就可以了： var layer2 = new ol.layer.Vector({ source: new ol.source.Vector(), style: new ol.style.Style({ image: new ol.style.Circle({ radius: 10, fill: new ol.style.Fill({ color: 'red' }) }) }) }); var map2 = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer2 ], target: 'map2', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); // 在地图上添加一个圆 var circle2 = new ol.Feature({ geometry: new ol.geom.Point(ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857')) }) layer2.getSource().addFeature(circle2); // 添加一个用于选择Feature的交互方式 map2.addInteraction(new ol.interaction.Select({ style: new ol.style.Style({ image: new ol.style.Circle({ radius: 10, fill: new ol.style.Fill({ color: 'blue' }) }) }) })); 代码变成这样了： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;div id=\"map2\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var layer2 = new ol.layer.Vector(&#123; source: new ol.source.Vector(), // 注意：把feature上的style，直接移到layer上，避免直接在feature上设置style style: new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 10, fill: new ol.style.Fill(&#123; color: 'red' &#125;) &#125;) &#125;) &#125;); var map2 = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), layer2 ], target: 'map2', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 在地图上添加一个圆 var circle2 = new ol.Feature(&#123; geometry: new ol.geom.Point(ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857')) &#125;) // 此处不再为feature设置style layer2.getSource().addFeature(circle2); // 添加一个用于选择Feature的交互方式 map2.addInteraction(new ol.interaction.Select(&#123; // 设置选中后的style style: new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 10, fill: new ol.style.Fill(&#123; color: 'blue' &#125;) &#125;) &#125;) &#125;));&lt;/script&gt; 代码改成上面这样就可以了。在使用过程中，请千万留意这个问题。 Feature选取之条件过滤涉及到选取，自然会有各种条件用于过滤，比如是鼠标左键单击，还是双击，是可以选取地图上的任意feature，还是某一类的feature。 对于这些需求，ol.interaction.Select都能满足，在API的文档里面就有相关的参数设置，下面就是一些简单的使用示例。 改变默认的单击选取方式默认情况下，是支持鼠标左键单击选取feature的，在地图上其他地方点击一下，就取消选取了，但这并不是定死的选取方式，你完全可以自定义。 比如鼠标移动到feature上，就选取了，试试： var layer = new ol.layer.Vector({ source: new ol.source.Vector(), style: new ol.style.Style({ image: new ol.style.Circle({ radius: 10, fill: new ol.style.Fill({ color: 'red' }) }) }) }); var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); // 在地图上添加一个圆 var circle = new ol.Feature({ geometry: new ol.geom.Point(ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857')) }) layer.getSource().addFeature(circle); // 添加一个用于选择Feature的交互方式 map.addInteraction(new ol.interaction.Select({ condition: ol.events.condition.pointerMove, // 唯一的不同之处，设置鼠标移到feature上就选取 style: new ol.style.Style({ image: new ol.style.Circle({ radius: 10, fill: new ol.style.Fill({ color: 'blue' }) }) }) })); 代码同之前的例子只有一个地方不同： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var layer = new ol.layer.Vector(&#123; source: new ol.source.Vector(), style: new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 10, fill: new ol.style.Fill(&#123; color: 'red' &#125;) &#125;) &#125;) &#125;); var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), layer ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 在地图上添加一个圆 var circle = new ol.Feature(&#123; geometry: new ol.geom.Point(ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857')) &#125;) layer.getSource().addFeature(circle); // 添加一个用于选择Feature的交互方式 map.addInteraction(new ol.interaction.Select(&#123; condition: ol.events.condition.pointerMove, // 唯一的不同之处，设置鼠标移到feature上就选取 style: new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 10, fill: new ol.style.Fill(&#123; color: 'blue' &#125;) &#125;) &#125;) &#125;));&lt;/script&gt; ol.events.condition里面有很多内置的条件过滤函数，可以在官网API查询，如果内置方式没有，也可以自己写一个类似的函数，比如： 123ol.events.condition.singleClick = function(mapBrowserEvent) &#123; return mapBrowserEvent.type == ol.MapBrowserEvent.EventType.SINGLECLICK;&#125;; 就只是一个类型判断而已，是否非常的简单，任何人都可以自定义一个这种条件过滤函数。 直接对feature过滤除了可以自定义选取的交互方式之外，我们还可以对feature进行过滤，如果当前选取的并不是我们需要的feature，我们可以决定不选取。 比如我们只希望用户能选取圆形，而不能选取五星，选取方式为默认的单击： var circleLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: new ol.style.Style({ image: new ol.style.Circle({ radius: 10, fill: new ol.style.Fill({ color: 'red' }) }) }) }); var starLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: new ol.style.Style({ image: new ol.style.RegularShape({ points: 5, radius1: 20, radius2: 10, fill: new ol.style.Fill({ color: 'red' }) }) }) }); var map2 = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), circleLayer, starLayer ], target: 'map2', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); // 在地图上添加一个圆 var circle1 = new ol.Feature({ geometry: new ol.geom.Point(ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857')) }) circleLayer.getSource().addFeature(circle1); // 在地图上添加一个五星 var star = new ol.Feature({ geometry: new ol.geom.Point(ol.proj.transform( [104.06, 30.05], 'EPSG:4326', 'EPSG:3857')) }) starLayer.getSource().addFeature(star); // 添加一个用于选择Feature的交互方式 map2.addInteraction(new ol.interaction.Select({ style: new ol.style.Style({ image: new ol.style.Circle({ radius: 10, fill: new ol.style.Fill({ color: 'blue' }) }) }), filter: function(feature, layer){ return layer === circleLayer; } })); 代码其实也是非常简单，前面大部分代码都是一样的，关键在最后： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;div id=\"map2\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; // 创建一个用于存放circle的layer var circleLayer = new ol.layer.Vector(&#123; source: new ol.source.Vector(), style: new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 10, fill: new ol.style.Fill(&#123; color: 'red' &#125;) &#125;) &#125;) &#125;); // 创建一个用于存放star的layer var starLayer = new ol.layer.Vector(&#123; source: new ol.source.Vector(), style: new ol.style.Style(&#123; image: new ol.style.RegularShape(&#123; points: 5, radius1: 20, radius2: 10, fill: new ol.style.Fill(&#123; color: 'red' &#125;) &#125;) &#125;) &#125;); var map2 = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), circleLayer, starLayer ], target: 'map2', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 在地图上添加一个圆 var circle1 = new ol.Feature(&#123; geometry: new ol.geom.Point(ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857')) &#125;) circleLayer.getSource().addFeature(circle1); // 在地图上添加一个五星 var star = new ol.Feature(&#123; geometry: new ol.geom.Point(ol.proj.transform( [104.06, 30.05], 'EPSG:4326', 'EPSG:3857')) &#125;) starLayer.getSource().addFeature(star); // 添加一个用于选择Feature的交互方式 map2.addInteraction(new ol.interaction.Select(&#123; style: new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 10, fill: new ol.style.Fill(&#123; color: 'blue' &#125;) &#125;) &#125;), // 关键： 设置过了条件，可以用feature来写过滤，也可以用layer来写过滤 filter: function(feature, layer)&#123; return layer === circleLayer; &#125; &#125;));&lt;/script&gt; 选取多个feature前面的例子都只是一个feature的情况，在实际应用中，肯定是不止一个的，如果要能同时选择多个，只需要设置一下构造函数的参数multi: true，默认情况下，只能选取一个feature。 仿照上面的代码，可自行尝试。 Feature选取之取消选中 取消选中有两种方式， 一种是在界面上以交互的方式取消选中，一种是用代码的方式取消选中，下面就分别介绍一下 交互方式取消选中如果是采用的默认的方式选取feature，即使用鼠标左键单击feature就可选取。那么这种交互方式下，要取消选中，则只需要同样使用鼠标左键，在地图其他地方单击一下，就可取消选中。 可跳到要素选取之选中样式，在第一个地图上试试。 如果采用的是自定义的方式选取feature，那么要取消选中，交互方式还是一样的，只要目标不再是已选中的feature就行，就能取消选中。 比如要素选取之条件过滤中，采用了自定义的鼠标移入feature就可选中，要取消选中，只需要把鼠标移出feature即可。 代码方式取消选中点击地图下方的“取消选中”按钮，就可触发代码，取消circle的选中状态： var layer = new ol.layer.Vector({ source: new ol.source.Vector(), style: new ol.style.Style({ image: new ol.style.Circle({ radius: 10, fill: new ol.style.Fill({ color: 'red' }) }) }) }); var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }), layer ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); // 在地图上添加一个圆 var circle = new ol.Feature({ geometry: new ol.geom.Point(ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857')) }) layer.getSource().addFeature(circle); // 添加一个用于选择Feature的交互方式 var clickSelect = new ol.interaction.Select({ style: new ol.style.Style({ image: new ol.style.Circle({ radius: 10, fill: new ol.style.Fill({ color: 'blue' }) }) }) }); map.addInteraction(clickSelect); // 取消选中 function unselectFeature() { clickSelect.getFeatures().clear(); // 下面这样也是可以取消选中的，根据情况选择 // map.removeInteraction(clickSelect); } 前面的代码都一样，关键在最后： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;input type=\"button\" value=\"取消选中\" onclick=\"unselectFeature();\"&gt;&lt;/input&gt;&lt;script type=\"text/javascript\"&gt; var layer = new ol.layer.Vector(&#123; source: new ol.source.Vector(), style: new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 10, fill: new ol.style.Fill(&#123; color: 'red' &#125;) &#125;) &#125;) &#125;); var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;), layer ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 在地图上添加一个圆 var circle = new ol.Feature(&#123; geometry: new ol.geom.Point(ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857')) &#125;) layer.getSource().addFeature(circle); // 添加一个用于选择Feature的交互方式 var clickSelect = new ol.interaction.Select(&#123; style: new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 10, fill: new ol.style.Fill(&#123; color: 'blue' &#125;) &#125;) &#125;) &#125;); map.addInteraction(clickSelect); // 取消选中 function unselectFeature() &#123; clickSelect.getFeatures().clear(); // 下面这样也是可以取消选中的，根据情况选择 // map.removeInteraction(clickSelect); &#125;&lt;/script&gt; 至此，地图上元素的选取相关的知识点都介绍完毕，希望能逐个掌握并融会贯通于实际应用中。 绘图除了内置了用于选取feature的类之外，OpenLayers 3还提供了用户绘图的类ol.interaction.Draw，支持绘制点，线，多边形，圆等绘制。 我们可以先看一下下面这个可以绘制一条线的例子，用鼠标左键单击地图，地图上就会出现待绘制线的起点，随后移动鼠标，就看到了线，再单击地图，就在这个线上添加了点，依次可以添加多个点，如果要完成线的绘制，在最后一个点处，再点击一下鼠标左键即可。 var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); map.addInteraction(new ol.interaction.Draw({ type: 'LineString' })); 代码如下： 123456789101112131415161718192021&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 添加绘图的交互类 map.addInteraction(new ol.interaction.Draw(&#123; type: 'LineString' // 设置绘制线 &#125;));&lt;/script&gt; 看起来非常的简单。 但貌似还不可用，因为不知道怎么保存起来，下面我们把绘制完的线保存起来： var map2 = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map2', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); // 添加一个绘制的线使用的layer var lineLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: new ol.style.Style({ stroke: new ol.style.Stroke({ color: 'red', size: 1 }) }) }) map2.addLayer(lineLayer); map2.addInteraction(new ol.interaction.Draw({ type: 'LineString', source: lineLayer.getSource() // 注意设置source，这样绘制好的线，就会添加到这个source里 })); 比上一个地图写的代码稍微多一点，关键的代码还是在最后： 123456789101112131415161718192021222324252627282930313233&lt;div id=\"map2\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map2 = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map2', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 添加一个绘制的线使用的layer var lineLayer = new ol.layer.Vector(&#123; source: new ol.source.Vector(), style: new ol.style.Style(&#123; stroke: new ol.style.Stroke(&#123; color: 'red', size: 1 &#125;) &#125;) &#125;) map2.addLayer(lineLayer); map2.addInteraction(new ol.interaction.Draw(&#123; type: 'LineString', source: lineLayer.getSource() // 注意设置source，这样绘制好的线，就会添加到这个source里 &#125;));&lt;/script&gt; 这样，在地图上绘制一条线的工作基本上算是完成了。 按照这个流程，修改ol.interaction.Draw的构造参数type的值为’Point’，’Polygon’,，’MultiPoint’，’MultiLineString’，’MultiPolygon’ 或者 ‘Circle’就可以添加点，多边形，多个点，多条线，多个多边形，及圆。 可以自行修改验证。 绘图进阶前面只是简单的绘制上了一条线，在实际业务中，可能还需要设置绘图时的样式，限制绘制的点的个数，获取绘制的图形的所有坐标等。 在上一节的基础上，以下面这个地图为例，再给大家介绍一下这些方面的更深入的应用。下面绘制这条线的点不能超过4个，在绘制时，样式会和前一节的样式不太一样，在地图上方，会显示当前绘制完的线的所有点的坐标。 当前绘制线的坐标： var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); // 添加一个绘制的线使用的layer var lineLayer = new ol.layer.Vector({ source: new ol.source.Vector(), style: new ol.style.Style({ stroke: new ol.style.Stroke({ color: 'red', size: 1 }) }) }) map.addLayer(lineLayer); var lineDraw = new ol.interaction.Draw({ type: 'LineString', source: lineLayer.getSource(), // 注意设置source，这样绘制好的线，就会添加到这个source里 style: new ol.style.Style({ stroke: new ol.style.Stroke({ color: '#009933', size: 1 }) }), maxPoints: 4 }); // 监听线绘制结束事件，获取坐标 lineDraw.on('drawend', function(event){ document.getElementById('points').innerHTML = JSON.stringify(event.feature.getGeometry().getCoordinates()); }); map.addInteraction(lineDraw); 代码如下，关键代码还是放在最后：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;div style=\"background-color: #999;\"&gt;&lt;span&gt;当前绘制线的坐标：&lt;/span&gt;&lt;span id='points'&gt;&lt;/span&gt;&lt;/div&gt;&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 添加一个绘制的线使用的layer var lineLayer = new ol.layer.Vector(&#123; source: new ol.source.Vector(), style: new ol.style.Style(&#123; stroke: new ol.style.Stroke(&#123; color: 'red', size: 1 &#125;) &#125;) &#125;) map.addLayer(lineLayer); var lineDraw = new ol.interaction.Draw(&#123; type: 'LineString', source: lineLayer.getSource(), // 注意设置source，这样绘制好的线，就会添加到这个source里 style: new ol.style.Style(&#123; // 设置绘制时的样式 stroke: new ol.style.Stroke(&#123; color: '#009933', size: 1 &#125;) &#125;), maxPoints: 4 // 限制不超过4个点 &#125;); // 监听线绘制结束事件，获取坐标 lineDraw.on('drawend', function(event)&#123; // event.feature 就是当前绘制完成的线的Feature document.getElementById('points').innerHTML = JSON.stringify(event.feature.getGeometry().getCoordinates()); &#125;); map.addInteraction(lineDraw);&lt;/script&gt; 如果需要取消当前绘制，直接用map.removeInteraction(lineDraw)就可以了。 总结交互实现流程从地图浏览的交互类，到feature选取的类，再到绘制图形的类，都是从事件入手，在引擎内部，提供了一个事件传递的通道，支持通过ol.Map添加interaction的方式，接收事件消息，然后再根据业务进行处理。 封装的优点和缺点毫无疑问，已经内置实现的功能，将极大地提高系统可用性，减少开发者的负担。 但内置的这些通用功能，如果是简单的封装，并不能满足大多数的需要，但是过多的封装，将增大复杂性，比如很多interaction类都有很多的参数设置，必然增加学习和使用成本，这就是缺点。 对于一般的开发者而言，没有能力自己重新定制开发交互方式，那么最好是学会内置类的应用，虽然有学习成本，但能保证功能没有问题。对于高阶开发者而言，可选择性就很多了，如果效率不行或者流程太复杂，就自己开发。","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"OpenLayers 3 事件","date":"2018-01-18T12:29:59.000Z","path":"20180118/openlayers/ch08/index.html","text":"事件事件让很多业务的东西串联在一起，在前端中起着非常重要的作用，比如鼠标点击，移动事件。但其应用远不仅如此，现实生活中就存在很多大大小小的事件。 在OpenLayers 3中，同样存在非常多的事件，比如鼠标左键单击，双击等等。 同时还有一些用于各个模块之间进行协作使用的事件，比如ol.Map的postrender和propertychange事件。 通过这些事件，OpenLayers 3的功能模块协作一致，同样地，也可以让我们自己二次开发的功能模块运作起来。 同时，根据需要，我们还可以在系统中新增自定义事件，使得我们的开发使用方式同OpenLayers 3更加的一致。在本章节将详细介绍OpenLayers 3中的各种事件，及相关应用。 一个简单的事件应用在深入分析和理解之前，我们还是以简单的一个例子入手，来学习一下如何使用OpenLayers 3中的事件来做一个简单的事，从而熟悉整个流程。 用鼠标点击下面这个地图，将弹出一个对话框，显示点击位置的经纬度： var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: ‘map’, view: new ol.View({ center: ol.proj.transform( [104, 30], ‘EPSG:4326’, ‘EPSG:3857’), zoom: 10 }) }); map.on(‘singleclick’, function(event){ alert(ol.proj.transform(map.getEventCoordinate(event), ‘EPSG:3857’, ‘EPSG:4326’)); })代码如下：12345678910111213141516171819202122&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 监听singleclick事件 map.on('singleclick', function(event)&#123; // 通过getEventCoordinate方法获取地理位置，再转换为wgs84坐标，并弹出对话框显示 alert(ol.proj.transform(map.getEventCoordinate(event), 'EPSG:3857', 'EPSG:4326')); &#125;)&lt;/script&gt;代码很简单，但需要注意的是，任意的事件应用，必然会有三个步骤： 找准事件发送者，比如上面这个例子，map就是事件发送者。 如何找到它呢？ 一般都是要交互的对象。 找准事件名称，比如上面例子中的singleclick，切忌不要随便想象，或者按照惯例来写名称，初次使用，请一定参照API文档，不然后果自负。 如何参看一个类有什么事件？ 请参见看懂API。 编写事件响应函数，在OpenLayers中，事件发送者都会有一个名字为on的函数，调用这个函数，就能监听指定的事件，响应函数listener具有一个参数event，这个event类就对应于API文档中事件名称后边括号里的类。这三个步骤缺一不可，如果使用过jquery监听事件，应该对此比较熟悉。 除此之外，关于OpenLayers 3中的事件应用，还有下面两点需要说明： 几乎OpenLayers 3中所有的类，都能监听事件和触发事件，因为它们都继承于类ol.Observable，这个类甚至是ol.Object的父类。 如此可见，OpenLayers在整个引擎中，是多么的依赖于事件通信。* 而OpenLayers 3的整个事件机制，又是基于Google的Closure Library。所以如果你对这个库熟悉，那么对OpenLayers 3提供的事件机制会比较熟悉。如果仅限于直接使用OpenLayers 3中的事件，就没有必要深入源码去探个究竟，只要遵照约定对事件进行应用就好。# 注销事件响应上一节的示例仅仅演示了如何监听一个事件，并响应处理。 但如果之后又不需要再响应该事件了，要怎么办。 比如有一个引导用户使用的需求，用户第一次点击地图的时候，需要弹出一个使用说明，之后点击地图就不用再弹出这个使用说明了。 那我们有哪些方式可以做到这一点呢？ 尝试点击一下下面这个地图，之后再点击一次试试： var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: ‘map’, view: new ol.View({ center: ol.proj.transform( [104, 30], ‘EPSG:4326’, ‘EPSG:3857’), zoom: 10 }) }); var key = map.on(‘singleclick’, function(event){ alert(‘大家好，我是淡叔，这是一个演示如何取消事件监听的应用，之后再点击地图时，你将不会再看到这个说明。’); map.unByKey(key); })第二次点击地图后，是否就不会再弹出提示信息了？ 其实代码很简单：12345678910111213141516171819202122&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); var key = map.on('singleclick', function(event)&#123; alert('大家好，我是淡叔，这是一个演示如何取消事件监听的应用，之后再点击地图时，你将不会再看到这个说明。'); // 下面这行代码就是取消事件监听 map.unByKey(key); &#125;)&lt;/script&gt;除了上面这个方式可以注销事件监听之外，还可以用下面这样的方式：123456789101112131415161718192021222324&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 创建事件监听器 var singleclickListener = function(event)&#123; alert('大家好，我是淡叔，这是一个演示如何取消事件监听的应用，之后再点击地图时，你将不会再看到这个说明。'); // 在响应一次后，注销掉该监听器 map.un('singleclick', singleclickListener); &#125;; map.on('singleclick', singleclickListener);&lt;/script&gt;针对这个应用，还可以按照下面这样来实现：123456789101112131415161718192021&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 使用once函数，只会响应一次事件，之后自动注销事件监听 map.once('singleclick', function(event)&#123; alert('大家好，我是淡叔，这是一个演示如何取消事件监听的应用，之后再点击地图时，你将不会再看到这个说明。'); &#125;)&lt;/script&gt;到此，OpenLayers 3的事件应用基本介绍完毕，后续将介绍OpenLayers 3常用事件。# 常用事件几乎OpenLayers主要的类都会派发相关的事件，虽然事件很多，但日常使用的事件大致分为下面几类。## 常用鼠标事件### 地图鼠标左键单击事件对应的类为ol.Map，事件名为singleclick。### 地图鼠标左键双击事件对应的类为ol.Map，事件名为dblclick。### 地图鼠标点击事件对应的类为ol.Map，事件名为click。### 地图鼠标移动事件对应的类为ol.Map，事件名为pointermove。### 地图鼠标拖拽事件对应的类为ol.Map，事件名为pointerdrag。### 地图移动事件对应的类为ol.Map，事件名为moveend。可以通过下面这个地图来尝试一下鼠标事件： 触发事件提示信息 var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: ‘map’, view: new ol.View({ center: ol.proj.transform( [104, 30], ‘EPSG:4326’, ‘EPSG:3857’), zoom: 10 }) }); map.on(‘singleclick’, function(event){ document.getElementById(‘info’).innerHTML = ‘触发了ol.Map的单击事件：singleclick’; }); map.on(‘dblclick’, function(event){ document.getElementById(‘info’).innerHTML = ‘触发了ol.Map的双击事件：dblclick’; }); map.on(‘click’, function(event){ document.getElementById(‘info’).innerHTML = ‘触发了ol.Map的点击事件：click’; }); // map.on(‘pointermove’, function(event){ // document.getElementById(‘info’).innerHTML = ‘触发了ol.Map的鼠标移动事件：pointermove’; // }); map.on(‘pointerdrag’, function(event){ document.getElementById(‘info’).innerHTML = ‘触发了ol.Map的拖拽事件：pointerdrag’; }); map.on(‘moveend’, function(event){ document.getElementById(‘info’).innerHTML = ‘触发了ol.Map的地图移动事件：moveend’; });注意在singleclick和dblclick响应之前，都会触发click事件，在选择事件时，需要谨慎考虑。 同时发现moveend事件在地图缩放的时候，也会触发。 代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;div id=\"info\" style=\"background-color: #999;\"&gt;触发事件提示信息&lt;/div&gt;&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 响应单击事件 map.on('singleclick', function(event)&#123; document.getElementById('info').innerHTML = '触发了ol.Map的单击事件：singleclick'; &#125;); // 响应双击事件 map.on('dblclick', function(event)&#123; document.getElementById('info').innerHTML = '触发了ol.Map的双击事件：dblclick'; &#125;); // 响应点击事件 map.on('click', function(event)&#123; document.getElementById('info').innerHTML = '触发了ol.Map的点击事件：click'; &#125;); // 响应鼠标移动事件，事件太频繁，故注释掉了，可自行验证该事件 // map.on('pointermove', function(event)&#123; // document.getElementById('info').innerHTML = '触发了ol.Map的鼠标移动事件：pointermove'; // &#125;); // 响应拖拽事件 map.on('pointerdrag', function(event)&#123; document.getElementById('info').innerHTML = '触发了ol.Map的拖拽事件：pointerdrag'; &#125;); // 地图移动事件 map.on('moveend', function(event)&#123; document.getElementById('info').innerHTML = '触发了ol.Map的地图移动事件：moveend'; &#125;);&lt;/script&gt;## 非直接交互事件### 地图缩放事件对应的类为ol.View，事件名为 change:resolution，为什么？ 因为分辨率改变了，自然层级就变化了。### 地图中心改变事件对应的类是ol.View，事件名为 change:center。下面这个地图，可以让你感受一下这两个事件：事件提示信息 var map2 = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: ‘map2’, view: new ol.View({ center: ol.proj.transform( [104, 30], ‘EPSG:4326’, ‘EPSG:3857’), zoom: 10 }) }); var view = map2.getView(); view.on(‘change:resolution’, function(event){ document.getElementById(‘info2’).innerHTML = ‘触发了ol.View的缩放事件：change:resolution，当前层级为： ‘ + this.getZoom(); }); view.on(‘change:center’, function(event){ document.getElementById(‘info2’).innerHTML = ‘触发了ol.View的地图中心改变事件：change:center，当前中心点为： ‘ + ol.proj.transform( this.getCenter(), ‘EPSG:3857’, ‘EPSG:4326’); });### 改变事件OpenLayers 3的大多数类都拥有一些改变事件，这些事件常用于模块之间联动使用，在二次开发的业务需求中，也会经常需要，所以希望能引起重视，具体的事件可以参照API官网文档的说明。 比如上面的例子其实就是应用的这类事件。# 阻止事件传递# 自定义事件及应用通过API文档，我们可以看到OpenLayers 3的相关类，都有一些事件，但这些事件大多是和现有引擎相关的，并不能满足我们大多数的业务需求。如果能为OpenLayers 3的类增加自定义事件，那么必然能更好地实现业务需求。接下来就尝试为ol.Feature添加一个mouseover的事件，通过这个事件，就可以实现在鼠标移到Feature上时，改变它的样式。要添加自定义事件，需要知道这样一个事实：ol.Feature继承于ol.Object，而ol.Object具有派发事件(dispatchEvent)和监听事件(on)的功能。 关于这两个功能的详细信息可以参见API文档。这样，我们要自定义事件就非常容易了，如果注意观察，会发现OpenLayers 3中的类都继承于ol.Object，也就是说，如果自定义事件方法在ol.Feature上有效，那么在其他的OpenLayers 3的类上也是同样有效的。下面就先展示一下通过自定义的mouseover事件来改变Feature的样式： // 在原点处创建一个feature var feature1 = new ol.Feature({ geometry: new ol.geom.Point([0, 0]) }); // 并设置为半径为100像素的圆，用红色填充 feature1.setStyle(new ol.style.Style({ image: new ol.style.Circle({ radius: 100, fill: new ol.style.Fill({ color: 'red' }) }) })); // 在坐标[5000000, 5000000]处创建另一个feature var feature2 = new ol.Feature({ geometry: new ol.geom.Point([5000000, 5000000]) }); // 并设置为半径为100像素的圆，用黄色填充 feature2.setStyle(new ol.style.Style({ image: new ol.style.Circle({ radius: 100, fill: new ol.style.Fill({ color: 'yellow' }) }) })); // 创建地图 var map = new ol.Map({ // 设置地图图层 layers: [ // 创建一个使用Open Street Map地图源的瓦片图层 new ol.layer.Tile({source: new ol.source.OSM()}), // 把之前创建的feature1和feature2放在另一个层里 new ol.layer.Vector({source: new ol.source.Vector({ features: [feature1, feature2] })}) ], // 设置显示地图的视图 view: new ol.View({ center: [0, 0], // 定义地图显示中心于经度0度，纬度0度处 zoom: 2 // 并且定义地图显示层级为2 }), // 让id为map的div作为地图的容器 target: 'map' }); // 为地图注册鼠标移动事件的监听 map.on('pointermove', function(event){ map.forEachFeatureAtPixel(event.pixel, function(feature){ // 为移动到的feature发送自定义的mousemove消息 feature.dispatchEvent({type: 'mousemove', event: event}); }); }); // 为feature1注册自定义事件mousemove的监听 feature1.on('mousemove', function(event){ // 修改feature的样式为半径100像素的园，用蓝色填充 this.setStyle(new ol.style.Style({ image: new ol.style.Circle({ radius: 100, fill: new ol.style.Fill({ color: 'blue' }) }) })); }); 为了对比，在地图上添加了两个圆，一个黄色的，一个红色的。鼠标移动到红色的圆上，它会变成蓝色的圆。但是鼠标移到黄色的圆上，不会有任何改变。这个功能在官网的例子中也有，参见select-features。那么用自定义事件的方式来做，又该怎样来实现呢？对应的源码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889&lt;!Doctype html&gt;&lt;html xmlns=http://www.w3.org/1999/xhtml&gt;&lt;head&gt; &lt;meta http-equiv=Content-Type content=\"text/html;charset=utf-8\"&gt; &lt;meta http-equiv=X-UA-Compatible content=\"IE=edge,chrome=1\"&gt; &lt;meta content=always name=referrer&gt; &lt;title&gt;OpenLayers 3地图示例&lt;/title&gt; &lt;link href=\"../src/ol3.13.1/ol.css\" rel=\"stylesheet\" type=\"text/css\" /&gt; &lt;script type=\"text/javascript\" src=\"../src/ol3.13.1/ol.js\" charset=\"utf-8\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"map\" style=\"width: 100%, height: 400px\"&gt;&lt;/div&gt; &lt;script&gt; // 在原点处创建一个feature var feature1 = new ol.Feature(&#123; geometry: new ol.geom.Point([0, 0]) &#125;); // 并设置为半径为100像素的圆，用红色填充 feature1.setStyle(new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 100, fill: new ol.style.Fill(&#123; color: 'red' &#125;) &#125;) &#125;)); // 在坐标[5000000, 5000000]处创建另一个feature var feature2 = new ol.Feature(&#123; geometry: new ol.geom.Point([5000000, 5000000]) &#125;); // 并设置为半径为100像素的圆，用黄色填充 feature2.setStyle(new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 100, fill: new ol.style.Fill(&#123; color: 'yellow' &#125;) &#125;) &#125;)); // 创建地图 var map = new ol.Map(&#123; // 设置地图图层 layers: [ // 创建一个使用Open Street Map地图源的瓦片图层 new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;), // 把之前创建的feature1和feature2放在另一个层里 new ol.layer.Vector(&#123;source: new ol.source.Vector(&#123; features: [feature1, feature2] &#125;)&#125;) ], // 设置显示地图的视图 view: new ol.View(&#123; center: [0, 0], // 定义地图显示中心于经度0度，纬度0度处 zoom: 2 // 并且定义地图显示层级为2 &#125;), // 让id为map的div作为地图的容器 target: 'map' &#125;); // 为地图注册鼠标移动事件的监听 map.on('pointermove', function(event)&#123; map.forEachFeatureAtPixel(event.pixel, function(feature)&#123; // 为移动到的feature发送自定义的mousemove消息 feature.dispatchEvent(&#123;type: 'mousemove', event: event&#125;); &#125;); &#125;); // 为feature1注册自定义事件mousemove的监听 feature1.on('mousemove', function(event)&#123; // 修改feature的样式为半径100像素的园，用蓝色填充 this.setStyle(new ol.style.Style(&#123; image: new ol.style.Circle(&#123; radius: 100, fill: new ol.style.Fill(&#123; color: 'blue' &#125;) &#125;) &#125;)); &#125;); &lt;/script&gt;&lt;/body&gt; &lt;/html&gt; 代码中有详细的注释，再辅以API文档，相信应该看懂绝大部分的代码，当然最关键的代码在于最后的两个事件监听，在这两段代码中，可能下面这句不是很明白：1feature.dispatchEvent(&#123;type: 'mousemove', event: event&#125;); dispatchEvent的参数具有type和event属性，必须这样构造吗？在回答这个问题之前，需要先看一下API文档，发现参数类型为goog.events.EventLike，说明它其实用的是google的closure库来实现的，通过closure库的源码我们知道，派发的事件如果是一个对象，那么必须包含type属性，用于表示事件类型。其他的属性可以自由定义，比如此处定义了event属性，并设置对应的值，为的是让鼠标事件传递给feature1的监听函数。 dispatchEvent的参数会被原封不动的传递给事件响应函数，对应代码1feature1.on('mousemove', function(event)&#123; 里function的参数event，可以通过调试窗口看到此处的event和dispatchEvent的参数是一样的。注意事件名称是可以自定义的，只要派发和监听使用的事件名称是一致的就可以。 除了可以通过dispatchEvent({type: &#39;mousemove&#39;, event: event})这种形式派发一个事件之外，还可以通过dispatchEvent(&#39;mousemove&#39;)这中形式直接发送mousemove事件。有兴趣的同学可以自行验证。 到此，我们就完成了自定义事件的三件事：定义事件类型，派发事件，监听事件。 使用自定义事件会带来下面几个好处： 灵活控制，对比一下官网例子和这个例子，就能看出一二。 能更好地满足业务需要，适当地进行扩展。 采用更统一的事件处理框架。 有很多同学为了处理多个Feature的鼠标事件，可能会为Map注册很多次pointermove事件监听，从而会导致性能降低，这种做法是不可取的。如果采用上面这种自定义事件的处理方式，就只用注册一次，让真正有需要的Feature通过注册事件响应来处理业务，从而还能简化处理逻辑。 上面这个例子鼠标移到红色圆后变蓝色，但是移出圆后，还是蓝色，能不能再移出圆的时候再变成红色呢？ 试试用自定义事件的方式再改进一下，实现mousein和mouseout两种事件。","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"OpenLayers 3 内置的地图控件","date":"2018-01-18T12:29:59.000Z","path":"20180118/openlayers/ch10/index.html","text":"Control 在OpenLayers 3中，地图控件指的是下图标注的这些，包括缩放按钮，标尺，版权说明，指北针等等。 他们不会随着地图的移动而移动，一直处于一个固定的位置。 在实现上，并不是在画布上绘制的，而是使用传统的HTML元素来实现的，便于同地图分离，也便于界面实现。 在本章节中，将先概览OpenLayers 3中已有的地图控件，对其实现进行分析，在此基础上进一步修改其样式，从而定义自己的控件。 控件概览OpenLayers 3目前内置的地图控件类都在包ol.control下面，依次有： ol.control.Attribution: 右下角的地图信息控件 ol.control.FullScreen: 全屏控件 ol.control.MousePosition: 鼠标位置控件 ol.control.OverviewMap: 鸟瞰图控件 ol.control.Rotate: 指北针控件 ol.control.ScaleLine: 比例尺控件 ol.control.Zoom: 缩放按钮控件 ol.control.ZoomSlider: 缩放滚动条控件 ol.control.ZoomToExtent: 放大到设定区域控件 每一个类都有一些设置参数，可对照官网API的文档来了解其对应的功能。 默认情况下，在地图上是不会显示这么多地图控件的，只会应用ol.control.defaults()这个函数返回的地图控件，默认包含了ol.control.Zoom，ol.control.Rotate和ol.control.Attribution这个控件。 其使用方式同ol.interaction.defaults()很像，同样可以设置一些参数来控制控件的一些功能，从而实现定制化需求。 比如下面这个地图上的控件稍微的同默认情况下的控件有点不一样，因为控件都不存在了。 var map = new ol.Map({ controls: ol.control.defaults({ attribution: false, rotate: false, zoom: false }), layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); 代码如下：1234567891011121314151617181920212223242526&lt;head&gt; &lt;link href=\"../src/ol3.13.1/ol.css\" rel=\"stylesheet\" type=\"text/css\" /&gt; &lt;script type=\"text/javascript\" src=\"../src/ol3.13.1/ol.js\" charset=\"utf-8\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; // 设置地图控件，默认的三个控件都不显示 controls: ol.control.defaults(&#123; attribution: false, rotate: false, zoom: false &#125;), layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;);&lt;/script&gt; 当然，上面这个代码有更简洁的写法: controls: []，上面只是演示ol.control.defaults方法的使用而已。 如果需要把所有控件都显示出来，那么可以这样： var map2 = new ol.Map({ controls: ol.control.defaults().extend([ new ol.control.FullScreen(), new ol.control.MousePosition(), new ol.control.OverviewMap(), new ol.control.ScaleLine(), new ol.control.ZoomSlider(), new ol.control.ZoomToExtent() ]), layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map2', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); 有些控件重叠在一起，得仔细分辨。 代码如下： 12345678910111213141516171819202122232425&lt;div id=\"map2\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map2 = new ol.Map(&#123; // 在默认控件的基础上，再加上其他内置的控件 controls: ol.control.defaults().extend([ new ol.control.FullScreen(), new ol.control.MousePosition(), new ol.control.OverviewMap(), new ol.control.ScaleLine(), new ol.control.ZoomSlider(), new ol.control.ZoomToExtent() ]), layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map2', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;);&lt;/script&gt; 下图是一个界面控件和类的对照关系图： 每一个控件都有相应的参数设置，如果具体到某一个控件使用时，不能满足需求，可以先参照官网API说明，进行相应使用。 探究控件原理在介绍后续的知识之前，先探究一下控件是如何做成的。 在chrome中打开一个最简单的地图例子，打开开发者工具面板，用工具栏最左边的元素选择器选择地图左上方的放大按钮，可以看到类似如下的界面： 上图可以看到放大按钮完整的dom结构图，从而一窥究竟，按钮原来就是简单的HTML的元素，结合css的效果做出来的，可以看到放大按钮的css class为ol-zoom-in，紧接着的就是缩小按钮的节点，其css class为ol-zoom-out，他们的父节点也有对应的css class： ol-zoom。 我们可以在ol.css文件中找到这些class的定义，设置了相应的样式。 控件ui的原理是清楚了，那么对应的控件要响应一些鼠标或者按键操作，应该也就是添加响应的事件监听器就可以了。 对于具体怎么做的，我们可以从控件ol.control.Zoom的部分源码来分析： 123456789101112131415161718192021222324252627282930// 设定放大缩小按钮的提示信息 var zoomInTipLabel = options.zoomInTipLabel !== undefined ? options.zoomInTipLabel : 'Zoom in'; var zoomOutTipLabel = options.zoomOutTipLabel !== undefined ? options.zoomOutTipLabel : 'Zoom out'; // 创建放大按钮的dom节点 var inElement = goog.dom.createDom('BUTTON', &#123; 'class': className + '-in', 'type' : 'button', 'title': zoomInTipLabel &#125;, zoomInLabel); // 并绑定鼠标点击事件的处理函数 handleClick_ ol.events.listen(inElement, ol.events.EventType.CLICK, goog.partial( ol.control.Zoom.prototype.handleClick_, delta), this); ...... // 函数定义如下 /** * @param &#123;number&#125; delta Zoom delta. * @param &#123;Event&#125; event The event to handle * @private */ol.control.Zoom.prototype.handleClick_ = function(delta, event) &#123; event.preventDefault(); // 阻止事件传递到下面的map this.zoomByDelta_(delta); // 调用具体的方法进行放大&#125;; 这个过程和我们平时的在界面上添加一个节点，再绑定事件处理函数，并没有什么差别，其他类似的控件也是一样的原理。这对我们来说，想改变ui样式，是非常容易的事，甚至可以改变它的默认行为。 控件美颜在知道原理后，想对控件美颜就是一件非常容易的事，大致有下面两种方式： 自定义CSS样式知道控件的实现原理后，美颜就变得非常简单了，找到对应的class，设置css样式，就轻松搞定，这完全就是css范畴的内容了，比如你可以做到下面这样： var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); 代码只涉及css代码，如下：1234.ol-zoom .ol-zoom-in &#123; background-color: #0000ff; color: #ff0000;&#125; 这段代码可以放在单独的css文件里面，也可以直接加载&lt;head&gt;&lt;/head&gt;里面，但必须是在ol.css引入之后加，这样才能覆盖ol3默认的css样式。 最简单粗暴的，莫过于直接在ol.css里面修改，但这样侵入性太强，不利于OpenLayers 3的版本升级，升级一次，就得自己修改一次。 所以不推荐。 其他控件的css样式修改同上，此处不再累述，请自行修改验证。 JavaScript修改在前端除了css之外，还可以用强大的javascript代码进行修改，比如像下面这样，把最大化按钮的图标改变一下： new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map2', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); $('#map2 .ol-zoom-in').html(''); 代码如下：12345678910111213141516171819&lt;div id=\"map2\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map2', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 设置放大按钮符号，下面这个代码需要引入jquery，或者zepto库 $('#map2 .ol-zoom-in').html('&lt;&gt;');&lt;/script&gt; 使用javascript代码势必能更进一步定制各种控件。 自定义控件有了前面的基础介绍，自定义控件就变得相对简单了，共分为两个步骤，第一步是构建界面，第二步是用代码实现功能。 下面自定义了一个分享当前地图的功能： var map = new ol.Map({ layers: [ new ol.layer.Tile({ source: new ol.source.OSM() }) ], target: 'map', view: new ol.View({ center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }) }); var viewport = map.getViewport(); $(viewport).append('分享地图'); document.getElementById('share').onclick = function() { alert('分享当前地图给朋友'); } 对应的代码如下： 12345678910111213141516171819202122232425&lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt;&lt;script type=\"text/javascript\"&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123; source: new ol.source.OSM() &#125;) ], target: 'map', view: new ol.View(&#123; center: ol.proj.transform( [104, 30], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;) &#125;); // 在viewport节点下添加一个分享按钮 var viewport = map.getViewport(); $(viewport).append('&lt;div id=\"share\" class=\"share\"&gt;分享地图&lt;/div&gt;'); // 监听按钮点击事件，执行相关操作 document.getElementById('share').onclick = function() &#123; alert('分享当前地图给朋友'); &#125;&lt;/script&gt; 结合注释理解代码，对于分享按钮的外观都是由css来定义：123456789101112.share &#123; position: absolute; top: 10px; right: 10px; border: 1px; border-color: #333; background-color: #339999; color: #fff; box-shadow: 0px 0px 2px #666; cursor: pointer; padding: 0 4px 0 4px;&#125; 由此可见，自定义控件也是一件非常简单的事。","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"OpenLayers 3 View","date":"2018-01-18T12:29:59.000Z","path":"20180118/openlayers/ch04/index.html","text":"View所见即所得是大家喜闻乐见的，View就是这样的，作为地图的窗口，做一些改变，就能看到变化，便于初学者学习。同时，View是OpenLayers 3地图组成部分中非常重要的一个概念，涉及到地图移动，放大，缩小，旋转等，这些功能是任何一个GIS引擎必不可少的。为此，我们把它作为最先介绍和学习的组成部分。 地图导航在深入学习之前，还是先来个开胃菜，见识一下View所承载的功能。下面将演示地图导航功能，关于导航相关功能，在前面操作地图的时候，已经有了充分的理解和认识。为什么我们还要再讨论它呢？因为这次的导航功能，需要自己来实现，而且只使用ol.View提供的方法就可以做到。 var map = new ol.Map({ layers: [ new ol.layer.Tile({source: new ol.source.OSM()}) ], view: new ol.View({ // 设置成都为地图中心，此处进行坐标转换， 把EPSG:4326的坐标，转换为EPSG:3857坐标，因为ol默认使用的是EPSG:3857坐标 // 请阅读“地图坐标系”了解更多坐标系的信息。 center: ol.proj.transform([104.06, 30.67], 'EPSG:4326', 'EPSG:3857'), zoom: 10 }), target: 'map' }); // 向左移动地图 function moveToLeft() { var view = map.getView(); var mapCenter = view.getCenter(); // 让地图中心的x值增加，即可使得地图向左移动，增加的值根据效果可自由设定 mapCenter[0] += 50000; view.setCenter(mapCenter); map.render(); } // 向右移动地图 function moveToRight() { var view = map.getView(); var mapCenter = view.getCenter(); // 让地图中心的x值减少，即可使得地图向右移动，减少的值根据效果可自由设定 mapCenter[0] -= 50000; view.setCenter(mapCenter); map.render(); } // 向上移动地图 function moveToUp() { var view = map.getView(); var mapCenter = view.getCenter(); // 让地图中心的y值减少，即可使得地图向上移动，减少的值根据效果可自由设定 mapCenter[1] -= 50000; view.setCenter(mapCenter); map.render(); } // 向下移动地图 function moveToDown() { var view = map.getView(); var mapCenter = view.getCenter(); // 让地图中心的y值增加，即可使得地图向下移动，增加的值根据效果可自由设定 mapCenter[1] += 50000; view.setCenter(mapCenter); map.render(); } // 移动到成都 function moveToChengDu() { var view = map.getView(); // 设置地图中心为成都的坐标，即可让地图移动到成都 view.setCenter(ol.proj.transform([104.06, 30.67], 'EPSG:4326', 'EPSG:3857')); map.render(); } // 放大地图 function zoomIn() { var view = map.getView(); // 让地图的zoom增加1，从而实现地图放大 view.setZoom(view.getZoom() + 1); } // 缩小地图 function zoomOut() { var view = map.getView(); // 让地图的zoom减小1，从而实现地图缩小 view.setZoom(view.getZoom() - 1); } 点击地图下方的几个按钮试试响应的功能，用它们就可以完整的实现地图导航了。按照惯例，下面我们会给出对应的源码，但我希望你能先学习一下ol.View的API文档，从中找出我们可能使用了的方法。 好了，下面就来揭晓答案： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&lt;body&gt; &lt;div id=\"map\" style=\"width: 100%, height: 400px\"&gt;&lt;/div&gt; &lt;div id=\"navigate-container\"&gt; &lt;input type=\"button\" onClick=\"moveToLeft();\" value=\"左移\" /&gt; &lt;input type=\"button\" onClick=\"moveToRight();\" value=\"右移\" /&gt; &lt;input type=\"button\" onClick=\"moveToUp();\" value=\"上移\" /&gt; &lt;input type=\"button\" onClick=\"moveToDown();\" value=\"下移\" /&gt; &lt;input type=\"button\" onClick=\"moveToChengDu();\" value=\"移到成都\" /&gt; &lt;input type=\"button\" onClick=\"zoomIn();\" value=\"放大\" /&gt; &lt;input type=\"button\" onClick=\"zoomOut();\" value=\"缩小\" /&gt; &lt;/div&gt; &lt;script&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], view: new ol.View(&#123; // 设置成都为地图中心，此处进行坐标转换， 把EPSG:4326的坐标，转换为EPSG:3857坐标，因为ol默认使用的是EPSG:3857坐标 center: ol.proj.transform([104.06, 30.67], 'EPSG:4326', 'EPSG:3857'), zoom: 10 &#125;), target: 'map' &#125;); // 向左移动地图 function moveToLeft() &#123; var view = map.getView(); var mapCenter = view.getCenter(); // 让地图中心的x值增加，即可使得地图向左移动，增加的值根据效果可自由设定 mapCenter[0] += 50000; view.setCenter(mapCenter); map.render(); &#125; // 向右移动地图 function moveToRight() &#123; var view = map.getView(); var mapCenter = view.getCenter(); // 让地图中心的x值减少，即可使得地图向右移动，减少的值根据效果可自由设定 mapCenter[0] -= 50000; view.setCenter(mapCenter); map.render(); &#125; // 向上移动地图 function moveToUp() &#123; var view = map.getView(); var mapCenter = view.getCenter(); // 让地图中心的y值减少，即可使得地图向上移动，减少的值根据效果可自由设定 mapCenter[1] -= 50000; view.setCenter(mapCenter); map.render(); &#125; // 向下移动地图 function moveToDown() &#123; var view = map.getView(); var mapCenter = view.getCenter(); // 让地图中心的y值增加，即可使得地图向下移动，增加的值根据效果可自由设定 mapCenter[1] += 50000; view.setCenter(mapCenter); map.render(); &#125; // 移动到成都 function moveToChengDu() &#123; var view = map.getView(); // 设置地图中心为成都的坐标，即可让地图移动到成都 view.setCenter(ol.proj.transform([104.06, 30.67], 'EPSG:4326', 'EPSG:3857')); map.render(); &#125; // 放大地图 function zoomIn() &#123; var view = map.getView(); // 让地图的zoom增加1，从而实现地图放大 view.setZoom(view.getZoom() + 1); &#125; // 缩小地图 function zoomOut() &#123; var view = map.getView(); // 让地图的zoom减小1，从而实现地图缩小 view.setZoom(view.getZoom() - 1); &#125; &lt;/script&gt;&lt;/body&gt; 使用input标签增加了几个按钮，每个按钮都绑定了对应的点击事件监听，对应的监听函数实现了某一种导航的功能，都很简单，并且代码都有注释，容易理解。创建地图的代码几乎没有任何改变，也不过多说明，请结合代码和上面的地图进行理解。 在功能上，目前尚有两个方面的欠缺，一是按钮没有集成在地图上；二是移动并不平滑。这两部分功能缺失将在我们学习了Control和动画之后，一步一步再补充完善，此处暂时不深入下去。现在需要考虑的是我们在代码中使用了ol.proj.transform这个方法，它有什么作用？ 坐标是否已经知道ol.proj.transform的功能了？你应该知道的，因为有API文档。它主要用于坐标转换，它的第一个参数是ol.Coordinate类型的坐标，后面两个参数依次是当前坐标所用的坐标系，及转换后的坐标所用的坐标系，ol.proj.transform([104.06, 30.67], &#39;EPSG:4326&#39;, &#39;EPSG:3857&#39;)就能把EPSG:4326的坐标[104.06, 30.67]转换为EPSG:3857的坐标。 在了解这个函数的功能后，可能不禁会问：为什么要弄的如此复杂，是不是还有很多其他的坐标系？是的，确实存在很多其他的坐标系，如果可以选择的话，应该没人愿意这样。道理如同这个世界上存在各种各样的货币一样。在下一个小节，就会详细介绍多个坐标系及存在的原因。但在此之前，我们得先了解一个有意义的坐标应该如何定义。 如果单独地看[45.06, 30.67]，这是没有任何意义的两个数字，在不同的场景，不同的人眼里，它们可以是某个仪器的两个测量值，也可以是学生的考试成绩，还可以是某个坐标。大家或许已经意识到，场景是非常重要的，假如我们定义这两个数字表示的是一个地理位置的坐标，那请问你知道这个坐标所指的具体位置吗？肯定是不能的。因为我们并不知道这个坐标里面的数字使用什么单位，是度？是米？还是其他的单位？如果添加上单位，也还不够，假设单位是度，我们还是不知道坐标中的前一个数字是经度，还是纬度。即使定义经纬度，也还不够，因为还有很多不确定的东西，比如这个坐标相对的原点在哪里？二维还是三维，哪个方向为正向？ 一个有意义的坐标并不是我们看上去那样简单，特别是地理坐标，但初学者往往会忽略这点，从而造成在应用中经常出现定位错误。 坐标系及投影关于原点，方向，单位等等的相关定义和描述，组成了我们常说的坐标系。谈到坐标系，就会想起初中数学中经常接触到的二维笛卡尔坐标系，在图形学中也会遇到三维坐标系，在GIS中我们需要地理坐标系。但它并不像笛卡尔坐标系那样简单，学过地理知识就知道，地球并不是一个完全规则的球体。在不同的地区，为了在数学上表示它，就出现了多种不同的参考椭球体，比如克拉索夫斯基(Krasovsky)椭球体，WGS1984椭球体，更多的椭球体参见参考椭球体。在参考椭球体的基础上，就发展出了不同的地理坐标系，比如我国常用的WGS84，北京54，西安80坐标系，欧洲，北美也有不同的坐标系。北京54使用的是克拉索夫斯基(Krasovsky)椭球体，WGS84使用的是WGS1984椭球体。由此可见，多个坐标系是源于地理的复杂性。 由于存在着多种坐标系，即使同样的坐标，在不同的坐标系中，也表示的是不同的位置，这就是大家经常遇到的偏移问题的根源，要解决这类问题，就需要纠偏，把一个坐标系的坐标转换成另一个坐标系的坐标。由于WGS84是全球通用的坐标系，涉及到多个坐标系与它之间的转换，所以在此做个简单的介绍。 WGS84，全称World Geodetic System 1984，是为GPS全球定位系统使用而建立的坐标系统。通过遍布世界的卫星观测站观测到的坐标建立，其初次WGS84的精度为1-2m，在1994年1月2日，通过10个观测站在GPS测量方法上改正，得到了WGS84（G730），G表示由GPS测量得到，730表示为GPS时间第730个周。 1996年，National Imagery and Mapping Agency (NIMA) 为美国国防部 (U.S.Department of Defense, DoD)做了一个新的坐标系统。这样实现了新的WGS版本WGS（G873）。其因为加入了美国海军天文台和北京站的改正，其东部方向加入了31-39cm 的改正。所有的其他坐标都有在1分米之内的修正。 关于北京54和西安80坐标系，请自行通过网络查找相关资料进行了解。 有了坐标系后，我们就能精确的表示地球上的每一个位置，但为什么还需要投影呢？投影是为了把不可展的椭球面描绘到平面上，它使用几何透视方法或数学分析的方法，将地球上的点和线投影到可展的曲面(平面、园柱面或圆锥面)上，再将此可展曲面展成平面，建立该平面上的点、线和地球椭球面上的点、线的对应关系。正是因为有投影，大家才能在网页上看到二维平面的地球地图。 投影方式也多种多样，其中有一种投影叫墨卡托投影(Mercator Projection)，广泛使用于网页地图，对于OpenLayers 3的开发者而言，尤其重要，详情参见墨卡托投影。 如果不了解上面这些基本知识，在使用OpenLayers 3的过程中，会感觉寸步难行，相反，则得心应手。 OpenLayers 3使用的坐标系目前OpenLayers 3支持两种投影，一个是EPSG:4326，等同于WGS84坐标系，参见详情。另一个是EPSG:3857，等同于900913，由Mercator投影而来，经常用于web地图，参见详情。一个是全球通用的，一个是web地图专用的，自然OpenLayers 3支持它们。在使用过程中，需要注意OpenLayers 3默认使用的是EPSG:3857。这也是为什么前面的代码里需要进行坐标转换的原因。 既然支持EPSG:4326，为什么还要转换？当然是可以不用转换的，但前提是你得指定使用具体那种投影，就像下面这样。 new ol.Map({ layers: [ new ol.layer.Tile({source: new ol.source.OSM()}) ], view: new ol.View({ // 设置成都为地图中心 center: [104.06, 30.67], projection: 'EPSG:4326', zoom: 10 }), target: 'map' }); 代码很简单： 123456789101112131415161718&lt;body&gt; &lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt; &lt;script&gt; new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], view: new ol.View(&#123; // 设置成都为地图中心 center: [104.06, 30.67], // 指定投影使用EPSG:4326 projection: 'EPSG:4326', zoom: 10 &#125;), target: 'map' &#125;); &lt;/script&gt;&lt;/body&gt; 所以开发时需要记住的是当前OpenLayers 3使用的坐标系及投影，以及我们自己的数据所使用的坐标系及投影。在没有弄清楚之前，就不要继续后面的内容学习，直到弄清楚为止。 ol.View的应用地图导航是View应用的一个例子，但仅限于导航。其实View还有一些其他的功能，在开发中经常遇到。比如控制地图显示范围，自动适配某个范围等等。若有所了解，可跳过本章节，直接进入下一个章节。 限制地图范围在实际使用中，往往只关心某一个区域的地图，而无需显示整个地球的地图，这样可以聚焦于业务，同时可以减少前端和后台的地图数据。无疑，这样的功能是非常有用的。下面我们就将看到，地图只能在经度29度到31度，纬度在102到104度之间显示。 new ol.Map({ layers: [ new ol.layer.Tile({source: new ol.source.OSM()}) ], view: new ol.View({ extent: [102, 29, 104, 31], // 设置成都为地图中心 center: [104.06, 30.67], projection: 'EPSG:4326', zoom: 10 }), target: 'map' }); 不妨上下左右拖拽地图试试，是否发现上下左右都存在着边界？其实代码很简单：12345678910111213141516171819&lt;body&gt; &lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt; &lt;script&gt; new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], view: new ol.View(&#123; // 设置地图中心范围 extent: [102, 29, 104, 31], // 设置成都为地图中心 center: [104.06, 30.67], projection: 'EPSG:4326', zoom: 10 &#125;), target: 'map' &#125;); &lt;/script&gt;&lt;/body&gt; 就只是添加了 extent: [102, 29, 104, 31],这行代码就实现了功能。extent参数类型为[minX, minY, maxX, maxY]的ol.Extent，很容易记住。 如果对上面的地图进行缩小，然后再看地图，是否发现范围[102, 29, 104, 31]外的区域也显示出来了，而这并不是我们期望看到的。这时请注意仔细看extent参数的说明，这个范围指的是地图中心的限制范围，而不是整个地图显示的范围。那遇到这个问题该怎么办？我们发现，当我们地图放大后，这个问题并不那么明显，地图放大的越大，固定窗口显示的实际地理范围越小。一个简单的办法就是限制地图不能无限缩小，具体允许缩小到哪一级，可通过实际缩小地图到刚好填满整个窗口(id为map的div)来确定。限制地图缩放级别可参见下一节。 这是一种简单的做法，虽然有效，但并不精确，如果要做到非常精确，还需要学习后面更多的知识(分辨率等)，在后续章节会有更深入的说明和示例。 限制地图缩放级别有时无限制地允许用户缩小或者放大地图，并不是一种明智的做法，在地图上的feature、标注、图形等都会变的不便于查看。为此，适中的地图缩放级别是被大多数场景所需要的。下面演示地图你只能在10到14级进行缩放。 new ol.Map({ layers: [ new ol.layer.Tile({source: new ol.source.OSM()}) ], view: new ol.View({ // 设置成都为地图中心 center: [104.06, 30.67], projection: 'EPSG:4326', zoom: 10, minZoom: 10, maxZoom: 14 }), target: 'map' }); 缩放试试便知，地图现在不能无限缩小放大了，代码也是非常的简单： 1234567891011121314151617181920&lt;body&gt; &lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt; &lt;script&gt; new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], view: new ol.View(&#123; // 设置成都为地图中心 center: [104.06, 30.67], projection: 'EPSG:4326', zoom: 10, // 限制地图缩放最大级别为14，最小级别为10 minZoom: 10, maxZoom: 14 &#125;), target: 'map' &#125;); &lt;/script&gt;&lt;/body&gt; 很多初学者问这个问题，其实仔细阅读一下API文档就会知道如何编码，以至于很多已经知道这个功能的其他开发者不愿意回答这么基础的功能。如果只是显示最小级别则只用设置minZoom的值即可，反之只设置maxZoom的值。 除了使用minZoom和maxZoom之外，还可以使用minResolution和maxResolution，其具体原理和使用，在分辨率小节会有介绍。对于开发者而言，建议使用minZoom和maxZoom，简单直接。 自适配区域在实际应用中，会有一些地图查找和标注的业务，比如查看成都市锦江区。而这时，地图所在区域可能是北京，我们需要能够让地图直接定位到锦江区，并且最大化完全地显示这块区域。下面就将演示这个功能。 var map = new ol.Map({ layers: [ new ol.layer.Tile({source: new ol.source.OSM()}) ], view: new ol.View({ // 设置成都为地图中心 center: [104.06, 30.67], projection: 'EPSG:4326', zoom: 10 }), target: 'map' }); function fitToChengdu() { // 让地图最大化完全地显示区域[104, 30.6, 104.12, 30.74] map.getView().fit([104, 30.6, 104.12, 30.74], map.getSize()); } 点击地图下方的按钮显示成都，看看有什么效果。代码如下： 1234567891011121314151617181920212223&lt;body&gt; &lt;div id=\"map\" style=\"width: 100%\"&gt;&lt;/div&gt; &lt;input type=\"button\" value=\"显示成都\" onclick=\"fitToChengdu();\" /&gt; &lt;script&gt; var map = new ol.Map(&#123; layers: [ new ol.layer.Tile(&#123;source: new ol.source.OSM()&#125;) ], view: new ol.View(&#123; // 设置成都为地图中心 center: [104.06, 30.67], projection: 'EPSG:4326', zoom: 10 &#125;), target: 'map' &#125;); function fitToChengdu() &#123; // 让地图最大化完全地显示区域[104, 30.6, 104.12, 30.74] map.getView().fit([104, 30.6, 104.12, 30.74], map.getSize()); &#125; &lt;/script&gt;&lt;/body&gt; 只用了一行代码，ol.View的fit函数很强大，希望初学者能认真仔细的查看API文档，它的第三个参数还可以设置更多的选项，以适应更多的需要。关于更多的使用，参见官网例子Advanced View Positioning。","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"openlayers","date":"2018-01-18T12:00:31.000Z","path":"20180118/openlayers/index.html","text":"OpenLayers 3 Primer介绍由于在学习OpenLayers3，有缘看到OpenLayers 3 Primer教程，真是很荣幸。转到博客，仅仅方便地铁上阅读，学习。这是一个关于OpenLayers 3使用的入门教程。帮助初学者逐步认识OpenLayers 3，理解地图组成，以及各个组成部分的作用。在此基础上，逐个突破，结合大量的实例，指导大家应用OpenLayers 3开发出符合业务的地图。在这个过程中，辅以对应的理论知识，学习了解OpenLayers 3背后的原理，尽量做到知其然且知其所以然，为更高级的OpenLayers 3开发打下坚实的基础。本教程将坚持实用为主，对应用中遇到的重点、难点加以详细讲解，提出实用方案。 为了满足广大初学者的需要，教程将坚持一个原则：即以浅显易懂为基础，以有效实用为最终目标的原则。 为什么要写这样一个教程故事是从我学习OpenLayers 3开始的。那时版本才3.0.0，当时学习OpenLayers 3很快就入手了，没有遇到任何障碍。 但后来发现有些初学者并不是这样的，都不知道怎么入手，遇到很多问题，我在回答了很多类似问题后，开始寻找入门难的原因。 总结下来有两个主要原因： 第一，虽然官网有关于每个类和方法的API文档，也有相关的例子，但就是没有一个系统的教程把他们串起来，对着例子虽然能做出一些类似的业务，但并不能灵活应用，自然会遇到很多问题。 同时国内目前并没有一本关于OpenLayers 3学习的书籍或教程，这是比较让人遗憾的事。庆幸地是国外的同仁已经写了两本英文书籍，一本是OpenLayers 3: Beginner’s Guide，需要付费；另一本是The book of OpenLayers 3，需要付费，但同时也支持开放。但对于国内开发者而言，还是中文更加可读。 (国外最近又出了两本需要付费的书，一本是Mastering Openlayers 3，这本书内容涵盖也比较全面，对英文没有障碍的初学者，可以学习。 另一本是OpenLayers 3.x Cookbook - Second Edition) 第二，使用OpenLayers 3的初学者并不都是GIS专业出身，有很大一部分是前端开发者，或者其他领域的开发者，GIS相关的理论知识欠缺。同时，还有一些开发者连JavaScript语言也不熟练，API文档都不知道如何阅读。 但由于任务或者项目压身，不得不使用Openlayers开发，自然会遇到很多困难。 为了解决这个问题，我写过一篇OpenLayers 3 入门指南，一开始想当然地认为可以解决入门问题，直到有一天在群里来了一个初学者，他看了这篇文章后，觉得并没有什么卵用。这时我才意识到问题的严重性，问题没解决，反而多了一篇垃圾。因为入门者需要的是更为具体的东西。 在征集了大多数人的意见后，我决定写这本教程（在此一并感谢QQ群里那些提出意见，给予帮助的帅哥美女们）。目前国内存在很多OpenLayers 3的爱好者和使用者，我所在的QQ群就有将近千人，同时还存在很多其他关于OpenLayers的群，后续还会有更多的开发者使用它。 本教程作为一次尝试，我愿意做第一本国内的OpenLayers 3教程，希望能在开放的情况下，真正帮助到国内OpenLayers 3的初学者入门，虽然这并不容易，但我愿意挑战自己，并加入到开源的潮流中去，以此向OpenLayers 3这个优秀的开源引擎致敬，向它的开发团队和所有贡献者致敬！ 目标读者本教程的主要目标读者是刚开始接触OpenLayers 3的应用开发者，但对它有一定了解的开发者也可以通过这个教程的后续部分来提升自己的理解和认识。同时希望对它有深入了解的开发者review本教程，提交issue或者PR。 环境 OpenLayers 3的版本: 3.13.1 浏览器: chrome 47.0.2526.111(64bit) 关于环境，这边可能会使用openlayers 3或者4来实验和学习。关于作者QQ群 OpenLayers官方旗舰群[2] 里面的 扯淡大叔QQ: 11364382 BTW我和一帮天南海北的朋友们正在开发一个开源的WEB 3D GIS引擎F3Earth，有兴趣的朋友可以了解一下，谢谢大家的支持。 Summary OpenLayers 3 介绍 一个简单的地图 OpenLayers 3地图 初步解析地图组成 地图所有组成部分 看懂API 结合API文档分析代码 ol.Map的应用 定制地图logo 单页面多地图 地图联动 动态交换地图 View 地图导航 坐标 坐标系及投影 OpenLayers 3使用的坐标系 ol.View的应用 限制地图范围 限制地图缩放级别 自适配区域 Source和Layer 加载瓦片地图 最简单的加载在线地图 万能瓦片地图加载秘籍 加载离线瓦片地图 瓦片加载的源码浅析与小结 静态地图及应用 加载WMS服务地图 矢量地图 获取加载后的所有feature 坐标转换 样式设置 图层叠加及管理 LOD与分辨率 LOD原理 瓦片计算 分辨率 自定义瓦片地图及加载 图标及提示信息 应用overlay 动画图标 style及应用 设置图标位置 根据层级放大缩小图标 另类设置svg图标 规则几何体图标 用Canvas自绘图标 动态改变图标 文字标注 styleFunction应用 大量图标方案 提示信息 事件 一个简单的事件应用 注销事件响应 常用事件 自定义事件及应用 Interaction 内置交互方式介绍 实现原理 Feature选取之选中样式 Feature选取之条件过滤 Feature选取之取消选中 绘制一条线 绘图进阶 总结 Control 控件概览 探究控件原理 控件美颜 自定义控件 动画 动画简单应用 动画高阶应用 利用postcompose事件做动画 进阶实例 通过wfs增删改查要素 GeoServer环境配置 配置数据源 通过wfs查询要素 通过wfs修改要素 通过wfs添加要素 通过wfs删除要素 常见问题 注意事项","tags":[{"name":"openLayers","slug":"openLayers","permalink":"https://jiangshaobo.cn/tags/openLayers/"}]},{"title":"Tomcat运行一段时间后报错cache eviction process was unable to free [10]","date":"2018-01-18T09:50:25.000Z","path":"20180118/Tomcat运行一段时间后报错cache-eviction-process-was-unable-to-free.html","text":"应用运行一段时间后崩掉了。查看日志记录如下:123456789101112131415161718192015-Jan-2018 16:56:55.801 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.webresources.Cache.backgroundProcess The background cache eviction process was unable to free [10] percent of the cache for Context [] - consider increasing the maximum size of the cache. After eviction approximately [24,460] KB of data remained in the cache.15-Jan-2018 16:57:05.810 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.webresources.Cache.backgroundProcess The background cache eviction process was unable to free [10] percent of the cache for Context [] - consider increasing the maximum size of the cache. After eviction approximately [24,460] KB of data remained in the cache.15-Jan-2018 16:57:15.819 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.webresources.Cache.backgroundProcess The background cache eviction process was unable to free [10] percent of the cache for Context [] - consider increasing the maximum size of the cache. After eviction approximately [24,460] KB of data remained in the cache.15-Jan-2018 16:57:25.827 INFO [ContainerBackgroundProcessor[StandardEngine[Catalina]]] org.apache.catalina.webresources.Cache.backgroundProcess The background cache eviction process was unable to free [10] percent of the cache for Context [] - consider increasing the maximum size of the cache. After eviction approximately [24,460] KB of data remained in the cache. 日志中记录并给出了建议：1consider increasing the maximum size of the cache 也就是增加最大缓存。 打开tomcat下的conf文件下(tomcat_home/conf/Catalina/localhost/里的context文件里)的context.xml在文件尾部前增加添加这么一行：1&lt;Resources cachingAllowed=\"true\" cacheMaxSize=\"100000\" /&gt; 把cacheMaxSize调大就行了。 群友说可能是代码的问题，正在排查中。最后来个群友发的段子。 1234我今天突然觉得递归可以这样通俗的表达出来：两个人玩成语接龙，第一个人说：为所欲为。第二个人说：为所欲为。......","tags":[{"name":"tomcat","slug":"tomcat","permalink":"https://jiangshaobo.cn/tags/tomcat/"}]},{"title":"win10安装Postgresql 错误解决方案 Failed to load sql modules into the","date":"2018-01-14T08:28:57.000Z","path":"20180114/win10安装Postgresql-错误解决方案-Failed-to-load-sql-modules-into-the.html","text":"win10安装postgrelsql安装了很多次都是报错，开始查明以为是权限的问题，然后就给文件夹赋予权限，以为快解决了，又出现了 Failed to load sql modules into the database cluster的错误，于是根据错误去继续寻找解决方案，ubuntu下分分钟就install了。最后翻看stackoverflow找到解决方案。步骤如下：I was getting this same error when trying to install PostgreSQL v9.4.4 on Windows 10 Pro. Starting with a solution hosted on Stack Exchange, I came up with the following steps that allowed the installer to run successfully: 1234567891) Create a new user account, called postgres2) Add the new account to the Administrators and Power Users groups3) Restart the computer NOTE: I added step #3, since step #4 didn't work without it4) Run a command prompt as the postgres user, using the command: runas /user:postgres cmd.exe5) Run the installer from the postgres command window6) Delete the postgres user account, as well as the user directory NOTE: I added step #6, since the postgres account is not required after installation 第二步的话，在win10下很简单，在此电脑（我的电脑）下右键选管理，右键-》新增用户（postgres），然后重启用原来的用户登陆。注意第四步，可以按win+r打开运行命令，然后输入1runas /user:postgres cmd.exe 之后在cmd里面直接运行postgresql-10.1-3-windows-x64.exe，安装成功。win10安装Postgresql 错误解决方案 Failed to load sql modules into the database clusterwin10安装Postgresql 错误解决方案 新增用户 建议访问：stackoverflow","tags":[{"name":"postgresql","slug":"postgresql","permalink":"https://jiangshaobo.cn/tags/postgresql/"},{"name":"win10","slug":"win10","permalink":"https://jiangshaobo.cn/tags/win10/"},{"name":"fail","slug":"fail","permalink":"https://jiangshaobo.cn/tags/fail/"}]},{"title":"centos ubuntu下安装nodejs环境","date":"2018-01-13T09:33:18.000Z","path":"20180113/centos-ubuntu下安装nodejs环境.html","text":"申请了阿里云的主机，后续打算将博客转移到阿里云上，之前的腾讯云由于没有备案都闲置了，用作测试。顺便从头记录node学习相关。 先安装一个node环境，到node官网下载node安装包1https://nodejs.org/zh-cn/download/ 1https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz centos ubuntu下安装nodejs环境 由于是新的环境，一切都是新的。 首先cd到/temp下，wget https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz 然后解压node-v8.9.3-linux-x64.tar.xz文件(默认使用的root用户，非root用户命令前加sudo)。 123xvf -d node-v8.9.3-linux-x64.tar.xzmv node-v8.9.3-linux-x64 nodecp -R node /usr/local 将node-v8.9.3-linux-x64重新命名为node 再把node复制到/usr/local下。 之后配置环境变量，由于没有安装vim，先使用vi来编辑， 1vi /etc/profile 在/etc/profile下追加node环境配置 123export NODE_HOME=/usr/local/nodeexport PATH=$NODE_HOME/bin:$PATHexport NODE_PATH=$NODE_HOME/lib/node_modules:$PATH 然后按esc之后输入:wq（保存并退出） 让配置生效source /etc/profile 这样安装完成。可以使用node -v查看node版本，可以使用npm -v查看npm版本 安装cnpm或者换源。 如果在centos下（ubuntu也是类似，只是命令不一样）要编译安装node首先 1yum -y install gcc make gcc-c++ openssl-devel wget 下载源码 1wget https://nodejs.org/dist/v8.9.3/node-v8.9.3.tar.gz 解压1tar -zxvf node-v8.9.3-linux-x64.tar.gz 编译安装 12./configuremake &amp;&amp; make install 然后验证 1node -v 安装pm21https://github.com/Unitech/pm2 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# General$ npm install pm2 -g # Install PM2$ pm2 start app.js # Start, Daemonize and auto-restart application (Node)$ pm2 start app.py # Start, Daemonize and auto-restart application (Python)$ pm2 start npm -- start # Start, Daemonize and auto-restart Node application# Cluster Mode (Node.js only)$ pm2 start app.js -i 4 # Start 4 instances of application in cluster mode # it will load balance network queries to each app$ pm2 reload all # Zero Second Downtime Reload$ pm2 scale [app-name] 10 # Scale Cluster app to 10 process# Process Monitoring$ pm2 list # List all processes started with PM2$ pm2 monit # Display memory and cpu usage of each app$ pm2 show [app-name] # Show all information about application# Log management$ pm2 logs # Display logs of all apps$ pm2 logs [app-name] # Display logs for a specific app$ pm2 logs --json # Logs in JSON format$ pm2 flush$ pm2 reloadLogs# Process State Management$ pm2 start app.js --name=\"api\" # Start application and name it \"api\"$ pm2 start app.js -- -a 34 # Start app and pass option \"-a 34\" as argument$ pm2 start app.js --watch # Restart application on file change$ pm2 start script.sh # Start bash script$ pm2 start app.json # Start all applications declared in app.json$ pm2 reset [app-name] # Reset all counters$ pm2 stop all # Stop all apps$ pm2 stop 0 # Stop process with id 0$ pm2 restart all # Restart all apps$ pm2 gracefulReload all # Gracefully reload all apps in cluster mode$ pm2 delete all # Kill and delete all apps$ pm2 delete 0 # Delete app with id 0# Startup/Boot management$ pm2 startup # Detect init system, generate and configure pm2 boot on startup$ pm2 save # Save current process list$ pm2 resurrect # Restore previously saved processes$ pm2 unstartup # Disable and remove startup system$ pm2 update # Save processes, kill PM2 and restore processes$ pm2 generate # Generate a sample json configuration file# Deployment$ pm2 deploy app.json prod setup # Setup \"prod\" remote server$ pm2 deploy app.json prod # Update \"prod\" remote server$ pm2 deploy app.json prod revert 2 # Revert \"prod\" remote server by 2# Module system$ pm2 module:generate [name] # Generate sample module with name [name]$ pm2 install pm2-logrotate # Install module (here a log rotation system)$ pm2 uninstall pm2-logrotate # Uninstall module$ pm2 publish # Increment version, git push and npm publish","tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://jiangshaobo.cn/tags/nodejs/"},{"name":"node.js","slug":"node-js","permalink":"https://jiangshaobo.cn/tags/node-js/"},{"name":"centos","slug":"centos","permalink":"https://jiangshaobo.cn/tags/centos/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://jiangshaobo.cn/tags/ubuntu/"}]}]