<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>少将博客 Abel&#39;s blog</title>
  
  <subtitle>实战、分享、共成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jiangshaobo.cn/"/>
  <updated>2018-02-12T12:57:20.166Z</updated>
  <id>https://jiangshaobo.cn/</id>
  
  <author>
    <name>Abel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka运行环境的搭建</title>
    <link href="https://jiangshaobo.cn/20180208/Kafka%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA.html"/>
    <id>https://jiangshaobo.cn/20180208/Kafka运行环境的搭建.html</id>
    <published>2018-02-08T08:52:05.000Z</published>
    <updated>2018-02-12T12:57:20.166Z</updated>
    
    <content type="html"><![CDATA[<h5 id="准备学习下Kafka神器，Kafka是用Scala语言开发的，首先需要安装JDK环境。"><a href="#准备学习下Kafka神器，Kafka是用Scala语言开发的，首先需要安装JDK环境。" class="headerlink" title="准备学习下Kafka神器，Kafka是用Scala语言开发的，首先需要安装JDK环境。"></a>准备学习下Kafka神器，Kafka是用Scala语言开发的，首先需要安装JDK环境。</h5><p>Java环境还是比较容易配置的，目前系统是Win10.</p><p>先到官网下载JDK，这里下载的是JDK 1.8，下载后双击运行安装，选择路径。</p><p>桌面此电脑右键选择属性，打开高级系统设置，点击环境变量，在系统变量中新增变量名JAVA_HOME，变量值为 JDK 1.8 安装路径，也就是刚刚安装的路径。由于默认安装在 Program Files目录下，目录名之间有空格，有可能在运行某些应用时因JDK安装路径有空格而报错，这个有点坑。<br><a id="more"></a><br>再新增变量名 CLASSPATH，变量值为<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.;%JAVA_HOME%\<span class="class"><span class="keyword">lib</span>\<span class="title">dt</span>.<span class="title">jar</span>;</span>%JAVA_HOME%\<span class="class"><span class="keyword">lib</span>\<span class="title">tools</span>.<span class="title">jar</span></span></span><br></pre></td></tr></table></figure></p><p>最后的结果如下：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">系统变量JAVA_HOME<span class="symbol">C:</span>\Program Files\Java\jdk1.<span class="number">8.0_131</span></span><br><span class="line">用户变量CLASSPATH.;%JAVA_HOME%\<span class="class"><span class="keyword">lib</span>\<span class="title">dt</span>.<span class="title">jar</span>;</span>%JAVA_HOME%\<span class="class"><span class="keyword">lib</span>\<span class="title">tools</span>.<span class="title">jar</span></span></span><br><span class="line">新增PATH变量     PATH   %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br></pre></td></tr></table></figure></p><p>设置好了后，重新打开一个终端，运行<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">version</span></span><br></pre></td></tr></table></figure></p><p>显示类似下面结果，说明JDK环境搭建成功。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version <span class="string">"1.8.0_131"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_131-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit<span class="built_in"> Server </span>VM (build 25.131-b11, mixed mode)</span><br></pre></td></tr></table></figure></p><p>类似的有maven环境，tomcat环境，Java开发必备，当然也可以Docker。</p><p>还有Git环境。</p><p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh-keygen</span> <span class="selector-tag">-t</span> <span class="selector-tag">rsa</span> <span class="selector-tag">-C</span> "<span class="selector-tag">youremail</span>@<span class="keyword">example</span>.<span class="keyword">com</span>"</span><br></pre></td></tr></table></figure><p>你需要把邮件地址youremail@example.com换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;准备学习下Kafka神器，Kafka是用Scala语言开发的，首先需要安装JDK环境。&quot;&gt;&lt;a href=&quot;#准备学习下Kafka神器，Kafka是用Scala语言开发的，首先需要安装JDK环境。&quot; class=&quot;headerlink&quot; title=&quot;准备学习下Kafka神器，Kafka是用Scala语言开发的，首先需要安装JDK环境。&quot;&gt;&lt;/a&gt;准备学习下Kafka神器，Kafka是用Scala语言开发的，首先需要安装JDK环境。&lt;/h5&gt;&lt;p&gt;Java环境还是比较容易配置的，目前系统是Win10.&lt;/p&gt;
&lt;p&gt;先到官网下载JDK，这里下载的是JDK 1.8，下载后双击运行安装，选择路径。&lt;/p&gt;
&lt;p&gt;桌面此电脑右键选择属性，打开高级系统设置，点击环境变量，在系统变量中新增变量名JAVA_HOME，变量值为 JDK 1.8 安装路径，也就是刚刚安装的路径。由于默认安装在 Program Files目录下，目录名之间有空格，有可能在运行某些应用时因JDK安装路径有空格而报错，这个有点坑。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World Hexo 命令笔记</title>
    <link href="https://jiangshaobo.cn/20180204/hello-world.html"/>
    <id>https://jiangshaobo.cn/20180204/hello-world.html</id>
    <published>2018-02-04T14:22:00.585Z</published>
    <updated>2018-02-04T14:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><a id="more"></a><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h4 id="Hexo简写"><a href="#Hexo简写" class="headerlink" title="Hexo简写"></a>Hexo简写</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">"我的博客"</span> == hexo new <span class="string">"我的博客"</span> #新建文章</span><br><span class="line">hexo p == hexo publish</span><br><span class="line">hexo g == hexo generate#生成</span><br><span class="line">hexo s == hexo<span class="built_in"> server </span>#启动服务预览</span><br><span class="line">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></figure><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo<span class="built_in"> server </span>#Hexo 会监视文件变动并自动更新，您无须重启服务器。</span><br><span class="line">hexo<span class="built_in"> server </span>-s #静态模式</span><br><span class="line">hexo<span class="built_in"> server </span>-p 5000 #更改端口</span><br><span class="line">hexo<span class="built_in"> server </span>-i 192.168.1.1 #自定义 IP</span><br><span class="line"></span><br><span class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g #生成静态网页</span><br><span class="line">hexo d #开始部署</span><br></pre></td></tr></table></figure><h4 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span> #使用 Hexo 生成静态文件快速而且简单</span><br><span class="line">hexo <span class="keyword">generate</span> --watch #监视文件变动</span><br></pre></td></tr></table></figure><h4 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h4><p>两个命令的作用是相同的<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br><span class="line">hexo deploy -g</span><br><span class="line">hexo<span class="built_in"> server </span>-g</span><br></pre></td></tr></table></figure></p><h4 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h4><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish <span class="string">[layout]</span> &lt;title&gt;</span><br></pre></td></tr></table></figure><h4 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span> <span class="meta">#新建文章</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">"pageName"</span> <span class="meta">#新建页面</span></span><br><span class="line">hexo generate <span class="meta">#生成静态页面至public目录</span></span><br><span class="line">hexo <span class="keyword">server</span> <span class="meta">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="meta">#将.deploy目录部署到GitHub</span></span><br><span class="line"></span><br><span class="line">hexo <span class="keyword">new</span> [layout] &lt;title&gt;</span><br><span class="line">hexo <span class="keyword">new</span> photo <span class="string">"My Gallery"</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="string">"Hello World"</span> --lang tw</span><br></pre></td></tr></table></figure><h4 id="变量-描述"><a href="#变量-描述" class="headerlink" title="变量    描述"></a>变量    描述</h4><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">layout布局</span><br><span class="line">title标题</span><br><span class="line">date文件建立日期</span><br><span class="line">title: 使用Hexo搭建个人博客</span><br><span class="line">layout: post</span><br><span class="line">date: 2018<span class="string">-01</span><span class="string">-14</span> 23:18:00</span><br><span class="line">comments: true</span><br><span class="line">categories: Blog</span><br><span class="line"><span class="keyword">tags:</span> [Hexo]</span><br><span class="line">keywords: Hexo, Blog</span><br><span class="line">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</span><br><span class="line">模版（Scaffold）</span><br><span class="line">hexo new photo "My Gallery"</span><br></pre></td></tr></table></figure><p>变量    描述<br>layout    布局<br>title    标题<br>date    文件建立日期<br>设置文章摘要<br>以上是文章摘要 <!--more--> 以下是余下全文<br>写作<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>&lt;title&gt;</span><br><span class="line">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure></p><p>变量    描述<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">:title</span>标题</span><br><span class="line"><span class="symbol">:year</span>建立的年份（<span class="number">4</span> 位数）</span><br><span class="line"><span class="symbol">:month</span>建立的月份（<span class="number">2</span> 位数）</span><br><span class="line"><span class="symbol">:i_month</span>建立的月份（去掉开头的零）</span><br><span class="line"><span class="symbol">:day</span>建立的日期（<span class="number">2</span> 位数）</span><br><span class="line"><span class="symbol">:i_day</span>建立的日期（去掉开头的零）</span><br><span class="line">推送到服务器上</span><br><span class="line">hexo n <span class="comment">#写文章</span></span><br><span class="line">hexo g <span class="comment">#生成</span></span><br><span class="line">hexo d <span class="comment">#部署 #可与hexo g合并为 hexo d -g</span></span><br></pre></td></tr></table></figure></p><p>报错<br>1.找不到git部署<br>ERROR Deployer not found: git<br>解决方法<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><p>3.部署类型设置git<br>hexo 3.0 部署类型不再是github，_config.yml 中修改<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: http:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repository:</span> git@***.github.com:***<span class="comment">/***.github.io.git</span></span><br><span class="line"><span class="comment">  branch: master</span></span><br></pre></td></tr></table></figure></p><ol><li><p>xcodebuild<br>xcode-select: error: tool ‘xcodebuild’ requires Xcode, but active developer directory ‘/Library/Developer/CommandLineTools’ is a command line tools instance</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> bcrypt</span><br></pre></td></tr></table></figure></li><li><p>RSS不显示<br>安装RSS插件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li></ol><p>开启RSS功能</p><p>编辑hexo/_config.yml，添加如下代码：</p><p>rss: /atom.xml #rss地址  默认即可</p><h5 id="添加站点地图"><a href="#添加站点地图" class="headerlink" title="添加站点地图"></a>添加站点地图</h5><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站</p><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p>打开hexo目录下的dos命令行，分别安装百度和google插件<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-baidu-sitemap <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><h5 id="在博客目录的-config-yml中添加如下代码"><a href="#在博客目录的-config-yml中添加如下代码" class="headerlink" title="在博客目录的_config.yml中添加如下代码"></a>在博客目录的_config.yml中添加如下代码</h5><h5 id="自动生成sitemap"><a href="#自动生成sitemap" class="headerlink" title="自动生成sitemap"></a>自动生成sitemap</h5><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sitemap:</span></span><br><span class="line"><span class="symbol">path:</span> sitemap.xml</span><br><span class="line"><span class="symbol">baidusitemap:</span></span><br><span class="line"><span class="symbol">path:</span> baidusitemap.xml</span><br></pre></td></tr></table></figure><h5 id="编译你的博客"><a href="#编译你的博客" class="headerlink" title="编译你的博客"></a>编译你的博客</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://jiangshaobo.cn/tags/hexo/"/>
    
      <category term="hexo g" scheme="https://jiangshaobo.cn/tags/hexo-g/"/>
    
      <category term="hexo d" scheme="https://jiangshaobo.cn/tags/hexo-d/"/>
    
      <category term="hexo s" scheme="https://jiangshaobo.cn/tags/hexo-s/"/>
    
      <category term="hexo p" scheme="https://jiangshaobo.cn/tags/hexo-p/"/>
    
      <category term="hexo n" scheme="https://jiangshaobo.cn/tags/hexo-n/"/>
    
  </entry>
  
  <entry>
    <title>如何安装 Ruby</title>
    <link href="https://jiangshaobo.cn/20180204/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85-Ruby.html"/>
    <id>https://jiangshaobo.cn/20180204/如何安装-Ruby.html</id>
    <published>2018-02-04T13:59:29.000Z</published>
    <updated>2018-02-04T14:22:38.568Z</updated>
    
    <content type="html"><![CDATA[<p>安装 Ruby<br>可以使用多种工具安装 Ruby。本页介绍如何使用主流的包管理系统和第三方工具管理和安装 Ruby，以及如何通过源码编译安装。</p><p>选择安装方式<br>安装 Ruby 的方式有多种：</p><p>如果使用的是类 UNIX 操作系统，使用系统的包管理器是最简单的安装方式。但是，包管理器中的 Ruby 版本通常都不是最新的。<br>安装工具能够安装指定的一个或多个 Ruby 版本。有针对 Windows 的安装包。<br>管理工具能帮助你在系统中安装的多个 Ruby 版本之间切换。<br>最后，也可以通过源码编译安装 Ruby。<br>下面概述针对不同需求和不同平台的安装方式。</p><a id="more"></a><p>包管理系统<br>Debian, Ubuntu<br>CentOS, Fedora, RHEL<br>Gentoo<br>Arch Linux<br>OS X<br>Solaris, OpenIndiana<br>其他发行版<br>安装工具<br>ruby-build<br>ruby-install<br>RubyInstaller (Windows)<br>RailsInstaller 和 Ruby Stack<br>管理工具<br>chruby<br>rbenv<br>RVM<br>uru<br>通过源码编译安装<br>包管理系统<br>如果不能自己编译 Ruby，也不想使用第三方工具，可以使用系统中的包管理器安装 Ruby。</p><p>许多 Ruby 社区的成员强烈建议，应该使用第三方工具来安装 Ruby，不要用系统的包管理器。详细的优缺点超出了本页的讨论范畴，基本原因是大多数系统包管理器里的 Ruby 版本比较老。如果想使用最新的 Ruby 版本，要确保包的名称正确，或者使用后面列出的工具。</p><p>apt（Debian 或 Ubuntu）<br>Debian GNU/Linux 和 Ubuntu 使用 apt 包管理器。用法如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-<span class="builtin-name">get</span> install ruby-full</span><br></pre></td></tr></table></figure></p><p>撰写本文时，在 Debian 和 Ubuntu 下，ruby-full 包提供的是老旧的 Ruby 2.3.1。</p><p>yum（CentOS、Fedora 或 RHEL）<br>CentOS、Fedora 和 RHEL 使用 yum 包管理器。用法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install ruby</span></span><br></pre></td></tr></table></figure><p>安装的 Ruby 版本通常是发行版发行日能打包的最新版。</p><p>portage（Gentoo）<br>Gentoo 使用 portage 包管理器。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo emerge dev-lang/ruby</span></span><br></pre></td></tr></table></figure></p><p>一般来说，这将安装 1.9 和 2.0 版本，不过还有更多版本可供安装。如果想安装指定的版本，要在 make.conf 文件中设置 RUBY_TARGETS。详见 Gentoo Ruby Project 网站。</p><p>pacman（Arch Linux）<br>Arch Linux 使用 pacman 包管理器。要安装 Ruby，只需要执行下述命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S ruby</span></span><br></pre></td></tr></table></figure></p><p>这将安装最新的 Ruby 稳定版。</p><p>Homebrew（OS X）<br>OS X El Capitan、Yosemite 和 Mavericks 内置了 Ruby 2.0。OS X Mountain Lion、Lion 和 Snow Leopard 内置了 Ruby 1.8.7。</p><p>许多 OS X 用户使用 Homebrew 作为包管理器。用 Homebrew 能够非常简单地获取到最新版的 Ruby：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>ruby</span><br></pre></td></tr></table></figure></p><p>这将安装最新版的 Ruby。</p><p>Solaris 和 OpenIndiana<br>Sunfreeware 上的 Solaris 8 到 10 内置了 Ruby 1.8.7，Blastwave 同样如此。Ruby 1.9.2p0 在 Sunfreeware 上也有，但是这一版已经过时。</p><p>若想在 OpenIndiana 上安装 Ruby，要使用 Image Packaging System (IPS) 客户端。这将直接从 OpenSolaris 代码库安装 Ruby 1.9 和 RubyGems：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pkg install runtime/ruby-18</span></span><br></pre></td></tr></table></figure></p><p>然而，第三方工具或许是获取最新版 Ruby 更好的方法。</p><p>其它发行版<br>在其它操作系统中，可以使用包管理器在包仓库中搜索 Ruby，或许使用第三方工具是更好的选择。</p><p>安装工具<br>如果系统或者包管理器提供的 Ruby 版本已经过时，可以使用第三方安装工具来安装更新的版本。其中许多工具允许在同一个系统中安装多个 Ruby 版本，相关的工具能帮你在不同的版本之间切换。如果打算用 RVM 作为版本管理工具，不需要其它的安装工具，它自己就具有这些功能。</p><p>ruby-build<br>ruby-build 是 rbenv 的一个插件，能在任意目录中编译和安装不同版本的 Ruby。ruby-build 也可以不依赖 rbenv 而单独使用。支持的平台有 OS X、Linux 和其它类 UNIX 操作系统。</p><p>ruby-install<br>ruby-install 能在任意目录中编译和安装不同版本的 Ruby。还有个兄弟工具，chruby，可以用来切换不同的 Ruby 版本。支持的平台有 OS X、Linux 和其它类 UNIX 操作系统。</p><p>RubyInstaller<br>如果使用 Windows，有个不错的项目能帮你安装 Ruby：RubyInstaller。它能帮你在 Windows 中安装所需的所有 Ruby 开发环境。</p><p>下载、运行，即可!</p><p>RailsInstaller 和 Ruby Stack<br>如果是为了使用 Ruby on Rails 而安装 Ruby，可以使用下列安装工具：</p><p>RailsInstaller，使用的是 RubyInstaller，但包括了其它能够帮助 Rails 开发的工具。支持 OS X 和 Windows。<br>Bitnami Ruby Stack，提供了完整的 Rails 开发环境。支持 OS X、Linux、Windows、虚拟机和云镜像。<br>管理工具<br>许多 Ruby 程序员使用 Ruby 管理工具管理不同版本的 Ruby。这些管理工具有很多额外的优点，但没有官方支持。不过，这些工具背后的社群都乐于助人。</p><p>chruby<br>chruby 用于在不同的 Ruby 版本之间切换。chruby 能够管理用 ruby-install 或者通过源码编译安装的 Ruby。</p><p>rbenv<br>rbenv 用于管理系统中安装的多个 Ruby 版本。它不能直接安装 Ruby，但有个流行的插件叫 ruby-build 能够安装 Ruby。这两个工具都支持 OS X、Linux 和其它类 UNIX 操作系统。</p><p>RVM（“Ruby Version Manager”）<br>RVM 能在系统中安装和管理多个 Ruby 版本。同时还能管理不同的 gem 集。支持 OS X、Linux 和其它类 UNIX 操作系统。</p><p>uru<br>Uru 是一个轻量级的命令行工具，支持多平台，能够帮你在 OS X、Linux 和 Windows 上使用不同的 Ruby 版本。</p><p>通过源码编译安装<br>当然，也可以通过源码安装 Ruby。下载，解压，然后执行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./configure</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></span><br></pre></td></tr></table></figure></p><p>默认情况下，Ruby 安装到 /usr/local 目录。如果想使用其他目录，可以把 –prefix=DIR 选项传给 ./configure 脚本。</p><p>因为无法使用任何工具来管理通过源码编译安装的 Ruby，所以使用第三方工具或者包管理器或许是更好的选择。</p><p>这边ubuntu环境选择的是<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install ruby-full</span><br></pre></td></tr></table></figure></p><p>安装的，简单方便。</p><p>详情请查看 <a href="http://www.ruby-lang.org/zh_cn/documentation/installation/" target="_blank" rel="noopener">http://www.ruby-lang.org/zh_cn/documentation/installation/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装 Ruby&lt;br&gt;可以使用多种工具安装 Ruby。本页介绍如何使用主流的包管理系统和第三方工具管理和安装 Ruby，以及如何通过源码编译安装。&lt;/p&gt;
&lt;p&gt;选择安装方式&lt;br&gt;安装 Ruby 的方式有多种：&lt;/p&gt;
&lt;p&gt;如果使用的是类 UNIX 操作系统，使用系统的包管理器是最简单的安装方式。但是，包管理器中的 Ruby 版本通常都不是最新的。&lt;br&gt;安装工具能够安装指定的一个或多个 Ruby 版本。有针对 Windows 的安装包。&lt;br&gt;管理工具能帮助你在系统中安装的多个 Ruby 版本之间切换。&lt;br&gt;最后，也可以通过源码编译安装 Ruby。&lt;br&gt;下面概述针对不同需求和不同平台的安装方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ruby" scheme="https://jiangshaobo.cn/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>Hexo渲染时排除目录文件夹或部分文件</title>
    <link href="https://jiangshaobo.cn/20180131/Hexo%E6%B8%B2%E6%9F%93%E6%97%B6%E6%8E%92%E9%99%A4%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%A4%B9%E6%88%96%E9%83%A8%E5%88%86%E6%96%87%E4%BB%B6.html"/>
    <id>https://jiangshaobo.cn/20180131/Hexo渲染时排除目录文件夹或部分文件.html</id>
    <published>2018-01-31T05:28:03.000Z</published>
    <updated>2018-02-02T03:26:25.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用Hexo的时候，有时候需要写点Demo实验，发现Hexo也渲染了，那么怎么才可以让Hexo跳过目录或者部分文件，在查看-config-yml的时候发现"><a href="#使用Hexo的时候，有时候需要写点Demo实验，发现Hexo也渲染了，那么怎么才可以让Hexo跳过目录或者部分文件，在查看-config-yml的时候发现" class="headerlink" title="使用Hexo的时候，有时候需要写点Demo实验，发现Hexo也渲染了，那么怎么才可以让Hexo跳过目录或者部分文件，在查看_config.yml的时候发现"></a>使用Hexo的时候，有时候需要写点Demo实验，发现Hexo也渲染了，那么怎么才可以让Hexo跳过目录或者部分文件，在查看_config.yml的时候发现</h4><a id="more"></a><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Directory</span></span><br><span class="line"><span class="meta"># 资源文件夹，这个文件夹用来存放内容</span></span><br><span class="line">source_dir: source</span><br><span class="line"><span class="meta"># 公共文件夹，这个文件夹用于存放生成的站点文件</span></span><br><span class="line">public_dir: <span class="keyword">public</span></span><br><span class="line"><span class="meta"># 标签文件夹</span></span><br><span class="line">tag_dir: tags</span><br><span class="line"><span class="meta"># 归档文件夹</span></span><br><span class="line">archive_dir: archives</span><br><span class="line"><span class="meta"># 分类文件夹</span></span><br><span class="line">category_dir: categories</span><br><span class="line"><span class="meta"># Include code 文件夹</span></span><br><span class="line">code_dir: downloads/code</span><br><span class="line"><span class="meta"># 资源文件夹</span></span><br><span class="line">assets_dir: assets</span><br><span class="line"><span class="meta"># 国际化（i18n）文件夹</span></span><br><span class="line">i18n_dir: :lang</span><br><span class="line"><span class="meta"># 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径</span></span><br><span class="line"><span class="meta"># skip_render: *.html</span></span><br></pre></td></tr></table></figure><p>注意skip_render，跳过指定文件的渲染，您可使用 glob 表达式来匹配路径，把注释去掉，让此配置起效。</p><p>在提交网址的时候，搜索引擎确认网站所有权时(站长统计验证)需要下载一个验证文件来进行验证，<br>要是这个文件被渲染了，验证就可能会失败了。<br>或者，有时候会写一些简单的html示例页面，这也是不希望Hexo渲染的。因此有必要针对某个文件或者目录进行排除。<br>Hexo的配置文件中提供了配置项skip_render。</p><p>注意<br>只有source目录下的文件才会发布到public（能够在网络上访问到），因此Hexo只渲染source目录下的文件。skip_render参数设置的路径是相对于source目录的路径。</p><p>设置排除项<br>假设source目录下的文件如以下目录树所示,<br>Ubuntu下 tree 命令以树形结构显示文件夹目录结构，先安装tree<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install tree</span><br></pre></td></tr></table></figure></p><p>只查看当前第一级的目录和文件<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tree</span> -L <span class="number">1</span></span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── assets</span><br><span class="line">├── CNAME</span><br><span class="line">├── demo</span><br><span class="line">├── instagram</span><br><span class="line">├── <span class="built_in">labs</span></span><br><span class="line">├── photos</span><br><span class="line">├── _posts</span><br><span class="line">└── t</span><br></pre></td></tr></table></figure><p>只查看当前第二级的目录和文件</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tree</span> -L <span class="number">2</span></span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── assets</span><br><span class="line">│   ├── demo</span><br><span class="line">│   └── img</span><br><span class="line">├── CNAME</span><br><span class="line">├── demo</span><br><span class="line">│   ├── baidu.html</span><br><span class="line">│   ├── google.html</span><br><span class="line">│   └── index.html</span><br><span class="line">├── instagram</span><br><span class="line">│   └── index.md</span><br><span class="line">├── labs</span><br><span class="line">│   ├── index</span><br><span class="line">│   └── index.md</span><br><span class="line">├── photos</span><br><span class="line">│   ├── index.ejs</span><br><span class="line">│   ├── <span class="selector-tag">ins</span>.css</span><br><span class="line">│   ├── <span class="selector-tag">ins</span>.js</span><br><span class="line">│   ├── <span class="selector-tag">ins</span>.json</span><br><span class="line">│   ├── lazyload<span class="selector-class">.min</span><span class="selector-class">.js</span></span><br><span class="line">│   └── tools.js</span><br><span class="line">├── _posts</span><br><span class="line">│   ├── centos-ubuntu下安装nodejs环境.md</span><br><span class="line">│   ├── CNAME</span><br><span class="line">│   └── hello-world.md</span><br><span class="line">└── t</span><br><span class="line">    ├── index.ejs</span><br><span class="line">    ├── <span class="selector-tag">ins</span>.css</span><br><span class="line">    ├── <span class="selector-tag">ins</span>.js</span><br><span class="line">    ├── <span class="selector-tag">ins</span>.json</span><br><span class="line">    └── lazyload<span class="selector-class">.min</span><span class="selector-class">.js</span></span><br></pre></td></tr></table></figure></p><p>排除单个文件<br>排除demo/index.html<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">skip_render:</span> <span class="string">'demo/index.html'</span></span><br></pre></td></tr></table></figure></p><p>排除多个文件<br>排除baidu.html和google.html<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line">  -<span class="ruby"> <span class="string">'demo/baidu.html'</span></span></span><br><span class="line"><span class="ruby">  - <span class="string">'demo/google.html'</span></span></span><br></pre></td></tr></table></figure></p><p>或者</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">skip_render:</span> <span class="string">'*.html'</span></span><br></pre></td></tr></table></figure><p>后者会排除source目录下所有后缀为html的文件，但是不会排除子目录如demo及其子目录中的html文件。</p><p>排除demo目录下baidu.html和google.html以及index.html<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line">  -<span class="ruby"> <span class="string">'demo/baidu.html'</span></span></span><br><span class="line"><span class="ruby">  - <span class="string">'demo/google.html'</span></span></span><br><span class="line"><span class="ruby">  - <span class="string">'demo/index.html'</span></span></span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">skip_render:</span> <span class="string">'demo/*.html'</span></span><br></pre></td></tr></table></figure></p><p>demo目录下新增other目录，另外新增几个文件<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">demo</span>/other</span><br><span class="line">touch <span class="built_in">demo</span>/other/test.html</span><br><span class="line">touch <span class="built_in">demo</span>/other/test1.html</span><br><span class="line">touch <span class="built_in">demo</span>/other/test2.md</span><br></pre></td></tr></table></figure></p><p>排除source/demo/other目录中的所有html文件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">skip_render:</span> <span class="string">'demo/other/*.html'</span></span><br></pre></td></tr></table></figure><p>这不会排除test2.md文件</p><p>排除source/demo/other目录中的所有文件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">skip_render:</span> <span class="string">'demo/other/**'</span></span><br></pre></td></tr></table></figure><p>排除baidu.html和google.html以及整个source/demo目录</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line">  -<span class="ruby"> <span class="string">'demo/*.html'</span></span></span><br><span class="line"><span class="ruby">  - <span class="string">'demo/other/**'</span></span></span><br></pre></td></tr></table></figure><p>可以到public文件下查看<br>排除所有特定后缀的文件，使用 glob 表达式来匹配路径，那么什么是glob表达式呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;使用Hexo的时候，有时候需要写点Demo实验，发现Hexo也渲染了，那么怎么才可以让Hexo跳过目录或者部分文件，在查看-config-yml的时候发现&quot;&gt;&lt;a href=&quot;#使用Hexo的时候，有时候需要写点Demo实验，发现Hexo也渲染了，那么怎么才可以让Hexo跳过目录或者部分文件，在查看-config-yml的时候发现&quot; class=&quot;headerlink&quot; title=&quot;使用Hexo的时候，有时候需要写点Demo实验，发现Hexo也渲染了，那么怎么才可以让Hexo跳过目录或者部分文件，在查看_config.yml的时候发现&quot;&gt;&lt;/a&gt;使用Hexo的时候，有时候需要写点Demo实验，发现Hexo也渲染了，那么怎么才可以让Hexo跳过目录或者部分文件，在查看_config.yml的时候发现&lt;/h4&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://jiangshaobo.cn/tags/hexo/"/>
    
      <category term="skip_render" scheme="https://jiangshaobo.cn/tags/skip-render/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers 3 内置的地图控件</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/ch10/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/ch10/index.html</id>
    <published>2018-01-18T12:29:59.000Z</published>
    <updated>2018-01-30T14:55:24.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h1><p> 在OpenLayers 3中，地图控件指的是下图标注的这些，包括缩放按钮，标尺，版权说明，指北针等等。 </p><a id="more"></a><p> <img src="../img/03-01-annotation.png" alt="地图控件"><br> 他们不会随着地图的移动而移动，一直处于一个固定的位置。 在实现上，并不是在画布上绘制的，而是使用传统的HTML元素来实现的，便于同地图分离，也便于界面实现。 在本章节中，将先概览OpenLayers 3中已有的地图控件，对其实现进行分析，在此基础上进一步修改其样式，从而定义自己的控件。</p><h1 id="控件概览"><a href="#控件概览" class="headerlink" title="控件概览"></a>控件概览</h1><p>OpenLayers 3目前内置的地图控件类都在包<code>ol.control</code>下面，依次有：</p><ul><li><code>ol.control.Attribution</code>: 右下角的地图信息控件</li><li><code>ol.control.FullScreen</code>: 全屏控件</li><li><code>ol.control.MousePosition</code>: 鼠标位置控件</li><li><code>ol.control.OverviewMap</code>: 鸟瞰图控件</li><li><code>ol.control.Rotate</code>: 指北针控件</li><li><code>ol.control.ScaleLine</code>: 比例尺控件</li><li><code>ol.control.Zoom</code>: 缩放按钮控件</li><li><code>ol.control.ZoomSlider</code>: 缩放滚动条控件</li><li><code>ol.control.ZoomToExtent</code>: 放大到设定区域控件</li></ul><p>每一个类都有一些设置参数，可对照官网API的文档来了解其对应的功能。 </p><p>默认情况下，在地图上是不会显示这么多地图控件的，只会应用<code>ol.control.defaults()</code>这个函数返回的地图控件，默认包含了<code>ol.control.Zoom</code>，<code>ol.control.Rotate</code>和<code>ol.control.Attribution</code>这个控件。 其使用方式同<code>ol.interaction.defaults()</code>很像，同样可以设置一些参数来控制控件的一些功能，从而实现定制化需求。 比如下面这个地图上的控件稍微的同默认情况下的控件有点不一样，因为控件都不存在了。</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">    var map = new ol.Map({        controls: ol.control.defaults({            attribution: false,            rotate: false,            zoom: false        }),        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });</script><p>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>                  </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../src/ol3.13.1/ol.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../src/ol3.13.1/ol.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置地图控件，默认的三个控件都不显示</span></span></span><br><span class="line"><span class="undefined">controls: ol.control.defaults(&#123;</span></span><br><span class="line"><span class="actionscript">attribution: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">rotate: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">zoom: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当然，上面这个代码有更简洁的写法: <code>controls: []</code>，上面只是演示<code>ol.control.defaults</code>方法的使用而已。 如果需要把所有控件都显示出来，那么可以这样：</p><p><div id="map2" style="width: 100%"></div></p><script type="text/javascript">    var map2 = new ol.Map({        controls: ol.control.defaults().extend([            new ol.control.FullScreen(),            new ol.control.MousePosition(),            new ol.control.OverviewMap(),            new ol.control.ScaleLine(),            new ol.control.ZoomSlider(),            new ol.control.ZoomToExtent()        ]),        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map2',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });</script><p>有些控件重叠在一起，得仔细分辨。 代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map2"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map2 = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 在默认控件的基础上，再加上其他内置的控件</span></span></span><br><span class="line"><span class="undefined">controls: ol.control.defaults().extend([</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.control.FullScreen(),</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.control.MousePosition(),</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.control.OverviewMap(),</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.control.ScaleLine(),</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.control.ZoomSlider(),</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.control.ZoomToExtent()</span></span><br><span class="line"><span class="undefined">]),</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map2'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下图是一个界面控件和类的对照关系图：<br><img src="../img/03-01-annotation.png" alt="控件类对照关系图"></p><p>每一个控件都有相应的参数设置，如果具体到某一个控件使用时，不能满足需求，可以先参照官网API说明，进行相应使用。</p><h1 id="探究控件原理"><a href="#探究控件原理" class="headerlink" title="探究控件原理"></a>探究控件原理</h1><p>在介绍后续的知识之前，先探究一下控件是如何做成的。 在chrome中打开一个最简单的地图例子，打开开发者工具面板，用工具栏最左边的元素选择器选择地图左上方的放大按钮，可以看到类似如下的界面：<br><img src="../img/zoomin-dom.png" alt="zoomin-dom结构"></p><p>上图可以看到放大按钮完整的dom结构图，从而一窥究竟，按钮原来就是简单的HTML的元素，结合<code>css</code>的效果做出来的，可以看到放大按钮的<code>css class</code>为<code>ol-zoom-in</code>，紧接着的就是缩小按钮的节点，其<code>css class</code>为<code>ol-zoom-out</code>，他们的父节点也有对应的<code>css class</code>： <code>ol-zoom</code>。 我们可以在<code>ol.css</code>文件中找到这些<code>class</code>的定义，设置了相应的样式。 控件<code>ui</code>的原理是清楚了，那么对应的控件要响应一些鼠标或者按键操作，应该也就是添加响应的事件监听器就可以了。</p><p>对于具体怎么做的，我们可以从控件<code>ol.control.Zoom</code>的部分源码来分析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定放大缩小按钮的提示信息</span></span><br><span class="line"> <span class="keyword">var</span> zoomInTipLabel = options.zoomInTipLabel !== <span class="literal">undefined</span> ?</span><br><span class="line">     options.zoomInTipLabel : <span class="string">'Zoom in'</span>;</span><br><span class="line"> <span class="keyword">var</span> zoomOutTipLabel = options.zoomOutTipLabel !== <span class="literal">undefined</span> ?</span><br><span class="line">     options.zoomOutTipLabel : <span class="string">'Zoom out'</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 创建放大按钮的dom节点</span></span><br><span class="line"> <span class="keyword">var</span> inElement = goog.dom.createDom(<span class="string">'BUTTON'</span>, &#123;</span><br><span class="line">   <span class="string">'class'</span>: className + <span class="string">'-in'</span>,</span><br><span class="line">   <span class="string">'type'</span> : <span class="string">'button'</span>,</span><br><span class="line">   <span class="string">'title'</span>: zoomInTipLabel</span><br><span class="line"> &#125;, zoomInLabel);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 并绑定鼠标点击事件的处理函数 handleClick_</span></span><br><span class="line"> ol.events.listen(inElement,</span><br><span class="line">     ol.events.EventType.CLICK, goog.partial(</span><br><span class="line">         ol.control.Zoom.prototype.handleClick_, delta), <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"> ......</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 函数定义如下</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; delta Zoom delta.</span></span><br><span class="line"><span class="comment"> * @param &#123;Event&#125; event The event to handle</span></span><br><span class="line"><span class="comment"> * @private</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ol.control.Zoom.prototype.handleClick_ = <span class="function"><span class="keyword">function</span>(<span class="params">delta, event</span>) </span>&#123;</span><br><span class="line">  event.preventDefault(); <span class="comment">// 阻止事件传递到下面的map</span></span><br><span class="line">  <span class="keyword">this</span>.zoomByDelta_(delta);<span class="comment">// 调用具体的方法进行放大</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个过程和我们平时的在界面上添加一个节点，再绑定事件处理函数，并没有什么差别，其他类似的控件也是一样的原理。这对我们来说，想改变<code>ui</code>样式，是非常容易的事，甚至可以改变它的默认行为。</p><h1 id="控件美颜"><a href="#控件美颜" class="headerlink" title="控件美颜"></a>控件美颜</h1><p>在知道原理后，想对控件美颜就是一件非常容易的事，大致有下面两种方式：</p><h2 id="自定义CSS样式"><a href="#自定义CSS样式" class="headerlink" title="自定义CSS样式"></a>自定义CSS样式</h2><p>知道控件的实现原理后，美颜就变得非常简单了，找到对应的<code>class</code>，设置<code>css</code>样式，就轻松搞定，这完全就是<code>css</code>范畴的内容了，比如你可以做到下面这样：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <link rel="stylesheet" type="text/css" href="../src/css/extend.css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">    var map = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });</script><p>代码只涉及<code>css</code>代码，如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ol-zoom</span> <span class="selector-class">.ol-zoom-in</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#0000ff</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码可以放在单独的<code>css</code>文件里面，也可以直接加载<code>&lt;head&gt;&lt;/head&gt;</code>里面，但必须是在<code>ol.css</code>引入之后加，这样才能覆盖<code>ol3</code>默认的<code>css</code>样式。 最简单粗暴的，莫过于直接在<code>ol.css</code>里面修改，但这样侵入性太强，不利于<code>OpenLayers 3</code>的版本升级，升级一次，就得自己修改一次。 所以不推荐。</p><p>其他控件的<code>css</code>样式修改同上，此处不再累述，请自行修改验证。</p><h2 id="JavaScript修改"><a href="#JavaScript修改" class="headerlink" title="JavaScript修改"></a>JavaScript修改</h2><p>在前端除了<code>css</code>之外，还可以用强大的<code>javascript</code>代码进行修改，比如像下面这样，把最大化按钮的图标改变一下：</p><p><head><br>    <script type="text/javascript" src="../src/js/zepto.min.js" charset="utf-8"></script><br></head></p><p><div id="map2" style="width: 100%"></div></p><script type="text/javascript">    new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map2',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    $('#map2 .ol-zoom-in').html('<>');</script><p>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map2"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map2'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置放大按钮符号，下面这个代码需要引入jquery，或者zepto库</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">'#map2 .ol-zoom-in'</span>).html(<span class="string">'&lt;&gt;'</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用<code>javascript</code>代码势必能更进一步定制各种控件。</p><h1 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h1><p>有了前面的基础介绍，自定义控件就变得相对简单了，共分为两个步骤，第一步是构建界面，第二步是用代码实现功能。 下面自定义了一个分享当前地图的功能：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <link rel="stylesheet" type="text/css" href="../src/css/share.css"><br>    <script type="text/javascript" src="../src/js/zepto.min.js" charset="utf-8"></script><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">    var map = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    var viewport = map.getViewport();    $(viewport).append('<div id="share" class="share">分享地图</div>');    document.getElementById('share').onclick = function() {        alert('分享当前地图给朋友');    }</script><p>对应的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 在viewport节点下添加一个分享按钮</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> viewport = map.getViewport();</span></span><br><span class="line"><span class="handlebars"><span class="xml">$(viewport).append('<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"share"</span> <span class="attr">class</span>=<span class="string">"share"</span>&gt;</span>分享地图<span class="tag">&lt;/<span class="name">div</span>&gt;</span>');</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 监听按钮点击事件，执行相关操作</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'share'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">'分享当前地图给朋友'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结合注释理解代码，对于分享按钮的外观都是由<code>css</code>来定义：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.share</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span>;</span><br><span class="line"><span class="attribute">border-color</span>: <span class="number">#333</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#339999</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">2px</span> <span class="number">#666</span>;</span><br><span class="line"><span class="attribute">cursor</span>: pointer;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由此可见，自定义控件也是一件非常简单的事。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Control&quot;&gt;&lt;a href=&quot;#Control&quot; class=&quot;headerlink&quot; title=&quot;Control&quot;&gt;&lt;/a&gt;Control&lt;/h1&gt;&lt;p&gt; 在OpenLayers 3中，地图控件指的是下图标注的这些，包括缩放按钮，标尺，版权说明，指北针等等。 &lt;/p&gt;
    
    </summary>
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/categories/openLayers/"/>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers 3 Source和Layer</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/ch05/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/ch05/index.html</id>
    <published>2018-01-18T12:29:59.000Z</published>
    <updated>2018-01-30T14:08:15.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Source和Layer"><a href="#Source和Layer" class="headerlink" title="Source和Layer"></a>Source和Layer</h1><p>在前面的例子中，已经对<code>Source</code>和<code>Layer</code>有所了解了。比如我们加载了Open Street Map的地图。然而世界上的地图并不只有Open Street Map，还有很多其他的地图，比如Google地图，天地图，高德地图，百度地图等。如果OpenLayers支持的地图来源越多，就会越适用，越强大。除了加载基本的地图之外，GIS还需要加载很多其他的信息，比如街道名称，商店名称，公交站点，道路等等。那么在OpenLayers 3中，具体该如何把这些添加在地图上呢？</p><a id="more"></a><p>首先需要明白的一点是，<code>Source</code>和<code>Layer</code>是一对一的关系，有一个<code>Source</code>，必然需要一个<code>Layer</code>，然后把这个<code>Layer</code>添加到<code>Map</code>上，就可以显示出来了。通过官网的API搜索<code>ol.source</code>可以发现有很多不同的<code>Source</code>，但归纳起来共三种：<code>ol.source.Tile</code>，<code>ol.source.Image</code>和<code>ol.source.Vector</code>。 </p><ul><li><code>ol.source.Tile</code>对应的是瓦片数据源，现在网页地图服务中，绝大多数都是使用的瓦片地图，而OpenLayers 3作为一个WebGIS引擎，理所当然应该支持瓦片。</li><li><code>ol.source.Image</code>对应的是一整张图，而不像瓦片那样很多张图，从而无需切片，也可以加载一些地图，适用于一些小场景地图。</li><li><code>ol.source.Vector</code>对应的是矢量地图源，点，线，面等等常用的地图元素(Feature)，就囊括到这里面了。这样看来，只要这两种<code>Source</code>就可以搞定80%的需求了。</li></ul><p>从复杂度来分析，<code>ol.source.Image</code>和<code>ol.source.Vector</code>都不复杂，其数据格式和来源方式都简单。而<code>ol.source.Tile</code>则不一样，由于一些历史问题，多个服务提供商，多种标准等诸多原因，导致要支持世界上大多数的瓦片数据源，就需要针对这些差异提供不同的<code>Tile</code>数据源支持。在更进一步了解之前，我们先来看一下OpenLayers 3现在支持的<code>Source</code>具体有哪些：<br><img src="../img/ol.source.Tile.png" alt="ol.source.Tile类图"></p><p>上图中的类是按照继承关系，从左向右展开的，左边的为父类，右边的为子类。在使用时，一般来说，都是直接使用叶子节点上的类，基本就可以完成需求。父类需要自己进一步扩展或者处理才能有效使用的。</p><p>我们先了解最为复杂的<code>ol.source.Tile</code>，其叶子节点类有很多，大致可以分为几类：</p><ul><li>在线服务的<code>Source</code>，包括<code>ol.source.BingMaps</code>(使用的是微软提供的Bing在线地图数据)，<code>ol.source.MapQuest</code>(使用的是MapQuest提供的在线地图数据)<font color="#ff0000">(注: 由于MapQuest开始收费，ol v3.17.0就移除了<code>ol.source.MapQuest</code>)</font>，<code>ol.source.OSM</code>(使用的是Open Street Map提供的在线地图数据)，<code>ol.source.Stamen</code>(使用的是Stamen提供的在线地图数据)。没有自己的地图服务器的情况下，可直接使用它们，加载地图底图。</li><li>支持协议标准的<code>Source</code>，包括<code>ol.source.TileArcGISRest</code>，<code>ol.source.TileWMS</code>，<code>ol.source.WMTS</code>，<code>ol.source.UTFGrid</code>，<code>ol.source.TileJSON</code>。如果要使用它们，首先你得先学习对应的协议，之后必须找到支持这些协议的服务器来提供数据源，这些服务器可以是地图服务提供商提供的，也可以是自己搭建的服务器，关键是得支持这些协议。</li><li>ol.source.XYZ，这个需要单独提一下，因为是可以直接使用的，而且现在很多地图服务（在线的，或者自己搭建的服务器）都支持xyz方式的请求。国内在线的地图服务，高德，天地图等，都可以通过这种方式加载，本地离线瓦片地图也可以，用途广泛，且简单易学，需要掌握。</li></ul><p><code>ol.source.Image</code>虽然有几种不同的子类，但大多比较简单，因为不牵涉到过多的协议和服务器提供商。而<code>ol.source.Vector</code>就更加的简单了，但有时候其唯一的子类<code>ol.source.Cluster</code>在处理大量的<code>Feature</code>时，我们可能需要使用。</p><p>在大概了解了整个<code>Source</code>之后，紧接着该介绍它的搭档<code>Layer</code>了，同样的，我们还是先从OpenLayers 3现有的<code>Layer</code>类图大致了解一下：<br><img src="../img/ol_layer_Base.png" alt="ol.layer.Base类图"></p><p>为了便于了解和使用，图中标注了每一个<code>Layer</code>对应的<code>Source</code>。通过上图可以看到<code>Layer</code>相对于<code>Source</code>而言，真是太简单了。</p><p>对于初学者而言，如何选择和应用不同的<code>Source</code>和<code>Layer</code>是一个非常迷惑和困难的问题。为此，本章将围绕着<code>Source</code>和<code>Layer</code>展开，为大家解决这个问题。</p><h1 id="加载瓦片地图"><a href="#加载瓦片地图" class="headerlink" title="加载瓦片地图"></a>加载瓦片地图</h1><p>瓦片地图源于一种大地图解决方案，针对一整块非常大的地图进行切片，分成很多相同大小的小块地图，在用户访问的时候，再一块一块小地图加载，拼接在一起，从而还原成一整块大的地图。这样做的优点在于，用户在同一时间，同一个可见视图内，只能看到地图的一部分，而不是全部。如果一次加载整个大地图，会导致加载很慢，且不可用的问题。这对于在线服务来说，是非常致命的。所以几乎所有的在线网页地图服务，都使用的是瓦片地图。自然加载瓦片地图成了必不可少的功能，也是必须要掌握的，为此本节将重点介绍如何选择和加载瓦片地图，不用担心，都会结合具体的实例来讲解。</p><h1 id="最简单的加载在线地图"><a href="#最简单的加载在线地图" class="headerlink" title="最简单的加载在线地图"></a>最简单的加载在线地图</h1><p>本小节所介绍的这些在线地图，加载起来会非常简单，因为OpenLayers 3已经做了很好的封装，对于开发者而言，无须做过多的编码，即可直接使用。主要包括开源的Open Street Map，微软的Bing地图，Map Quest地图<font color="#ff0000">(注: 由于MapQuest开始收费，ol v3.17.0就移除了<code>ol.source.MapQuest</code>)</font>，Stamen地图。 </p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><br><div id="map" style="width: 100%"></div><br><input type="radio" checked="checked" name="mapSource" onclick="switch2OSM();">OpenStreetMap地图<br><input type="radio" name="mapSource" onclick="switch2BingMap();">Bing地图<br><input type="radio" name="mapSource" onclick="switch2StamenMap();">Stamen地图<br><input type="radio" name="mapSource" onclick="switch2MapQuest();">MapQuest地图<br><br><script><br><br>    // Open Street Map 地图层<br>    var openStreetMapLayer = new ol.layer.Tile({<br>        source: new ol.source.OSM()<br>    });<br><br>    // Bing地图层<br>    var bingMapLayer = new ol.layer.Tile({<br>        source: new ol.source.BingMaps({<br>            key: ‘AkjzA7OhS4MIBjutL21bkAop7dc41HSE0CNTR5c6HJy8JKc7U9U9RveWJrylD3XJ’,<br>      imagerySet: ‘Road’<br>        })<br>    });<br><br>    // Stamen地图层<br>    var stamenLayer = new ol.layer.Tile({<br>        source: new ol.source.Stamen({<br>            layer: ‘watercolor’<br>        })<br>    });<br><br>    // MapQuest地图层<br>    var mapQuestLayer = new ol.layer.Tile({<br>        source: new ol.source.MapQuest({<br>            layer: ‘osm’<br>        })<br>    });<br><br>    // 创建地图<br>  var map = new ol.Map({<br>        layers: [<br>            openStreetMapLayer<br>        ],<br>        view: new ol.View({<br>            // 设置成都为地图中心<br>            center: [104.06, 30.67],<br>            projection: ‘EPSG:4326’,<br>            zoom: 10<br>        }),<br>        target: ‘map’<br>  });<br><br>  function switch2OSM() {<br>      // 先移除当前的地图，再添加Open Street Map 地图<br>      map.removeLayer(map.getLayers().item(0));<br>      map.addLayer(openStreetMapLayer);<br>  }<br><br>  function switch2BingMap() {<br>      // 先移除当前的地图，再添加Bing地图<br>      map.removeLayer(map.getLayers().item(0));<br>      map.addLayer(bingMapLayer);<br>  }<br><br>  function switch2StamenMap() {<br>      // 先移除当前的地图，再添加stamen地图<br>      map.removeLayer(map.getLayers().item(0));<br>      map.addLayer(stamenLayer);<br>  }<br><br>  function switch2MapQuest() {<br>      // 先移除当前的地图，再添加MapQuest地图<br>      map.removeLayer(map.getLayers().item(0));<br>      map.addLayer(mapQuestLayer);<br>  }<br></script><br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">name</span>=<span class="string">"mapSource"</span> <span class="attr">onclick</span>=<span class="string">"switch2OSM();"</span> /&gt;</span>OpenStreetMap地图</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"mapSource"</span> <span class="attr">onclick</span>=<span class="string">"switch2BingMap();"</span> /&gt;</span>Bing地图</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"mapSource"</span> <span class="attr">onclick</span>=<span class="string">"switch2StamenMap();"</span> /&gt;</span>Stamen地图</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"mapSource"</span> <span class="attr">onclick</span>=<span class="string">"switch2MapQuest();"</span> /&gt;</span>MapQuest地图</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// Open Street Map 地图层</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> openStreetMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// Bing地图层</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> bingMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.BingMaps(&#123;</span></span><br><span class="line"><span class="actionscript">key: <span class="string">'AkjzA7OhS4MIBjutL21bkAop7dc41HSE0CNTR5c6HJy8JKc7U9U9RveWJrylD3XJ'</span>,</span></span><br><span class="line"><span class="actionscript">      imagerySet: <span class="string">'Road'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// Stamen地图层</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> stamenLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Stamen(&#123;</span></span><br><span class="line"><span class="actionscript">layer: <span class="string">'watercolor'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// MapQuest地图层</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> mapQuestLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.MapQuest(&#123;</span></span><br><span class="line"><span class="actionscript">layer: <span class="string">'osm'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="undefined">openStreetMapLayer</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置成都为地图中心</span></span></span><br><span class="line"><span class="undefined">center: [104.06, 30.67],</span></span><br><span class="line"><span class="actionscript">projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">switch2OSM</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 先移除当前的地图，再添加Open Street Map 地图</span></span></span><br><span class="line"><span class="undefined">  map.removeLayer(map.getLayers().item(0));</span></span><br><span class="line"><span class="undefined">  map.addLayer(openStreetMapLayer);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">switch2BingMap</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 先移除当前的地图，再添加Bing地图</span></span></span><br><span class="line"><span class="undefined">  map.removeLayer(map.getLayers().item(0));</span></span><br><span class="line"><span class="undefined">  map.addLayer(bingMapLayer);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">switch2StamenMap</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 先移除当前的地图，再添加stamen地图</span></span></span><br><span class="line"><span class="undefined">  map.removeLayer(map.getLayers().item(0));</span></span><br><span class="line"><span class="undefined">  map.addLayer(stamenLayer);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">switch2MapQuest</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 先移除当前的地图，再添加MapQuest地图</span></span></span><br><span class="line"><span class="undefined">  map.removeLayer(map.getLayers().item(0));</span></span><br><span class="line"><span class="undefined">  map.addLayer(mapQuestLayer);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>代码很简单，因为OpenLayers 3对这几个在线服务都做了很好的封装，只用简单的配置一下<code>Source</code>的构造参数就可以了。此处并没有列出每一个类的所有构造参数，但可以通过API文档查询了解。<br><br>上面这个地图涉及到多个地图源，如果都放在地图上，就涉及到图层管理，这一部分的知识将在后续章节<a href="05-11.md">图层叠加及管理</a>有更详细的介绍。<br><br># 万能瓦片地图加载秘籍<br><br>其实加载瓦片地图基本是大同小异，你可能会觉得很惊讶，因为网上在线的地图服务，看起都不一样，本节即将为你解开这层神秘的面纱。在前面已基本介绍了瓦片地图的解决方案和作用，此处再用一张图来直观地认识一下瓦片结构：<br><img src="../img/lod.png" alt="瓦片地图结构"><br><br>从上图可知，大家常用的瓦片地图是一个三维的概念，我们通常使用xyz这样的坐标来精确定位一张瓦片。通常z用于表示地图层级，而xy表示某个层级内的瓦片平面，x为横纵坐标，y为纵轴坐标，类似于数学上常见的笛卡尔坐标系。在这个瓦片平面上的每一个瓦片在横轴和纵轴上都有对应的坐标：x和y。<br><br>## 加载简单的瓦片地图<br>虽然现在大多数网页地图都使用的是瓦片地图，但还是有必要先介绍一下如何识别它。在浏览器中打开任意一个在线的网页地图，然后打开浏览器的开发者工具，再随意拖动，放大缩小地图。之后在开发者工具里查看新发起的请求，是否有一些图片请求，查看请求返回的图片，是否为正在浏览的地图的一部分，如果是，则基本为瓦片地图。下面以百度地图为例，说明一下在线瓦片地图请求信息：<br><img src="../img/baiduMap.png" alt="百度地图"><br><br>在请求的url中，我们可以很明显地看到xyz这三个参数，这进一步说明了百度地图就是用了瓦片地图。如果你多分析一下现有的在线网页地图，基本都是瓦片地图。正因为如此，OpenLayers 3提供了<code>ol.source.XYZ</code>这种通用的<code>Source</code>来适应广大的在线瓦片地图数据源，具备很好的适用性。通常情况下，开发者想要加载不同的在线瓦片地图源，则只需要更改<code>ol.source.XYZ</code>的构造参数中<code>url</code>就可以了。 比如我们就可以不用<code>ol.source.OSM</code>，而用<code>ol.source.XYZ</code>来加载Open Street Map地图，结果一样：<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// Open Street Map 地图层</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> openStreetMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line"><span class="actionscript">url: <span class="string">'http://&#123;a-c&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="undefined">openStreetMapLayer</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置成都为地图中心</span></span></span><br><span class="line"><span class="undefined">center: [104.06, 30.67],</span></span><br><span class="line"><span class="actionscript">projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>除了Open Street Map可以这样加载外，还有很多其他的在线瓦片地图源也可以，比如高德地图：<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高德地图层</span></span><br><span class="line"><span class="keyword">var</span> gaodeMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span><br><span class="line">url:<span class="string">'http://webst0&#123;1-4&#125;.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;'</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br>比如Yahoo地图：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// yahoo地图层</span></span><br><span class="line"><span class="keyword">var</span> yahooMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span><br><span class="line">tileSize: <span class="number">512</span>,</span><br><span class="line">url:<span class="string">'https://&#123;0-3&#125;.base.maps.api.here.com/maptile/2.1/maptile/newest/normal.day/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;/512/png8?lg=ENG&amp;ppi=250&amp;token=TrLJuXVK62IQk0vuXFzaig%3D%3D&amp;requestid=yahoo.prod&amp;app_id=eAdkWGYRoc4RfxVo0Z4B'</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br><br>大同小异，非常简单。上面的三个例子，只有Yahoo地图的代码有点不一样：多了<code>tileSize</code>参数的设置。默认情况下，<code>tileSize</code>为256，这也是现在绝大多数瓦片采用的大小。但Yahoo地图使用的是512，所以我们需要显示指定。<br><br>## 瓦片地图之百度地图<br>通过上面的示例我们已经发现，其实可以非常轻松地加载多种不同来源的在线瓦片地图。但遗憾地是，上面这种简单方法并不适用于所有的在线瓦片地图，总有一些是特殊的，比如百度地图，上面这种方式就不生效了。此时，我们需要回过头来思考一下瓦片地图加载的整个过程：瓦片地图加载的关键在于找对瓦片，但要找对瓦片，就得知道瓦片的坐标，而坐标又需要明确的坐标系。我们在<a href="../ch04/04-02.md">坐标</a>里说过，任何坐标都得有坐标系才有意义。在OpenLayers 3中，默认使用的瓦片地图的坐标系是如何定义的？经分析可知，OpenLayers 3的瓦片坐标系的原点在左上角，向上为y轴正方向，向右为x轴正方向。具体到地图上来讲，地球经过投影，投影到一个平面上，平面最左边对应地球最西边，平面最上边对应地球最北边。原点就处于整个平面的左上角，即地球的西北角，从北向南为y轴负方向，从西向东为x轴正方向。理解这一点非常重要，因为并不是所有在线的瓦片地图都是采用这样的坐标系。用OpenLayers 3加载它们的时候，如果坐标系不同，计算出来的瓦片地址就获取不到对应的瓦片，为解决这个问题，我们必须要先对瓦片坐标进行转换。那么，具体该怎么实现转换？最详细明了的方式还是看实例，下面我们看一下加载百度地图一种实现方式：<br><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><br><div id="baiduMap" style="width: 100%"></div><br><script><br>    // 百度地图层<br>    var baiduMapLayer = new ol.layer.Tile({<br>        source: new ol.source.XYZ({<br>            tilePixelRatio: 2,<br>            tileUrlFunction: function(tileCoord){ // 参数tileCoord为瓦片坐标<br>                    var z = tileCoord[0];<br>          var x = tileCoord[1];<br>          var y = tileCoord[2];<br><br>          var halfTileNum = Math.pow(2, z-1);<br><br>          var baiduX =  x - halfTileNum;<br>          var baiduY =  y + halfTileNum;<br><br>          if (baiduX &lt; 0) {<br>              baiduX = ‘M’ + (-baiduX);<br>          }<br>          if (baiduY &lt; 0) {<br>              baiduY = ‘M’ + (-baiduY);<br>          }<br><br>          return ‘<a href="http://online2.map.bdimg.com/onlinelabel/?qt=tile&amp;x=">http://online2.map.bdimg.com/onlinelabel/?qt=tile&amp;x=</a>‘ + baiduX + ‘&amp;y=’ + baiduY + ‘&amp;z=’ + z + ‘&amp;styles=pl&amp;udt=20160321&amp;scaler=2&amp;p=0’;<br>            }<br>        })<br>    });<br><br>    // 创建地图<br>  var map = new ol.Map({<br>        layers: [<br>            baiduMapLayer<br>        ],<br>        view: new ol.View({<br>            // 设置成都为地图中心<br>            center: [104.06, 30.67],<br>            projection: ‘EPSG:4326’,<br>            zoom: 4<br>        }),<br>        target: ‘baiduMap’<br>  });<br></script><br><br>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"baiduMap"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 百度地图层</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> baiduMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line"><span class="undefined">tilePixelRatio: 2,</span></span><br><span class="line"><span class="actionscript">tileUrlFunction: <span class="function"><span class="keyword">function</span><span class="params">(tileCoord)</span></span>&#123;  <span class="comment">// 参数tileCoord为瓦片坐标</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> z = tileCoord[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> x = tileCoord[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> y = tileCoord[<span class="number">2</span>];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 计算当前层级下瓦片总数的一半，用于定位整个地图的中心点</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> halfTileNum = <span class="built_in">Math</span>.pow(<span class="number">2</span>, z<span class="number">-1</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 原点移到中心点后，计算xy方向上新的坐标位置</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> baiduX =  x - halfTileNum;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> baiduY =  y + halfTileNum;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 百度瓦片服务url将负数使用M前缀来标识</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (baiduX &lt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="actionscript">        baiduX = <span class="string">'M'</span> + (-baiduX);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (baiduY &lt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="actionscript">        baiduY = <span class="string">'M'</span> + (-baiduY);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 返回经过转换后，对应于百度在线瓦片的url</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="string">'http://online2.map.bdimg.com/onlinelabel/?qt=tile&amp;x='</span> + baiduX + <span class="string">'&amp;y='</span> + baiduY + <span class="string">'&amp;z='</span> + z + <span class="string">'&amp;styles=pl&amp;udt=20160321&amp;scaler=2&amp;p=0'</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="undefined">baiduMapLayer</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置成都为地图中心</span></span></span><br><span class="line"><span class="undefined">center: [104.06, 30.67],</span></span><br><span class="line"><span class="actionscript">projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">zoom: 4</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'baiduMap'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>和前面几个加载在线瓦片地图的例子不一样的地方在于，我们没有设置<code>url</code>，而是设置了<code>tileUrlFunction</code>，这是一个获取瓦片<code>url</code>的函数，如果自定义这个函数，就可以实现不同坐标系之间的转换，从而返回在线地图服务对应瓦片的<code>url</code>。通过代码可以看到，函数入参是一个瓦片坐标，然后进行一系列的转换，得到百度在线地图的瓦片地址。效果参见上方地图，不妨拖动、缩放试试，拼接无缝，并没有什么问题。<br><br><code>tileUrlFunction</code>这个自定义函数的代码实现有可能看不懂，虽然知道在进行坐标转换，但并不知道为什么要这样实现。为了彻底弄明白代码，我们必须得把之前遗漏的一个很重要环节补上：弄明白待加载的在线瓦片地图的坐标系。对百度在线瓦片坐标系进行简单分析发现，它是以某一个位置为原点，向右为x正方向，向上为y正方向的坐标系，进一步分析发现，原点应该在中心位置，为此，我们假设百度地图是以经纬度[0,0]为原点，在此基础上编写函数<code>tileUrlFunction</code>的实现。<code>halfTileNum</code>表示的是在当前缩放层级之下，总的瓦片个数的一半，意味着它就是中心位置。对于<code>baiduX</code>小于0的情况，百度使用了<code>M</code>来表示负号，所以要特殊处理一下。想必这下应该更加理解代码实现了。不同的在线瓦片地图的转换代码可能不同，需要根据对应的坐标系来确定。<br><br><br>但上面这个地图并不完美，因为我们设定的地图中心为成都，然而实际上显示的地图中心并不在成都。虽然无缝拼接，但位置偏差有点远。由此基本可以排除坐标转换的问题，看起来应该是OpenLayers 3的分辨率和百度在线瓦片地图使用的分辨率对不上。经过分析发现，确实如此，在网上也有很多分析文章可以查阅。那么我们是否可以重新定义分辨率呢？ 答案是肯定的，我们可以使用<code>ol.source.XYZ</code>的父类来解决问题。<br><br><br>## 重新定义OpenLayers 3的瓦片坐标系<br><code>ol.source.TileImage</code>作为<code>ol.source.XYZ</code>的父类，除了可以转换坐标之外，还具备更加强大的功能，修改分辨率。下面我们使用它来加载百度地图，这次是正确的：<br><div id="baiduMap2" style="width: 100%"></div><br><script><br><br>    // 自定义分辨率和瓦片坐标系<br>  var resolutions = [];<br>  var maxZoom = 18;<br><br>  for(var i=0; i&lt;=maxZoom; i++){<br>      resolutions[i] = Math.pow(2, maxZoom-i);<br>  }<br>  var tilegrid  = new ol.tilegrid.TileGrid({<br>      origin: [0,0],<br>      resolutions: resolutions<br>  });<br><br>  // 创建百度地图的数据源<br>  var baiduSource = new ol.source.TileImage({<br>      projection: ‘EPSG:3857’,<br>      tileGrid: tilegrid,<br>      tileUrlFunction: function(tileCoord, pixelRatio, proj){<br>          var z = tileCoord[0];<br>          var x = tileCoord[1];<br>          var y = tileCoord[2];<br><br>          if(x&lt;0){<br>              x = “M”+(-x);<br>          }<br>          if(y&lt;0){<br>              y = “M”+(-y);<br>          }<br><br>          return “<a href="http://online3.map.bdimg.com/onlinelabel/?qt=tile&amp;x=&quot;+x+&quot;&amp;y=&quot;+y+&quot;&amp;z=&quot;+z+&quot;&amp;styles=pl&amp;udt=20160321&amp;scaler=2&amp;p=1">http://online3.map.bdimg.com/onlinelabel/?qt=tile&amp;x=&quot;+x+&quot;&amp;y=&quot;+y+&quot;&amp;z=&quot;+z+&quot;&amp;styles=pl&amp;udt=20160321&amp;scaler=2&amp;p=1</a>“;<br>      }<br>  });<br><br>    // 百度地图层<br>    var baiduMapLayer2 = new ol.layer.Tile({<br>        source: baiduSource<br>    });<br><br>    // 创建地图<br>  new ol.Map({<br>        layers: [<br>            baiduMapLayer2<br>        ],<br>        view: new ol.View({<br>            // 设置成都为地图中心<br>            center: [104.06, 30.67],<br>            projection: ‘EPSG:4326’,<br>            zoom: 10<br>        }),<br>        target: ‘baiduMap2’<br>  });<br></script><br><br>对应的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"baiduMap2"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 自定义分辨率和瓦片坐标系</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> resolutions = [];</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> maxZoom = <span class="number">18</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 计算百度使用的分辨率</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;=maxZoom; i++)&#123;</span></span><br><span class="line"><span class="javascript">      resolutions[i] = <span class="built_in">Math</span>.pow(<span class="number">2</span>, maxZoom-i);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> tilegrid  = <span class="keyword">new</span> ol.tilegrid.TileGrid(&#123;</span></span><br><span class="line"><span class="actionscript">      origin: [<span class="number">0</span>,<span class="number">0</span>],<span class="comment">// 设置原点坐标</span></span></span><br><span class="line"><span class="actionscript">      resolutions: resolutions<span class="comment">// 设置分辨率</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建百度地图的数据源</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> baiduSource = <span class="keyword">new</span> ol.source.TileImage(&#123;</span></span><br><span class="line"><span class="actionscript">      projection: <span class="string">'EPSG:3857'</span>,</span></span><br><span class="line"><span class="undefined">      tileGrid: tilegrid,</span></span><br><span class="line"><span class="actionscript">      tileUrlFunction: <span class="function"><span class="keyword">function</span><span class="params">(tileCoord, pixelRatio, proj)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> z = tileCoord[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> x = tileCoord[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> y = tileCoord[<span class="number">2</span>];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 百度瓦片服务url将负数使用M前缀来标识</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">              x = <span class="string">'M'</span> + (-x);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span>(y&lt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">              y = <span class="string">'M'</span> + (-y);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="string">"http://online0.map.bdimg.com/onlinelabel/?qt=tile&amp;x="</span>+x+<span class="string">"&amp;y="</span>+y+<span class="string">"&amp;z="</span>+z+<span class="string">"&amp;styles=pl&amp;udt=20160426&amp;scaler=1&amp;p=0"</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 百度地图层</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> baiduMapLayer2 = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="undefined">source: baiduSource</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="undefined">baiduMapLayer2</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置成都为地图中心</span></span></span><br><span class="line"><span class="actionscript">center: ol.proj.transform([<span class="number">104.06</span>, <span class="number">30.67</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'baiduMap2'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>这个代码同上面的代码相比，引入了<code>ol.tilegrid.TileGrid</code>，由名字可见，这是定义瓦片网格，其实就是瓦片坐标系，构造时需要设定原点，紧接着设置分辨率，其作用在于设定每一地图层级的分辨率。我们是否遗漏了坐标系的正向和负向的设定？默认情况下，从左向右为x正方向，从下向上为y轴正方向。这和我们数学上通常定义的笛卡尔坐标系是一样的，这一点需要大家记住。如代码所示，就可以重新定义OpenLayers 3的瓦片地图坐标系，这种方式的代码比上一种方式更加的可读和简洁。 如果用通用的方法解决不了，请别忘记还有这一强大灵活的处理方式。<br><br>## 分析瓦片地图坐标系<br>如何分析不同在线瓦片地图的坐标系呢？非常重要的一点是，先从特例出发，找简单的情况分析，比如选择z为2或者3进行分析，这种情况下，瓦片的数量比较少，可以查看整个地球范围内的地图的瓦片请求，注意分析其请求的<code>url</code>参数。上述的所有地图都可以以这样的方式入手来分析，包括百度地图，可以自行尝试该方法。如果你有更好的方法，愿意的话，请给大家一起分享一下。<br><br>## 解密瓦片url<br>瓦片的url解析对于想直接使用在线瓦片服务的开发者而言，是一项经常要做的事。根据难度，大致可以分为三种情况：<br><br><em> 第一种是最简单的，请求瓦片的<code>url</code>明确有xyz参数，比如高德地图和百度地图。</em> 第二种稍微难一点，<code>xyz</code>作为路径直接存在于<code>url</code>里面，没有明确的参数表明哪些是xyz，比如Open Street Map和Yahoo地图，这种情况下，地图服务器接收到请求后，就直接在服务器按照这个路径获取图片，按照这个逻辑，一般第一个参数表示是z，第二个参数为x，第三个参数为y。要想确认是否真是这样，可以写一个小程序来验证一下，如果还有问题，建议按照上面分析地图坐标系中的方法，从z比较小的情况入手来分析x，y，z的位置。<br><em> 第三种则最难，地图服务提供商为了防止大家直接非法使用瓦片地图，对瓦片的url进行了加密，比如现在的微软Bing中文地图和Google地图，这种情况下只有知道如何解密才能使用。<br><br>## 加载微软Bing中文地图<br>前面两种url的实例已经有了，此处分享一下第三种情况的url解密，以微软Bing中文地图为例：<br><img src="../img/bingmap-zh.png" alt="Bing中文地图"><br><br>图中显示的瓦片地图请求的url，没有明显的xyz参数，最有可能的存放xyz参数的地方在于url前面那一串数字，真实情况确实是这样的，经过分析和解码，最终实现了加载Bing中文地图：<br><br><div id="bingMap" style="width: 100%"></div><br><script><br>    // Bing中文地图层<br>    var bingMapLayer = new ol.layer.Tile({<br>        source: new ol.source.XYZ({<br>            tilePixelRatio: 2,<br>            tileUrlFunction: function(tileCoord){<br>                var z = tileCoord[0];<br>        var x = tileCoord[1];<br>        var y = -tileCoord[2] - 1;<br>        var result=’’, zIndex=0;<br><br>        for(; zIndex&lt;z; zIndex++) {<br>            result = ((x&amp;1)+2</em>(y&amp;1)).toString() + result;<br>            x &gt;&gt;= 1;<br>            y &gt;&gt;= 1;<br>        }<br>        return ‘<a href="http://dynamic.t0.tiles.ditu.live.com/comp/ch/">http://dynamic.t0.tiles.ditu.live.com/comp/ch/</a>‘ + result + ‘?it=G,VE,BX,L,LA&amp;mkt=zh-cn,syr&amp;n=z&amp;og=111&amp;ur=CN’;<br>      }<br>        })<br>    });<br><br>    // 创建地图<br>  var map = new ol.Map({<br>        layers: [<br>            bingMapLayer<br>        ],<br>        view: new ol.View({<br>            // 设置成都为地图中心<br>            center: [104.06, 30.67],<br>            projection: ‘EPSG:4326’,<br>            zoom: 10<br>        }),<br>        target: ‘bingMap’<br>  });<br></script><br><br>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bingMap"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// Bing中文地图层</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> bingMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line"><span class="actionscript">tileUrlFunction: <span class="function"><span class="keyword">function</span><span class="params">(tileCoord)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> z = tileCoord[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> x = tileCoord[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> y = -tileCoord[<span class="number">2</span>] - <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> result=<span class="string">''</span>, zIndex=<span class="number">0</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(; zIndex&lt;z; zIndex++) &#123;</span></span><br><span class="line"><span class="undefined">            result = ((x&amp;1)+2*(y&amp;1)).toString() + result;</span></span><br><span class="line"><span class="undefined">            x &gt;&gt;= 1;</span></span><br><span class="line"><span class="undefined">            y &gt;&gt;= 1;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="string">'http://dynamic.t0.tiles.ditu.live.com/comp/ch/'</span> + result + <span class="string">'?it=G,VE,BX,L,LA&amp;mkt=zh-cn,syr&amp;n=z&amp;og=111&amp;ur=CN'</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="undefined">bingMapLayer</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置成都为地图中心</span></span></span><br><span class="line"><span class="undefined">center: [104.06, 30.67],</span></span><br><span class="line"><span class="actionscript">projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'bingMap'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>需要注意的是地图数据是非常昂贵的，如果使用某一个在线地图服务，请先核实对方的版权和数据使用申明，不要侵犯对方的权益，按照要求合法使用地图。几乎所有的在线地图服务都提供了响应的服务接口，强烈建议在商用项目中使用这些接口。对于这些接口的使用，服务商都有详细的说明，在此不累述。<br><br># google地图加载<br>有许多人都在问google地图加载的问题，因为地图url是加密的，通过分析url，可以采用下面的方式来加载：<br><div id="googleMap" style="width: 100%"></div><br><script><br>    // google地图层<br>    var googleMapLayer = new ol.layer.Tile({<br>        source: new ol.source.XYZ({<br>            url:’<a href="http://www.google.cn/maps/vt/pb=!1m4!1m3!1i{z}!2i{x}!3i{y}!2m3!1e0!2sm!3i345013117!3m8!2szh-CN!3scn!5e1105!12m4!1e68!2m2!1sset!2sRoadmap!4e0">http://www.google.cn/maps/vt/pb=!1m4!1m3!1i{z}!2i{x}!3i{y}!2m3!1e0!2sm!3i345013117!3m8!2szh-CN!3scn!5e1105!12m4!1e68!2m2!1sset!2sRoadmap!4e0</a>‘<br>        })<br>    });<br><br>    // 创建地图<br>  var map = new ol.Map({<br>        layers: [<br>            googleMapLayer<br>        ],<br>        view: new ol.View({<br>            // 设置成都为地图中心<br>            center: [104.06, 30.67],<br>            projection: ‘EPSG:4326’,<br>            zoom: 10<br>        }),<br>        target: ‘googleMap’<br>  });<br></script><br><br>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"googleMap"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// google地图层</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> googleMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line"><span class="actionscript">url:<span class="string">'http://www.google.cn/maps/vt/pb=!1m4!1m3!1i&#123;z&#125;!2i&#123;x&#125;!3i&#123;y&#125;!2m3!1e0!2sm!3i345013117!3m8!2szh-CN!3scn!5e1105!12m4!1e68!2m2!1sset!2sRoadmap!4e0'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="undefined">googleMapLayer</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置成都为地图中心</span></span></span><br><span class="line"><span class="undefined">center: [104.06, 30.67],</span></span><br><span class="line"><span class="actionscript">projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'googleMap'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>至此，关于通用瓦片地图加载的秘籍就介绍完毕，希望大家都掌握了。<br><br><br># 加载离线瓦片地图<br>其实离线瓦片地图和在线瓦片地图是一样的原理，都是瓦片，只是离线瓦片地图的存取方式，是由开发者自己来定义的，而在线瓦片地图则不一定。 在不理解原理的情况下，很多人拥有了离线瓦片，却不知道如何加载，所以这里单独列出一个小节来讲解。<br><br>在很早之前，我在github上放出了一个加载离线瓦片的地图demo，现在还是使用这个demo来讲解：<br><br><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><br><div id="map" style="width: 100%"></div><br><script type="text/javascript"><br><br>    // 地图设置中心，设置到成都，在本地离线地图 offlineMapTiles刚好有一张zoom为4的成都瓦片<br>    var center = ol.proj.transform([104.06667, 30.66667], ‘EPSG:4326’, ‘EPSG:3857’);<br><br>    //创建地图<br>    var map = new ol.Map({<br>        view: new ol.View({<br>            center: center,<br>            zoom: 4<br>        }),<br>        target: ‘map’<br>    });<br><br>    // 添加一个使用离线瓦片地图的层<br>    var offlineMapLayer = new ol.layer.Tile({<br>        source: new ol.source.XYZ({<br>            // 设置本地离线瓦片所在路径，由于例子里面只有一张瓦片，页面显示时就只看得到一张瓦片。<br>            url: ‘../src/05-04/offlineMapTiles/{z}/{x}/{y}.png’<br>        })<br>    });<br><br>    map.addLayer(offlineMapLayer);<br></script><br><br>只是演示效果，所以瓦片就只有1张。 如果放大或者缩小，就可能看不到地图瓦片了。 先看代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 地图设置中心，设置到成都，在本地离线地图 offlineMapTiles刚好有一张zoom为4的成都瓦片</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> center = ol.proj.transform([<span class="number">104.06667</span>, <span class="number">30.66667</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//创建地图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123; </span></span><br><span class="line"><span class="undefined">center: center,</span></span><br><span class="line"><span class="undefined">zoom: 4 </span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 添加一个使用离线瓦片地图的层</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> offlineMapLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.XYZ(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置本地离线瓦片所在路径，由于例子里面只有一张瓦片，页面显示时就只看得到一张瓦片。</span></span></span><br><span class="line"><span class="actionscript">url: <span class="string">'../src/05-04/offlineMapTiles/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">map.addLayer(offlineMapLayer);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>代码很简单，就不再做任何说明，参照注释。 这个例子中唯一的瓦片图片相对路径是： <code>offlineMapTiles/4/12/6.png</code>。 在开发时，会考虑这样一个问题： 是先在代码里面写<code>url</code>，还是先在本地放好瓦片地图？ 我建议瓦片地图数据优先，而且很多瓦片地图都是工具下载的，量大，如果需要修改目录结构，会比较费事。相对的，修改<code>url</code>的代码明显就要简单很多。<br><br><code>url</code>必须根据瓦片地图存放路径来编写，比如这个例子里面，4表示的是层级，12表示的是x，6表示的是y，我们的<code>url</code>参数就写成： <code>{z}/{x}/{y}.png</code>。 如果瓦片地图都放在一个目录下，采用z-x-y.png的方式命名，那么<code>url</code>参数就得写成： <code>{z}-{x}-{y}.png</code>。<br><br>在上一节中，我们提到过，瓦片地图最主要的是要考虑瓦片的坐标系和分辨率，对于离线瓦片地图也同样成立。 在使用之前，你必须要了解清楚这一点，方能正确加载和使用。<br><br>## 常见问题<br><br>&gt; Q: 为什么本地有离线瓦片地图，但在网页中没有显示地图？<br>&gt; A: 存在多种原因可能导致这个问题的出现，你需要逐一检查：<br>&gt; <em> 打开开发者工具，检查一下代码是否有错误提示。<br>&gt; </em> 检查一下HTTP请求的瓦片地址是否正确。<br>&gt; <em> 检查一下离线瓦片地图，是否包含了当前地图显示层级的瓦片地图。<br>&gt; </em> 检查一下离线瓦片地图的整个区域，是否包含了当前地图设置的中心点。<br>&gt; <em> 检查一下地图使用的坐标系，是否正确。 OpenLayers 3默认使用的是mercator，而不是wgs84。所以如果中心点想设置为经度30度，纬度30度，就需要显示设置<code>projection: &#39;EPSG:4326&#39;</code>，或者使用<code>ol.proj.transform([30, 30], &#39;EPSG:4326&#39;, &#39;EPSG:3857&#39;)</code>进行转换。同一个坐标，不同的坐标系，位置可能截然不同。<br><br>&gt; Q: 为什么加载的地图有瓦片错位，拼接不上？<br>&gt; A: 检查一下离线瓦片地图的坐标系，是否和OpenLayers 3默认的坐标系不一致，如果不一致，请按照上一小节的处理方式处理。<br><br><br># 静态地图及应用<br><br>此处说的静态地图指没有经过地理投影什么的普通地图，比如一些规划图，室内建筑图，平面示意图等等，这些图一般都不会很大，但常用于一些演示系统中。 会涉及到一些简单的定位，标注等。 OpenLayers 3也充分考虑到了这样的需求，提供了对应的<code>source</code>类： <code>ol.source.ImageStatic</code>。 示例请看下面这个地图，显示的是成都熊猫基地的平面图：<br><br><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><br><div id="map" style="width: 100%"></div><br><script type="text/javascript"><br><br>    // 地图设置中心，设置到成都，在本地离线地图 offlineMapTiles刚好有一张zoom为4的成都瓦片<br>    var center = ol.proj.transform([104.06667, 30.66667], ‘EPSG:4326’, ‘EPSG:3857’);<br>    // 计算熊猫基地地图映射到地图上的范围，图片像素为 550</em>344，保持比例的情况下，把分辨率放大一些<br>    var extent = [center[0]- 550<em>1000/2, center[1]-344</em>1000/2, center[0]+550<em>1000/2, center[1]+344</em>1000/2];<br><br>    //创建地图<br>    var map = new ol.Map({<br>        view: new ol.View({<br>            center: center,<br>            zoom: 7<br>        }),<br>        target: ‘map’<br>    });<br><br>    // 加载熊猫基地静态地图层<br>    map.addLayer(new ol.layer.Image({<br>        source: new ol.source.ImageStatic({<br>            url: ‘../img/pandaBase.jpg’, // 熊猫基地地图<br>            imageExtent: extent     // 映射到地图的范围<br>        })<br>    }));<br></script><br><br>因为应用于OpenLayers 3中，所以地图可以放大缩小，具备相应的功能，对于演示而言，无疑加快了开发效率。 对应的代码如下：<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 地图设置中心，设置到成都，在本地离线地图 offlineMapTiles刚好有一张zoom为4的成都瓦片</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> center = ol.proj.transform([<span class="number">104.06667</span>, <span class="number">30.66667</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 计算熊猫基地地图映射到地图上的范围，图片像素为 550*344，保持比例的情况下，把分辨率放大一些</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> extent = [center[<span class="number">0</span>]- <span class="number">550</span>*<span class="number">1000</span>/<span class="number">2</span>, center[<span class="number">1</span>]<span class="number">-344</span>*<span class="number">1000</span>/<span class="number">2</span>, center[<span class="number">0</span>]+<span class="number">550</span>*<span class="number">1000</span>/<span class="number">2</span>, center[<span class="number">1</span>]+<span class="number">344</span>*<span class="number">1000</span>/<span class="number">2</span>];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//创建地图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123; </span></span><br><span class="line"><span class="undefined">center: center,</span></span><br><span class="line"><span class="undefined">zoom: 7</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 加载熊猫基地静态地图层</span></span></span><br><span class="line"><span class="actionscript">map.addLayer(<span class="keyword">new</span> ol.layer.Image(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.ImageStatic(&#123;</span></span><br><span class="line"><span class="actionscript">url: <span class="string">'../img/pandaBase.jpg'</span>, <span class="comment">// 熊猫基地地图</span></span></span><br><span class="line"><span class="actionscript">imageExtent: extent <span class="comment">// 映射到地图的范围</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>代码中有详细注释，可帮助理解，要应用静态地图，需要注意设置图片在地图中占据的<code>extent</code>。 如果没有这个设置，图片就不能和位置关联在一起，也就不能应用于OpenLayers 3中。 大家肯定非常关心<code>extent</code>的计算<code>[center[0]- 550*1000/2, center[1]-344*1000/2, center[0]+550*1000/2, center[1]+344*1000/2]</code>，为什么这样计算？ 这个地方我想让图片本身的大小和地理范围产生联系，图片的大小为550<em>344像素，在此基础上同比放大1000倍，作地理范围。当然也可以不用放大，直接作为地理范围，只是这样需要放大地图到很高的层级才能看到它。 有了这样的映射关系后，图片能保持长宽比不变，从而不变形。 为什么引入<code>center</code>，除以2相关的计算？ 这是一个简单计算，目的在于设置图片显示在地图中心。<br><br><br>把地图加载出来只是第一步，我们最重要的是在地图上定位，并处理相应的业务。比如我们希望在图片[390,145]像素位置添加一个活动图标表示这个地方有现场活动，就像下面这样：<br><br><div id="map2" style="width: 100%"></div><br><script type="text/javascript"><br><br>    // 地图设置中心，设置到成都，在本地离线地图 offlineMapTiles刚好有一张zoom为4的成都瓦片<br>    var center2 = ol.proj.transform([104.06667, 30.66667], ‘EPSG:4326’, ‘EPSG:3857’);<br>    // 计算熊猫基地地图映射到地图上的范围，图片像素为 550</em>344，保持比例的情况下，把分辨率放大一些<br>    var extent2 = [center[0]- 550<em>1000/2, center[1]-344</em>1000/2, center[0]+550<em>1000/2, center[1]+344</em>1000/2];<br><br>    //创建地图<br>    var map2 = new ol.Map({<br>        view: new ol.View({<br>            center: center,<br>            zoom: 7<br>        }),<br>        target: ‘map2’<br>    });<br><br>    // 加载熊猫基地静态地图层<br>    map2.addLayer(new ol.layer.Image({<br>        source: new ol.source.ImageStatic({<br>            url: ‘../img/pandaBase.jpg’, // 熊猫基地地图<br>            imageExtent: extent2    // 映射到地图的范围<br>        })<br>    }));<br><br>    var activityLayer = new ol.layer.Vector({<br>        source: new ol.source.Vector()<br>    });<br>    var activity = new ol.Feature({<br>        geometry: new ol.geom.Point([center[0]- 550<em>1000/2 + 390 </em> 1000, center[1]-344<em>1000/2 + (344 - 145) </em> 1000])<br>    })<br>    activity.setStyle(new ol.style.Style({<br>        image: new ol.style.Icon({<br>            src: ‘../img/flag_right.png’,<br>            anchor: [0, 1],<br>            scale: 0.2<br>        })<br>    }));<br>    activityLayer.getSource().addFeature(activity);<br>    map2.addLayer(activityLayer);<br></script><br><br>看到地图上的小旗帜没有，它就是新加上去的活动图标。 那么我们是如何做到的呢：<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map2"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 地图设置中心，设置到成都，在本地离线地图 offlineMapTiles刚好有一张zoom为4的成都瓦片</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> center2 = ol.proj.transform([<span class="number">104.06667</span>, <span class="number">30.66667</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 计算熊猫基地地图映射到地图上的范围，图片像素为 550*344，保持比例的情况下，把分辨率放大一些</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> extent2 = [center[<span class="number">0</span>]- <span class="number">550</span>*<span class="number">1000</span>/<span class="number">2</span>, center[<span class="number">1</span>]<span class="number">-344</span>*<span class="number">1000</span>/<span class="number">2</span>, center[<span class="number">0</span>]+<span class="number">550</span>*<span class="number">1000</span>/<span class="number">2</span>, center[<span class="number">1</span>]+<span class="number">344</span>*<span class="number">1000</span>/<span class="number">2</span>];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//创建地图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map2 = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123; </span></span><br><span class="line"><span class="undefined">center: center,</span></span><br><span class="line"><span class="undefined">zoom: 7</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map2'</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 加载熊猫基地静态地图层</span></span></span><br><span class="line"><span class="actionscript">map2.addLayer(<span class="keyword">new</span> ol.layer.Image(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.ImageStatic(&#123;</span></span><br><span class="line"><span class="actionscript">url: <span class="string">'../img/pandaBase.jpg'</span>, <span class="comment">// 熊猫基地地图</span></span></span><br><span class="line"><span class="actionscript">imageExtent: extent2<span class="comment">// 映射到地图的范围</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建一个用于放置活动图标的layer</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> activityLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector()</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建一个活动图标需要的Feature，并设置位置</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> activity = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">geometry: <span class="keyword">new</span> ol.geom.Point([center[<span class="number">0</span>]- <span class="number">550</span>*<span class="number">1000</span>/<span class="number">2</span> + <span class="number">390</span> * <span class="number">1000</span>, center[<span class="number">1</span>]<span class="number">-344</span>*<span class="number">1000</span>/<span class="number">2</span> + (<span class="number">344</span> - <span class="number">145</span>) * <span class="number">1000</span>])</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置Feature的样式，使用小旗子图标</span></span></span><br><span class="line"><span class="actionscript">activity.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Icon(&#123;</span></span><br><span class="line"><span class="actionscript">src: <span class="string">'../img/flag_right.png'</span>,</span></span><br><span class="line"><span class="undefined">anchor: [0, 1],</span></span><br><span class="line"><span class="undefined">scale: 0.2</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 添加活动Feature到layer上，并把layer添加到地图中</span></span></span><br><span class="line"><span class="undefined">activityLayer.getSource().addFeature(activity);</span></span><br><span class="line"><span class="undefined">map2.addLayer(activityLayer);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>注释足够帮助大家理解代码意图，我想最关键的在于<code>activity</code>这个<code>feature</code>的位置为什么要这样计算： <code>[center[0]- 550*1000/2 + 390 * 1000, center[1]-344*1000/2 + (344 - 145) * 1000]</code>。 如果翻译成下面这样，你可能会更容易理解：<code>extentLeft+picX, extentTop+picY</code>，此处的<code>picX</code>和<code>picY</code>显然是需要在图片像素位置的基础上放大1000倍，才能对应于地理位置。 <code>[center[0]- 550*1000/2</code>对应的就是<code>extentLeft</code>, <code>center[1]-344*1000/2</code>对应的是<code>extentBottom</code>，并不是<code>extentTop</code>，所以我们要做一个简单的计算<code>(344 - 145) * 1000</code>，而不是直接用<code>145*1000</code>。<br><br>从图片的像素坐标转换为地图的地理坐标，关键在于通过像素大小，映射到一个地理的<code>extent</code>，希望能理解这个过程。 在此基础上，就能充分应用OpenLayers 3的功能了。<br><br><br>对于图片比较大的情况，可以自行切片，然后分片加载，从而拼成一整张地图，可按照上面的方法自行尝试，作为课后练习。<br><br># 加载WMS服务地图<br><br># 矢量地图<br><br>矢量图使用直线和曲线来描述图形，这些图形的元素是一些点、线、矩形、多边形、圆和弧线等等，它们都是通过数学公式计算获得的。由于矢量图形可通过公式计算获得，所以矢量图形文件体积一般较小。矢量图形最大的优点是无论放大、缩小或旋转等不会失真。在地图中存在着大量的应用，是地图数据中非常重要的组成部分。<br><br>为了便于存储，传递，使用，矢量地图会按照一定的格式来表达，比如常见的<code>GeoJSON</code>，<code>TopoJSON</code>，<code>GML</code>，<code>KML</code>，<code>ShapeFile</code>等等。 除了最后一个<code>ShapeFile</code>，其他几个格式的矢量地图OpenLayers 3都支持，使用起来也是非常的简单，下面这个地图就加载了<code>GeoJSON</code>格式的矢量地图。<br><br><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><br><div id="map" style="width: 100%"></div><br><script type="text/javascript"><br><br>    //创建地图<br>    var map = new ol.Map({<br>        layers: [<br>            new ol.layer.Tile({<br>                source: new ol.source.OSM()<br>            }),<br>            new ol.layer.Vector({<br>                source: new ol.source.Vector({<br>                    url: ‘../data/geojson/line-samples.geojson’,<br>                    format: new ol.format.GeoJSON()<br>                })<br>            })<br>        ],<br>        view: new ol.View({<br>            center: [-72.980624870461128, 48.161307640513321],<br>            zoom: 8,<br>            projection: ‘EPSG:4326’<br>        }),<br>        target: ‘map’<br>    });<br></script><br><br>代码非常简单：<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//创建地图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 底图用Open Street Map 地图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 再加载一个geojson的矢量地图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">url: <span class="string">'../data/geojson/line-samples.geojson'</span>, <span class="comment">// 地图来源</span></span></span><br><span class="line"><span class="actionscript">format: <span class="keyword">new</span> ol.format.GeoJSON()<span class="comment">// 解析矢量地图的格式化类</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123; </span></span><br><span class="line"><span class="undefined">center: [-72.980624870461128, 48.161307640513321],</span></span><br><span class="line"><span class="undefined">zoom: 8,</span></span><br><span class="line"><span class="actionscript">projection: <span class="string">'EPSG:4326'</span></span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>注释对代码进行了很好的说明，但有两点需要进一步说明：<br><br><em> 加载矢量图使用的<code>source</code>是<code>ol.source.Vector</code>, layer是<code>ol.layer.Vector</code>，不要错误的使用。</em> 加载代码之所以这么简单，是因为OpenLayers 3内置了对应矢量地图格式的解析类，比如<code>ol.format.GeoJSON</code>。 它们都位于包<code>ol.format</code>下面，可以在API官方文档中查询得到。 如果是<code>shapefile</code>这种不支持的，则需要自己解析。 解析后，矢量地图都会转换为对应于OpenLayer<br>s 3中的<code>feature</code>。 所以，当加载完成后，可以通过<code>source</code>的<code>getFeatures</code>方法来获取所有的矢量图形。<br><em> 需要注意坐标系，因为<code>.geojson</code>文档里用的是和当前地图用的不一样的坐标系。<br><br>对于不同格式的矢量地图，会有相应的一些不同用法，下面就针对一些大家经常会遇到的问题，给出相应的实例，用以说明。<br><br><br><br># 获取加载后的所有feature<br>这是一个很多人会遇到的问题，因为在加载矢量地图后，需要对矢量地图做一些简单的查询，分析等。 但是经常会遇到获取不到加载后的<code>feature</code>的问题。 原因就在于获取的时机不对，因为矢量地图是异步加载的。 下面就看一下正确的获取所有<code>feature</code>的做法是什么：<br><br><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><br><div id="map" style="width: 100%"></div><br><div>矢量地图Feature总数： <span id="count"></span></div><br><script type="text/javascript"><br><br>    //创建地图<br>    var map = new ol.Map({<br>        layers: [<br>            new ol.layer.Tile({<br>                source: new ol.source.OSM()<br>            })<br>        ],<br>        view: new ol.View({<br>            center: [-72.980624870461128, 48.161307640513321],<br>            zoom: 8,<br>            projection: ‘EPSG:4326’<br>        }),<br>        target: ‘map’<br>    });<br><br>    var vectorLayer = new ol.layer.Vector({<br>        source: new ol.source.Vector({<br>            url: ‘../data/geojson/line-samples.geojson’,<br>            format: new ol.format.GeoJSON()<br>        })<br>    });<br><br>    var listenerKey = vectorLayer.getSource().on(‘change’, function(){<br>        if (vectorLayer.getSource().getState() === ‘ready’) {<br>            document.getElementById(‘count’).innerHTML = vectorLayer.getSource().getFeatures().length;<br>            vectorLayer.getSource().unByKey(listenerKey);<br>        }<br>    });<br><br>    map.addLayer(vectorLayer);<br></script><br><br>从图上可以看到，共有9个<code>feature</code>， 在地图下方的统计数据也是9。 下面看看代码是如何实现的：<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>矢量地图Feature总数： <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"count"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//创建地图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123; </span></span><br><span class="line"><span class="undefined">center: [-72.980624870461128, 48.161307640513321],</span></span><br><span class="line"><span class="undefined">zoom: 8,</span></span><br><span class="line"><span class="actionscript">projection: <span class="string">'EPSG:4326'</span></span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">url: <span class="string">'../data/geojson/line-samples.geojson'</span>, </span></span><br><span class="line"><span class="actionscript">format: <span class="keyword">new</span> ol.format.GeoJSON()</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 因为是异步加载，所以要采用事件监听的方式来判定是否加载完成</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> listenerKey = vectorLayer.getSource().on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span> (vectorLayer.getSource().getState() === <span class="string">'ready'</span>) &#123;<span class="comment">// 判定是否加载完成</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'count'</span>).innerHTML = vectorLayer.getSource().getFeatures().length;</span></span><br><span class="line"><span class="actionscript">vectorLayer.getSource().unByKey(listenerKey); <span class="comment">// 注销监听器</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">map.addLayer(vectorLayer);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 如果在此处调用vectorLayer.getSource().getFeatures()是完全有可能获取不到任何Feature的，这是常犯错误</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>对于其他格式的矢量地图加载也需要这样编写代码，才能正确获取到加载完成的所有<code>feature</code>。<br><br><br># 坐标转换<br>坐标转换也是矢量地图经常会遇到的问题，比如当前地图用的是<code>EPSG:3857</code>，但是矢量地图用的是<code>EPSG:4326</code>，这样就需要进行坐标转换。 由于OpenLayers 3为我们内置了地图格式解析器，那么自然只能依靠它来处理。 上一节中使用的<code>.geojson</code>文件内的坐标使用的是wgs84坐标，那么如果我们地图使用<code>EPSG:3857</code>，该怎么来加载？<br><br><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br>    <script type="text/javascript" src="../src/js/zepto.min.js" charset="utf-8"></script><br></head><br><div id="map" style="width: 100%"></div><br><script type="text/javascript"><br><br>    //创建地图<br>    var map = new ol.Map({<br>        layers: [<br>            new ol.layer.Tile({<br>                source: new ol.source.OSM()<br>            }),<br><br>        ],<br>        view: new ol.View({<br>            center: ol.proj.fromLonLat([-72.980624870461128, 48.161307640513321]),<br>            zoom: 8<br>        }),<br>        target: ‘map’<br>    });<br><br>    function addGeoJSON(src) {<br>        var layer = new ol.layer.Vector({<br>            source: new ol.source.Vector({<br>                features: (new ol.format.GeoJSON()).readFeatures(src, {<br>                    dataProjection: ‘EPSG:4326’,<br>                    featureProjection: ‘EPSG:3857’<br>                })<br>            })<br>        });<br>        map.addLayer(layer);<br>    }<br><br>    $.ajax({<br>        url: ‘../data/geojson/line-samples.geojson’,<br>        success: function(data, status) {<br>            addGeoJSON(data);<br>        }<br>    });<br></script><br><br>详细实现参见代码：<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//创建地图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123; </span></span><br><span class="line"><span class="undefined">center: ol.proj.fromLonLat([-72.980624870461128, 48.161307640513321]),</span></span><br><span class="line"><span class="undefined">zoom: 8</span></span><br><span class="line"><span class="undefined">&#125;), </span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 加载矢量地图</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">addGeoJSON</span><span class="params">(src)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">features: (<span class="keyword">new</span> ol.format.GeoJSON()).readFeatures(src, &#123; <span class="comment">// 用readFeatures方法可以自定义坐标系</span></span></span><br><span class="line"><span class="actionscript">dataProjection: <span class="string">'EPSG:4326'</span>,<span class="comment">// 设定JSON数据使用的坐标系</span></span></span><br><span class="line"><span class="actionscript">featureProjection: <span class="string">'EPSG:3857'</span> <span class="comment">// 设定当前地图使用的feature的坐标系</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">map.addLayer(layer);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 使用ajax获取矢量地图数据</span></span></span><br><span class="line"><span class="javascript">$.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">url: <span class="string">'../data/geojson/line-samples.geojson'</span>,</span></span><br><span class="line"><span class="actionscript">success: <span class="function"><span class="keyword">function</span><span class="params">(data, status)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 成功获取到数据内容后，调用方法添加到地图</span></span></span><br><span class="line"><span class="undefined">addGeoJSON(data);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>代码稍微麻烦了一点，是因为目前<code>ol.format.GeoJSON</code>的构造参数不支持设定创建<code>feature</code>的坐标系，如果要支持也并不麻烦，期望后续官网能够改进。<br><br>注意，该方法可以适用于其他几种矢量地图。<code>readFeatures</code>这个方法在内置的几个解析类中都有。<br><br><br><br><br><br># 样式设置<br>对矢量元素进行样式设置，OpenLayers3 支持两种方式，一种是直接给<code>feature</code>设置样式，一种是给<code>layer</code>设置样式。系统默认优先考虑<code>feature</code>的样式，如果没有，则使用<code>layer</code>的样式，还有一种情况是<code>layer</code>也没有设置样式，则会采用系统默认的样式。<br><br>对于矢量地图而言，要想修改样式也只有这两种途径可选。比如之前例子中使用的<code>GeoJSON</code>，如果要改变线条的颜色成下面这样，可以考虑在<code>layer</code>上设置样式：<br><br><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><br><div id="map" style="width: 100%"></div><br><script type="text/javascript"><br><br>    //创建地图<br>    var map = new ol.Map({<br>        layers: [<br>            new ol.layer.Tile({<br>                source: new ol.source.OSM()<br>            })<br>        ],<br>        view: new ol.View({<br>            center: [-72.980624870461128, 48.161307640513321],<br>            zoom: 8,<br>            projection: ‘EPSG:4326’<br>        }),<br>        target: ‘map’<br>    });<br><br>    var vectorLayer = new ol.layer.Vector({<br>        source: new ol.source.Vector({<br>            url: ‘../data/geojson/line-samples.geojson’,<br>            format: new ol.format.GeoJSON()<br>        }),<br>        style: new ol.style.Style({<br>            stroke: new ol.style.Stroke({<br>                color: ‘red’,<br>                size: 1<br>            })<br>        })<br>    });<br><br>    map.addLayer(vectorLayer);<br></script><br><br>代码很简单：<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//创建地图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123; </span></span><br><span class="line"><span class="undefined">center: [-72.980624870461128, 48.161307640513321],</span></span><br><span class="line"><span class="undefined">zoom: 8,</span></span><br><span class="line"><span class="actionscript">projection: <span class="string">'EPSG:4326'</span></span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">url: <span class="string">'../data/geojson/line-samples.geojson'</span>, </span></span><br><span class="line"><span class="actionscript">format: <span class="keyword">new</span> ol.format.GeoJSON()</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置样式，颜色为红色，线条粗细为1个像素</span></span></span><br><span class="line"><span class="actionscript">style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">size: 1</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">map.addLayer(vectorLayer);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>如果要在<code>feature</code>上设置样式，就必须先获取到所有加载的<code>feature</code>，然后依次设置，显然直接设置<code>layer</code>的样式，会在代码编写上更容易一些。<br><br>## 自带样式的矢量地图修改样式<br><br>有些矢量地图数据自带样式，比如<code>KML</code>格式的矢量地图，如果要修改样式，则相对比较麻烦。得分情况考虑：</em> 一种是所有矢量地图都不使用自带的样式；<br>* 一种是部分矢量地图不使用自带的样式。<br><br>对于第一种情况，则相对比较简单一些，只需要把<code>ol.format.KML</code>的构造参数<code>extractStyles</code>设置为<code>false</code>即可，然后为<code>layer</code>设定自定义的样式。<br><br>对于第二种情况，则相对麻烦一些，必须要读取加载的所有<code>feature</code>，并进行过滤，对符合条件的<code>feature</code>重新设置样式。<br><br><br><br># 图层叠加及管理<br>分层管理是GIS渲染引擎及其他图形系统常用的策略，为业务的应用提高了较大的适用性。比如更换地图底图，不能影响在上地图上添加的一些标注。如果把地图底图和标注分开，放在不同的图层上，就很容易解决这个问题。<br><br>有了图层的概念，自然需要对图层进行控制，比如增删改查等，图层之间的顺序，图层可见度等等。这些都是大家经常会遇到的问题。下面先来看一下三个图层叠加的情况：<br><br><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><body><br>    <div id="map" style="width: 100%"></div><br>    <div> 显示/隐藏：<br>        <input type="checkbox" checked="checked" onclick="checkOsm(this);">底图<br>        <input type="checkbox" checked="checked" onclick="checkCircle(this);">圆<br>        <input type="checkbox" checked="checked" onclick="checkPoint(this);">点<br>    </div><br>    <div><br>        图层顺序：<br>        <input name="seq" type="radio" value="" onclick="upOsm(this);">底图最上<br>        <input name="seq" type="radio" value="" checked="checked" onclick="upCircle(this);">圆最上<br>        <input name="seq" type="radio" value="" onclick="upPoint(this);">点最上<br>    </div><br>    <script><br><br>        // 创建3个图层<br>        var osmLayer = new ol.layer.Tile({<br>            source: new ol.source.OSM()<br>        });<br>        var pointLayer = new ol.layer.Vector({<br>            source: new ol.source.Vector()<br>        });<br>        var circleLayer = new ol.layer.Vector({<br>            source: new ol.source.Vector()<br>        });<br><br>      var map = new ol.Map({<br>            layers: [osmLayer, pointLayer, circleLayer],<br>            view: new ol.View({<br>                center: [0, 0],<br>                zoom: 2<br>            }),<br>            target: ‘map’<br>      });<br><br>      // 添加点<br>      var point = new ol.Feature({<br>          geometry: new ol.geom.Point([0, 0])<br>      });<br>      point.setStyle(new ol.style.Style({<br>          image: new ol.style.Circle({<br>              radius: 1,<br>              fill: new ol.style.Fill({<br>                  color: ‘red’<br>              }),<br>              stroke: new ol.style.Stroke({<br>                  color: ‘red’,<br>                  size: 1<br>              })<br>          })<br>      }));<br>      pointLayer.getSource().addFeature(point);<br><br><br>      // 添加圆<br>      var circle = new ol.Feature({<br>          geometry: new ol.geom.Point([0, 0])<br>      });<br>      circle.setStyle(new ol.style.Style({<br>          image: new ol.style.Circle({<br>              radius: 10,<br>              stroke: new ol.style.Stroke({<br>                  color: ‘blue’,<br>                  size: 1<br>              })<br>          })<br>      }));<br>      circleLayer.getSource().addFeature(circle);<br><br>      function checkOsm(elem) {<br>          osmLayer.setVisible(elem.checked);<br>      }<br><br>      function checkPoint(elem) {<br>          pointLayer.setVisible(elem.checked);<br>      }<br><br>      function checkCircle(elem) {<br>          circleLayer.setVisible(elem.checked);<br>      }<br><br>      function upOsm (elem) {<br>          if (elem.checked) {<br>              osmLayer.setZIndex(3);<br>              circleLayer.setZIndex(circleLayer.getZIndex()-1);<br>              pointLayer.setZIndex(pointLayer.getZIndex()-1);<br>          }<br>      }<br><br>      function upCircle (elem) {<br>          if (elem.checked) {<br>              circleLayer.setZIndex(3);<br>              osmLayer.setZIndex(osmLayer.getZIndex()-1);<br>              pointLayer.setZIndex(pointLayer.getZIndex()-1);<br>          }<br>      }<br><br>      function upPoint(elem) {<br>          if (elem.checked) {<br>              pointLayer.setZIndex(3);<br>              osmLayer.setZIndex(osmLayer.getZIndex()-1);<br>              circleLayer.setZIndex(circleLayer.getZIndex()-1);<br>          }<br>      }<br><br>    </script><br></body><p>上面这个地图示范了显示和隐藏的控制，以及图层顺序的控制。可以勾选上面的复选框和单选框试试。具体实现，参见下面的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 显示/隐藏：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">onclick</span>=<span class="string">"checkOsm(this);"</span> /&gt;</span>底图</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">onclick</span>=<span class="string">"checkCircle(this);"</span>/&gt;</span>圆</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">onclick</span>=<span class="string">"checkPoint(this);"</span>/&gt;</span>点</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">图层顺序：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"seq"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">"upOsm(this);"</span> /&gt;</span>底图最上</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"seq"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">onclick</span>=<span class="string">"upCircle(this);"</span>/&gt;</span>圆最上</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"seq"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">"upPoint(this);"</span>/&gt;</span>点最上</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建3个图层</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> osmLayer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> pointLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector()</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> circleLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector()</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 在地图上添加上面创建的三个图层，图层顺序自下而上，依次是osm，point，circle</span></span></span><br><span class="line"><span class="undefined">layers: [osmLayer, pointLayer, circleLayer],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">center: [0, 0],</span></span><br><span class="line"><span class="undefined">zoom: 2</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 添加点</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> point = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">  geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">0</span>, <span class="number">0</span>])</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="actionscript">  point.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">  image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">  radius: 1,</span></span><br><span class="line"><span class="actionscript">  fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">  color: <span class="string">'red'</span></span></span><br><span class="line"><span class="undefined">  &#125;),</span></span><br><span class="line"><span class="actionscript">  stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">  color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">  size: 1</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;));</span></span><br><span class="line"><span class="undefined">  pointLayer.getSource().addFeature(point);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 添加圆</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> circle = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">  geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">0</span>, <span class="number">0</span>])</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="actionscript">  circle.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">  image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">  radius: 10,</span></span><br><span class="line"><span class="actionscript">  stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">  color: <span class="string">'blue'</span>,</span></span><br><span class="line"><span class="undefined">  size: 1</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;));</span></span><br><span class="line"><span class="undefined">  circleLayer.getSource().addFeature(circle);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 隐藏显示osm图层</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">checkOsm</span><span class="params">(elem)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">  osmLayer.setVisible(elem.checked);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 隐藏显示point图层</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">checkPoint</span><span class="params">(elem)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">  pointLayer.setVisible(elem.checked);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 隐藏显示circle图层</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">checkCircle</span><span class="params">(elem)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">  circleLayer.setVisible(elem.checked);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 置顶osm图层到最上面</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">upOsm</span> <span class="params">(elem)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">if</span> (elem.checked) &#123;</span></span><br><span class="line"><span class="undefined">  osmLayer.setZIndex(3);</span></span><br><span class="line"><span class="undefined">  circleLayer.setZIndex(circleLayer.getZIndex()-1);</span></span><br><span class="line"><span class="undefined">  pointLayer.setZIndex(pointLayer.getZIndex()-1);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 置顶circle图层到最上面</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">upCircle</span> <span class="params">(elem)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">if</span> (elem.checked) &#123;</span></span><br><span class="line"><span class="undefined">  circleLayer.setZIndex(3);</span></span><br><span class="line"><span class="undefined">  osmLayer.setZIndex(osmLayer.getZIndex()-1);</span></span><br><span class="line"><span class="undefined">  pointLayer.setZIndex(pointLayer.getZIndex()-1);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 置顶point图层到最上面</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">upPoint</span><span class="params">(elem)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">if</span> (elem.checked) &#123;</span></span><br><span class="line"><span class="undefined">  pointLayer.setZIndex(3);</span></span><br><span class="line"><span class="undefined">  osmLayer.setZIndex(osmLayer.getZIndex()-1);</span></span><br><span class="line"><span class="undefined">  circleLayer.setZIndex(circleLayer.getZIndex()-1);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>简而言之，就是可以利用方法<code>setVisible</code>和<code>setZIndex</code>来控制图层，满足80%的这种需求。 除此之外，大家也可以使用很早之前使用的一种方式来实现管理，即删除/添加图层，参见<a href="05-02.md">最简单的加载在线地图</a>。</p><h1 id="openlayers3瓦片加载的源码浅析与小结"><a href="#openlayers3瓦片加载的源码浅析与小结" class="headerlink" title="openlayers3瓦片加载的源码浅析与小结"></a>openlayers3瓦片加载的源码浅析与小结</h1><p><strong>–感谢作者：老羽 (QQ：274103592, 邮箱：michael.zy@163.com, 简书：<a href="http://www.jianshu.com/users/261606a3714c/latest_articles" target="_blank" rel="noopener">老羽</a> )</strong></p><h2 id="一、类图与逻辑"><a href="#一、类图与逻辑" class="headerlink" title="一、类图与逻辑"></a>一、类图与逻辑</h2><p><img src="../img/ol.png" alt="ol-tilerender.png"></p><p>上图中列了关于瓦片图层加载相关的重要方法。</p><ol><li>Map对象初始化时根据options.renderer创建ol.renderer.Map的实例，默认是ol.renderer.canvas.Map；</li><li>ol.render.canvas.Map实现了抽象方法createLayerRenderer，这是一个简单工厂，根据不同的图层创建对应的ol.renderer.Layer。其中ol.layer.Tile对应的就是ol.renderer.canvas.TileLayer；</li><li>ol.renderer.canvas.TileLayer.prepareFrame调用source对应的<br>TileGrid.getTileRangeForExtentAndResolution获取可视范围内的瓦片范围，并循环遍历加载瓦片；</li><li>TileGrid在初始化时就计算出了对应layer的所有瓦片范围：<ol><li>calculateTileRanges<em>-》循环遍历resolutions</em>，调用<br>getTileRangeForExtentAndZ，根据extent计算瓦片范围；</li><li>getTileRangeForExtentAndResolution计算瓦片的范围：</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">ol.tilegrid.TileGrid.prototype.getTileRangeForExtentAndResolution = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  extent, resolution, opt_tileRange</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tileCoord = ol.tilegrid.TileGrid.tmpTileCoord_;</span><br><span class="line">  <span class="comment">// 根据extent的左下角的计算瓦片坐标；</span></span><br><span class="line">  <span class="keyword">this</span>.getTileCoordForXYAndResolution_(</span><br><span class="line">    extent[<span class="number">0</span>], extent[<span class="number">1</span>], resolution, <span class="literal">false</span>, tileCoord);</span><br><span class="line">  <span class="keyword">var</span> minX = tileCoord[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">var</span> minY = tileCoord[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// 根据extent的右上角的计算瓦片坐标；</span></span><br><span class="line">   <span class="keyword">this</span>.getTileCoordForXYAndResolution_(</span><br><span class="line">      extent[<span class="number">2</span>], extent[<span class="number">3</span>], resolution, <span class="literal">true</span>, tileCoord);</span><br><span class="line">  <span class="comment">// 得到某个resolution级别下的瓦片范围（左下角瓦片坐标 - 右上角瓦片坐标）</span></span><br><span class="line">  <span class="keyword">return</span> ol.TileRange.createOrUpdate(</span><br><span class="line">    minX, tileCoord[<span class="number">1</span>], minY, tileCoord[<span class="number">2</span>], opt_tileRange);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据extent左下角及右上角的坐标-origin后得到地图的长宽 / resolution得到像素值；</span></span><br><span class="line"><span class="comment">// 然后 / tileSize 得到需要多少张瓦片；</span></span><br><span class="line"><span class="comment">// 当计算extent右上角的瓦片坐标时，因为瓦片坐标是从0开始计算，当瓦片数量为例如1.5此类小数时，</span></span><br><span class="line"><span class="comment">// 应该是2张瓦片，从0开始计算，那么XY就应该向下取整，取1；0，1两张瓦片；</span></span><br><span class="line">ol.tilegrid.TileGrid.prototype.getTileCoordForXYAndResolution_ = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  x, y, resolution, reverseIntersectionPolicy, opt_tileCoord</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> z = <span class="keyword">this</span>.getZForResolution(resolution);</span><br><span class="line">  <span class="keyword">var</span> scale = resolution / <span class="keyword">this</span>.getResolution(z);</span><br><span class="line">  <span class="keyword">var</span> origin = <span class="keyword">this</span>.getOrigin(z);</span><br><span class="line">  <span class="keyword">var</span> tileSize = ol.size.toSize(<span class="keyword">this</span>.getTileSize(z), <span class="keyword">this</span>.tmpSize_);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> adjustX = reverseIntersectionPolicy ? <span class="number">0.5</span> : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> adjustY = reverseIntersectionPolicy ? <span class="number">0</span> : <span class="number">0.5</span>;</span><br><span class="line">  <span class="keyword">var</span> xFromOrigin = <span class="built_in">Math</span>.floor((x - origin[<span class="number">0</span>]) / resolution + adjustX);</span><br><span class="line">  <span class="keyword">var</span> yFromOrigin = <span class="built_in">Math</span>.floor((y - origin[<span class="number">1</span>]) / resolution + adjustY);</span><br><span class="line">  <span class="keyword">var</span> tileCoordX = scale * xFromOrigin / tileSize[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> tileCoordY = scale * yFromOrigin / tileSize[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (reverseIntersectionPolicy) &#123;</span><br><span class="line">    tileCoordX = <span class="built_in">Math</span>.ceil(tileCoordX) - <span class="number">1</span>;</span><br><span class="line">    tileCoordY = <span class="built_in">Math</span>.ceil(tileCoordY) - <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    tileCoordX = <span class="built_in">Math</span>.floor(tileCoordX);</span><br><span class="line">    tileCoordY = <span class="built_in">Math</span>.floor(tileCoordY);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ol.tilecoord.createOrUpdate(z, tileCoordX, tileCoordY, opt_tileCoord);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二、各种瓦片加载的小结"><a href="#二、各种瓦片加载的小结" class="headerlink" title="二、各种瓦片加载的小结"></a>二、各种瓦片加载的小结</h2><p>通过上述分析后，应该能较好的理解瓦片的坐标是如何计算的，当应用到不同的地图瓦片加载时就可以得心应手。以下通过不同的几种类型继续说明瓦片计算的方式：</p><h3 id="1、TMS瓦片加载"><a href="#1、TMS瓦片加载" class="headerlink" title="1、TMS瓦片加载"></a>1、TMS瓦片加载</h3><p>先看看TMS瓦片的规则，origin在左下角，X轴从左至右递增，Y轴从下往上递增（先计算左下角，然后计算右上角）。<br><img src="../img/ogc-tms.png" alt="TMS瓦片规则"></p><p>而TileGrid设置origin为ol.extent.getBottomLeft(extent)后，规则也是从左下角到右上角，X轴从左至右递增，Y轴从下往上递增，与TMS规则是完全一致的，参考代码与参考效果如下：       </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> resolutions = [];</span><br><span class="line"><span class="keyword">var</span> tileSize = <span class="number">256</span>;</span><br><span class="line"><span class="keyword">var</span> extent = [<span class="number">12665080.52765571</span>, <span class="number">2550703.6338763316</span>, <span class="number">12725465.780000998</span>, <span class="number">2601457.820657688</span>]; <span class="comment">//深圳地区</span></span><br><span class="line"><span class="keyword">var</span> projection = <span class="keyword">new</span> ol.proj.<span class="keyword">get</span>(<span class="string">"EPSG:3857"</span>);</span><br><span class="line"><span class="keyword">var</span> projectionExtent = projection.getExtent();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">19</span>; i++) &#123;</span><br><span class="line">  resolutions[i] = Math.pow(<span class="number">2</span>, <span class="number">18</span> - i);</span><br><span class="line">&#125;            </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tilegrid = <span class="keyword">new</span> ol.tilegrid.TileGrid(&#123;</span><br><span class="line">  origin: ol.extent.getBottomLeft(projectionExtent),</span><br><span class="line">  resolutions: resolutions,</span><br><span class="line">  extent: projectionExtent,<span class="comment">//extent,</span></span><br><span class="line">  tileSize: [<span class="number">256</span>, <span class="number">256</span>],</span><br><span class="line">&#125;);         </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.<span class="built_in">Map</span>(&#123;</span><br><span class="line">  target: <span class="string">"map"</span>,</span><br><span class="line">  layers: [</span><br><span class="line">    <span class="comment">// 调试瓦片</span></span><br><span class="line">    <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">      source: <span class="keyword">new</span> ol.source.TileDebug(&#123;</span><br><span class="line">        projection: projection,</span><br><span class="line">        tileGrid: tilegrid,</span><br><span class="line">        tileSize: [<span class="number">256</span>, <span class="number">256</span>],</span><br><span class="line">        extent :  projectionExtent,</span><br><span class="line">        wrapX: <span class="keyword">false</span></span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  view: <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">    projection: projection,</span><br><span class="line">    center: [<span class="number">12697184.079535482</span>, <span class="number">2563239.3065151004</span>],<span class="comment">//深圳</span></span><br><span class="line">    resolutions: resolutions,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br><span class="line">map.getView().setZoom(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="../img/tms-demo.png" alt="示意图"></p><p>假如上面代码中，我想只显示深圳地区的瓦片，其余的瓦片不显示，这种场景是很普遍的，那么代码调整如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var tilegrid = new ol.tilegrid.TileGrid(&#123;</span><br><span class="line"><span class="symbol">  origin:</span> ol.extent.getBottomLeft(projectionExtent),  <span class="comment">//origin位置不能变！！！！！！</span></span><br><span class="line"><span class="symbol">  resolutions:</span> resolutions,</span><br><span class="line"><span class="symbol">  extent:</span>  extent,<span class="comment">//projectionExtent //设置extent为深圳片区的extent；</span></span><br><span class="line"><span class="symbol">  tileSize:</span> [<span class="number">256</span>, <span class="number">256</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ..................</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调试瓦片</span></span><br><span class="line">new ol.layer.Tile(&#123;</span><br><span class="line"><span class="symbol">  source:</span> new ol.source.TileDebug(&#123;</span><br><span class="line"><span class="symbol">    projection:</span> projection,</span><br><span class="line"><span class="symbol">    tileGrid:</span> tilegrid,</span><br><span class="line"><span class="symbol">    extent:</span> extent,<span class="comment">//projectionExtent //设置extent为深圳片区的extent；</span></span><br><span class="line"><span class="symbol">    wrapX:</span> false</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2、WMTS瓦片加载"><a href="#2、WMTS瓦片加载" class="headerlink" title="2、WMTS瓦片加载"></a>2、WMTS瓦片加载</h3><p>WMTS规则如下，origin在左上角，X轴从左至右递增，Y轴是从上往下递增（先计算左上角，然后计算右下角）</p><p><img src="../img/ogc-wmts.png" alt="WMTS规则"></p><p>那么将tileGrid设置origin为ol.extent.getTopLeft(projectionExtent), 但是TileGrid始终都是先计算左下角的瓦片坐标，然后计算右上角的瓦片坐标，因此Y轴是相反的。那么修改Y轴坐标就可以得到正确值：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tilegrid = <span class="keyword">new</span> ol.tilegrid.TileGrid(&#123;</span><br><span class="line">  origin: ol.extent.getTopLeft(projectionExtent),  <span class="comment">// WMTS Origin在左上角，origin位置不能变；</span></span><br><span class="line">  resolutions: resolutions,</span><br><span class="line">  extent: extent,</span><br><span class="line">  tileSize: [<span class="number">256</span>, <span class="number">256</span>],</span><br><span class="line">&#125;);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 其余代码略.....</span></span><br><span class="line"><span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">  source: <span class="keyword">new</span> ol.source.TileImage(&#123;</span><br><span class="line">    projection: projection,</span><br><span class="line">    tileGrid: tilegrid(),</span><br><span class="line">    tileUrlFunction: <span class="function"><span class="keyword">function</span> <span class="params">(tileCoord, pixelRatio, proj)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!tileCoord) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> z = tileCoord[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">var</span> x = tileCoord[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">var</span> y = -tileCoord[<span class="number">2</span>] - <span class="number">1</span>; <span class="comment">// y轴取反，-1目的是为了从0开始计数；</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>; <span class="comment">// 自行设置URL ，请注意 WMTS中用TileRow标识Y，用TileCol表示X；</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3、百度地图瓦片加载"><a href="#3、百度地图瓦片加载" class="headerlink" title="3、百度地图瓦片加载"></a>3、百度地图瓦片加载</h3><p>百度瓦片片规则如下：Origin在[0,0]，X轴从左至右递增，Y轴从下往上递增（从左下角到右上角）。</p><p><img src="../img/baidu-tile.png" alt="Paste_Image.png"></p><p>从百度的瓦片规则看出来，与TileGrid的规则是完全一致，将origin设置为[0,0]即可。参考代码如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> tilegrid = <span class="keyword">new</span> ol.tilegrid.TileGrid(&#123;</span><br><span class="line">   origin: [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">   resolutions: resolutions,</span><br><span class="line">   extent: extent,<span class="comment">//projectionExtent,</span></span><br><span class="line">   tileSize: [<span class="number">256</span>, <span class="number">256</span>],</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tilesource = <span class="keyword">new</span> ol.source.TileImage(&#123;</span><br><span class="line">   projection: projection,</span><br><span class="line">   tileGrid: tilegrid,</span><br><span class="line">   tileUrlFunction: <span class="function"><span class="keyword">function</span> <span class="params">(xyz, obj1, obj2)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!xyz) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> z = xyz[<span class="number">0</span>]+ <span class="number">11</span>; <span class="comment">// 从第11级开始加载；深圳地区；</span></span><br><span class="line">     <span class="keyword">var</span> x = xyz[<span class="number">1</span>];</span><br><span class="line">     <span class="keyword">var</span> y = xyz[<span class="number">2</span>];</span><br><span class="line">     <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">       x = <span class="string">"M"</span> + (-x);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">       y = <span class="string">"M"</span> + (-y);</span><br><span class="line">     &#125;                    </span><br><span class="line">     <span class="keyword">return</span> <span class="string">"http://online3.map.bdimg.com/tile/?qt=tile&amp;x="</span> + x + <span class="string">"&amp;y="</span> + y + <span class="string">"&amp;z="</span> + z + <span class="string">"&amp;styles=pl&amp;udt=20141119&amp;scaler=1"</span>;                   </span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="4、腾讯地图瓦片加载"><a href="#4、腾讯地图瓦片加载" class="headerlink" title="4、腾讯地图瓦片加载"></a>4、腾讯地图瓦片加载</h3><p>腾讯地图完全遵守TMS规则，地图投影坐标系采用Web Mercator投影，最小缩放级别为第4级。参考代码如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// QQ地图完全遵守TMS规则;</span></span><br><span class="line"><span class="keyword">var</span> tileGrid = <span class="keyword">new</span> ol.tilegrid.TileGrid(&#123;</span><br><span class="line">  resolutions: resolutions3857,</span><br><span class="line">  tileSize: [<span class="number">256</span>, <span class="number">256</span>],</span><br><span class="line">  extent: projection3857Extent,</span><br><span class="line">  origin: ol.extent.getBottomLeft(projection3857Extent), <span class="comment">// Origin左下角</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tilesource = <span class="keyword">new</span> ol.source.TileImage(&#123;</span><br><span class="line">  tileUrlFunction: <span class="function"><span class="keyword">function</span> <span class="params">(xyz, obj1, obj2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!xyz) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> z = xyz[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> x = xyz[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> y = xyz[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"http://rt1.map.gtimg.com/realtimerender?z="</span> + z + <span class="string">"&amp;x="</span> + x + <span class="string">"&amp;y="</span> + y + <span class="string">"&amp;type=vector&amp;style=0&amp;v=1.1.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  projection: projection3857,</span><br><span class="line">  tileGrid : tileGrid</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></em></em></em>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Source和Layer&quot;&gt;&lt;a href=&quot;#Source和Layer&quot; class=&quot;headerlink&quot; title=&quot;Source和Layer&quot;&gt;&lt;/a&gt;Source和Layer&lt;/h1&gt;&lt;p&gt;在前面的例子中，已经对&lt;code&gt;Source&lt;/code&gt;和&lt;code&gt;Layer&lt;/code&gt;有所了解了。比如我们加载了Open Street Map的地图。然而世界上的地图并不只有Open Street Map，还有很多其他的地图，比如Google地图，天地图，高德地图，百度地图等。如果OpenLayers支持的地图来源越多，就会越适用，越强大。除了加载基本的地图之外，GIS还需要加载很多其他的信息，比如街道名称，商店名称，公交站点，道路等等。那么在OpenLayers 3中，具体该如何把这些添加在地图上呢？&lt;/p&gt;
    
    </summary>
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/categories/openLayers/"/>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers 3 LOD与分辨率</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/ch06/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/ch06/index.html</id>
    <published>2018-01-18T12:29:59.000Z</published>
    <updated>2018-01-30T14:08:27.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LOD与分辨率"><a href="#LOD与分辨率" class="headerlink" title="LOD与分辨率"></a>LOD与分辨率</h1><p>LOD是Levels of Detail的简写，用于根据当前的环境，渲染不同的图像，用于降低非重要的细节度，从而提高渲染效率，在电子游戏中经常运用，对于需要显示全球地图的<code>GIS</code>系统而言，更需要应用这项技术。在<a href="../ch05/05-03.md">万能瓦片地图加载秘籍</a>中，有简单的说明。 在不同的细节层次下，自然分辨率就可能不一样，这两者是紧密结合在一起的。 对于图形显示系统而言，分辨率作为屏幕坐标和世界坐标之间计算的纽带，其作用是非常重要的。 本章节将以实例的方式深入浅出的讲解这两个重要的概念，及在OpenLayers 3中的应用。</p><a id="more"></a><h1 id="LOD原理"><a href="#LOD原理" class="headerlink" title="LOD原理"></a>LOD原理</h1><p>在详细讲解之前，假设给你两张A4纸，在其中一张纸上把你家整个绘制上去，在另一张纸上只把你睡的房间绘制上去。如果别人想看你家，你会给哪一张纸？如果想看你睡的房间，你会给哪一张纸？ 相信你不会给错，<code>LOD</code>就是这种根据不同需要，采用不同图的技术方案。在地图应用中，最直观的体验，就是地图放大缩小。当地图放大后，能看到更详细的地理信息，比如街道，商店等等。当地图缩小再缩小，原来能看到的街道，商店就看不见了，当能看到更大的区域，我们的屏幕就相当于是A4纸，大小不变。 </p><p><code>LOD</code>这个技术方案非常棒，非常符合我们的自然习惯，所以在很多图形系统中都使用了这项技术。在GIS系统中，不断放大，就能看到更多地图细节，了解更加详细的信息。对于<code>GIS</code>引擎的开发者而言，需要实现这项技术，当发现用户放大地图时，就立马使用更有细节的地图图片，替换现在显示的地图图片。 现在问题来了：意思是说对于同一个地点而言，需要有很多张呈现不同细节程度的图片？是的，你没有猜错，虽然在使用地图的过程中，感觉放大缩小地图是浑然一体的，但其实就在你眼皮下发生了图片替换。 不同层级使用具有不同细节的地图图片，这就需要为每一个层级准备图片，如果使用离线工具下载瓦片地图，会看到下载的图片是按照层级Z进行存储的。开发者不用担心数据源的处理，只需要知道这个原理就可以了。</p><p>为了便于理解GIS系统中不同层级，使用不同的图片，下面使用google在线瓦片地图进行说明。 最小层级0情况下，只用了一张256*256像素的图片表示整个地球平面：</p><p><img src="../img/googleTiles/0-0-0.png" alt="层级0google地图瓦片"></p><p>稍大一个层级1情况下，用了四张256*256像素的图片来表示整个地球：</p><p><img src="../img/googleTiles/1-0-0.png" alt="层级1google地图瓦片"><img src="../img/googleTiles/1-1-0.png" alt="层级1google地图瓦片"><br><img src="../img/googleTiles/1-0-1.png" alt="层级1google地图瓦片"><img src="../img/googleTiles/1-1-1.png" alt="层级1google地图瓦片"></p><p>对照一下，是否更加的明白了LOD原理及在GIS中的应用？</p><h1 id="瓦片计算"><a href="#瓦片计算" class="headerlink" title="瓦片计算"></a>瓦片计算</h1><p>不同环境条件下，加载具有不同细节的图片资源，可以提高效率，但这并不是终点。 瓦片技术可以更进一步提高效率。 其原理是将一张大图片切割成很多张小图片，按照呈现需要，加载其中的几张小图片即可。 为什么这样就能提高效率？因为屏幕显示窗口的大小是固定，比如屏幕分辨率是800*600，或者1024*768，又或者是1920*800等等。如果屏幕分辨率是800*600，一张大图是9000*9000，那么同一时间，你只能看到这张图片的十分之一。 但是在不切片的情况下，你却必须要加载整个地图。 如果是在本地浏览还好，假如是发布在网络上，则网络传输和渲染，都将耗时。如果我们按照500*500大小进行切片，我们则只需要加载4张500*500的小图片就可以了。 对于<code>WebGIS</code>而言，需要在网络上发布，同时需要显示整个地球，自然需要使用瓦片技术。</p><h2 id="切片方式"><a href="#切片方式" class="headerlink" title="切片方式"></a>切片方式</h2><p>如果对整个地球图片进行切片，需要考虑的是整个地球图片大小，以及切片规则，切片大小。 对于<code>WebGIS</code>而言，在线地图几乎都采用墨卡托投影坐标系(Mercator)，对应的地图投影到平面上就是一个正方形。 为了方便使用，切片时大多按照正方形的方式来进行切片，比如切片大小为256*256。一个1024*1024的地图，就可以切成4张小的瓦片。 同时，瓦片大小几乎都是256*256，有一些则会增加到512*512。</p><p>LOD会使得不同层级下的全球地图大小不一致，结合瓦片技术一起，就出现了金字塔瓦片。 参见<a href="../ch05/05-03.md">万能瓦片地图加载秘籍</a>里面的图。 在<code>WebGIS</code>中，上一层级的一张瓦片，在更大一层级中，会用4张瓦片来表示，依次类推，比如上一节中看到的Google在线瓦片地图的第0级和第1级的瓦片地图。 这样做可以维持正方形的投影方式不变，同时按照2的幂次方放大，计算效率非常高。</p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>通过上面切片的介绍，我们可以对每一层级瓦片的数量进行简单的计算。 层级0的瓦片数是$$1=2^0<em>2^0$$， 层级1的瓦片数是$$4=2^1</em>2^1$$，层级n的瓦片数是$$2^n*2^n$$。 这个地方计算的是所有瓦片数，因为是一个正方形，所以是边长的平方，如只计算x轴或者y轴一边的瓦片数，就是$$2^n$$个。</p><h2 id="瓦片坐标"><a href="#瓦片坐标" class="headerlink" title="瓦片坐标"></a>瓦片坐标</h2><p>任意一个层级的地图，切成多个瓦片后，我们需要给瓦片编号，才能通过编号找到瓦片。这个问题在这就涉及到坐标系，在<a href="../ch05/05-03.md">万能瓦片地图加载秘籍</a>里我们提到过，不同的在线地图服务商，可能定义不一样的瓦片坐标系，坐标系不一样，那么对应的同一个位置的瓦片的坐标也会不一样。 需要引起重视。</p><p>在OpenLayers 3提供了一个用于调试瓦片的<code>source</code>: <code>ol.source.TileDebug</code>。可以清晰的看到每一个瓦片的坐标：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">    var osmSource = new ol.source.OSM();    var map = new ol.Map({    layers: [      new ol.layer.Tile({        source: osmSource      }),      new ol.layer.Tile({        source: new ol.source.TileDebug({          projection: 'EPSG:3857',          tileGrid: osmSource.getTileGrid()        })      })    ],    target: 'map',    view: new ol.View({      center: ol.proj.transform(          [104, 30], 'EPSG:4326', 'EPSG:3857'),      zoom: 10    })});</script><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> osmSource = <span class="keyword">new</span> ol.source.OSM();</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 加载Open Street Map地图</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="undefined">    source: osmSource</span></span><br><span class="line"><span class="undefined">  &#125;),</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 添加一个显示Open Street Map地图瓦片网格的图层</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.TileDebug(&#123;</span></span><br><span class="line"><span class="actionscript">      projection: <span class="string">'EPSG:3857'</span>,</span></span><br><span class="line"><span class="undefined">      tileGrid: osmSource.getTileGrid()</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先从上图可以看到地图上多了网格，每一个网格对应的就是一个瓦片。 其次网格中有三个数字，这些数字就表示当前瓦片的坐标，第一个数字是层级z，第二个数字是表示经度方向上的x，第三个数字是表示维度方向上的y。 同样的，可以采用上面的方式来看看在<a href="../ch05/05-03.md">万能瓦片地图加载秘籍</a>中提到的各种瓦片地图的瓦片坐标。</p><h1 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h1><p>前面简单提到过，分辨率是屏幕坐标和世界坐标的纽带，通过它，才能知道你在屏幕上用鼠标点击的位置对应于世界地图具体的经纬度位置。 当然你不用自己来做这个计算，OpenLayers 3的<code>ol.Map</code>已提供了对应的方法<code>getCoordinateFromPixel</code>来帮助你实现坐标转换。 你可能经常使用这个函数，但却不知道背后是怎样的一个原理，本小节将理清其中的来龙去脉。</p><p>上一节说到了每一个层级，会使用不同的瓦片数来表示整个地球，那么无论是哪一个层级，所表示的实际地理空间范围都是一致的。但使用的瓦片个数却是不一样的，以Google在线地图为例，层级0使用了一个瓦片，层级1使用了4个瓦片。 通过计算可以知道层级0整个地球图像为$$256<em>256$$像素大小，层级1整个地球图像为$$512</em>512$$像素大小。 层级0和层级1表示的地球范围都是一样的经度[-180, 180]，纬度[-90, 90]。 在层级0的时候，一个像素就表示$$\frac{360}{256} = 1.40625$$这么长的经度范围，$$\frac{180}{256}=0.703125$$这么长的纬度范围。 而这两个数字就是分辨率了，即一个像素所表达的范围是多少，这个范围可能是度，可能是米，或者其他单位，根据具体的情况而定。</p><h2 id="墨卡托投影坐标系下的分辨率"><a href="#墨卡托投影坐标系下的分辨率" class="headerlink" title="墨卡托投影坐标系下的分辨率"></a>墨卡托投影坐标系下的分辨率</h2><p>我们知道，在<code>WebGis</code>中使用的在线瓦片地图是采用的墨卡托(Mercator)投影坐标系，经过投影后，整个地球是一个正方形，所能表示的地球范围为经度[-180, 180]，纬度[-85, 85]，单位为度。 对应的墨卡托坐标系的范围x[-20037508.3427892, 20037508.3427892]，范围y同样是[-20037508.3427892, 20037508.3427892]，单位为m。 或许你会好奇这个范围是怎么计算而来的，如果详细了解过它的定义，应该知道墨卡托只是简单的把地球球面剖开拉伸为一个正方形而来，由于南北极两端采用这种拉伸会严重变形，并且南北极在使用过程中很少用到，所以干脆就只投影了[-85, 85]纬度范围的地球。 而展开时，因为纬度范围有缩减，所以肯定只能以经度来展开，即在经度-180度的地方从上到下剖开地球，然后按照赤道方向来展开成一张平面，那么这个平面的长，就等于以地球赤道半径按照圆来计算的周长。 近似的按照6378137米为半径来计算，那么整个赤道周长的一半，即为</p><blockquote><p>$$\pi<em>r=3.1415926</em>6378137=20037508.0009862$$</p></blockquote><p>以上就是墨卡托投影坐标系范围的完整的计算过程，墨卡托也有很多变形，会有细微的不同，OpenLayers 3默认使用的是EPSG:3857，对于该坐标系的详细定义，可以参见<a href="http://epsg.io/3857" target="_blank" rel="noopener">epsg.io 3867</a>。 </p><p>有了范围之后，要想计算分辨率，按照上面的计算过程就非常简单了，还是以Google在线瓦片地图为例，x方向上的分辨率计算公式可以归纳为：</p><blockquote><p>$$ resolution = \frac{rangeX}{256*2^{level}}$$</p></blockquote><p><code>rangeX</code>表示x方向上整个范围，比如 $$20037508.3427892 - (-20037508.3427892)$$，256表示的一个瓦片的宽度，单位为像素，$$2^{level}$$表示的在层级<code>level</code>下，x方向上的瓦片个数。 那么分母计算出来的结果就是在层级level下，整个地图在x方向上的宽度，单位为像素。 那么整个公式计算出来就是在x方向上一个像素所能代表的实际地理范围，即分辨率。</p><h2 id="OpenLayers默认使用的分辨率"><a href="#OpenLayers默认使用的分辨率" class="headerlink" title="OpenLayers默认使用的分辨率"></a>OpenLayers默认使用的分辨率</h2><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><p><div><span>当前层级：</span><span id="zoom"></span><span>分辨率：</span><span id="resolution"></span></div></p><script type="text/javascript">    var map = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    map.getView().on('change:resolution', function(){        document.getElementById('zoom').innerHTML =  this.getZoom() + '，';        document.getElementById('resolution').innerHTML = this.getResolution();    })    document.getElementById('zoom').innerHTML = map.getView().getZoom() + '，';    document.getElementById('resolution').innerHTML = + map.getView().getResolution();</script><p>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>当前层级：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"zoom"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>分辨率：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"resolution"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 监听层级变化，输出当前层级和分辨率</span></span></span><br><span class="line"><span class="actionscript">map.getView().on(<span class="string">'change:resolution'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'zoom'</span>).innerHTML =  <span class="keyword">this</span>.getZoom() + <span class="string">'，'</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'resolution'</span>).innerHTML = <span class="keyword">this</span>.getResolution();</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'zoom'</span>).innerHTML = map.getView().getZoom() + <span class="string">'，'</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'resolution'</span>).innerHTML = + map.getView().getResolution();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>缩放上面的地图，从层级0开始，用前面介绍的公式和当前地图显示的分辨率进行比较，你会发现OpenLayers默认采用的分辨率和Google在线瓦片地图一样。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>为什么我们上面一直以Google在线瓦片地图举例说明？ 因为不同的在线瓦片地图可能采用不一样的分辨率，比如百度在线瓦片地图。 所以在使用在线瓦片地图或者自己制作的瓦片地图时，都需要知道使用的分辨率是多少。 如若不然，可能也会出现位置偏移。 </p><h1 id="自定义瓦片地图及加载"><a href="#自定义瓦片地图及加载" class="headerlink" title="自定义瓦片地图及加载"></a>自定义瓦片地图及加载</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LOD与分辨率&quot;&gt;&lt;a href=&quot;#LOD与分辨率&quot; class=&quot;headerlink&quot; title=&quot;LOD与分辨率&quot;&gt;&lt;/a&gt;LOD与分辨率&lt;/h1&gt;&lt;p&gt;LOD是Levels of Detail的简写，用于根据当前的环境，渲染不同的图像，用于降低非重要的细节度，从而提高渲染效率，在电子游戏中经常运用，对于需要显示全球地图的&lt;code&gt;GIS&lt;/code&gt;系统而言，更需要应用这项技术。在&lt;a href=&quot;../ch05/05-03.md&quot;&gt;万能瓦片地图加载秘籍&lt;/a&gt;中，有简单的说明。 在不同的细节层次下，自然分辨率就可能不一样，这两者是紧密结合在一起的。 对于图形显示系统而言，分辨率作为屏幕坐标和世界坐标之间计算的纽带，其作用是非常重要的。 本章节将以实例的方式深入浅出的讲解这两个重要的概念，及在OpenLayers 3中的应用。&lt;/p&gt;
    
    </summary>
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/categories/openLayers/"/>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers 3 动画</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/ch11/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/ch11/index.html</id>
    <published>2018-01-18T12:29:59.000Z</published>
    <updated>2018-01-30T14:09:04.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p>在OpenLayers 3中，动画是随处可见的，比如平移地图时，地图移动会有惯性，停止移动后，还会继续沿着之前的方向移动一会。 比如下面这个地图具有回到原始点的功能，一个是有动画效果的，一个是没有动画效果的。</p><a id="more"></a><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><p><input type="button" value="回到原点-不带动画" onclick="backNoAnim()"></p><p><input type="button" value="回到原点-带动画" onclick="backWithAnim()"></p><script type="text/javascript">    var map = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    function backNoAnim() {    map.getView().setCenter(ol.proj.transform([104, 30], 'EPSG:4326', 'EPSG:3857'));    }    function backWithAnim() {        var pan = ol.animation.pan({      duration: 2000,      source: map.getView().getCenter()    });    map.beforeRender(pan);    map.getView().setCenter(ol.proj.transform([104, 30], 'EPSG:4326', 'EPSG:3857'));    }</script><p>先把地图移动到北京，再点击下方的两个按钮，感受一下带动画，和不带动画的差别，绝大多数人还是会喜欢带动画的。 无疑，动画具有很大的吸引力。 本章节将把你带入OpenLayers 3的动画世界，让你也能应用动画效果，做出漂亮的效果。</p><h1 id="动画简单应用"><a href="#动画简单应用" class="headerlink" title="动画简单应用"></a>动画简单应用</h1><p>前面那个回到原点的动画，使用了OpenLayers 3内置的动画效果，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--增加两个按钮，一个演示不带动画，一个演示带动画--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"回到原点-不带动画"</span> <span class="attr">onclick</span>=<span class="string">"backNoAnim()"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"回到原点-带动画"</span> <span class="attr">onclick</span>=<span class="string">"backWithAnim()"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 不带动画的实现</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">backNoAnim</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    map.getView().setCenter(ol.proj.transform([<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>));</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 带动画的实现</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">backWithAnim</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 注意： 应用内置的动画，实现平移动画</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> pan = ol.animation.pan(&#123;</span></span><br><span class="line"><span class="undefined">      duration: 2000,</span></span><br><span class="line"><span class="undefined">      source: map.getView().getCenter()</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 注意： 使用beforeRender来添加</span></span></span><br><span class="line"><span class="undefined">    map.beforeRender(pan);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 然后才是重新设置地图中心点到原来的位置</span></span></span><br><span class="line"><span class="actionscript">    map.getView().setCenter(ol.proj.transform([<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>));</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关键的代码始终在最后，结合注释，应该可以理解。 我们使用的内置动画是<code>ol.animation.pan</code>，用于平移动画，更详细的信息请参考<a href="http://openlayers.org/en/v3.13.1/apidoc/ol.animation.html#.pan" target="_blank" rel="noopener">官网API</a>。 可以看到它是一个函数，返回一个<code>ol.PreRenderFunction</code>，添加到<code>ol.Map</code>，从而在渲染的时候使用，实现动画。 </p><p>除了上面应用的动画之外，还有一些内置的动画，都在<code>ol.animation</code>里面，从官网API可以看到，包括：</p><ul><li><code>ol.animation.bounce</code>: 来回弹。</li><li><code>ol.animation.pan</code>: 平移。</li><li><code>ol.animation.rotate</code>: 旋转。</li><li><code>ol.animation.zoom</code>: 缩放。</li></ul><p>这些动画都可以尝试，或许就有你需要的。 </p><h1 id="动画高阶应用"><a href="#动画高阶应用" class="headerlink" title="动画高阶应用"></a>动画高阶应用</h1><p>虽然内置动画并不多，但是细心的同学已经发现了内置动画有个参数<code>easing</code>，这是一个强大的参数，因为可以让开发者自定义动画实现，从而实现动画效果的扩展。 其实已经内置了一些相关的实现，在<code>ol.easing</code>里面，涉及到一些常用的效果，包括：</p><ul><li><code>ol.easing.easeIn</code>: 加速</li><li><code>ol.easing.easeOut</code>: 减速</li><li><code>ol.easing.inAndOut</code>: 先加速再减速</li><li><code>ol.easing.linear</code>: 匀速</li><li><code>ol.easing.upAndDown</code>: 和inAndOut类似</li></ul><p>在前面的地图的基础上修改一下，让大家体验一下不同的动画的效果：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><p><select id="easing-type"><br>    <option>easeIn</option><br>    <option>easeOut</option><br>    <option>inAndOut</option><br>    <option>linear</option><br>    <option>upAndDown</option><br></select></p><p><input type="button" value="回到原点" onclick="backWithAnim();"></p><script type="text/javascript">    var map = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    function backNoAnim() {    map.getView().setCenter(ol.proj.transform([104, 30], 'EPSG:4326', 'EPSG:3857'));    }    function getEasing() {        var typeSelect = document.getElementById('easing-type');        var easing = typeSelect.options[typeSelect.selectedIndex].text;        if (easing === 'easeIn') {            return ol.easing.easeIn;        } else if (easing === 'easeOut') {            return ol.easing.easeOut;        } else if (easing === 'inAndOut') {            return ol.easing.inAndOut;        } else if (easing === 'linear') {            return ol.easing.linear;        } else if (easing === 'upAndDown') {            return ol.easing.upAndDown;        }     }    function backWithAnim() {        var pan = ol.animation.pan({      duration: 2000,      source: map.getView().getCenter(),      easing: getEasing()    });    map.beforeRender(pan);    map.getView().setCenter(ol.proj.transform([104, 30], 'EPSG:4326', 'EPSG:3857'));    }</script><p>尝试完所有的动画方式后，可以看一下其实现代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加动画效果选择项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span> = <span class="string">"easing-type"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>easeIn<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>easeOut<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>inAndOut<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>linear<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>upAndDown<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"回到原点"</span> <span class="attr">onclick</span>=<span class="string">"backWithAnim()"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 根据选择项，返回对应的动画，供下面的backWithAnim函数使用</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">getEasing</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> typeSelect = <span class="built_in">document</span>.getElementById(<span class="string">'easing-type'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> easing = typeSelect.options[typeSelect.selectedIndex].text;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span> (easing === <span class="string">'easeIn'</span>) &#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> ol.easing.easeIn;</span></span><br><span class="line"><span class="actionscript">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (easing === <span class="string">'easeOut'</span>) &#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> ol.easing.easeOut;</span></span><br><span class="line"><span class="actionscript">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (easing === <span class="string">'inAndOut'</span>) &#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> ol.easing.inAndOut;</span></span><br><span class="line"><span class="actionscript">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (easing === <span class="string">'linear'</span>) &#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> ol.easing.linear;</span></span><br><span class="line"><span class="actionscript">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (easing === <span class="string">'upAndDown'</span>) &#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> ol.easing.upAndDown;</span></span><br><span class="line"><span class="undefined">&#125; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">backWithAnim</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> pan = ol.animation.pan(&#123;</span></span><br><span class="line"><span class="undefined">      duration: 2000,</span></span><br><span class="line"><span class="undefined">      source: map.getView().getCenter(),</span></span><br><span class="line"><span class="actionscript">      easing: getEasing()<span class="comment">// 设置对应选择的动画</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    map.beforeRender(pan);</span></span><br><span class="line"><span class="actionscript">    map.getView().setCenter(ol.proj.transform([<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>));</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过上面这种方法，我们完全可以自定义动画函数，通过官网API文档可知，这些函数有一个参数<code>t</code>，范围在0-1之间，然后函数返回一个0-1之间的数。 结合动画业务来看，虽然官网没有说明参数表示什么意思，但是我们可以猜测它就是时间，返回的值应该目标达成比。 下面我们自己来实现一个sin曲线式的动画：</p><p><div id="map2" style="width: 100%"></div></p><p><input type="button" value="回到原点" onclick="backWithAnim2();"></p><script type="text/javascript">    var map2 = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map2',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    // sin曲线动画    function sin(t) {        // 使用sin曲线公式        return Math.sin(t * Math.PI / 2);    }    function backWithAnim2() {        var pan = ol.animation.pan({      duration: 2000,      source: map2.getView().getCenter(),      easing: sin    });    map2.beforeRender(pan);    map2.getView().setCenter(ol.proj.transform([104, 30], 'EPSG:4326', 'EPSG:3857'));    }</script><p>速度一开始会快一点，然后慢下来， 对应的代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map2"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"回到原点"</span> <span class="attr">onclick</span>=<span class="string">"backWithAnim2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map2 = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map2'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// sin曲线动画</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">sin</span><span class="params">(t)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 使用sin曲线公式</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">Math</span>.sin(t * <span class="built_in">Math</span>.PI / <span class="number">2</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">backWithAnim2</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> pan = ol.animation.pan(&#123;</span></span><br><span class="line"><span class="undefined">      duration: 2000,</span></span><br><span class="line"><span class="undefined">      source: map2.getView().getCenter(),</span></span><br><span class="line"><span class="actionscript">      easing: sin <span class="comment">// 应用sin曲线动画</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    map2.beforeRender(pan);</span></span><br><span class="line"><span class="actionscript">    map2.getView().setCenter(ol.proj.transform([<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>));</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="利用postcompose事件做动画"><a href="#利用postcompose事件做动画" class="headerlink" title="利用postcompose事件做动画"></a>利用postcompose事件做动画</h1><p>前面的内置动画，几乎都是和地图浏览相关的，很多时候我们有更多的动画需求，在此向大家介绍另一种可以做出动画的方式。 那就是利用<code>ol.Map</code>的<code>postcompose</code>事件，这个事件在地图渲染时都会触发，而我们只要改变地图上的某个<code>feature</code>或者<code>layer</code>或者其他任何东西，就会触发重新渲染。 如果利用这个原理，我们不断的改变<code>feature</code>的样式，就会触发<code>postcompose</code>，在这个事件的监听器里再改变<code>feature</code>的样式，就又会触发<code>postcompose</code>，从而一只循环下去，出现动画效果。  比如像下面这样：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">    var layer = new ol.layer.Vector({        source: new ol.source.Vector()    })    var map = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          }),          layer        ],        target: 'map',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    var circle = new ol.Feature({        geometry: new ol.geom.Point(ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'))    });    circle.setStyle(new ol.style.Style({        image: new ol.style.Circle({            radius: 0,            stroke: new ol.style.Stroke({                color: 'red',                size: 1            })        })    }));    layer.getSource().addFeature(circle);    var radius = 0;    map.on('postcompose', function(){        radius++;        radius = radius % 20;        circle.setStyle(new ol.style.Style({            image: new ol.style.Circle({                radius: radius,                stroke: new ol.style.Stroke({                    color: 'red',                    size: 1                })            })        }));    })</script><p>地图中间的小圆圈，不断的重复变大动画，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector()</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;),</span></span><br><span class="line"><span class="undefined">  layer</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> circle = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">geometry: <span class="keyword">new</span> ol.geom.Point(ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>))</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="actionscript">circle.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: 0,</span></span><br><span class="line"><span class="actionscript">stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">size: 1</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="undefined">layer.getSource().addFeature(circle);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 关键的地方在此：监听postcompose事件，在里面重新设置circle的样式</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> radius = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">map.on(<span class="string">'postcompose'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 增大半径，最大20</span></span></span><br><span class="line"><span class="undefined">radius++;</span></span><br><span class="line"><span class="undefined">radius = radius % 20;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置样式</span></span></span><br><span class="line"><span class="actionscript">circle.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: radius,</span></span><br><span class="line"><span class="actionscript">stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">size: 1</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用过<code>Javascript</code>做动画的同学可能会想，为什么弄的这么麻烦，直接用<code>requestAnimationFrame</code>不就行了？ 是的，我也这么认为，这个会比较简单，但如果你非要用OpenLayers 3的事件，也就可以照着上面的方式来实现动画了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动画&quot;&gt;&lt;a href=&quot;#动画&quot; class=&quot;headerlink&quot; title=&quot;动画&quot;&gt;&lt;/a&gt;动画&lt;/h1&gt;&lt;p&gt;在OpenLayers 3中，动画是随处可见的，比如平移地图时，地图移动会有惯性，停止移动后，还会继续沿着之前的方向移动一会。 比如下面这个地图具有回到原始点的功能，一个是有动画效果的，一个是没有动画效果的。&lt;/p&gt;
    
    </summary>
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/categories/openLayers/"/>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers 3 介绍</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/ch01/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/ch01/index.html</id>
    <published>2018-01-18T12:29:59.000Z</published>
    <updated>2018-01-30T14:06:44.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenLayers-3-介绍"><a href="#OpenLayers-3-介绍" class="headerlink" title="OpenLayers 3 介绍"></a>OpenLayers 3 介绍</h1><p>OpenLayers 3简称ol3，它是一个开源的Web GIS引擎，使用了JavaScript、最新的HTML5技术及CSS技术，支持<code>dom</code>，<code>canvas</code>和<code>webgl</code>三种渲染方式。除了支持网页端，还支持移动端（目前移动端还不成熟，有待进一步完善）。在地图数据源方面，支持各种类型的瓦片地图，既支持在线的，也支持离线的。比如OSM, Bing, MapBox, Stamen, MapQuest等等；还支持各种矢量地图，比如GeoJSON，TopoJSON，KML，GML等等。随着OpenLayers 3的进一步发展，将支持更多的地图类型。</p><a id="more"></a><h2 id="不兼容OpenLayers-2"><a href="#不兼容OpenLayers-2" class="headerlink" title="不兼容OpenLayers 2"></a>不兼容OpenLayers 2</h2><p>在OpenLayers 3之前，还有OpenLayers 2，虽然从名字上看是一个升级版本，但OpenLayers 3完全是重新设计，采用全新的架构，使用方式及API都不一样，只是在功能上完全实现OpenLayers 2已有的功能。为此，使用OpenLayers 3不必先学习OpenLayers 2。但使用过OpenLayers 2，并不等于直接就会用OpenLayers 3，仍然需要从零开始学习。</p><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p>由于OpenLayers 3使用了HTML5技术，所以对各种浏览器的版本有所要求。IE浏览器最低也需要IE9才行，以下的IE浏览器可以考虑使用OpenLayers 2。其他浏览器的最低版本要求为Firefox 3.5，Chrome 3.0，Safari 3.0，Opera 10.5。如果要使用<code>webgl</code>渲染方式，则又需要参考各大浏览器的支持程度进行选择。</p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ul><li>OpenLayers 3采用面向对象的编程范式，类在API中随处可见，比如<code>ol.Map</code>，<code>ol.View</code>等等。如果你有面向对象的思维，将较为容易的理解API及使用。</li><li>OpenLayers 3采用包管理的方式管理代码，比如<code>layer</code>的包名为<code>ol.layer</code>，命名方式类似于JAVA的包名。这源于OpenLayers 3采用了Google的<a href="https://developers.google.com/closure/library/" target="_blank" rel="noopener">Closure库</a>。</li><li>OpenLayers 3采用<a href="http://baike.baidu.com/link?url=-N6ZFy7Q1645xbSZxDwv6CEluYjnBX2mn8hA3cabF0VNZiHnrPyRonRAqEr4GYXBte0GH0BzaIkZOFQFatV5tK" target="_blank" rel="noopener">驼峰式(Camel-Case)命名</a>，变量名采用小驼峰命名，类名使用大驼峰命名。</li></ul><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>OpenLayers 3的官网是<a href="http://openlayers.org/" target="_blank" rel="noopener">http://openlayers.org/</a>，若记不住，请保存到收藏夹。在官网首页上，即可看到相关的介绍，文档，API，以及Examples链接。这些资料都跟随最新的版本实时更新，如果发现本教程有些内容和官方不一致，请以官网资料为准，可能由于版本更新导致的。</p><p>喜欢研究源码的开发者，请关注github <a href="https://github.com/openlayers/ol3" target="_blank" rel="noopener">https://github.com/openlayers/ol3</a>。有能力者，可以考虑为OpenLayers 3提交PR和issue，不过在此之前请先阅读<a href="https://github.com/openlayers/ol3/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener">贡献文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OpenLayers-3-介绍&quot;&gt;&lt;a href=&quot;#OpenLayers-3-介绍&quot; class=&quot;headerlink&quot; title=&quot;OpenLayers 3 介绍&quot;&gt;&lt;/a&gt;OpenLayers 3 介绍&lt;/h1&gt;&lt;p&gt;OpenLayers 3简称ol3，它是一个开源的Web GIS引擎，使用了JavaScript、最新的HTML5技术及CSS技术，支持&lt;code&gt;dom&lt;/code&gt;，&lt;code&gt;canvas&lt;/code&gt;和&lt;code&gt;webgl&lt;/code&gt;三种渲染方式。除了支持网页端，还支持移动端（目前移动端还不成熟，有待进一步完善）。在地图数据源方面，支持各种类型的瓦片地图，既支持在线的，也支持离线的。比如OSM, Bing, MapBox, Stamen, MapQuest等等；还支持各种矢量地图，比如GeoJSON，TopoJSON，KML，GML等等。随着OpenLayers 3的进一步发展，将支持更多的地图类型。&lt;/p&gt;
    
    </summary>
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/categories/openLayers/"/>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的地图</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/ch02/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/ch02/index.html</id>
    <published>2018-01-18T12:29:59.000Z</published>
    <updated>2018-01-30T14:07:41.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个简单的地图"><a href="#一个简单的地图" class="headerlink" title="一个简单的地图"></a>一个简单的地图</h1><p>在有了初步了解之后，从本节开始，我们将直接进入主题，体验一下使用OpenLayers 3做地图的难度，及地图的外观和功能：</p><a id="more"></a><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><body><br>    <div id="map" style="width: 100%"></div><br>    <script><br>      new ol.Map({<br>            layers: [<br>                new ol.layer.Tile({source: new ol.source.OSM()})<br>            ],<br>            view: new ol.View({<br>                center: [0, 0],<br>                zoom: 2<br>            }),<br>            target: ‘map’<br>      });<br>    </script><br></body><p>要显示上面这个地图，仅需要新建一个html文档，在其中编写如下代码即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!Doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">http://www.w3.org/1999/xhtml</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>                  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">Content-Type</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">X-UA-Compatible</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">always</span> <span class="attr">name</span>=<span class="string">referrer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>OpenLayers 3地图示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../ol3.13.1/ol.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../src/ol3.13.1/ol.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置地图图层</span></span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建一个使用Open Street Map地图源的瓦片图层</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;source: <span class="keyword">new</span> ol.source.OSM()&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置显示地图的视图</span></span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">  center: [<span class="number">0</span>, <span class="number">0</span>],<span class="comment">// 定义地图显示中心于经度0度，纬度0度处</span></span></span><br><span class="line"><span class="actionscript">  zoom: <span class="number">2</span><span class="comment">// 并且定义地图显示层级为2</span></span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 让id为map的div作为地图的容器</span></span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要想使用OpenLayers 3开发地图，首先你需要引入了OpenLayers 3的js库文件ol3.js及样式文件ol3.css，参见代码中html头部。它们可以在<a href="https://github.com/openlayers/ol3/releases" target="_blank" rel="noopener">github</a>上下载到。 请注意，每一个版本，都有4个下载链接，如果你不需要研究源码和例子，只用下载第一个 v*-dist.zip，下载解压后，里面包含<code>ol.css</code>，<code>ol.js</code>，<code>ol-debug.js</code>这三个文件，在初学时，尽量使用<code>ol-debug.js</code>，如果发生错误，堆栈信息更为可读，便于排查问题。 如果需要学习和研究源码，可以下载后面的三个文件，但注意，需要自己编译生成<code>ol.css</code>，<code>ol.js</code>，<code>ol-debug.js</code>，切不可直接使用源码中的同名文件。</p><p><strong>注意：</strong> 上面这个段代码注明html文件编码为utf-8，所以你新建的html文件本身编码需要保证为utf-8，不然会导致中文乱码。</p><p>紧接着就是使用OpenLayers 3的API创建地图，对应于<code>&lt;script&gt;...&lt;/script&gt;</code>代码块，如代码所见，7行代码就搞定了，是不是非常的简单？！至于代码的含义，可以暂时参照代码中的注释来理解。 看不懂也没有关系，接下来我们将详细的介绍它们。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一个简单的地图&quot;&gt;&lt;a href=&quot;#一个简单的地图&quot; class=&quot;headerlink&quot; title=&quot;一个简单的地图&quot;&gt;&lt;/a&gt;一个简单的地图&lt;/h1&gt;&lt;p&gt;在有了初步了解之后，从本节开始，我们将直接进入主题，体验一下使用OpenLayers 3做地图的难度，及地图的外观和功能：&lt;/p&gt;
    
    </summary>
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/categories/openLayers/"/>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers 3地图</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/ch03/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/ch03/index.html</id>
    <published>2018-01-18T12:29:59.000Z</published>
    <updated>2018-01-30T14:07:55.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenLayers-3地图"><a href="#OpenLayers-3地图" class="headerlink" title="OpenLayers 3地图"></a>OpenLayers 3地图</h1><p>本章节将围绕前面那个简单的地图展开，从源码分析入手，逐步延伸到地图组成部分的分析，并学会借助API文档来帮助我们理解。 在此基础上，还提供了一些关于<code>ol.Map</code>类的应用实例，以帮助大家进一步的实践，为接下来更深入的学习和使用打下坚实的基础。</p><a id="more"></a><h1 id="初步解析地图组成"><a href="#初步解析地图组成" class="headerlink" title="初步解析地图组成"></a>初步解析地图组成</h1><p>创建地图的代码如此简单，以致于让一部分初学者误认为在此基础上的深入开发也很简单，这是一个非常错误的理解。此时，最关键的第一步是先弄明白每一句代码的含义，理解他们是如何组织起来的。否则，在后续的学习和使用过程中，犹如瞎子摸象，会找不到问题的关键点而迷失方向。让我们再次回顾一下之前那个简单地图的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建地图</span></span><br><span class="line"> <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line"><span class="comment">// 设置地图图层</span></span><br><span class="line">layers: [</span><br><span class="line">  <span class="comment">// 创建一个使用Open Street Map地图源的瓦片图层</span></span><br><span class="line">  <span class="keyword">new</span> ol.layer.Tile(&#123;<span class="attr">source</span>: <span class="keyword">new</span> ol.source.OSM()&#125;)</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 设置显示地图的视图</span></span><br><span class="line">view: <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">  center: [<span class="number">0</span>, <span class="number">0</span>],<span class="comment">// 定义地图显示中心于经度0度，纬度0度处</span></span><br><span class="line">  zoom: <span class="number">2</span><span class="comment">// 并且定义地图显示层级为2</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">// 让id为map的div作为地图的容器</span></span><br><span class="line">target: <span class="string">'map'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意，其实上面这段代码就只有一条语句:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ol.Map(&#123;...&#125;);</span><br></pre></td></tr></table></figure></p><p>其他代码只是用于设置地图的构造参数。由此可以推测出<code>ol.Map</code>是最主要的地图类，创建地图就需要构造这么一个对象。接下来依次分析每一个参数部分的代码。</p><ul><li>参数<code>layers</code>:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">layers: [</span><br><span class="line">  <span class="comment">// 创建一个使用Open Street Map地图源的瓦片图层</span></span><br><span class="line">  <span class="keyword">new</span> ol.layer.Tile(&#123;<span class="attr">source</span>: <span class="keyword">new</span> ol.source.OSM()&#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li></ul><p>从名字和具体的值可见这个地方可以设置多个<code>layer</code>，它是OpenLayers 3地图的组成结构单元，地图是由多个<code>layer</code>组成的，这种设计类似于Photoshop里面的图层，多个图层是可以叠加的，在最上面的会覆盖下面的，以此类推。在代码中我们添加了一个<a href="http://www.openstreetmap.org/" target="_blank" rel="noopener">Open Street Map</a>的地图<code>layer</code>。</p><ul><li>参数<code>view</code>：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">view: <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">  center: [<span class="number">0</span>, <span class="number">0</span>],<span class="comment">// 定义地图显示中心于经度0度，纬度0度处</span></span><br><span class="line">  zoom: <span class="number">2</span><span class="comment">// 并且定义地图显示层级为2</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></li></ul><p>通过字面意思可以看出，它为地图定义显示窗口，对应<code>ol.View</code>类，可以自定义地图显示的中心点，缩放层级等。</p><ul><li>参数<code>target</code>：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target: <span class="string">'map'</span></span><br></pre></td></tr></table></figure></li></ul><p>指定地图在页面中具体哪个位置进行显示，为此要记住地图显示还是离不开使用dom来实现。虽然和地图业务没什么关系，但也必不可少，因为它是<code>Web GIS</code>，最基本的还是依赖于HTML。</p><p>通过上面的源码解读，我们可以发现OpenLayers 3地图主要是由<code>layer</code>和<code>view</code>组成，<code>layer</code>可以有多个，<code>view</code>只能有一个。<br><img src="../img/map_structure.png" alt="图解地图组成"></p><p>上图能明确看到的是<code>layer</code>，看不出<code>view</code>在哪儿，只知道地图显示中心确实在经度0，纬度0处。除此之外，还能看到左上角的放大缩小按钮，以及右下角的属性信息按钮。如果在地图上双击鼠标左键，或者按住鼠标左键拖动，可以看到地图也是会放大或者移动的。这些都是分析代码并没有看到的。很明显OpenLayers 3有很多默认行为，一个地图的完整构成，远不是只有<code>view</code>和<code>layer</code>就行了。</p><h1 id="地图所有组成部分"><a href="#地图所有组成部分" class="headerlink" title="地图所有组成部分"></a>地图所有组成部分</h1><p>那么OpenLayers 3究竟由哪些部分组成？下面就将核心组成部分一一罗列出来：</p><ul><li>地图(Map)，对应的类是<code>ol.Map</code>，之前已有接触。从代码上来看，它就像是一个空壳子，感觉没做什么实事，因为具体事务都由其他组成部分处理了。但没有它，整个地图的其他组成部分就不能有效协调，组织在一起。同时对于开发者而言，它就是第一个入口，我们必须要掌握。</li><li>视图(View)，对应的类是<code>ol.View</code>，之前已有接触，控制地图显示的中心位置，范围，层级等，此处不再过多介绍。关于其详细说明参见<a href="../ch04/index.md">View</a>。</li><li>图层(Layer)，OpenLayers 3有多种多样用于不同业务的图层，每一种图层在实现上都对应于一个类，放在包<code>ol.layer</code>下面，之前已接触过的<code>ol.layer.Tile</code>就是其中的一种。OpenLayers 3允许多个<code>layer</code>重叠在一起，相互之间互不干扰，是一种图形显示和管理的有效方式。应用这种方式能有效处理地图数据来源的多样性和复杂性问题。对开发者而言，它更多的表现为组织管理的类。</li><li>数据源(Source)，它是和图层一一对应的，OpenLayers 3也存在多种不同的数据源，每一种在实现上也对应于一个具体的类，它们都放在包<code>ol.source</code>下面，之前接触过的<code>ol.source.OSM</code>就是其中的一种。 毫无 疑问，它是整个地图背后真正的核心。 如果没有数据，那么渲染引擎将没有任何价值。在数据技术(Data Technology)大行其道的今天，GIS引擎将需要支持各式各样的数据来源。目前ol3也确实是这样做的，已支持多种多样在线或离线的数据源；可以是静态图或者瓦片图；也可以是栅格化的或者矢量的。如果你想在地图上加载某种格式的数据，或者某种服务提供的数据，都可以优先查看一下OpenLayers 3是否已经支持了。图层和数据源是密不可分的，详情可参见<a href="../ch05/index.md">Source和Layer</a>。</li><li>控件(Control)，它为用户提供了和地图交互的入口。 针对不同的用途，具有不同的控件。其实现类都放在包<code>ol.control</code>下面，在此之前还没有具体接触过，但我们在地图上看到的放大缩小按钮就是众多控件中的一种。控件具备相同的一个特性，就是一直保持在地图的某个固定位置，不会随着地图移动而移动，也不会随着地图放大缩小而变化，一直处于地图的最上层。关于控件更详细的说明参见<a href="../ch10/index.md">Control</a>。</li><li>交互(Interaction)，这是所有软件都具备的一个组成部分，直观地是看不见的，其实现类放在包<code>ol.interaction</code>下面，之前也没具体接触过，但其实是使用到了，如果没有它，我们就没有办法直接用鼠标控制地图放大、缩小、移动。这并不仅仅存在于GIS引擎中，它存在于任何产品中。任何优秀的产品必然有着良好的交互能力，即使没有任何GIS知识，也能体会到它的作用和重要性。</li></ul><p>以上就是一个OpenLayer 3地图所有核心的组成部分， 他们有机的组合在一起，从而构成整个地图，实现了我们对地图的完整需要。 OpenLayer 3采用这样的模块化设计，不管是在实现上，还是对外提供API，都简化了整个系统。我们只要完整地了解每一个组成部分，就能游刃有余地运用它。在这些组成部分中，只有<code>Layer</code>和<code>Source</code>有直接的强联系，其他的组成部分，相互之间的联系很少。为此，在掌握某一部分后，就可以有效地处理这一部分的开发工作，从而不一定要掌握所有组成部分。 本教程的章节也是按照各个模块来分别介绍的，并不一定需要按照章节顺序进行学习。</p><h1 id="看懂API"><a href="#看懂API" class="headerlink" title="看懂API"></a>看懂API</h1><p>或许你已经迫不及待的想开始学习第一个组成部分<code>Map</code>了，但在此之前，还是不得不先学会使用官网的API文档。因为API的重要性众人皆知，对于一个快速开发中的开源项目，更是如此，每一个小版本之间都可能有些许变化。所以在更新版本后，如果遇到API方法不存在或者功能不正确，则需要优先核对官网API文档。本着授之以鱼不如授之以渔的原则，学会看懂API文档是关键，而不是翻译API文档。。</p><h2 id="API文档入口"><a href="#API文档入口" class="headerlink" title="API文档入口"></a>API文档入口</h2><p>在浏览器中打开<a href="http://openlayers.org/" target="_blank" rel="noopener">OpenLayers官网 http://openlayers.org/</a>，下图箭头所指向的地方即为API文档链接：<br><img src="../img/ol_API.png" alt="API文档入口"></p><p>点击进入即为整个API文档的首页，页面上方为工具栏，左边为搜索栏和列表，右边为OpenLayers 3组成部分的介绍，都是相关的类和一些简介。<br><img src="../img/OpenLayers_3_API_Reference_Index.png" alt="API文档首页"></p><p>上方工具栏中的<code>Stable Only</code>复选框选中后，API文档就只会显示功能已经稳定的类，参数，接口等信息。在查找新功能或新特性时，建议不要勾选。 </p><p>右边页面显示了地图组成的介绍，Map、View、Layers列在第一排，第二排及第三排依次列出了其他的组成部分。有简单的介绍，及对应的包和类，可以通过这些资料加深对他们的认识。</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>左边的列表会根据搜索栏的内容进行过滤。大家可以尝试一下，在这里能搜索包名，类名，方法名和事件名。包名比如<code>ol.layer</code>，<code>ol.source</code>等，方法名比如<code>setCenter</code>，<code>setZoom</code>等，类名比如<code>View</code>，<code>Map</code>等，事件名比如`change:layers。但目前还不支持文档里面的内容的文本搜索。</p><h2 id="API文档介绍"><a href="#API文档介绍" class="headerlink" title="API文档介绍"></a>API文档介绍</h2><p>此处以<code>ol.Map</code>类的API文档为例进行说明。在搜索栏输入<code>ol.Map</code>，很快下方列表中的内容就变了，排在中第一项的就是<code>ol.Map</code>类，点击它，右边页面内容就变成了它的说明文档。文档内容从上向下，共分为三部分：</p><ul><li>类介绍，主要介绍该类用途，建议仔细阅读，这样才能根据具体业务找对需要的类。</li><li>构造参数、事件及继承关系，该内容的重要性无需多言，看不明白，就无法创建该类的对象。</li><li>类的所有方法，建议浏览一下，了解每个方法所实现的功能，在需要时，再详细查看对应的参数和使用方式。</li></ul><p>请结合上面的内容快速浏览一下<code>ol.Map</code>的说明文档，感受一下，总的来说，OpenLayers 3的API文档是比较全面的，内容也挺详实(ol3的API文档是从代码的注释中通过工具提取生产的，所以时刻能保持更新，且完全符合JSDoc规范，文档和代码完全匹配)。</p><p>文档中类的介绍部分是否能看懂，因人而异，当了解的越多，就越容易看明白。因为它只是类的一些简要说明，谈不上详细，也没有对应的应用说明。有些类的用途需要结合到其他的知识才能更明白。在不是很明白的情况下，建议多结合类提供的方法的用途来一起理解。</p><p>类的构造参数采用的是<a href="http://usejsdoc.org/" target="_blank" rel="noopener">JSDoc</a>规范定义的，使用工具提取而出，生成了下面的参数文档，在此对其格式进行简要说明，参见下面图解：<br><img src="../img/Class_Map.png" alt="ol.Map的构造参数说明"></p><p>页面右边的文件和行号标注都是可点击的，点击打开跳转到对应的源码，对于探究背后实现，或者分析Bug非常有用。然后是参数说明，很多对象的构造参数都是对象，以<code>{key1:value1, key2:value2}</code>这样的方式设置。这种方式有两方面的好处：</p><ul><li>可以只设置需要的参数，或者增加自定义参数</li><li>易于为指定参数设置正确的值，避免值对应到错误的参数上。</li></ul><p>需要注意的是参数类型<code>Type</code>的说明，使用符号<code>|</code>表示该参数可以赋予多种类型的值，对开发者是非常友好的，灵活强大。参数类型如果是容器，都会使用<code>&lt;&gt;</code>来表示。如果是OpenLayers 3自定义的类型，都是可以点击查看的。若为JavaScript的原生类型或DOM类型，则只给出类型名。对于各个参数的描述信息，就是一段文字，都比较详细。</p><p>除了参数之外，在OpenLayers 3中还大量使用了事件，用于解决实时通知的问题，这是典型的观察者模式。当对象改变时，能触发相应的操作。在API文档中，明确标注了各个类的事件，以及触发该事件的条件和时机。它们都列在<code>Fires:</code>这一栏，比如<code>ol.Map</code>就有很多事件，<code>click</code>、<code>dbclick</code>、<code>singleclick</code>、<code>moveend</code>等等。这些事件对于开发者来说非常重要，除了OpenLayers 3需要大量使用这些事件，很多应用开发也需要使用它们来实现一些关键功能。关于事件更详细的说明参见<a href="../ch07/index.md">事件</a>。</p><p>在事件说明之后，还有类继承的说明。<code>Subclasses</code>列出了当前类的所有子类；<code>Extends</code>列出了当前类的父类。不要小瞧这个说明，因为在面向对象编程范式中，所有能用父类的地方，都可以用子类。比如<code>ol.Map</code>的构造参数<code>options</code>可以设置<code>layers</code>属性，它的值是<code>ol.layer.Base</code>类型元素的集合，那么就可以用<code>ol.layer.Base</code>的子类<code>ol.layer.Group</code>或<code>ol.layer.Layer</code>，以此类推，也可以用这两个类的子类<code>ol.layer.Image</code>、<code>ol.layer.Tile</code>、<code>ol.layer.Vector</code>等。这样我们就知道具体哪些参数能用哪些类了。</p><p>最后就是这个类所有方法的说明了。方法的说明包含方法名，参数，以及方法功能描述。同类的说明差不多，为此不再累述。</p><p>最后，提醒一下，在遇到任何问题时，请优先查询API文档来排忧解惑。</p><h1 id="结合API文档分析代码"><a href="#结合API文档分析代码" class="headerlink" title="结合API文档分析代码"></a>结合API文档分析代码</h1><p>这次，有了API文档这个利器，必然会对代码有更深入的理解和认识。让我们再一次回顾之前那个简单的地图的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建地图</span></span><br><span class="line"> <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line"><span class="comment">// 设置地图图层</span></span><br><span class="line">layers: [</span><br><span class="line">  <span class="comment">// 创建一个使用Open Street Map地图源的瓦片图层</span></span><br><span class="line">  <span class="keyword">new</span> ol.layer.Tile(&#123;<span class="attr">source</span>: <span class="keyword">new</span> ol.source.OSM()&#125;)</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 设置显示地图的视图</span></span><br><span class="line">view: <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">  center: [<span class="number">0</span>, <span class="number">0</span>],<span class="comment">// 定义地图显示中心于经度0度，纬度0度处</span></span><br><span class="line">  zoom: <span class="number">2</span><span class="comment">// 并且定义地图显示层级为2</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">// 让id为map的div作为地图的容器</span></span><br><span class="line">target: <span class="string">'map'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>之前我们并不知道<code>ol.Map</code>类具体有什么构造参数，也不知道参数值可以设置什么类型的对象等等，现在就可以通过API文档查看。通过API文档可以看到，构造参数远不止上面代码中设置的这些参数，还存在很多其他的参数。这些参数在文档中注明是可以不设置的，OpenLayers3 会自动使用特定的默认值。通过这些参数，你是否已经发现它们其实就是地图的组成部分。为什么有些参数可以不设置而使用默认值，而有些参数就必须设置呢？请自行思考。</p><p>文档显示<code>ol.Map</code>的构造参数<code>layers</code>，可以是<code>ol.Collection</code>，也可以是Javascript数组，此处用了数组。我们统称为容器类型，包含的元素为<code>ol.layer.Base</code>类型。但代码里面创建了一个<code>ol.layer.Tile</code>类的实例，这样也行？通过API文档中的继承关系信息，我们可以了解到<code>ol.layer.Tile</code>继承于<code>ol.layer.Layer</code>，而<code>ol.layer.Layer</code>又继承于<code>ol.layer.Base</code>，所以这是可行的。</p><p>，若对<code>ol.layer.Tile</code>不了解，请使用API文档，在此之前，我们也可以通过包名大致推断出它是一个<code>layer</code>，属于地图层的一种。官网API文档说明：它是一种应用瓦片图片作为地图源的地图层。构造函数的参数里包含一个必须设置值的属性：<code>source</code>，用于设置地图源，类型为<code>ol.source.Tile</code>，但是代码里使用的是<code>ol.source.OSM</code>，这个问题同上，请自行查询API文档解答吧。注意，<code>Layer</code>和<code>Source</code>就是这样绑定在一起的。有什么样的<code>Layer</code>，就需要什么样的<code>Source</code>，看起来是<code>Layer</code>决定<code>Source</code>，其实<code>Layer</code>是为<code>Source</code>服务的，还是之前说的那样，数据才是最重要的。所以应该是<code>Source</code>起决定作用，根据需要构造对应的<code>Layer</code>。为此在做开发时，应该优先考虑需要什么样的<code>Source</code>。这个也可以通过API文档来查找，搜索<code>ol.source</code>即可查看到现有哪些不同类型的<code>source</code>，在结果中逐个查看，直到找到需要的<code>source</code>类。假设找到了<code>ol.source.Test</code>，那么要找<code>layer</code>就简单了，一般情况下，会有<code>ol.layer.Test</code>。 如果没有，请查找<code>ol.source.Test</code>的父类对应的<code>layer</code>，以此类推。</p><p>参数<code>View</code>是一个必须设置的属性，对应于<code>ol.View</code>类，通过官网API了解详细信息，顺便详细看看它的构造参数中的<code>center</code>和<code>zoom</code>表示什么？<code>View</code>至关重要，后续将更深入的了解。</p><p>认真查看API文档，可以发现一些你意想不到的东西，从而有所启发，或学到新知识，或排忧解难，所以请重视API文档。至此，你应该对上面的代码有了非常深入的理解了，此时不妨试试修改一些参数的值，查看地图有什么变化。</p><h1 id="ol-Map的应用"><a href="#ol-Map的应用" class="headerlink" title="ol.Map的应用"></a>ol.Map的应用</h1><p>到此，已经学习了足够多的知识，对<code>ol.Map</code>也比较熟悉了，如果遇到问题，也能从API文档中得到帮助，是时候动动手练习一下了。这之后就给出一些简单的应用，有兴趣的可以看看，没兴趣的可以直接跳过，进入下一章节。</p><h1 id="定制地图logo"><a href="#定制地图logo" class="headerlink" title="定制地图logo"></a>定制地图logo</h1><p>OpenLayers 3作为一个引擎，供开发者二次开发来发布产品，必然需要重新设置logo，具体怎么做？通过<code>ol.Map</code>的API文档发现它的构造参数里面<code>logo</code>的设置，简单动动手就能做出下面这样带自定义<code>logo</code>的地图，注意右下角的猴子：</p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><p><div id="map" style="width: 100%, height: 400px"></div></p><script>  new ol.Map({      controls: ol.control.defaults({          attributionOptions: ({            collapsible: false          })        }),        // logo: false,     // 不显示logo        // logo: 'face_monkey.png',     // 用一个图片 face_monkey.png 作为logo        logo: {src: '../img/face_monkey.png', href: 'http://www.openstreetmap.org/'},    // 点击能跳转到对应页面        layers: [            new ol.layer.Tile({source: new ol.source.OSM()})        ],        view: new ol.View({            center: [0, 0],            zoom: 2        }),        target: 'map'  });</script><p>因为今年是猴年，所以就用了它，当然你也可以换成任何其他想要的<code>logo</code>，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%, height: 400px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">  controls: ol.control.defaults(&#123;</span></span><br><span class="line"><span class="undefined">          attributionOptions: (&#123;</span></span><br><span class="line"><span class="actionscript">            collapsible: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">          &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;),</span></span><br><span class="line"><span class="actionscript"><span class="comment">// logo: false, // 不显示logo</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// logo: 'face_monkey.png', // 用一个图片 face_monkey.png 作为logo</span></span></span><br><span class="line"><span class="actionscript">logo: &#123;src: <span class="string">'../img/face_monkey.png'</span>, href: <span class="string">'http://www.openstreetmap.org/'</span>&#125;,<span class="comment">// 点击能跳转到对应页面</span></span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;source: <span class="keyword">new</span> ol.source.OSM()&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">center: [0, 0],</span></span><br><span class="line"><span class="undefined">zoom: 2</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意看代码中设置<code>logo</code>参数的注释，演示了最复杂的情况，注释掉的代码是一些简单的用法。可自行尝试换成它们有什么效果。</p><p>除了<code>logo</code>参数之外，我们还设置了<code>controls</code>，算是这个例子夹带的私货，其大致的作用，从官网API文档可以了解到，是设置地图控件的。有什么作用？注意对比现在的地图和之前的地图的右下角，一个是<strong>i</strong>，一个是展开的一串信息。 </p><h1 id="单页面多地图"><a href="#单页面多地图" class="headerlink" title="单页面多地图"></a>单页面多地图</h1><p>在某些业务中，可能需要在一个页面中加载多个地图，用于对比，或者多个业务方面的同时展示。那么OpenLayers 3能否做到单页面多地图互不干扰呢？</p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><br><p>地图1</p><br><div id="map1" style="width: 100%"></div><br><p>地图2</p><br><div id="map2" style="width: 100%"></div><br><script><br>    // 创建第一个地图<br>  new ol.Map({<br>        layers: [<br>            new ol.layer.Tile({source: new ol.source.OSM()})<br>        ],<br>        view: new ol.View({<br>            center: [0, 0],<br>            zoom: 2<br>        }),<br>        target: ‘map1’<br>  });<br><br>    // 创建第二个地图<br>    new ol.Map({<br>        layers: [<br>            new ol.layer.Tile({source: new ol.source.OSM()})<br>        ],<br>        view: new ol.View({<br>            center: [0, 0],<br>            zoom: 2<br>        }),<br>        target: ‘map2’<br>  });<br></script><br><br>试试两个地图都操作一下，确认相互之间是否有影响？对应的代码非常简单，无非就是数量多了一个，如下：<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>地图1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map1"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>地图2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map2"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建第一个地图</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;source: <span class="keyword">new</span> ol.source.OSM()&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">center: [0, 0],</span></span><br><span class="line"><span class="undefined">zoom: 2</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map1'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建第二个地图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;source: <span class="keyword">new</span> ol.source.OSM()&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">center: [0, 0],</span></span><br><span class="line"><span class="undefined">zoom: 2</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map2'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>这段代码真没有什么需要解释的了。<br><br><br># 地图联动<br>OpenLayers 3采用了MVC模型，V对应的就是<code>View</code>，这种设计模型有什么好处？我们还是直接看下面这两个地图：<br><br><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><br><p>地图1</p><br><div id="map1" style="width: 100%"></div><br><p>地图2</p><br><div id="map2" style="width: 100%"></div><br><script><br>    // 创建一个视图<br>    var view = new ol.View({<br>            center: [0, 0],<br>            zoom: 2<br>        });<br><br>    // 创建第一个地图<br>  new ol.Map({<br>        layers: [<br>            new ol.layer.Tile({source: new ol.source.OSM()})<br>        ],<br>        view: view,<br>        target: ‘map1’<br>  });<br><br>    // 创建第二个地图<br>    new ol.Map({<br>        layers: [<br>            new ol.layer.Tile({source: new ol.source.OSM()})<br>        ],<br>        view: view,<br>        target: ‘map2’<br>  });<br></script><br><br>拖动地图1的同时，看看地图2有什么变化，是不是很神奇，为什么呢？<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>地图1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map1"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>地图2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map2"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建一个视图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> view = <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">center: [0, 0],</span></span><br><span class="line"><span class="undefined">zoom: 2</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建第一个地图</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;source: <span class="keyword">new</span> ol.source.OSM()&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="undefined">view: view,</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map1'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建第二个地图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;source: <span class="keyword">new</span> ol.source.OSM()&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="undefined">view: view,</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map2'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>代码只有一点不同，即两个<code>ol.Map</code>使用了同一个<code>view</code>，就是这么神奇。<br><br><br># 动态交换地图<br>在创建地图时，我们可以指定对应的地图容器，其实在创建完成之后，我们还可以动态设置不同的地图容器，从而可以让地图不断的变换位置，比如交换两个地图：<br><br><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><p></p><p>地图1</p><p></p><p><div id="map1" style="width: 100%"></div></p><p></p><p>地图2</p><p></p><p><div id="map2" style="width: 100%"></div></p><p><input type="button" onclick="swapMap();" value="调换地图"></p><script>    // 创建第一个地图  var map1 = new ol.Map({        layers: [            new ol.layer.Tile({source: new ol.source.OSM()})        ],        view: new ol.View({            center: [0, 0],            zoom: 2        }),        target: 'map1'  });    // 创建第二个地图    var map2 = new ol.Map({        layers: [            new ol.layer.Tile({source: new ol.source.OSM()})        ],        view: new ol.View({            center: [0, 0],            zoom: 2        }),        target: 'map2'  });    function swapMap() {        // 改变两个地图的容器        map1.setTarget('map2');        map2.setTarget('map1');    }</script><p>为了让两个地图有所差别，你可以先放大第一个地图，然后点击<strong>调换地图</strong>按钮，看一下效果。要实现这个功能，其实只需要使用<code>setTarget</code>方法即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>地图1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map1"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>地图2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map2"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"swapMap();"</span> <span class="attr">value</span>=<span class="string">"调换地图"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建第一个地图</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map1 = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;source: <span class="keyword">new</span> ol.source.OSM()&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">center: [0, 0],</span></span><br><span class="line"><span class="undefined">zoom: 2</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map1'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建第二个地图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map2 = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;source: <span class="keyword">new</span> ol.source.OSM()&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">center: [0, 0],</span></span><br><span class="line"><span class="undefined">zoom: 2</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map2'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">swapMap</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 改变两个地图的容器</span></span></span><br><span class="line"><span class="actionscript">map1.setTarget(<span class="string">'map2'</span>);</span></span><br><span class="line"><span class="actionscript">map2.setTarget(<span class="string">'map1'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其实很多时候，只需要多留意一下API文档里面的方法，了解功能，就可能实现意想不到效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OpenLayers-3地图&quot;&gt;&lt;a href=&quot;#OpenLayers-3地图&quot; class=&quot;headerlink&quot; title=&quot;OpenLayers 3地图&quot;&gt;&lt;/a&gt;OpenLayers 3地图&lt;/h1&gt;&lt;p&gt;本章节将围绕前面那个简单的地图展开，从源码分析入手，逐步延伸到地图组成部分的分析，并学会借助API文档来帮助我们理解。 在此基础上，还提供了一些关于&lt;code&gt;ol.Map&lt;/code&gt;类的应用实例，以帮助大家进一步的实践，为接下来更深入的学习和使用打下坚实的基础。&lt;/p&gt;
    
    </summary>
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/categories/openLayers/"/>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers 3 注意事项</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/ch14/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/ch14/index.html</id>
    <published>2018-01-18T12:29:59.000Z</published>
    <updated>2018-01-30T14:09:33.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>EasyUI和OL3有冲突，体现在浏览器大小缩放时，地图会变形，具体原因未知。</li></ol><a id="more"></a><ol><li><code>ol.js</code>这个文件<strong>千万不能</strong>使用源码目录中的<code>src\ol\ol.js</code>。请下载官网的<code>*-dist.zip</code>，用解压后文件夹里面的<code>ol.js</code>。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;EasyUI和OL3有冲突，体现在浏览器大小缩放时，地图会变形，具体原因未知。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/categories/openLayers/"/>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers 3 图标及提示信息</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/ch07/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/ch07/index.html</id>
    <published>2018-01-18T12:29:59.000Z</published>
    <updated>2018-01-30T14:08:35.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图标及提示信息"><a href="#图标及提示信息" class="headerlink" title="图标及提示信息"></a>图标及提示信息</h1><p>图标是GIS应用中必不可少的要素，比如在地图上标注饭店，学校，加油站等，就需要添加图标，点击图标，可能需要提示更为详细的信息，比如地址，评价，或者更为复杂的业务信息。本节将从基本的应用入手讲解，直到比较高级一些的自定义特色图标和信息展示。</p><a id="more"></a><h1 id="应用overlay"><a href="#应用overlay" class="headerlink" title="应用overlay"></a>应用overlay</h1><p>在OpenLayer3中添加图标有两种方式，一种是我们这一小节马上就要介绍的，比较传统的<code>overlay</code>，另一种是下一小节马上就要介绍的<code>Feature</code> + <code>Style</code>的方式。 <code>overlay</code>之所以传统，是因为它就是传统的<code>html</code>方式显示图片。 下面就是用这种方式加载一个锚点的示例：</p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><br><div id="map" style="width: 100%"></div><br><div id="anchor"><img src="../img/anchor.png" alt="示例锚点"></div><br><script type="text/javascript"><br>  var map = new ol.Map({<br>    layers: [<br>      new ol.layer.Tile({<br>        source: new ol.source.OSM()<br>      })<br>    ],<br>    target: ‘map’,<br>    view: new ol.View({<br>      projection: ‘EPSG:4326’,<br>      center: [104, 30],<br>      zoom: 10<br>    })<br>  });<br><br>  var anchor = new ol.Overlay({<br>    element: document.getElementById(‘anchor’)<br>  });<br>  anchor.setPosition([104, 30]);<br>  map.addOverlay(anchor);<br></script><br><br>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下面就是传统的显示一个图片图标的方式，用img--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"anchor"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/anchor.png"</span> <span class="attr">alt</span>=<span class="string">"示例锚点"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">    layers: [</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    ],</span></span><br><span class="line"><span class="actionscript">    target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">      center: [104, 30],</span></span><br><span class="line"><span class="undefined">      zoom: 10</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 下面把上面的图标附加到地图上，需要一个ol.Overlay</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> anchor = <span class="keyword">new</span> ol.Overlay(&#123;</span></span><br><span class="line"><span class="javascript">    element: <span class="built_in">document</span>.getElementById(<span class="string">'anchor'</span>)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 关键的一点，需要设置附加到地图上的位置</span></span></span><br><span class="line"><span class="undefined">  anchor.setPosition([104, 30]);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 然后添加到map上</span></span></span><br><span class="line"><span class="undefined">  map.addOverlay(anchor);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>代码的说明参加注释，最终效果是在地图中间有一个锚点图标。<br><br>## 缺点<br>当图标比较多的情况下，如果采用这种方式，那么我们会加入非常多的HTML元素，从而造成效率降低。 关于效率的测试，大家可以自行测试。 为什么会这样呢？ 因为界面上元素的遍历在数量比较多的情况下，会变慢，基于此基础上的渲染，鼠标事件都会变慢。<br><br>## 优点<br>这种使用传统的方式显示图标可以应用传统的HTML技术，比如鼠标移动到图标上，鼠标图标变成手势。 我们可以用css来处理就可以了，比如在<code>head</code>里面添加下面的代码：<br><br><style type="text/css"><br>    #anchor {<br>        cursor:pointer;<br>    }<br></style><br><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#anchor</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">cursor</span><span class="selector-pseudo">:pointer</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>就可以看到鼠标放到锚点上去的时候，鼠标图标从箭头，变成手了。 类似的其他技术都可以应用上去，比如css动画。 鉴于动画在前端的重要性，下面单独分出一个小节用实例来讲解。<br><br># 动画图标<br><br>动起来的图标会更有吸引力，下面用<code>overlay</code>+<code>css</code>的方式来实现：<br><br><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br>    <style type="text/css"><br>      @keyframes zoom<br>      {<br>        from {top: 0; left: 0; width: 32px; height: 32px;}<br>        50% {top: -16px; left: -16px; width: 64px; height: 64px;}<br>        to {top: 0; left: 0; width: 32px; height: 32px;}<br>      }<br><br>      @-moz-keyframes zoom /<em> Firefox </em>/<br>      {<br>        from {top: 0; left: 0; width: 32px; height: 32px;}<br>        50% {top: -16px; left: -16px; width: 64px; height: 64px;}<br>        to {top: 0; left: 0; width: 32px; height: 32px;}<br>      }<br><br>      @-webkit-keyframes zoom /<em> Safari 和 Chrome </em>/<br>      {<br>        from {top: 0; left: 0; width: 32px; height: 32px;}<br>        50% {top: -16px; left: -16px; width: 64px; height: 64px;}<br>        to {top: 0; left: 0; width: 32px; height: 32px;}<br>      }<br><br>      @-o-keyframes zoom /<em> Opera </em>/<br>      {<br>        from {top: 0; left: 0; width: 32px; height: 32px;}<br>        50% {top: -16px; left: -16px; width: 64px; height: 64px;}<br>        to {top: 0; left: 0; width: 32px; height: 32px;}<br>      }<br><br>      #anchorImg<br>      {<br>        display: block;<br>        position: absolute;<br>        animation: zoom 5s;<br>        animation-iteration-count: infinite;<br>        -moz-animation: zoom 5s; /<em> Firefox </em>/<br>        -moz-animation-iteration-count: infinite;<br>        -webkit-animation: zoom 5s;  /<em> Safari 和 Chrome </em>/<br>        -webkit-animation-iteration-count: infinite;<br>        -o-animation: zoom 5s; /<em> Opera </em>/<br>        -o-animation-iteration-count: infinite;<br>      }<br><br>    </style><br></head><p><div id="map" style="width: 100%"></div></p><p><div id="anchor" style="width: 64px;height: 64px;"><img id="anchorImg" src="../img/anchor.png" alt="示例锚点"></div></p><script type="text/javascript">  var map = new ol.Map({    layers: [      new ol.layer.Tile({        source: new ol.source.OSM()      })    ],    target: 'map',    view: new ol.View({      projection: 'EPSG:4326',      center: [104, 30],      zoom: 10    })  });  var anchor = new ol.Overlay({    element: document.getElementById('anchor')  });  anchor.setPosition([104, 30]);  map.addOverlay(anchor);</script><p>代码和之前的例子差不多，只是多了css动画的设置：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义动画，图标先放大，再缩小--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  @<span class="keyword">keyframes</span> zoom</span></span><br><span class="line"><span class="undefined">  &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">from</span> &#123;<span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">32px</span>; <span class="attribute">height</span>: <span class="number">32px</span>;&#125;</span></span><br><span class="line"><span class="css">    50% &#123;<span class="attribute">top</span>: -<span class="number">16px</span>; <span class="attribute">left</span>: -<span class="number">16px</span>; <span class="attribute">width</span>: <span class="number">64px</span>; <span class="attribute">height</span>: <span class="number">64px</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">to</span> &#123;<span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">32px</span>; <span class="attribute">height</span>: <span class="number">32px</span>;&#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  @-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> zoom /* Firefox */</span></span><br><span class="line"><span class="undefined">  &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">from</span> &#123;<span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">32px</span>; <span class="attribute">height</span>: <span class="number">32px</span>;&#125;</span></span><br><span class="line"><span class="css">    50% &#123;<span class="attribute">top</span>: -<span class="number">16px</span>; <span class="attribute">left</span>: -<span class="number">16px</span>; <span class="attribute">width</span>: <span class="number">64px</span>; <span class="attribute">height</span>: <span class="number">64px</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">to</span> &#123;<span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">32px</span>; <span class="attribute">height</span>: <span class="number">32px</span>;&#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  @-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> zoom /* Safari 和 Chrome */</span></span><br><span class="line"><span class="undefined">  &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">from</span> &#123;<span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">32px</span>; <span class="attribute">height</span>: <span class="number">32px</span>;&#125;</span></span><br><span class="line"><span class="css">    50% &#123;<span class="attribute">top</span>: -<span class="number">16px</span>; <span class="attribute">left</span>: -<span class="number">16px</span>; <span class="attribute">width</span>: <span class="number">64px</span>; <span class="attribute">height</span>: <span class="number">64px</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">to</span> &#123;<span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">32px</span>; <span class="attribute">height</span>: <span class="number">32px</span>;&#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  @-<span class="keyword">o</span>-<span class="keyword">keyframes</span> zoom /* Opera */</span></span><br><span class="line"><span class="undefined">  &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">from</span> &#123;<span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">32px</span>; <span class="attribute">height</span>: <span class="number">32px</span>;&#125;</span></span><br><span class="line"><span class="css">    50% &#123;<span class="attribute">top</span>: -<span class="number">16px</span>; <span class="attribute">left</span>: -<span class="number">16px</span>; <span class="attribute">width</span>: <span class="number">64px</span>; <span class="attribute">height</span>: <span class="number">64px</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">to</span> &#123;<span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">32px</span>; <span class="attribute">height</span>: <span class="number">32px</span>;&#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="comment">/* 应用css动画到图标元素上 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-id">#anchorImg</span></span></span><br><span class="line"><span class="undefined">  &#123;</span></span><br><span class="line"><span class="undefined">    display: block;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    animation: zoom 5s;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">animation-iteration-count</span>: <span class="selector-tag">infinite</span>; <span class="comment">/* 一直重复动画 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">-moz-animation</span>: <span class="selector-tag">zoom</span> 5<span class="selector-tag">s</span>; <span class="comment">/* Firefox */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">-moz-animation-iteration-count</span>: <span class="selector-tag">infinite</span>; <span class="comment">/* 一直重复动画 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-animation</span>: <span class="selector-tag">zoom</span> 5<span class="selector-tag">s</span>;  <span class="comment">/* Safari 和 Chrome */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-animation-iteration-count</span>: <span class="selector-tag">infinite</span>; <span class="comment">/* 一直重复动画 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">-o-animation</span>: <span class="selector-tag">zoom</span> 5<span class="selector-tag">s</span>; <span class="comment">/* Opera */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">-o-animation-iteration-count</span>: <span class="selector-tag">infinite</span>; <span class="comment">/* 一直重复动画 */</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"anchor"</span> <span class="attr">style</span>=<span class="string">"width: 64px;height: 64px;"</span> &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">'anchorImg'</span> <span class="attr">src</span>=<span class="string">"../img/anchor.png"</span> <span class="attr">alt</span>=<span class="string">"示例锚点"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">    layers: [</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    ],</span></span><br><span class="line"><span class="actionscript">    target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">      center: [104, 30],</span></span><br><span class="line"><span class="undefined">      zoom: 10</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> anchor = <span class="keyword">new</span> ol.Overlay(&#123;</span></span><br><span class="line"><span class="javascript">    element: <span class="built_in">document</span>.getElementById(<span class="string">'anchor'</span>)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">  anchor.setPosition([104, 30]);</span></span><br><span class="line"><span class="undefined">  map.addOverlay(anchor);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>除了这种css实现动画之外，你还可以直接加载gif动画，这是非常简单的，再此不表。</p><h1 id="设置图标位置"><a href="#设置图标位置" class="headerlink" title="设置图标位置"></a>设置图标位置</h1><p>如果像之前那样设置图标，不做任何位置设置，那么默认情况下，图标的中心点对应于地图位置。下面这个地图显示了这个位置，中心那个红点所处位置就是[104, 30]，可以这个点对应于图标的中心位置： </p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map2" style="width: 100%"></div></p><script type="text/javascript">  var layer2 = new ol.layer.Vector({    source: new ol.source.Vector()  })  var map2 = new ol.Map({    layers: [      new ol.layer.Tile({        source: new ol.source.OSM()      }),       layer2    ],    target: 'map2',    view: new ol.View({      projection: 'EPSG:4326',      center: [104, 30],      zoom: 10    })  });  var anchor2 = new ol.Feature({    geometry: new ol.geom.Point([104, 30])  });  anchor2.setStyle(new ol.style.Style({    image: new ol.style.Icon({      src: '../img/anchor.png'    })  }));  layer2.getSource().addFeature(anchor2);  var refFeature = new ol.Feature({      geometry: new ol.geom.Point([104, 30])  })  refFeature.setStyle(new ol.style.Style({      image: new ol.style.Circle({          radius: 2,          fill: new ol.style.Fill({              color: 'red'          })      })  }));  layer2.getSource().addFeature(refFeature);</script><p>有时候我们可能并不想这样，比如我们希望锚点图标下方的箭头指向地图位置。 比如这样：</p><p><div id="map3" style="width: 100%"></div></p><script type="text/javascript">  var layer3 = new ol.layer.Vector({    source: new ol.source.Vector()  })  var map3 = new ol.Map({    layers: [      new ol.layer.Tile({        source: new ol.source.OSM()      }),       layer3    ],    target: 'map3',    view: new ol.View({      projection: 'EPSG:4326',      center: [104, 30],      zoom: 10    })  });  var anchor3 = new ol.Feature({    geometry: new ol.geom.Point([104, 30])  });  anchor3.setStyle(new ol.style.Style({    image: new ol.style.Icon({      src: '../img/anchor.png',      anchor: [0.5, 1]    })  }));  layer3.getSource().addFeature(anchor3);  var refFeature3 = new ol.Feature({      geometry: new ol.geom.Point([104, 30])  })  refFeature3.setStyle(new ol.style.Style({      image: new ol.style.Circle({          radius: 2,          fill: new ol.style.Fill({              color: 'red'          })      })  }));  layer3.getSource().addFeature(refFeature3);</script><p>要做到这个效果，我们只需要把设置样式的代码加上<code>anchor</code>的设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">image: <span class="keyword">new</span> ol.style.Icon(&#123;</span><br><span class="line">  src: <span class="string">'../img/anchor.png'</span>,</span><br><span class="line">  anchor: [<span class="number">0.5</span>, <span class="number">1</span>]<span class="comment">// 设置图标位置</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>为什么是[0.5, 1]这种值，表示什么？ 默认情况下，位置坐标是按照比例的方式来设置的，范围从0到1，x轴上0表示最左边，1表示最右边，y轴上0表示最上边，1表示最下边。 如代码所示，x设置为0.5可以让图片在x方向上居中，y设置为1可以让图片在y方向上移动到最底端。 大家可以给予上面这个代码修改一下，试试[0, 0]会让图标处于什么位置？</p><p>除了按照比例进行移动之外，还可以按照像素来计算位置，但必须显示设置<code>anchorXUnits</code>或    <code>anchorYUnits</code>为<code>pixels</code>。 根据不同的需要，可以采用不同的单位来设置。</p><h1 id="根据层级放大缩小图标"><a href="#根据层级放大缩小图标" class="headerlink" title="根据层级放大缩小图标"></a>根据层级放大缩小图标</h1><p>由于图标不会跟随图层的放大缩小而放大缩小，所以在某些业务应用中，可能并不合适，需要也跟随变化。 之前就有同学提到这个问题，在<code>ol.style.Icon</code>中是可以设置<code>scale</code>的，这样就为<br>我们提供了方便。 通过设置它，就可以做到。 下面这个地图中的锚点图标，就会随着地图放大缩小而变化大小：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">  var layer = new ol.layer.Vector({    source: new ol.source.Vector()  })  var map = new ol.Map({    layers: [      new ol.layer.Tile({        source: new ol.source.OSM()      }),       layer    ],    target: 'map',    view: new ol.View({      projection: 'EPSG:4326',      center: [104, 30],      zoom: 10    })  });  var anchor = new ol.Feature({    geometry: new ol.geom.Point([104, 30])  });  anchor.setStyle(new ol.style.Style({    image: new ol.style.Icon({      src: '../img/anchor.png'    })  }));  layer.getSource().addFeature(anchor);  map.getView().on('change:resolution', function(){      var style = anchor.getStyle();      style.getImage().setScale(this.getZoom() / 10);      anchor.setStyle(style);  })</script><p>和之前的代码绝大部分都是相同的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.Vector()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">    layers: [</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;), </span></span><br><span class="line"><span class="undefined">      layer</span></span><br><span class="line"><span class="undefined">    ],</span></span><br><span class="line"><span class="actionscript">    target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">      center: [104, 30],</span></span><br><span class="line"><span class="undefined">      zoom: 10</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> anchor = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">    geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">104</span>, <span class="number">30</span>])</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="actionscript">  anchor.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">    image: <span class="keyword">new</span> ol.style.Icon(&#123;</span></span><br><span class="line"><span class="actionscript">      src: <span class="string">'../img/anchor.png'</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;));</span></span><br><span class="line"><span class="undefined">  layer.getSource().addFeature(anchor);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 监听地图层级变化</span></span></span><br><span class="line"><span class="actionscript">  map.getView().on(<span class="string">'change:resolution'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> style = anchor.getStyle();</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 重新设置图标的缩放率，基于层级10来做缩放</span></span></span><br><span class="line"><span class="actionscript">  style.getImage().setScale(<span class="keyword">this</span>.getZoom() / <span class="number">10</span>);</span></span><br><span class="line"><span class="undefined">  anchor.setStyle(style);</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>利用一个监听和<code>scale</code>改变，就实现了这个同比缩放。 具体缩放多少，请根据业务来设置，可以设置的更加精细，此处只是功能示例。 其实还有另外一种方式，可以实现动态缩放大小，参见<a href="07-04.md">styleFunction应用</a>。</p><h1 id="另类设置svg图标"><a href="#另类设置svg图标" class="headerlink" title="另类设置svg图标"></a>另类设置svg图标</h1><p>图标除了可以直接设置png的文件url之外，也可以设置svg的文件url，但这并不是唯一的加载svg图标的方式。 OpenLayers 3提供了直接使用图像对象来设置的方式，对应于<code>ol.style.Icon</code>构造函数中的<code>img</code>参数。 如下：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">  var layer = new ol.layer.Vector({    source: new ol.source.Vector()  })  var map = new ol.Map({    layers: [      new ol.layer.Tile({        source: new ol.source.OSM()      }),       layer    ],    target: 'map',    view: new ol.View({      projection: 'EPSG:4326',      center: [104, 30],      zoom: 10    })  });  var anchor = new ol.Feature({    geometry: new ol.geom.Point([104, 30])  });  // 构建svg的Image对象  var svg = '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="30px" height="30px" viewBox="0 0 30 30" enable-background="new 0 0 30 30" xml:space="preserve">'+    '<path fill="#156BB1" d="M22.906,10.438c0,4.367-6.281,14.312-7.906,17.031c-1.719-2.75-7.906-12.665-7.906-17.031S10.634,2.531,15,2.531S22.906,6.071,22.906,10.438z"/>'+'<circle fill="#FFFFFF" cx="15" cy="10.677" r="3.291"/></svg>';    var mysvg = new Image();    mysvg.src = 'data:image/svg+xml,' + escape(svg);  anchor.setStyle(new ol.style.Style({    image: new ol.style.Icon({      img: mysvg,    // 设置Image对象      imgSize: [30, 30]    // 及图标大小//          src: 'http://www.williambuck.com/portals/0/Skins/WilliamBuck2014/images/location-icon.svg',//          size: [30, 30]    })  }));  layer.getSource().addFeature(anchor);</script><p>对应的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.Vector()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">    layers: [</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;), </span></span><br><span class="line"><span class="undefined">      layer</span></span><br><span class="line"><span class="undefined">    ],</span></span><br><span class="line"><span class="actionscript">    target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">      center: [104, 30],</span></span><br><span class="line"><span class="undefined">      zoom: 10</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> anchor = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">    geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">104</span>, <span class="number">30</span>])</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 构建svg的Image对象</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  var svg = '<span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">id</span>=<span class="string">"Layer_1"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">x</span>=<span class="string">"0px"</span> <span class="attr">y</span>=<span class="string">"0px"</span> <span class="attr">width</span>=<span class="string">"30px"</span> <span class="attr">height</span>=<span class="string">"30px"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 30 30"</span> <span class="attr">enable-background</span>=<span class="string">"new 0 0 30 30"</span> <span class="attr">xml:space</span>=<span class="string">"preserve"</span>&gt;</span>'+    </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">'<span class="tag">&lt;<span class="name">path</span> <span class="attr">fill</span>=<span class="string">"#156BB1"</span> <span class="attr">d</span>=<span class="string">"M22.906,10.438c0,4.367-6.281,14.312-7.906,17.031c-1.719-2.75-7.906-12.665-7.906-17.031S10.634,2.531,15,2.531S22.906,6.071,22.906,10.438z"</span>/&gt;</span>'+</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">'<span class="tag">&lt;<span class="name">circle</span> <span class="attr">fill</span>=<span class="string">"#FFFFFF"</span> <span class="attr">cx</span>=<span class="string">"15"</span> <span class="attr">cy</span>=<span class="string">"10.677"</span> <span class="attr">r</span>=<span class="string">"3.291"</span>/&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span>';</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> mysvg = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="javascript">mysvg.src = <span class="string">'data:image/svg+xml,'</span> + <span class="built_in">escape</span>(svg);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  anchor.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">    image: <span class="keyword">new</span> ol.style.Icon(&#123;</span></span><br><span class="line"><span class="actionscript">      img: mysvg,<span class="comment">// 设置Image对象</span></span></span><br><span class="line"><span class="actionscript">      imgSize: [<span class="number">30</span>, <span class="number">30</span>]<span class="comment">// 及图标大小</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//          src: 'http://www.williambuck.com/portals/0/Skins/WilliamBuck2014/images/location-icon.svg',</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//          size: [30, 30]</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;));</span></span><br><span class="line"><span class="undefined">  layer.getSource().addFeature(anchor);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>前半部分代码都一样，最后设置样式的时候，可以根据注释来理解不一样的代码，构建<code>Image</code>对象，设置<code>src</code>是关键。</p><h1 id="规则几何体图标"><a href="#规则几何体图标" class="headerlink" title="规则几何体图标"></a>规则几何体图标</h1><p>相对于png而言，svg这样的矢量图在放大缩小方面更清晰，但对于规则几何体而言，如果也使用svg，未免复杂了一点，OpenLayers 3为了简化这样的操作，提供了一个规则几何体的样式类<code>ol.style.RegularShape</code>，使用它可以轻松绘制正方形，三角形等,也支持星形规则几何图形，比如下面这样：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">  var layer = new ol.layer.Vector({    source: new ol.source.Vector()  })  var map = new ol.Map({    layers: [      new ol.layer.Tile({        source: new ol.source.OSM()      }),       layer    ],    target: 'map',    view: new ol.View({      projection: 'EPSG:4326',      center: [104, 30],      zoom: 10    })  });  var shape = new ol.Feature({    geometry: new ol.geom.Point([104, 30])  });  shape.setStyle(new ol.style.Style({    image: new ol.style.RegularShape({      points: 3,      radius: 10,      stroke: new ol.style.Stroke({          color: 'red',          size: 2      })    })  }));  layer.getSource().addFeature(shape);    var star = new ol.Feature({    geometry: new ol.geom.Point([104.1, 30.1])  });  star.setStyle(new ol.style.Style({    image: new ol.style.RegularShape({      points: 5,      radius1: 20,      radius2: 10,      stroke: new ol.style.Stroke({          color: 'red',          size: 2      }),      fill: new ol.style.Fill({ // 设置五星填充样式          color: 'blue'      })    })  }));  layer.getSource().addFeature(star);</script><p>图上有一个三角形，一个5星，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.Vector()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">    layers: [</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;), </span></span><br><span class="line"><span class="undefined">      layer</span></span><br><span class="line"><span class="undefined">    ],</span></span><br><span class="line"><span class="actionscript">    target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">      center: [104, 30],</span></span><br><span class="line"><span class="undefined">      zoom: 10</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 添加一个三角形</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> shape = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">    geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">104</span>, <span class="number">30</span>])</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="actionscript">  shape.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">    image: <span class="keyword">new</span> ol.style.RegularShape(&#123;</span></span><br><span class="line"><span class="actionscript">      points: <span class="number">3</span>,<span class="comment">// 顶点数</span></span></span><br><span class="line"><span class="actionscript">      radius: <span class="number">10</span>,<span class="comment">// 图形大小，单位为像素</span></span></span><br><span class="line"><span class="actionscript">      stroke: <span class="keyword">new</span> ol.style.Stroke(&#123; <span class="comment">// 设置边的样式</span></span></span><br><span class="line"><span class="actionscript">      color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">      size: 2</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  layer.getSource().addFeature(shape);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 添加一个五星</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> star = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">    geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">104.1</span>, <span class="number">30.1</span>])</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="actionscript">  star.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">    image: <span class="keyword">new</span> ol.style.RegularShape(&#123;</span></span><br><span class="line"><span class="actionscript">      points: <span class="number">5</span>,<span class="comment">// 顶点个数</span></span></span><br><span class="line"><span class="actionscript">      radius1: <span class="number">20</span>, <span class="comment">// 外圈大小</span></span></span><br><span class="line"><span class="actionscript">      radius2: <span class="number">10</span>, <span class="comment">// 内圈大小</span></span></span><br><span class="line"><span class="actionscript">      stroke: <span class="keyword">new</span> ol.style.Stroke(&#123; <span class="comment">// 设置边的样式</span></span></span><br><span class="line"><span class="actionscript">      color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">      size: 2</span></span><br><span class="line"><span class="undefined">      &#125;),</span></span><br><span class="line"><span class="actionscript">      fill: <span class="keyword">new</span> ol.style.Fill(&#123; <span class="comment">// 设置五星填充样式</span></span></span><br><span class="line"><span class="actionscript">      color: <span class="string">'blue'</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  layer.getSource().addFeature(star);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>除了基本的设置之外，还支持图形旋转，以及跟随地图旋转而旋转，这些设置在其他的应用中也多有涉及，此处不再用实例来介绍，可自行验证。</p><h1 id="用Canvas自绘图标"><a href="#用Canvas自绘图标" class="headerlink" title="用Canvas自绘图标"></a>用Canvas自绘图标</h1><p>除了规则的几何体之外，往往需要定义一些不规则的几何体，可以使用svg来实现，但也可以用<code>canvas</code>自己来绘制，比如像下面这个图标：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">  var layer = new ol.layer.Vector({    source: new ol.source.Vector()  })  var map = new ol.Map({    layers: [      new ol.layer.Tile({        source: new ol.source.OSM()      }),       layer    ],    target: 'map',    view: new ol.View({      projection: 'EPSG:4326',      center: [104, 30],      zoom: 10    })  });  // 使用canvas绘制一个不规则几何图形    var canvas =document.createElement('canvas');    canvas.width = 20;  canvas.height = 20;    var context = canvas.getContext("2d");    context.strokeStyle = "red";    context.lineWidth = 1;    context.beginPath();     context.moveTo(0, 0);  context.lineTo(20, 10);  context.lineTo(0, 20);  context.lineTo(10, 10);  context.lineTo(0, 0);    context.stroke();  // 把绘制了的canvas设置到style里面    var style = new ol.style.Style({        image: new ol.style.Icon({          img: canvas,          imgSize: [canvas.width, canvas.height],          rotation: 90 * Math.PI / 180        })    });    // 创建一个Feature  var shape = new ol.Feature({    geometry: new ol.geom.Point([104, 30])  });  // 应用具有不规则几何图形的样式到Feature  shape.setStyle(style);  layer.getSource().addFeature(shape);</script><p>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.Vector()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">    layers: [</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;), </span></span><br><span class="line"><span class="undefined">      layer</span></span><br><span class="line"><span class="undefined">    ],</span></span><br><span class="line"><span class="actionscript">    target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">      center: [104, 30],</span></span><br><span class="line"><span class="undefined">      zoom: 10</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 使用canvas绘制一个不规则几何图形</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> canvas =<span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span></span><br><span class="line"><span class="undefined">canvas.width = 20;</span></span><br><span class="line"><span class="undefined">  canvas.height = 20;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="actionscript">context.strokeStyle = <span class="string">"red"</span>;  </span></span><br><span class="line"><span class="undefined">  context.lineWidth = 1;  </span></span><br><span class="line"><span class="undefined">  context.beginPath();   </span></span><br><span class="line"><span class="undefined">  context.moveTo(0, 0);</span></span><br><span class="line"><span class="undefined">  context.lineTo(20, 10);</span></span><br><span class="line"><span class="undefined">  context.lineTo(0, 20);</span></span><br><span class="line"><span class="undefined">  context.lineTo(10, 10);</span></span><br><span class="line"><span class="undefined">  context.lineTo(0, 0);  </span></span><br><span class="line"><span class="undefined">  context.stroke();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 把绘制了的canvas设置到style里面</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> style = <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Icon(&#123;</span></span><br><span class="line"><span class="undefined">  img: canvas,</span></span><br><span class="line"><span class="undefined">  imgSize: [canvas.width, canvas.height],</span></span><br><span class="line"><span class="javascript">  rotation: <span class="number">90</span> * <span class="built_in">Math</span>.PI / <span class="number">180</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建一个Feature</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> shape = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">    geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">104</span>, <span class="number">30</span>])</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 应用具有不规则几何图形的样式到Feature</span></span></span><br><span class="line"><span class="undefined">  shape.setStyle(style);</span></span><br><span class="line"><span class="undefined">  layer.getSource().addFeature(shape);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>和svg的那个例子一样，使用了<code>ol.style.Icon</code>样式的<code>img</code>属性来设置，需要注意的是，必须设置<code>imgSize</code>属性，因为仅仅通过<code>img</code>设置的图像对象，没有办法自动获取宽高。 同时，官网也提供了一个类似的例子<a href="http://openlayers.org/en/v3.13.1/examples/earthquake-custom-symbol.html" target="_blank" rel="noopener">earthquake-custom-symbol</a>，只是使用OpenLayers3 内部提供的封装库来绘制图像到<code>canvas</code>上，原理一样。</p><p>有了这种方式之后，相信做任何图标都不会遇到难题了。</p><h1 id="动态改变图标"><a href="#动态改变图标" class="headerlink" title="动态改变图标"></a>动态改变图标</h1><p>在实际业务应用中，需要根据环境条件，动态的修改图标样式，以反馈数据变化。 比如像下面这样，点击五星，五星图标会用红色填充：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">  var layer = new ol.layer.Vector({    source: new ol.source.Vector()  })  var map = new ol.Map({    layers: [      new ol.layer.Tile({        source: new ol.source.OSM()      }),       layer    ],    target: 'map',    view: new ol.View({      projection: 'EPSG:4326',      center: [104, 30],      zoom: 10    })  });    var star = new ol.Feature({    geometry: new ol.geom.Point([104, 30])  });  star.setStyle(new ol.style.Style({    image: new ol.style.RegularShape({      points: 5,      radius1: 20,      radius2: 10,      stroke: new ol.style.Stroke({          color: 'red',          size: 2      })    })  }));  layer.getSource().addFeature(star);  map.on('click', function(event){      var feature = map.forEachFeatureAtPixel(event.pixel, function(feature){          return feature;      });      if (feature) {          var style = feature.getStyle().getImage();          feature.setStyle(new ol.style.Style({            image: new ol.style.RegularShape({              points: 5,                  radius1: 20,                  radius2: 10,                  stroke: style.getStroke(),                  fill: new ol.style.Fill({                      color: 'red'                  })            })          }));      }  });</script><p>对应的代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.Vector()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">    layers: [</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;), </span></span><br><span class="line"><span class="undefined">      layer</span></span><br><span class="line"><span class="undefined">    ],</span></span><br><span class="line"><span class="actionscript">    target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">      center: [104, 30],</span></span><br><span class="line"><span class="undefined">      zoom: 10</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 添加一个空心的五星</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> star = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">    geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">104</span>, <span class="number">30</span>])</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="actionscript">  star.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">    image: <span class="keyword">new</span> ol.style.RegularShape(&#123;</span></span><br><span class="line"><span class="undefined">      points: 5,</span></span><br><span class="line"><span class="undefined">      radius1: 20,</span></span><br><span class="line"><span class="undefined">      radius2: 10,</span></span><br><span class="line"><span class="actionscript">      stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">      color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">      size: 2</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  layer.getSource().addFeature(star);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 监听地图点击事件</span></span></span><br><span class="line"><span class="actionscript">  map.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> feature = map.forEachFeatureAtPixel(event.pixel, <span class="function"><span class="keyword">function</span><span class="params">(feature)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> feature;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">if</span> (feature) &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 将空心五星为红色实心五星</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> style = feature.getStyle().getImage();</span></span><br><span class="line"><span class="actionscript">  feature.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">    image: <span class="keyword">new</span> ol.style.RegularShape(&#123;</span></span><br><span class="line"><span class="undefined">      points: 5,</span></span><br><span class="line"><span class="undefined">  radius1: 20,</span></span><br><span class="line"><span class="undefined">  radius2: 10,</span></span><br><span class="line"><span class="undefined">  stroke: style.getStroke(),</span></span><br><span class="line"><span class="actionscript">  fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">  color: <span class="string">'red'</span></span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;));</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="文字标注"><a href="#文字标注" class="headerlink" title="文字标注"></a>文字标注</h1><p>前面基本都在围绕着图标进行说明，其实用<code>Feature</code> + <code>Style</code>的方式，也是可以单独添加文字的，虽然简单，但可能有些同学会忽略这样的做法，所以在此用一个简单的示例来说明：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">  var layer = new ol.layer.Vector({    source: new ol.source.Vector()  })  var map = new ol.Map({    layers: [      new ol.layer.Tile({        source: new ol.source.OSM()      }),       layer    ],    target: 'map',    view: new ol.View({      projection: 'EPSG:4326',      center: [104.06, 30.67],      zoom: 10    })  });  var anchor = new ol.Feature({    geometry: new ol.geom.Point([104.06, 30.67])  });  anchor.setStyle(new ol.style.Style({    text: new ol.style.Text({      text: '淡叔所在地成都',      fill: new ol.style.Fill({          color: 'red'      })    })  }));  layer.getSource().addFeature(anchor);</script><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.Vector()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">    layers: [</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;), </span></span><br><span class="line"><span class="undefined">      layer</span></span><br><span class="line"><span class="undefined">    ],</span></span><br><span class="line"><span class="actionscript">    target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">      center: [104.06, 30.67],</span></span><br><span class="line"><span class="undefined">      zoom: 10</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> anchor = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">    geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">104.06</span>, <span class="number">30.67</span>])</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 设置文字style</span></span></span><br><span class="line"><span class="actionscript">  anchor.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">    text: <span class="keyword">new</span> ol.style.Text(&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// font: '10px sans-serif' 默认这个字体，可以修改成其他的，格式和css的字体设置一样</span></span></span><br><span class="line"><span class="actionscript">      text: <span class="string">'淡叔所在地成都'</span>,</span></span><br><span class="line"><span class="actionscript">      fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">      color: <span class="string">'red'</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;));</span></span><br><span class="line"><span class="undefined">  layer.getSource().addFeature(anchor);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有很多属性可以设置，比如缩放，旋转，以及位移等等，非常简单，可自行设置调试。</p><h1 id="style及应用"><a href="#style及应用" class="headerlink" title="style及应用"></a>style及应用</h1><p>前面已经介绍了第一种加载图标的方式，现在介绍第二种方式，使用<code>Feature</code> + <code>Style</code>来实现，用这种方式实现之前的效果如下：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">  var layer = new ol.layer.Vector({    source: new ol.source.Vector()  })  var map = new ol.Map({    layers: [      new ol.layer.Tile({        source: new ol.source.OSM()      }),       layer    ],    target: 'map',    view: new ol.View({      projection: 'EPSG:4326',      center: [104, 30],      zoom: 10    })  });  var anchor = new ol.Feature({    geometry: new ol.geom.Point([104, 30])  });  anchor.setStyle(new ol.style.Style({    image: new ol.style.Icon({      src: '../img/anchor.png'    })  }));  layer.getSource().addFeature(anchor);</script><p>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 我们需要一个vector的layer来放置图标</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.Vector()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">    layers: [</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;), </span></span><br><span class="line"><span class="undefined">      layer</span></span><br><span class="line"><span class="undefined">    ],</span></span><br><span class="line"><span class="actionscript">    target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">      center: [104, 30],</span></span><br><span class="line"><span class="undefined">      zoom: 10</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建一个Feature，并设置好在地图上的位置</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> anchor = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">    geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">104</span>, <span class="number">30</span>])</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 设置样式，在样式中就可以设置图标</span></span></span><br><span class="line"><span class="actionscript">  anchor.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">    image: <span class="keyword">new</span> ol.style.Icon(&#123;</span></span><br><span class="line"><span class="actionscript">      src: <span class="string">'../img/anchor.png'</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;));</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 添加到之前的创建的layer中去</span></span></span><br><span class="line"><span class="undefined">  layer.getSource().addFeature(anchor);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果是一样的，但从代码上来看，是不一样的:</p><ul><li>首先<code>overlay</code>需要HTML元素<code>img</code>，但这种方式不需要</li><li><code>overlay</code>是添加在<code>map</code>上的，但是这种方式需要一个<code>Vector</code>的layer，并添加在其上</li><li>我们没有办法像<code>overlay</code>那样使用一些HTML技术</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>虽然不能用css直接修改图标显示，但并不是说使用这种方式没有自定义的余地，大家可以先在官网API上看一下<code>ol.style.Icon</code>的构造参数，会看到可以设置位置，透明度，放大缩小，旋转等，基本能满足大多数的应用，由于和<code>CSS</code>不同，很多同学在应用时遇到一些问题，所以下面给出了一些具体的使用示例。</p><h1 id="styleFunction应用"><a href="#styleFunction应用" class="headerlink" title="styleFunction应用"></a>styleFunction应用</h1><p>很多时候，我们会忽略<code>styleFunction</code>的存在，但很明显的，它可以让我们的图标或者标签应用更加灵活，比如<a href="07-03-02.md">根据层级放大缩小图标</a>也可以用<code>styleFunction</code>来实现：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol-debug.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">  var layer = new ol.layer.Vector({    source: new ol.source.Vector()  })  var map = new ol.Map({    layers: [      new ol.layer.Tile({        source: new ol.source.OSM()      }),       layer    ],    target: 'map',    view: new ol.View({      projection: 'EPSG:4326',      center: [104, 30],      zoom: 10    })  });  var anchor = new ol.Feature({    geometry: new ol.geom.Point([104, 30])  });  anchor.setStyle(function(resolution){      return [new ol.style.Style({          image: new ol.style.Icon({            src: '../img/anchor.png',            scale: map.getView().getZoom() / 10          })        })];  });  layer.getSource().addFeature(anchor);</script><p>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.Vector()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">    layers: [</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;), </span></span><br><span class="line"><span class="undefined">      layer</span></span><br><span class="line"><span class="undefined">    ],</span></span><br><span class="line"><span class="actionscript">    target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">      center: [104, 30],</span></span><br><span class="line"><span class="undefined">      zoom: 10</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> anchor = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">    geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">104</span>, <span class="number">30</span>])</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 应用style function，动态的获取样式</span></span></span><br><span class="line"><span class="actionscript">  anchor.setStyle(<span class="function"><span class="keyword">function</span><span class="params">(resolution)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> [<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">  image: <span class="keyword">new</span> ol.style.Icon(&#123;</span></span><br><span class="line"><span class="actionscript">    src: <span class="string">'../img/anchor.png'</span>,</span></span><br><span class="line"><span class="undefined">    scale: map.getView().getZoom() / 10</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;)];</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  layer.getSource().addFeature(anchor);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>对比一下前面同样功能的代码，你会发现这样更加的简单， 同时在此基础上扩展开来的应用也会更加的多。 比如动态替换图标，或者让图标不显示等等，可自行来实现这两个需求，以掌握此方式的使用。 </p><p>在上面这个例子中，我们是在<code>feature</code>上应用了<code>styleFunction</code>，通过官网API文档可以看到，其类型为<code>ol.FeatureStyleFunction</code>，函数仅带有一个参数<code>resolution</code>，在上面的代码中看到了，在函数体内<code>this</code>指的是当前的<code>feature</code>，根据文档说明，这个函数要范围一个<code>style</code>数组。 这一点需要注意，虽然实际使用中，即使没有返回数组也不会出错，但还是希望大家能遵守官网API的说明来使用该接口。</p><p>我们知道，除了<code>feature</code>可以设置样式之外，<code>layer</code>也是可以设置样式的，同样地也支持<code>styleFunction</code>，但是需要注意的是，其定义和<code>feature</code>的不一样，类型为<code>ol.style.StyleFunction</code>，该函数具有两个参数，第一个参数为<code>feature</code>，第二个参数为<code>resolution</code>，同样地，该函数需要返回<code>style</code>数组。 </p><p><code>styleFunction</code>在<code>feature</code>上具有很好的灵活性，那么应用在<code>layer</code>上，同样威力无穷，比如像下面这个：</p><p><div id="map2" style="width: 100%"></div></p><script type="text/javascript">  var layerStyleFunction = function(feature, resolution) {    var type = feature.get('type');    var style = null;    if (type === 'point') {      style = new ol.style.Style({        image: new ol.style.Circle({          radius: 1,          fill: new ol.style.Fill({            color: 'red'          })        })      });    } else if ( type === 'circle') {      style = new ol.style.Style({        image: new ol.style.Circle({          radius: 10,          stroke: new ol.style.Stroke({            color: 'red',            size: 1          })        })      });    } else {      style = new ol.style.Style({        image: new ol.style.RegularShape({          points: 5,          radius: 10,          fill: new ol.style.Fill({            color: 'blue'          })        })      });    }    return [style];  };  var layer2 = new ol.layer.Vector({    source: new ol.source.Vector(),    style: layerStyleFunction  });  var map2 = new ol.Map({    layers: [      new ol.layer.Tile({        source: new ol.source.OSM()      }),       layer2    ],    target: 'map2',    view: new ol.View({      projection: 'EPSG:4326',      center: [104, 30],      zoom: 10    })  });  var rect = new ol.Feature({    geometry: new ol.geom.Point([104, 30])  });  layer2.getSource().addFeature(rect);  var circle = new ol.Feature({    geometry: new ol.geom.Point([104, 30])  });  circle.set('type', 'circle');  layer2.getSource().addFeature(circle);  var point = new ol.Feature({    geometry: new ol.geom.Point([104, 30])  });  point.set('type', 'point');  layer2.getSource().addFeature(point);</script><p>在地图上可以看到中心位置有一个圆，一个点，一个五边形，但这次都没有直接在这些<code>feature</code>上设置样式，具体的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map2"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建layer使用的style function，根据feature的自定义type，返回不同的样式</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> layerStyleFunction = <span class="function"><span class="keyword">function</span><span class="params">(feature, resolution)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> type = feature.get(<span class="string">'type'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> style = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 点</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (type === <span class="string">'point'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">      style = <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">        image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">          radius: 1,</span></span><br><span class="line"><span class="actionscript">          fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">'red'</span></span></span><br><span class="line"><span class="undefined">          &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( type === <span class="string">'circle'</span>) &#123; <span class="comment">// 圆形</span></span></span><br><span class="line"><span class="actionscript">      style = <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">        image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">          radius: 10,</span></span><br><span class="line"><span class="actionscript">          stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">            size: 1</span></span><br><span class="line"><span class="undefined">          &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 其他形状</span></span></span><br><span class="line"><span class="actionscript">      style = <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">        image: <span class="keyword">new</span> ol.style.RegularShape(&#123;</span></span><br><span class="line"><span class="undefined">          points: 5,</span></span><br><span class="line"><span class="undefined">          radius: 10,</span></span><br><span class="line"><span class="actionscript">          fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">'blue'</span></span></span><br><span class="line"><span class="undefined">          &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 返回 style 数组</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> [style];</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> layer2 = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.Vector(),</span></span><br><span class="line"><span class="actionscript">    style: layerStyleFunction <span class="comment">// 应用上面创建的 style function</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map2 = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">    layers: [</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;), </span></span><br><span class="line"><span class="undefined">      layer2</span></span><br><span class="line"><span class="undefined">    ],</span></span><br><span class="line"><span class="actionscript">    target: <span class="string">'map2'</span>,</span></span><br><span class="line"><span class="actionscript">    view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">      projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">      center: [104, 30],</span></span><br><span class="line"><span class="undefined">      zoom: 10</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 添加三个feature，并设置自定义属性 type</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> rect = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">    geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">104</span>, <span class="number">30</span>])</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">  layer2.getSource().addFeature(rect);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> circle = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">    geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">104</span>, <span class="number">30</span>])</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="actionscript">  circle.set(<span class="string">'type'</span>, <span class="string">'circle'</span>);</span></span><br><span class="line"><span class="undefined">  layer2.getSource().addFeature(circle);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> point = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">    geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">104</span>, <span class="number">30</span>])</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="actionscript">  point.set(<span class="string">'type'</span>, <span class="string">'point'</span>);</span></span><br><span class="line"><span class="undefined">  layer2.getSource().addFeature(point);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这就是一个典型的根据<code>feature</code>的属性进行不同渲染的例子，可以在业务上无限扩展，比如<code>feature</code>的属性可以是速度，可以是大小，可以是时间，可以是权重等等。 由此可见，只要掌握了这个方法，前端按照条件渲染就不再困难。</p><h1 id="大量图标方案"><a href="#大量图标方案" class="headerlink" title="大量图标方案"></a>大量图标方案</h1><p>此处的大量图标方案，不涉及服务器端，如果图标不进行交互，可以把图标渲染到底图上。 此处只介绍说明在前端可交互的大量图标方案，在图标数量不大的情况，无论使用什么方式加载，都不会有性能问题，当图标多了之后，就会出现卡顿，内存占用增大等问题。 在OpenLayers 3开发中，可以考虑下面两个方案来解决这个问题。</p><h2 id="复用样式减少内存占用"><a href="#复用样式减少内存占用" class="headerlink" title="复用样式减少内存占用"></a>复用样式减少内存占用</h2><p>在应用大量图标的时候，其实图标样式差异化并不大，比如快餐店，公共厕所，公交站点等等有很多，但都是用同样的图标在地图上标准，在不注意的时候，我们是采用下面的方式来添加图标的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="number">10000</span>; index++) &#123;</span><br><span class="line"><span class="keyword">var</span> feature = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">geometry: <span class="keyword">new</span> ol.geom.Point([latlon[index].lon, latlon[index].lat])</span><br><span class="line">&#125;);</span><br><span class="line">feature.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">image: <span class="keyword">new</span> ol.style.Icon(&#123;</span><br><span class="line">src: <span class="string">'../img/marker.png'</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面代码，对每个<code>feature</code>设置<code>style</code>的时候，都是直接<code>new</code>的，这样势必会创建很多对象，占用很多内存。 那么复用必然减少很多内存，重构上面的代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> style = <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">image: <span class="keyword">new</span> ol.style.Icon(&#123;</span><br><span class="line">src: <span class="string">'../img/marker.png'</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="number">10000</span>; index++) &#123;</span><br><span class="line"><span class="keyword">var</span> feature = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">geometry: <span class="keyword">new</span> ol.geom.Point([latlon[index].lon, latlon[index].lat])</span><br><span class="line">&#125;);</span><br><span class="line">feature.setStyle(style);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就只创建了一个<code>style</code>对象，那么势必减少内存占用。 如果有多类图标，可以用数组缓存下来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> styles = [</span><br><span class="line"><span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">image: <span class="keyword">new</span> ol.style.Icon(&#123;</span><br><span class="line">src: <span class="string">'../img/marker1.png'</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;),</span><br><span class="line"><span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">image: <span class="keyword">new</span> ol.style.Icon(&#123;</span><br><span class="line">src: <span class="string">'../img/marker2.png'</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;),</span><br><span class="line"><span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">image: <span class="keyword">new</span> ol.style.Icon(&#123;</span><br><span class="line">src: <span class="string">'../img/marker3.png'</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="number">10000</span>; index++) &#123;</span><br><span class="line"><span class="keyword">var</span> feature = <span class="keyword">new</span> ol.Feature(&#123;</span><br><span class="line">geometry: <span class="keyword">new</span> ol.geom.Point([latlon[index].lon, latlon[index].lat])</span><br><span class="line">&#125;);</span><br><span class="line">feature.setStyle(styles[index % styles.length]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于官网有实际的例子，大家请移步到<a href="http://openlayers.org/en/v3.13.1/examples/icon-sprite-webgl.html" target="_blank" rel="noopener">icon-sprite-webgl</a>。 下面是其中的一些代码片段，在里面加入了一些注释，便于大家理解：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预先设置好要使用的style，并缓存在icons数组中</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; iconCount; ++i) &#123;</span><br><span class="line">  <span class="keyword">var</span> info = iconInfo[i];</span><br><span class="line">  icons[i] = <span class="keyword">new</span> ol.style.Icon(&#123;</span><br><span class="line">    offset: info.offset,</span><br><span class="line">    opacity: info.opacity,</span><br><span class="line">    rotateWithView: info.rotateWithView,</span><br><span class="line">    rotation: info.rotation,</span><br><span class="line">    scale: info.scale,</span><br><span class="line">    size: info.size,</span><br><span class="line">    src: <span class="string">'data/Butterfly.png'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; featureCount; ++i) &#123;</span><br><span class="line">  geometry = <span class="keyword">new</span> ol.geom.Point(</span><br><span class="line">      [<span class="number">2</span> * e * <span class="built_in">Math</span>.random() - e, <span class="number">2</span> * e * <span class="built_in">Math</span>.random() - e]);</span><br><span class="line">  feature = <span class="keyword">new</span> ol.Feature(geometry);</span><br><span class="line">  feature.setStyle(</span><br><span class="line">      <span class="keyword">new</span> ol.style.Style(&#123;</span><br><span class="line">      <span class="comment">// 直接使用上面缓存的icons里面的样式</span></span><br><span class="line">        image: icons[i % (iconCount - <span class="number">1</span>)]</span><br><span class="line">      &#125;)</span><br><span class="line">  );</span><br><span class="line">  features[i] = feature;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可在官网例子的基础上修改一下代码，验证一下复用和不复用的情况下，内存占用相差多少。</p><h2 id="复用Canvas提高效率"><a href="#复用Canvas提高效率" class="headerlink" title="复用Canvas提高效率"></a>复用Canvas提高效率</h2><p>采用上一种方式基本能解决掉绝大部分的问题，但是OpenLayers 3还提供了一种复用图标渲染使用的<code>Canvas</code>的方式，对应的类是<code>ol.style.AtlasManager</code>。 在了解其作用之前，需要先了解一点图标的渲染机制，比如<code>ol.style.Circle</code>和<code>ol.style.RegularShape</code>这样的图标，在内部渲染时，都会创建一个HTML的<code>canvas</code>，然后在这个画布上绘制图像，然后再把图像复制到地图上。 这样创建一个图标，就会在内部创建一个<code>canvas</code>。  <code>ol.style.AtlasManager</code>解决的问题就是，用一个大的<code>canvas</code>来绘制多个图标，这样就能减少<code>canvas</code>的数量，从而提高效率。 </p><p>官网有一个具体的例子来说明这种方法的使用，参见<a href="http://openlayers.org/en/v3.13.1/examples/symbol-atlas-webgl.html" target="_blank" rel="noopener">Symbols with WebGL</a>。 其中，关键的代码在：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> atlasManager = <span class="keyword">new</span> ol.style.AtlasManager(&#123;</span><br><span class="line">  <span class="comment">// we increase the initial size so that all symbols fit into</span></span><br><span class="line">  <span class="comment">// a single atlas image</span></span><br><span class="line">  initialSize: <span class="number">512</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">// circle symbol</span></span><br><span class="line">          symbols.push(<span class="keyword">new</span> ol.style.Circle(&#123;</span><br><span class="line">            opacity: info.opacity,</span><br><span class="line">            scale: info.scale,</span><br><span class="line">            radius: radiuses[j],</span><br><span class="line">            fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span><br><span class="line">              color: info.fillColor</span><br><span class="line">            &#125;),</span><br><span class="line">            stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span><br><span class="line">              color: info.strokeColor,</span><br><span class="line">              width: <span class="number">1</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">// by passing the atlas manager to the symbol,</span></span><br><span class="line">            <span class="comment">// the symbol will be added to an atlas</span></span><br><span class="line">            atlasManager: atlasManager  <span class="comment">// 注意：在创建style的这个地方设置了 atlasManager</span></span><br><span class="line">          &#125;));</span><br></pre></td></tr></table></figure><p>需要注意的是，在API官方文档上，并没有这个属性的设置，但内部实现是有这个优化的。 同时需要注意的是经常使用的<code>ol.style.Icon</code>目前是没有实现这个优化的。</p><h1 id="提示信息"><a href="#提示信息" class="headerlink" title="提示信息"></a>提示信息</h1><p>提示信息在很多业务场景中都需要，比如显示当前位置周边的饭店列表，或者点击饭店，显示饭店详细信息，交通路线，电话号码等等。 鉴于显示的业务信息比较多，所以通常的做法都是采用<code>overlay</code>的方式来做。 用传统的HTML来布局和排版信息，然后附加到地图上的指定位置就可以了。 官网中提供了一个具体的例子： <a href="http://openlayers.org/en/v3.13.1/examples/popup.html" target="_blank" rel="noopener">popup</a>。 下面就解读一下这个例子的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--此处用html布局，各种样式均在css中定义好了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"popup"</span> <span class="attr">class</span>=<span class="string">"ol-popup"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"popup-closer"</span> <span class="attr">class</span>=<span class="string">"ol-popup-closer"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"popup-content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 获取到popup的节点</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'popup'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'popup-content'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> closer = <span class="built_in">document</span>.getElementById(<span class="string">'popup-closer'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建一个overlay, 绑定html元素container</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> overlay = <span class="keyword">new</span> ol.Overlay(<span class="comment">/** @type &#123;olx.OverlayOptions&#125; */</span> (&#123;</span></span><br><span class="line"><span class="undefined">    element: container,</span></span><br><span class="line"><span class="actionscript">    autoPan: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">    autoPanAnimation: &#123;</span></span><br><span class="line"><span class="undefined">      duration: 250</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  ......</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 监听地图点击事件</span></span></span><br><span class="line"><span class="actionscript">  map.on(<span class="string">'singleclick'</span>, <span class="function"><span class="keyword">function</span><span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 获取当前点击坐标，并设置到HTML元素上去</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> coordinate = evt.coordinate;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> hdms = ol.coordinate.toStringHDMS(ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">        coordinate, <span class="string">'EPSG:3857'</span>, <span class="string">'EPSG:4326'</span>));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="handlebars"><span class="xml">    content.innerHTML = '<span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked here:<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>' + hdms +</span></span></span><br><span class="line"><span class="actionscript">        <span class="string">'&lt;/code&gt;'</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 设置overlay的位置，从而显示在鼠标点击处</span></span></span><br><span class="line"><span class="undefined">    overlay.setPosition(coordinate);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;图标及提示信息&quot;&gt;&lt;a href=&quot;#图标及提示信息&quot; class=&quot;headerlink&quot; title=&quot;图标及提示信息&quot;&gt;&lt;/a&gt;图标及提示信息&lt;/h1&gt;&lt;p&gt;图标是GIS应用中必不可少的要素，比如在地图上标注饭店，学校，加油站等，就需要添加图标，点击图标，可能需要提示更为详细的信息，比如地址，评价，或者更为复杂的业务信息。本节将从基本的应用入手讲解，直到比较高级一些的自定义特色图标和信息展示。&lt;/p&gt;
    
    </summary>
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/categories/openLayers/"/>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers 3 事件</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/ch08/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/ch08/index.html</id>
    <published>2018-01-18T12:29:59.000Z</published>
    <updated>2018-01-30T14:08:45.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>事件让很多业务的东西串联在一起，在前端中起着非常重要的作用，比如鼠标点击，移动事件。但其应用远不仅如此，现实生活中就存在很多大大小小的事件。 在OpenLayers 3中，同样存在非常多的事件，比如鼠标左键单击，双击等等。 同时还有一些用于各个模块之间进行协作使用的事件，比如<code>ol.Map</code>的<code>postrender</code>和<code>propertychange</code>事件。 通过这些事件，OpenLayers 3的功能模块协作一致，同样地，也可以让我们自己二次开发的功能模块运作起来。 同时，根据需要，我们还可以在系统中新增自定义事件，使得我们的开发使用方式同OpenLayers 3更加的一致。在本章节将详细介绍OpenLayers 3中的各种事件，及相关应用。</p><a id="more"></a><h1 id="一个简单的事件应用"><a href="#一个简单的事件应用" class="headerlink" title="一个简单的事件应用"></a>一个简单的事件应用</h1><p>在深入分析和理解之前，我们还是以简单的一个例子入手，来学习一下如何使用OpenLayers 3中的事件来做一个简单的事，从而熟悉整个流程。 用鼠标点击下面这个地图，将弹出一个对话框，显示点击位置的经纬度：</p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><br><div id="map" style="width: 100%"></div><br><script type="text/javascript"><br>    var map = new ol.Map({<br>        layers: [<br>          new ol.layer.Tile({<br>            source: new ol.source.OSM()<br>          })<br>        ],<br>        target: ‘map’,<br>        view: new ol.View({<br>          center: ol.proj.transform(<br>              [104, 30], ‘EPSG:4326’, ‘EPSG:3857’),<br>          zoom: 10<br>        })<br>    });<br><br>    map.on(‘singleclick’, function(event){<br>        alert(ol.proj.transform(map.getEventCoordinate(event), ‘EPSG:3857’, ‘EPSG:4326’));<br>    })<br></script><br><br>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 监听singleclick事件</span></span></span><br><span class="line"><span class="actionscript">map.on(<span class="string">'singleclick'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 通过getEventCoordinate方法获取地理位置，再转换为wgs84坐标，并弹出对话框显示</span></span></span><br><span class="line"><span class="actionscript">alert(ol.proj.transform(map.getEventCoordinate(event), <span class="string">'EPSG:3857'</span>, <span class="string">'EPSG:4326'</span>));</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>代码很简单，但需要注意的是，任意的事件应用，必然会有三个步骤：<br><br><em> 找准事件发送者，比如上面这个例子，<code>map</code>就是事件发送者。 如何找到它呢？ 一般都是要交互的对象。</em> 找准事件名称，比如上面例子中的<code>singleclick</code>，切忌不要随便想象，或者按照惯例来写名称，初次使用，请一定参照API文档，不然后果自负。 如何参看一个类有什么事件？ 请参见<a href="../ch03/03-03.md">看懂API</a>。<br><em> 编写事件响应函数，在OpenLayers中，事件发送者都会有一个名字为<code>on</code>的函数，调用这个函数，就能监听指定的事件，响应函数<code>listener</code>具有一个参数<code>event</code>，这个<code>event</code>类就对应于API文档中事件名称后边括号里的类。<br><br>这三个步骤缺一不可，如果使用过<code>jquery</code>监听事件，应该对此比较熟悉。 除此之外，关于OpenLayers 3中的事件应用，还有下面两点需要说明：</em> 几乎OpenLayers 3中所有的类，都能监听事件和触发事件，因为它们都继承于类<code>ol.Observable</code>，这个类甚至是<code>ol.Object</code>的父类。 如此可见，OpenLayers在整个引擎中，是多么的依赖于事件通信。<br>* 而OpenLayers 3的整个事件机制，又是基于Google的<code>Closure Library</code>。所以如果你对这个库熟悉，那么对OpenLayers 3提供的事件机制会比较熟悉。<br><br>如果仅限于直接使用OpenLayers 3中的事件，就没有必要深入源码去探个究竟，只要遵照约定对事件进行应用就好。<br><br># 注销事件响应<br>上一节的示例仅仅演示了如何监听一个事件，并响应处理。 但如果之后又不需要再响应该事件了，要怎么办。 比如有一个引导用户使用的需求，用户第一次点击地图的时候，需要弹出一个使用说明，之后点击地图就不用再弹出这个使用说明了。 那我们有哪些方式可以做到这一点呢？ 尝试点击一下下面这个地图，之后再点击一次试试：<br><br><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><br><div id="map" style="width: 100%"></div><br><script type="text/javascript"><br>    var map = new ol.Map({<br>        layers: [<br>          new ol.layer.Tile({<br>            source: new ol.source.OSM()<br>          })<br>        ],<br>        target: ‘map’,<br>        view: new ol.View({<br>          center: ol.proj.transform(<br>              [104, 30], ‘EPSG:4326’, ‘EPSG:3857’),<br>          zoom: 10<br>        })<br>    });<br><br>    var key = map.on(‘singleclick’, function(event){<br>        alert(‘大家好，我是淡叔，这是一个演示如何取消事件监听的应用，之后再点击地图时，你将不会再看到这个说明。’);<br>        map.unByKey(key);<br>    })<br><br></script><br><br>第二次点击地图后，是否就不会再弹出提示信息了？ 其实代码很简单：<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> key = map.on(<span class="string">'singleclick'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">'大家好，我是淡叔，这是一个演示如何取消事件监听的应用，之后再点击地图时，你将不会再看到这个说明。'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 下面这行代码就是取消事件监听</span></span></span><br><span class="line"><span class="undefined">map.unByKey(key);</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>除了上面这个方式可以注销事件监听之外，还可以用下面这样的方式：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建事件监听器</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> singleclickListener = <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">'大家好，我是淡叔，这是一个演示如何取消事件监听的应用，之后再点击地图时，你将不会再看到这个说明。'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 在响应一次后，注销掉该监听器</span></span></span><br><span class="line"><span class="actionscript">map.un(<span class="string">'singleclick'</span>, singleclickListener);</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="actionscript">map.on(<span class="string">'singleclick'</span>, singleclickListener);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>针对这个应用，还可以按照下面这样来实现：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 使用once函数，只会响应一次事件，之后自动注销事件监听</span></span></span><br><span class="line"><span class="actionscript">map.once(<span class="string">'singleclick'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">'大家好，我是淡叔，这是一个演示如何取消事件监听的应用，之后再点击地图时，你将不会再看到这个说明。'</span>);</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>到此，OpenLayers 3的事件应用基本介绍完毕，后续将介绍OpenLayers 3常用事件。<br><br><br># 常用事件<br><br>几乎OpenLayers主要的类都会派发相关的事件，虽然事件很多，但日常使用的事件大致分为下面几类。<br><br>## 常用鼠标事件<br><br>### 地图鼠标左键单击事件<br>对应的类为<code>ol.Map</code>，事件名为<code>singleclick</code>。<br><br>### 地图鼠标左键双击事件<br>对应的类为<code>ol.Map</code>，事件名为<code>dblclick</code>。<br><br>### 地图鼠标点击事件<br>对应的类为<code>ol.Map</code>，事件名为<code>click</code>。<br><br>### 地图鼠标移动事件<br>对应的类为<code>ol.Map</code>，事件名为<code>pointermove</code>。<br><br>### 地图鼠标拖拽事件<br>对应的类为<code>ol.Map</code>，事件名为<code>pointerdrag</code>。<br><br>### 地图移动事件<br>对应的类为<code>ol.Map</code>，事件名为<code>moveend</code>。<br><br>可以通过下面这个地图来尝试一下鼠标事件：<br><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><br><div id="info" style="background-color: #999;">触发事件提示信息</div><br><div id="map" style="width: 100%"></div><br><script type="text/javascript"><br>    var map = new ol.Map({<br>        layers: [<br>          new ol.layer.Tile({<br>            source: new ol.source.OSM()<br>          })<br>        ],<br>        target: ‘map’,<br>        view: new ol.View({<br>          center: ol.proj.transform(<br>              [104, 30], ‘EPSG:4326’, ‘EPSG:3857’),<br>          zoom: 10<br>        })<br>    });<br><br>    map.on(‘singleclick’, function(event){<br>        document.getElementById(‘info’).innerHTML = ‘触发了ol.Map的单击事件：singleclick’;<br>    });<br><br>    map.on(‘dblclick’, function(event){<br>        document.getElementById(‘info’).innerHTML = ‘触发了ol.Map的双击事件：dblclick’;<br>    });<br><br>    map.on(‘click’, function(event){<br>        document.getElementById(‘info’).innerHTML = ‘触发了ol.Map的点击事件：click’;<br>    });<br><br>    // map.on(‘pointermove’, function(event){<br>    //     document.getElementById(‘info’).innerHTML = ‘触发了ol.Map的鼠标移动事件：pointermove’;<br>    // });<br><br>    map.on(‘pointerdrag’, function(event){<br>        document.getElementById(‘info’).innerHTML = ‘触发了ol.Map的拖拽事件：pointerdrag’;<br>    });<br><br>    map.on(‘moveend’, function(event){<br>        document.getElementById(‘info’).innerHTML = ‘触发了ol.Map的地图移动事件：moveend’;<br>    });<br><br></script><br><br>注意在<code>singleclick</code>和<code>dblclick</code>响应之前，都会触发<code>click</code>事件，在选择事件时，需要谨慎考虑。 同时发现<code>moveend</code>事件在地图缩放的时候，也会触发。 代码如下：<br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"info"</span> <span class="attr">style</span>=<span class="string">"background-color: #999;"</span>&gt;</span>触发事件提示信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 响应单击事件</span></span></span><br><span class="line"><span class="actionscript">map.on(<span class="string">'singleclick'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'info'</span>).innerHTML = <span class="string">'触发了ol.Map的单击事件：singleclick'</span>;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 响应双击事件</span></span></span><br><span class="line"><span class="actionscript">map.on(<span class="string">'dblclick'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'info'</span>).innerHTML = <span class="string">'触发了ol.Map的双击事件：dblclick'</span>;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 响应点击事件</span></span></span><br><span class="line"><span class="actionscript">map.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'info'</span>).innerHTML = <span class="string">'触发了ol.Map的点击事件：click'</span>;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 响应鼠标移动事件，事件太频繁，故注释掉了，可自行验证该事件</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// map.on('pointermove', function(event)&#123;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// document.getElementById('info').innerHTML = '触发了ol.Map的鼠标移动事件：pointermove';</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 响应拖拽事件</span></span></span><br><span class="line"><span class="actionscript">map.on(<span class="string">'pointerdrag'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'info'</span>).innerHTML = <span class="string">'触发了ol.Map的拖拽事件：pointerdrag'</span>;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 地图移动事件</span></span></span><br><span class="line"><span class="actionscript">map.on(<span class="string">'moveend'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'info'</span>).innerHTML = <span class="string">'触发了ol.Map的地图移动事件：moveend'</span>;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>## 非直接交互事件<br><br>### 地图缩放事件<br>对应的类为<code>ol.View</code>，事件名为 <code>change:resolution</code>，为什么？ 因为分辨率改变了，自然层级就变化了。<br><br>### 地图中心改变事件<br>对应的类是<code>ol.View</code>，事件名为 <code>change:center</code>。<br><br>下面这个地图，可以让你感受一下这两个事件：<br><br><div id="info2" style="background-color: #999;">事件提示信息</div><br><div id="map2" style="width: 100%"></div><br><script type="text/javascript"><br>    var map2 = new ol.Map({<br>        layers: [<br>          new ol.layer.Tile({<br>            source: new ol.source.OSM()<br>          })<br>        ],<br>        target: ‘map2’,<br>        view: new ol.View({<br>          center: ol.proj.transform(<br>              [104, 30], ‘EPSG:4326’, ‘EPSG:3857’),<br>          zoom: 10<br>        })<br>    });<br><br>    var view = map2.getView();<br>    view.on(‘change:resolution’, function(event){<br>        document.getElementById(‘info2’).innerHTML = ‘触发了ol.View的缩放事件：change:resolution，当前层级为： ‘ + this.getZoom();<br>    });<br><br>    view.on(‘change:center’, function(event){<br>        document.getElementById(‘info2’).innerHTML = ‘触发了ol.View的地图中心改变事件：change:center，当前中心点为： ‘ + ol.proj.transform(<br>              this.getCenter(), ‘EPSG:3857’, ‘EPSG:4326’);<br>    });<br></script><br><br>### 改变事件<br>OpenLayers 3的大多数类都拥有一些改变事件，这些事件常用于模块之间联动使用，在二次开发的业务需求中，也会经常需要，所以希望能引起重视，具体的事件可以参照API官网文档的说明。 比如上面的例子其实就是应用的这类事件。<br><br># 阻止事件传递<br><br><br># 自定义事件及应用<br><br>通过API文档，我们可以看到OpenLayers 3的相关类，都有一些事件，但这些事件大多是和现有引擎相关的，并不能满足我们大多数的业务需求。如果能为OpenLayers 3的类增加自定义事件，那么必然能更好地实现业务需求。接下来就尝试为<code>ol.Feature</code>添加一个<code>mouseover</code>的事件，通过这个事件，就可以实现在鼠标移到<code>Feature</code>上时，改变它的样式。<br><br>要添加自定义事件，需要知道这样一个事实：<code>ol.Feature</code>继承于<code>ol.Object</code>，而<code>ol.Object</code>具有派发事件(<a href="http://openlayers.org/en/v3.13.1/apidoc/ol.Object.html#dispatchEvent" target="_blank" rel="noopener">dispatchEvent</a>)和监听事件(<a href="http://openlayers.org/en/v3.13.1/apidoc/ol.Object.html#on" target="_blank" rel="noopener">on</a>)的功能。 关于这两个功能的详细信息可以参见API文档。这样，我们要自定义事件就非常容易了，如果注意观察，会发现OpenLayers 3中的类都继承于<code>ol.Object</code>，也就是说，如果自定义事件方法在<code>ol.Feature</code>上有效，那么在其他的OpenLayers 3的类上也是同样有效的。<br><br>下面就先展示一下通过自定义的<code>mouseover</code>事件来改变<code>Feature</code>的样式：<br><br><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head><p><div id="map" style="width: 100%, height: 400px"></div></p><script>    // 在原点处创建一个feature    var feature1 = new ol.Feature({        geometry: new ol.geom.Point([0, 0])    });    // 并设置为半径为100像素的圆，用红色填充    feature1.setStyle(new ol.style.Style({        image: new ol.style.Circle({            radius: 100,            fill: new ol.style.Fill({                color: 'red'            })        })    }));    // 在坐标[5000000, 5000000]处创建另一个feature    var feature2 = new ol.Feature({        geometry: new ol.geom.Point([5000000, 5000000])    });    // 并设置为半径为100像素的圆，用黄色填充    feature2.setStyle(new ol.style.Style({        image: new ol.style.Circle({            radius: 100,            fill: new ol.style.Fill({                color: 'yellow'            })        })    }));  // 创建地图  var map = new ol.Map({        // 设置地图图层        layers: [          // 创建一个使用Open Street Map地图源的瓦片图层          new ol.layer.Tile({source: new ol.source.OSM()}),          // 把之前创建的feature1和feature2放在另一个层里          new ol.layer.Vector({source: new ol.source.Vector({              features: [feature1, feature2]          })})        ],        // 设置显示地图的视图        view: new ol.View({          center: [0, 0],    // 定义地图显示中心于经度0度，纬度0度处          zoom: 2            // 并且定义地图显示层级为2        }),        // 让id为map的div作为地图的容器        target: 'map'        });  // 为地图注册鼠标移动事件的监听  map.on('pointermove', function(event){      map.forEachFeatureAtPixel(event.pixel, function(feature){          // 为移动到的feature发送自定义的mousemove消息          feature.dispatchEvent({type: 'mousemove', event: event});      });  });  // 为feature1注册自定义事件mousemove的监听  feature1.on('mousemove', function(event){      // 修改feature的样式为半径100像素的园，用蓝色填充      this.setStyle(new ol.style.Style({            image: new ol.style.Circle({                radius: 100,                fill: new ol.style.Fill({                    color: 'blue'                })            })        }));  });</script><p>为了对比，在地图上添加了两个圆，一个黄色的，一个红色的。鼠标移动到红色的圆上，它会变成蓝色的圆。但是鼠标移到黄色的圆上，不会有任何改变。这个功能在官网的例子中也有，参见<a href="http://openlayers.org/en/v3.13.1/examples/select-features.html" target="_blank" rel="noopener">select-features</a>。那么用自定义事件的方式来做，又该怎样来实现呢？对应的源码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!Doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">http://www.w3.org/1999/xhtml</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>                  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">Content-Type</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">X-UA-Compatible</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">always</span> <span class="attr">name</span>=<span class="string">referrer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>OpenLayers 3地图示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../src/ol3.13.1/ol.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../src/ol3.13.1/ol.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%, height: 400px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 在原点处创建一个feature</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> feature1 = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">0</span>, <span class="number">0</span>])</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 并设置为半径为100像素的圆，用红色填充</span></span></span><br><span class="line"><span class="actionscript">feature1.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: 100,</span></span><br><span class="line"><span class="actionscript">fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'red'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 在坐标[5000000, 5000000]处创建另一个feature</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> feature2 = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">geometry: <span class="keyword">new</span> ol.geom.Point([<span class="number">5000000</span>, <span class="number">5000000</span>])</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 并设置为半径为100像素的圆，用黄色填充</span></span></span><br><span class="line"><span class="actionscript">feature2.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: 100,</span></span><br><span class="line"><span class="actionscript">fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'yellow'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建地图</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置地图图层</span></span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建一个使用Open Street Map地图源的瓦片图层</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;source: <span class="keyword">new</span> ol.source.OSM()&#125;),</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 把之前创建的feature1和feature2放在另一个层里</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Vector(&#123;source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="undefined">  features: [feature1, feature2]</span></span><br><span class="line"><span class="undefined">  &#125;)&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置显示地图的视图</span></span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript">  center: [<span class="number">0</span>, <span class="number">0</span>],<span class="comment">// 定义地图显示中心于经度0度，纬度0度处</span></span></span><br><span class="line"><span class="actionscript">  zoom: <span class="number">2</span><span class="comment">// 并且定义地图显示层级为2</span></span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 让id为map的div作为地图的容器</span></span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 为地图注册鼠标移动事件的监听</span></span></span><br><span class="line"><span class="actionscript">  map.on(<span class="string">'pointermove'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  map.forEachFeatureAtPixel(event.pixel, <span class="function"><span class="keyword">function</span><span class="params">(feature)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 为移动到的feature发送自定义的mousemove消息</span></span></span><br><span class="line"><span class="actionscript">  feature.dispatchEvent(&#123;type: <span class="string">'mousemove'</span>, event: event&#125;);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 为feature1注册自定义事件mousemove的监听</span></span></span><br><span class="line"><span class="actionscript">  feature1.on(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 修改feature的样式为半径100像素的园，用蓝色填充</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">this</span>.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: 100,</span></span><br><span class="line"><span class="actionscript">fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'blue'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码中有详细的注释，再辅以API文档，相信应该看懂绝大部分的代码，当然最关键的代码在于最后的两个事件监听，在这两段代码中，可能下面这句不是很明白：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feature.dispatchEvent(&#123;<span class="attr">type</span>: <span class="string">'mousemove'</span>, <span class="attr">event</span>: event&#125;);</span><br></pre></td></tr></table></figure></p><p><code>dispatchEvent</code>的参数具有<code>type</code>和<code>event</code>属性，必须这样构造吗？在回答这个问题之前，需要先看一下API文档，发现参数类型为<code>goog.events.EventLike</code>，说明它其实用的是google的closure库来实现的，通过closure库的源码我们知道，派发的事件如果是一个对象，那么<strong>必须</strong>包含<code>type</code>属性，用于表示事件类型。其他的属性可以自由定义，比如此处定义了<code>event</code>属性，并设置对应的值，为的是让鼠标事件传递给<code>feature1</code>的监听函数。</p><p><code>dispatchEvent</code>的参数会被原封不动的传递给事件响应函数，对应代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feature1.on(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br></pre></td></tr></table></figure></p><p>里<code>function</code>的参数<code>event</code>，可以通过调试窗口看到此处的<code>event</code>和<code>dispatchEvent</code>的参数是一样的。注意事件名称是可以自定义的，只要派发和监听使用的事件名称是一致的就可以。</p><p>除了可以通过<code>dispatchEvent({type: &#39;mousemove&#39;, event: event})</code>这种形式派发一个事件之外，还可以通过<code>dispatchEvent(&#39;mousemove&#39;)</code>这中形式直接发送<code>mousemove</code>事件。有兴趣的同学可以自行验证。</p><p>到此，我们就完成了自定义事件的三件事：定义事件类型，派发事件，监听事件。</p><p>使用自定义事件会带来下面几个好处：</p><ul><li>灵活控制，对比一下官网例子和这个例子，就能看出一二。</li><li>能更好地满足业务需要，适当地进行扩展。</li><li>采用更统一的事件处理框架。</li></ul><p>有很多同学为了处理多个<code>Feature</code>的鼠标事件，可能会为<code>Map</code>注册很多次<code>pointermove</code>事件监听，从而会导致性能降低，这种做法是不可取的。如果采用上面这种自定义事件的处理方式，就只用注册一次，让真正有需要的<code>Feature</code>通过注册事件响应来处理业务，从而还能简化处理逻辑。</p><p>上面这个例子鼠标移到红色圆后变蓝色，但是移出圆后，还是蓝色，能不能再移出圆的时候再变成红色呢？ 试试用自定义事件的方式再改进一下，实现<code>mousein</code>和<code>mouseout</code>两种事件。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;事件&quot;&gt;&lt;a href=&quot;#事件&quot; class=&quot;headerlink&quot; title=&quot;事件&quot;&gt;&lt;/a&gt;事件&lt;/h1&gt;&lt;p&gt;事件让很多业务的东西串联在一起，在前端中起着非常重要的作用，比如鼠标点击，移动事件。但其应用远不仅如此，现实生活中就存在很多大大小小的事件。 在OpenLayers 3中，同样存在非常多的事件，比如鼠标左键单击，双击等等。 同时还有一些用于各个模块之间进行协作使用的事件，比如&lt;code&gt;ol.Map&lt;/code&gt;的&lt;code&gt;postrender&lt;/code&gt;和&lt;code&gt;propertychange&lt;/code&gt;事件。 通过这些事件，OpenLayers 3的功能模块协作一致，同样地，也可以让我们自己二次开发的功能模块运作起来。 同时，根据需要，我们还可以在系统中新增自定义事件，使得我们的开发使用方式同OpenLayers 3更加的一致。在本章节将详细介绍OpenLayers 3中的各种事件，及相关应用。&lt;/p&gt;
    
    </summary>
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/categories/openLayers/"/>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers 3 常见问题</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/ch13/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/ch13/index.html</id>
    <published>2018-01-18T12:29:59.000Z</published>
    <updated>2018-01-30T14:09:21.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ul><li><p>Q: ol3支持gif吗？</p><p>A: ol.style.Icon并不支持，但可以通过ol.Overlay来加载dom的方式支持。注意：在一个地图中如果存在几千个overlay，将影响效率。</p></li></ul><a id="more"></a><ul><li><p>Q: 地图缩小后，在一个页面出现多个一样的地图，如何才能只显示一个？</p><p>A: 在创建source的时候，设置wrapX属性为false就可以。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常见问题&quot;&gt;&lt;a href=&quot;#常见问题&quot; class=&quot;headerlink&quot; title=&quot;常见问题&quot;&gt;&lt;/a&gt;常见问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Q: ol3支持gif吗？&lt;/p&gt;
&lt;p&gt;A: ol.style.Icon并不支持，但可以通过ol.Overlay来加载dom的方式支持。注意：在一个地图中如果存在几千个overlay，将影响效率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/categories/openLayers/"/>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers 3 内置交互方式介绍</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/ch09/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/ch09/index.html</id>
    <published>2018-01-18T12:29:59.000Z</published>
    <updated>2018-01-30T14:08:51.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Interaction"><a href="#Interaction" class="headerlink" title="Interaction"></a>Interaction</h1><p>交互是人机界面非常重要的一个部分，任何一个GIS引擎都会内置这一部分功能，而不是让开发者自己实现。 在交互方式上，几乎都是约定俗成的，比如用鼠标左键双击地图可以放大地图，按住鼠标左键拖动地图可以移动浏览地图，用滚动鼠标中间的滑轮可以放大缩小地图等等。 OpenLayers 3都内置支持这些交互方式，同时还具备更多的其他交互方式，这些都将一并在本章节介绍。 更为重要的是，了解其中的基本原理，并在此基础上，应用于自己的业务开发。</p><a id="more"></a><h1 id="内置交互方式介绍"><a href="#内置交互方式介绍" class="headerlink" title="内置交互方式介绍"></a>内置交互方式介绍</h1><p>OpenLayers 3提供了最基本的地图放大，缩小，平移等功能，以满足用户浏览地图的需要。 这些功能都是内置的，实现类都放在包<code>ol.interaction</code>下面，可以通过官网API查询到。 在做二次开发的时候，我们无需做任何设置，地图就具有这些功能，比如下面这个最简单的地图，你可以用鼠标对它进行浏览，不管是放大，还是缩小，平移都可以。</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">    var map = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });</script><p>这个地图的代码在本教程最开始的时候，就已经见过了：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>虽然代码中没有做任何的设置，<code>ol.Map</code>的默认行为中，设置了和地图的交互方式，如果表示出来，代码是这样的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript">interactions: ol.interaction.defaults(),  <span class="comment">// 不设置的情况下，默认会设置为ol.interaction.defaults()</span></span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>ol.interaction.defaults()</code>这个函数用于返回默认的交互方式，通过API文档可知，还可以通过参数控制交互方式，非常的灵活。 在进一步深入之前，还是先了解一下默认都提供了那些交互方式：</p><ul><li>按住alt+shift键，用鼠标左键拖动地图，就能让地图旋转，对应的交互类为<code>ol.interaction.DragRotate</code>。</li><li>用鼠标左键双击地图，就可以放大地图，对应的交互类为<code>ol.interaction.DoubleClickZoom</code>。</li><li>用鼠标左键，拖拽地图，就可以平移地图，对应的交互类为<code>ol.interaction.DragPan</code>。</li><li>在触摸屏上，用两个手指在触摸屏上旋转，就可以旋转地图，对应的交互类为<code>ol.interaction.PinchRotate</code>。</li><li>在触摸屏上，用两个手指在触摸屏上缩放，就可以缩放地图，对应的交互类为<code>ol.interaction.PinchZoom</code>。</li><li>用键盘上的上下左右键，就可以平移地图，对应的交互类为<code>ol.interaction.KeyboardPan</code>。</li><li>用键盘上的+/-键，就可以缩放地图，对应的交互类为<code>ol.interaction.KeyboardZoom</code>。</li><li>滚动鼠标中间的滑轮，就可以缩放地图，对应的交互类为<code>ol.interaction.MouseWheelZoom</code>。</li><li>按住shift键，同时用鼠标左键在地图上拖动，就可以放大地图，对应的交互类为<code>ol.interaction.DragZoom</code>。</li></ul><p>从上面可以看到，支持的交互方式挺多的，归纳为缩放，平移，旋转三类。 同时支持键盘，鼠标，和触屏三种方式。 </p><p>虽然默认的交互方式很全，但如果我们的地图只是在PC端提供或者只是在触屏提供，那么有些交互方式就会显得多余，最好是去掉不需要的，或者我们的地图因为业务需要，不允许用户平移，或者缩放地图。 为了满足这样的需求，<code>ol.interaction.defaults()</code>提供了相应的参数来控制交互方式，详见<a href="http://openlayers.org/en/v3.13.1/apidoc/ol.interaction.html#.defaults" target="_blank" rel="noopener">ol.interaction.defaults API文档</a>。 下面简单演示一个不能缩放的地图：</p><p><div id="map2" style="width: 100%"></div></p><script type="text/javascript">    new ol.Map({        interactions: ol.interaction.defaults({            doubleClickZoom: false,            mouseWheelZoom: false,            shiftDragZoom: false,            pinchZoom:false        }),        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map2',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });</script><p>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map2"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 让所有的zoom开关都设置为false</span></span></span><br><span class="line"><span class="undefined">interactions: ol.interaction.defaults(&#123;</span></span><br><span class="line"><span class="actionscript">doubleClickZoom: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">mouseWheelZoom: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">shiftDragZoom: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">pinchZoom:<span class="literal">false</span></span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map2'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>有时候也需要设置地图不能旋转，只要设置<code>altShiftDragRotate:false, pinchRotate:false</code>即可，可自行验证。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>细心的读者有可能已经发现了，前面的第一个地图，我们并没有做任何的限制，但是用键盘控制鼠标平移和缩放，是不行的。 原因在于地图使用的<code>target</code>获取不到键盘事件，我们需要做个简单的设置才行：</p><p><div id="map3" tabindex="0" style="width: 100%"></div></p><script type="text/javascript">    new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map3',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });</script><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意：需要设置tabindex，才能使div获得键盘事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map3"</span> <span class="attr">tabindex</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map3'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>不管是上一节中的哪一种交互方式，本质上都是通过监听事件，来处理相应的业务的，在<code>ol.Map</code>的实现代码中，有下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @private</span></span><br><span class="line"><span class="comment">  * @type &#123;ol.MapBrowserEventHandler&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">this</span>.mapBrowserEventHandler_ = <span class="keyword">new</span> ol.MapBrowserEventHandler(<span class="keyword">this</span>);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> ol.MapBrowserEvent.EventType) &#123;<span class="comment">// 遍历所有的事件类型</span></span><br><span class="line">   ol.events.listen(<span class="keyword">this</span>.mapBrowserEventHandler_, ol.MapBrowserEvent.EventType[key],</span><br><span class="line">       <span class="keyword">this</span>.handleMapBrowserEvent, <span class="keyword">this</span>);<span class="comment">// 监听事件，函数handleMapBrowserEvent为事件响应函数</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> ......</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ol.MapBrowserEvent&#125; mapBrowserEvent The event to handle.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ol.Map.prototype.handleMapBrowserEvent = <span class="function"><span class="keyword">function</span>(<span class="params">mapBrowserEvent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.frameState_) &#123;</span><br><span class="line">    <span class="comment">// With no view defined, we cannot translate pixels into geographical</span></span><br><span class="line">    <span class="comment">// coordinates so interactions cannot be used.</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.focus_ = mapBrowserEvent.coordinate;</span><br><span class="line">  mapBrowserEvent.frameState = <span class="keyword">this</span>.frameState_;</span><br><span class="line">  <span class="keyword">var</span> interactions = <span class="keyword">this</span>.getInteractions();</span><br><span class="line">  goog.asserts.assert(interactions !== <span class="literal">undefined</span>,</span><br><span class="line">      <span class="string">'interactions should be defined'</span>);</span><br><span class="line">  <span class="keyword">var</span> interactionsArray = interactions.getArray();</span><br><span class="line">  <span class="keyword">var</span> i;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.dispatchEvent(mapBrowserEvent) !== <span class="literal">false</span>) &#123;<span class="comment">// 注意：如果事件处理返回false，交互类就不起作用了</span></span><br><span class="line">    <span class="keyword">for</span> (i = interactionsArray.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;<span class="comment">// 遍历所有的交互方式</span></span><br><span class="line">      <span class="keyword">var</span> interaction = interactionsArray[i];</span><br><span class="line">      <span class="keyword">if</span> (!interaction.getActive()) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> cont = interaction.handleEvent(mapBrowserEvent);<span class="comment">// 让各个交互类处理响应的事件</span></span><br><span class="line">      <span class="keyword">if</span> (!cont) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>至于每一个交互类如何处理，就和业务相关了，再此之前，先看一下具体有哪些事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constants for event names.</span></span><br><span class="line"><span class="comment"> * @enum &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ol.MapBrowserEvent.EventType = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A true single click with no dragging and no double click. Note that this</span></span><br><span class="line"><span class="comment">   * event is delayed by 250 ms to ensure that it is not a double click.</span></span><br><span class="line"><span class="comment">   * @event ol.MapBrowserEvent#singleclick</span></span><br><span class="line"><span class="comment">   * @api stable</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  SINGLECLICK: <span class="string">'singleclick'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A click with no dragging. A double click will fire two of this.</span></span><br><span class="line"><span class="comment">   * @event ol.MapBrowserEvent#click</span></span><br><span class="line"><span class="comment">   * @api stable</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  CLICK: ol.events.EventType.CLICK,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A true double click, with no dragging.</span></span><br><span class="line"><span class="comment">   * @event ol.MapBrowserEvent#dblclick</span></span><br><span class="line"><span class="comment">   * @api stable</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  DBLCLICK: ol.events.EventType.DBLCLICK,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Triggered when a pointer is dragged.</span></span><br><span class="line"><span class="comment">   * @event ol.MapBrowserEvent#pointerdrag</span></span><br><span class="line"><span class="comment">   * @api</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  POINTERDRAG: <span class="string">'pointerdrag'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Triggered when a pointer is moved. Note that on touch devices this is</span></span><br><span class="line"><span class="comment">   * triggered when the map is panned, so is not the same as mousemove.</span></span><br><span class="line"><span class="comment">   * @event ol.MapBrowserEvent#pointermove</span></span><br><span class="line"><span class="comment">   * @api stable</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  POINTERMOVE: <span class="string">'pointermove'</span>,</span><br><span class="line"></span><br><span class="line">  POINTERDOWN: <span class="string">'pointerdown'</span>,</span><br><span class="line">  POINTERUP: <span class="string">'pointerup'</span>,</span><br><span class="line">  POINTEROVER: <span class="string">'pointerover'</span>,</span><br><span class="line">  POINTEROUT: <span class="string">'pointerout'</span>,</span><br><span class="line">  POINTERENTER: <span class="string">'pointerenter'</span>,</span><br><span class="line">  POINTERLEAVE: <span class="string">'pointerleave'</span>,</span><br><span class="line">  POINTERCANCEL: <span class="string">'pointercancel'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这些事件在<code>ol.Map</code>的API文档里面，有些是能看到的，就是注释里面有<code>@api</code>的部分，其他的是暂时内部使用的。 按照这个逻辑，我们也可以实现自己的交互方式。 但有一点需要注意，<code>ol.Map</code>处理事件是有先后顺序的，注意看最前面的那段代码的注释，<code>ol.Map</code>会先派发事件给自己的监听器，然后才会把事件给<code>interaction</code>类处理。 如果前面的事件监听器返回<code>false</code>，那么后面的交互类就不会起作用。 比如像下面这样，用鼠标左键双击地图，并不能放大地图：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">    var map = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    map.on('dblclick', function(event){        return false;    });</script><p>为什么？ 注意看代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 监听了dblclick事件，并返回了false</span></span></span><br><span class="line"><span class="actionscript">map.on(<span class="string">'dblclick'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样做了后，后果非常的严重，出问题后，可能还不知道为什么？ 所以建议不要轻易在<code>MapBrowserEvent</code>事件的监听器里面返回<code>false</code>。</p><p>到此，我们可以进一步分析一下<code>ol.interaction</code>相关交互类的内部实现了，以<code>ol.interaction.DoubleClickZoom</code>为例，其核心必然是处理事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ol.interaction.DoubleClickZoom.handleEvent = <span class="function"><span class="keyword">function</span>(<span class="params">mapBrowserEvent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> stopEvent = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> browserEvent = mapBrowserEvent.originalEvent;</span><br><span class="line">  <span class="keyword">if</span> (mapBrowserEvent.type == ol.MapBrowserEvent.EventType.DBLCLICK) &#123;<span class="comment">// 事件类型过滤</span></span><br><span class="line">    <span class="keyword">var</span> map = mapBrowserEvent.map;</span><br><span class="line">    <span class="keyword">var</span> anchor = mapBrowserEvent.coordinate;</span><br><span class="line">    <span class="keyword">var</span> delta = browserEvent.shiftKey ? -<span class="keyword">this</span>.delta_ : <span class="keyword">this</span>.delta_;<span class="comment">// 按住shift键，就缩小，否则就放大</span></span><br><span class="line">    <span class="keyword">var</span> view = map.getView();</span><br><span class="line">    goog.asserts.assert(view, <span class="string">'map must have a view'</span>);</span><br><span class="line">    ol.interaction.Interaction.zoomByDelta(</span><br><span class="line">        map, view, delta, anchor, <span class="keyword">this</span>.duration_);<span class="comment">// 调用 ol.interaction.Interaction.zoomByDelta函数实现放大缩小</span></span><br><span class="line">    mapBrowserEvent.preventDefault();</span><br><span class="line">    stopEvent = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> !stopEvent;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>代码其实很简单，如果要自己实现一种交互方式，对照<code>ol.interaction.DoubleClickZoom</code>这个学习，再加以应用就可以了。</p><h1 id="Feature选取之选中样式"><a href="#Feature选取之选中样式" class="headerlink" title="Feature选取之选中样式"></a>Feature选取之选中样式</h1><p>OpenLayers 3除了在地图浏览方面提供内置的交互方式之外，还提供了地图上<code>Feature</code>选取的交互类： <code>ol.interaction.Select</code>。 这是一个经常会用到的类，应用范围非常的广。 我们可以先简单操作一下下面地图中的圆，点击一下，颜色就变了：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">    var layer = new ol.layer.Vector({        source: new ol.source.Vector()    });    var map = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          }),           layer        ],        target: 'map',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    // 在地图上添加一个圆    var circle = new ol.Feature({        geometry: new ol.geom.Point(ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'))    })    circle.setStyle(new ol.style.Style({        image: new ol.style.Circle({            radius: 10,            fill: new ol.style.Fill({                color: 'red'            })        })    }));    layer.getSource().addFeature(circle);    // 添加一个用于选择Feature的交互方式    var selectSingleClick = new ol.interaction.Select({        // style: new ol.style.Style({        //     image: new ol.style.Circle({        //         radius: 10,        //         fill: new ol.style.Fill({        //             color: 'blue'        //         })        //     })        // })    });    map.addInteraction(selectSingleClick);    selectSingleClick.on('select', function(event){        event.selected[0].setStyle(new ol.style.Style({            image: new ol.style.Circle({                radius: 10,                fill: new ol.style.Fill({                    color: 'blue'                })            })        }));    })</script><p>在<a href="../ch08/08-05.md">自定义事件及应用</a>中，我们用了方法<code>map.forEachFeatureAtPixel</code>来获取当前选择的<code>Feature</code>，这个例子中，我们没有这样使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector()</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;), </span></span><br><span class="line"><span class="undefined">  layer</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 在地图上添加一个圆</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> circle = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">geometry: <span class="keyword">new</span> ol.geom.Point(ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>))</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="actionscript">circle.setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: 10,</span></span><br><span class="line"><span class="actionscript">fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'red'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">layer.getSource().addFeature(circle);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 前面的代码我们已经看了很多遍了，关键是下面这段代码</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 添加一个用于选择Feature的交互方式</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> selectSingleClick = <span class="keyword">new</span> ol.interaction.Select(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// API文档里面有说明，可以设置style参数，用来设置选中后的样式，但是这个地方我们注释掉不用，因为就算不注释，也没作用，为什么？</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// style: new ol.style.Style(&#123;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// image: new ol.style.Circle(&#123;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// radius: 10,</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// fill: new ol.style.Fill(&#123;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// color: 'blue'</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">map.addInteraction(selectSingleClick);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 监听选中事件，然后在事件处理函数中改变被选中的`feature`的样式</span></span></span><br><span class="line"><span class="actionscript">selectSingleClick.on(<span class="string">'select'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">event.selected[<span class="number">0</span>].setStyle(<span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: 10,</span></span><br><span class="line"><span class="actionscript">fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'blue'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>官网其实有例子<a href="http://openlayers.org/en/v3.13.1/examples/select-features.html" target="_blank" rel="noopener">select-features</a>，但是这里面还是有一些需要注意的地方，比如上面注释里面说到的，为什么<code>style</code>参数设置了没用？ 因为我们的<code>circle</code>本身就设置了样式，而<code>style</code>参数设置的样式，其实是设置在内部新建的一个<code>layer</code>上的，而OpenLayers 3中，<code>feature</code>的样式优先级是大于<code>layer</code>的样式的优先级的。所以没生效，如果换成下面这种方式，就可以了：</p><p><div id="map2" style="width: 100%"></div></p><script type="text/javascript">    var layer2 = new ol.layer.Vector({        source: new ol.source.Vector(),        style: new ol.style.Style({            image: new ol.style.Circle({                radius: 10,                fill: new ol.style.Fill({                    color: 'red'                })            })        })    });    var map2 = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          }),           layer2        ],        target: 'map2',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    // 在地图上添加一个圆    var circle2 = new ol.Feature({        geometry: new ol.geom.Point(ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'))    })    layer2.getSource().addFeature(circle2);    // 添加一个用于选择Feature的交互方式    map2.addInteraction(new ol.interaction.Select({        style: new ol.style.Style({            image: new ol.style.Circle({                radius: 10,                fill: new ol.style.Fill({                    color: 'blue'                })            })        })    }));</script><p>代码变成这样了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map2"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> layer2 = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector(),</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 注意：把feature上的style，直接移到layer上，避免直接在feature上设置style</span></span></span><br><span class="line"><span class="actionscript">style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: 10,</span></span><br><span class="line"><span class="actionscript">fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'red'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map2 = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;), </span></span><br><span class="line"><span class="undefined">  layer2</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map2'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 在地图上添加一个圆</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> circle2 = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">geometry: <span class="keyword">new</span> ol.geom.Point(ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>))</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 此处不再为feature设置style</span></span></span><br><span class="line"><span class="undefined">layer2.getSource().addFeature(circle2);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 添加一个用于选择Feature的交互方式</span></span></span><br><span class="line"><span class="actionscript">map2.addInteraction(<span class="keyword">new</span> ol.interaction.Select(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置选中后的style</span></span></span><br><span class="line"><span class="actionscript">style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: 10,</span></span><br><span class="line"><span class="actionscript">fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'blue'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码改成上面这样就可以了。在使用过程中，请千万留意这个问题。 </p><h1 id="Feature选取之条件过滤"><a href="#Feature选取之条件过滤" class="headerlink" title="Feature选取之条件过滤"></a>Feature选取之条件过滤</h1><p>涉及到选取，自然会有各种条件用于过滤，比如是鼠标左键单击，还是双击，是可以选取地图上的任意<code>feature</code>，还是某一类的<code>feature</code>。 对于这些需求，<code>ol.interaction.Select</code>都能满足，在API的文档里面就有相关的参数设置，下面就是一些简单的使用示例。</p><h2 id="改变默认的单击选取方式"><a href="#改变默认的单击选取方式" class="headerlink" title="改变默认的单击选取方式"></a>改变默认的单击选取方式</h2><p>默认情况下，是支持鼠标左键单击选取<code>feature</code>的，在地图上其他地方点击一下，就取消选取了，但这并不是定死的选取方式，你完全可以自定义。 比如鼠标移动到<code>feature</code>上，就选取了，试试：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">    var layer = new ol.layer.Vector({        source: new ol.source.Vector(),        style: new ol.style.Style({            image: new ol.style.Circle({                radius: 10,                fill: new ol.style.Fill({                    color: 'red'                })            })        })    });    var map = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          }),           layer        ],        target: 'map',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    // 在地图上添加一个圆    var circle = new ol.Feature({        geometry: new ol.geom.Point(ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'))    })    layer.getSource().addFeature(circle);    // 添加一个用于选择Feature的交互方式    map.addInteraction(new ol.interaction.Select({        condition: ol.events.condition.pointerMove,     // 唯一的不同之处，设置鼠标移到feature上就选取        style: new ol.style.Style({            image: new ol.style.Circle({                radius: 10,                fill: new ol.style.Fill({                    color: 'blue'                })            })        })    }));</script><p>代码同之前的例子只有一个地方不同：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector(),</span></span><br><span class="line"><span class="actionscript">style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: 10,</span></span><br><span class="line"><span class="actionscript">fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'red'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;), </span></span><br><span class="line"><span class="undefined">  layer</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 在地图上添加一个圆</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> circle = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">geometry: <span class="keyword">new</span> ol.geom.Point(ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>))</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">layer.getSource().addFeature(circle);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 添加一个用于选择Feature的交互方式</span></span></span><br><span class="line"><span class="actionscript">map.addInteraction(<span class="keyword">new</span> ol.interaction.Select(&#123;</span></span><br><span class="line"><span class="actionscript">condition: ol.events.condition.pointerMove, <span class="comment">// 唯一的不同之处，设置鼠标移到feature上就选取</span></span></span><br><span class="line"><span class="actionscript">style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: 10,</span></span><br><span class="line"><span class="actionscript">fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'blue'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ol.events.condition</code>里面有很多内置的条件过滤函数，可以在<a href="http://openlayers.org/en/v3.13.1/apidoc/ol.events.condition.html" target="_blank" rel="noopener">官网API</a>查询，如果内置方式没有，也可以自己写一个类似的函数，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ol.events.condition.singleClick = <span class="function"><span class="keyword">function</span>(<span class="params">mapBrowserEvent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mapBrowserEvent.type == ol.MapBrowserEvent.EventType.SINGLECLICK;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>就只是一个类型判断而已，是否非常的简单，任何人都可以自定义一个这种条件过滤函数。</p><h2 id="直接对feature过滤"><a href="#直接对feature过滤" class="headerlink" title="直接对feature过滤"></a>直接对<code>feature</code>过滤</h2><p>除了可以自定义选取的交互方式之外，我们还可以对<code>feature</code>进行过滤，如果当前选取的并不是我们需要的<code>feature</code>，我们可以决定不选取。 比如我们只希望用户能选取圆形，而不能选取五星，选取方式为默认的单击：</p><p><div id="map2" style="width: 100%"></div></p><script type="text/javascript">    var circleLayer = new ol.layer.Vector({        source: new ol.source.Vector(),        style: new ol.style.Style({            image: new ol.style.Circle({                radius: 10,                fill: new ol.style.Fill({                    color: 'red'                })            })        })    });    var starLayer = new ol.layer.Vector({        source: new ol.source.Vector(),        style: new ol.style.Style({            image: new ol.style.RegularShape({                points: 5,                radius1: 20,                radius2: 10,                fill: new ol.style.Fill({                    color: 'red'                })            })        })    });    var map2 = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          }),           circleLayer, starLayer        ],        target: 'map2',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    // 在地图上添加一个圆    var circle1 = new ol.Feature({        geometry: new ol.geom.Point(ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'))    })    circleLayer.getSource().addFeature(circle1);    // 在地图上添加一个五星    var star = new ol.Feature({        geometry: new ol.geom.Point(ol.proj.transform(              [104.06, 30.05], 'EPSG:4326', 'EPSG:3857'))    })    starLayer.getSource().addFeature(star);    // 添加一个用于选择Feature的交互方式    map2.addInteraction(new ol.interaction.Select({        style: new ol.style.Style({            image: new ol.style.Circle({                radius: 10,                fill: new ol.style.Fill({                    color: 'blue'                })            })        }),        filter: function(feature, layer){            return layer === circleLayer;        }    }));</script><p>代码其实也是非常简单，前面大部分代码都是一样的，关键在最后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map2"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建一个用于存放circle的layer</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> circleLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector(),</span></span><br><span class="line"><span class="actionscript">style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: 10,</span></span><br><span class="line"><span class="actionscript">fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'red'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建一个用于存放star的layer</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> starLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector(),</span></span><br><span class="line"><span class="actionscript">style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.RegularShape(&#123;</span></span><br><span class="line"><span class="undefined">points: 5,</span></span><br><span class="line"><span class="undefined">radius1: 20,</span></span><br><span class="line"><span class="undefined">radius2: 10,</span></span><br><span class="line"><span class="actionscript">fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'red'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map2 = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;), </span></span><br><span class="line"><span class="undefined">  circleLayer, starLayer</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map2'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 在地图上添加一个圆</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> circle1 = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">geometry: <span class="keyword">new</span> ol.geom.Point(ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>))</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">circleLayer.getSource().addFeature(circle1);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 在地图上添加一个五星</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> star = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">geometry: <span class="keyword">new</span> ol.geom.Point(ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104.06</span>, <span class="number">30.05</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>))</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">starLayer.getSource().addFeature(star);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 添加一个用于选择Feature的交互方式</span></span></span><br><span class="line"><span class="actionscript">map2.addInteraction(<span class="keyword">new</span> ol.interaction.Select(&#123;</span></span><br><span class="line"><span class="actionscript">style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: 10,</span></span><br><span class="line"><span class="actionscript">fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'blue'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 关键： 设置过了条件，可以用feature来写过滤，也可以用layer来写过滤</span></span></span><br><span class="line"><span class="actionscript">filter: <span class="function"><span class="keyword">function</span><span class="params">(feature, layer)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> layer === circleLayer;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="选取多个feature"><a href="#选取多个feature" class="headerlink" title="选取多个feature"></a>选取多个feature</h2><p>前面的例子都只是一个<code>feature</code>的情况，在实际应用中，肯定是不止一个的，如果要能同时选择多个，只需要设置一下构造函数的参数<code>multi: true</code>，默认情况下，只能选取一个<code>feature</code>。 仿照上面的代码，可自行尝试。</p><h1 id="Feature选取之取消选中"><a href="#Feature选取之取消选中" class="headerlink" title="Feature选取之取消选中"></a>Feature选取之取消选中</h1><p> 取消选中有两种方式， 一种是在界面上以交互的方式取消选中，一种是用代码的方式取消选中，下面就分别介绍一下</p><h2 id="交互方式取消选中"><a href="#交互方式取消选中" class="headerlink" title="交互方式取消选中"></a>交互方式取消选中</h2><p>如果是采用的默认的方式选取<code>feature</code>，即使用鼠标左键单击<code>feature</code>就可选取。那么这种交互方式下，要取消选中，则只需要同样使用鼠标左键，在地图其他地方单击一下，就可取消选中。 可跳到<a href="09-03.md">要素选取之选中样式</a>，在第一个地图上试试。 </p><p>如果采用的是自定义的方式选取<code>feature</code>，那么要取消选中，交互方式还是一样的，只要目标不再是已选中的<code>feature</code>就行，就能取消选中。 比如<a href="09-04.md">要素选取之条件过滤</a>中，采用了自定义的鼠标移入<code>feature</code>就可选中，要取消选中，只需要把鼠标移出<code>feature</code>即可。</p><h2 id="代码方式取消选中"><a href="#代码方式取消选中" class="headerlink" title="代码方式取消选中"></a>代码方式取消选中</h2><p>点击地图下方的“取消选中”按钮，就可触发代码，取消<code>circle</code>的选中状态：</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><p><input type="button" value="取消选中" onclick="unselectFeature();"></p><script type="text/javascript">    var layer = new ol.layer.Vector({        source: new ol.source.Vector(),        style: new ol.style.Style({            image: new ol.style.Circle({                radius: 10,                fill: new ol.style.Fill({                    color: 'red'                })            })        })    });    var map = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          }),           layer        ],        target: 'map',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    // 在地图上添加一个圆    var circle = new ol.Feature({        geometry: new ol.geom.Point(ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'))    })    layer.getSource().addFeature(circle);    // 添加一个用于选择Feature的交互方式    var clickSelect = new ol.interaction.Select({        style: new ol.style.Style({            image: new ol.style.Circle({                radius: 10,                fill: new ol.style.Fill({                    color: 'blue'                })            })        })    });    map.addInteraction(clickSelect);    // 取消选中    function unselectFeature() {        clickSelect.getFeatures().clear();        // 下面这样也是可以取消选中的，根据情况选择        // map.removeInteraction(clickSelect);    }</script><p>前面的代码都一样，关键在最后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"取消选中"</span> <span class="attr">onclick</span>=<span class="string">"unselectFeature();"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> layer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector(),</span></span><br><span class="line"><span class="actionscript">style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: 10,</span></span><br><span class="line"><span class="actionscript">fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'red'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;), </span></span><br><span class="line"><span class="undefined">  layer</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 在地图上添加一个圆</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> circle = <span class="keyword">new</span> ol.Feature(&#123;</span></span><br><span class="line"><span class="actionscript">geometry: <span class="keyword">new</span> ol.geom.Point(ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>))</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">layer.getSource().addFeature(circle);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 添加一个用于选择Feature的交互方式</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> clickSelect = <span class="keyword">new</span> ol.interaction.Select(&#123;</span></span><br><span class="line"><span class="actionscript">style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">image: <span class="keyword">new</span> ol.style.Circle(&#123;</span></span><br><span class="line"><span class="undefined">radius: 10,</span></span><br><span class="line"><span class="actionscript">fill: <span class="keyword">new</span> ol.style.Fill(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'blue'</span></span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">map.addInteraction(clickSelect);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 取消选中</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">unselectFeature</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">clickSelect.getFeatures().clear();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 下面这样也是可以取消选中的，根据情况选择</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// map.removeInteraction(clickSelect);</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，地图上元素的选取相关的知识点都介绍完毕，希望能逐个掌握并融会贯通于实际应用中。</p><h1 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h1><p>除了内置了用于选取<code>feature</code>的类之外，OpenLayers 3还提供了用户绘图的类<code>ol.interaction.Draw</code>，支持绘制点，线，多边形，圆等绘制。 我们可以先看一下下面这个可以绘制一条线的例子，用鼠标左键单击地图，地图上就会出现待绘制线的起点，随后移动鼠标，就看到了线，再单击地图，就在这个线上添加了点，依次可以添加多个点，如果要完成线的绘制，在最后一个点处，再点击一下鼠标左键即可。</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">    var map = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    map.addInteraction(new ol.interaction.Draw({        type: 'LineString'    }));</script><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 添加绘图的交互类</span></span></span><br><span class="line"><span class="actionscript">map.addInteraction(<span class="keyword">new</span> ol.interaction.Draw(&#123;</span></span><br><span class="line"><span class="actionscript">type: <span class="string">'LineString'</span> <span class="comment">// 设置绘制线</span></span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看起来非常的简单。 但貌似还不可用，因为不知道怎么保存起来，下面我们把绘制完的线保存起来：</p><p><div id="map2" style="width: 100%"></div></p><script type="text/javascript">    var map2 = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map2',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    // 添加一个绘制的线使用的layer    var lineLayer = new ol.layer.Vector({        source: new ol.source.Vector(),        style: new ol.style.Style({            stroke: new ol.style.Stroke({                color: 'red',                size: 1            })        })    })    map2.addLayer(lineLayer);    map2.addInteraction(new ol.interaction.Draw({        type: 'LineString',        source: lineLayer.getSource()    // 注意设置source，这样绘制好的线，就会添加到这个source里    }));</script><p>比上一个地图写的代码稍微多一点，关键的代码还是在最后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map2"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map2 = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map2'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 添加一个绘制的线使用的layer</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> lineLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector(),</span></span><br><span class="line"><span class="actionscript">style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">size: 1</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">map2.addLayer(lineLayer);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">map2.addInteraction(<span class="keyword">new</span> ol.interaction.Draw(&#123;</span></span><br><span class="line"><span class="actionscript">type: <span class="string">'LineString'</span>,</span></span><br><span class="line"><span class="actionscript">source: lineLayer.getSource()<span class="comment">// 注意设置source，这样绘制好的线，就会添加到这个source里</span></span></span><br><span class="line"><span class="undefined">&#125;));</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，在地图上绘制一条线的工作基本上算是完成了。 按照这个流程，修改<code>ol.interaction.Draw</code>的构造参数<code>type</code>的值为’Point’，’Polygon’,，’MultiPoint’，’MultiLineString’，’MultiPolygon’ 或者 ‘Circle’就可以添加点，多边形，多个点，多条线，多个多边形，及圆。 可以自行修改验证。</p><h1 id="绘图进阶"><a href="#绘图进阶" class="headerlink" title="绘图进阶"></a>绘图进阶</h1><p>前面只是简单的绘制上了一条线，在实际业务中，可能还需要设置绘图时的样式，限制绘制的点的个数，获取绘制的图形的所有坐标等。 在上一节的基础上，以下面这个地图为例，再给大家介绍一下这些方面的更深入的应用。下面绘制这条线的点不能超过4个，在绘制时，样式会和前一节的样式不太一样，在地图上方，会显示当前绘制完的线的所有点的坐标。</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div style="background-color: #999;"><span>当前绘制线的坐标：</span><span id="points"></span></div></p><p><div id="map" style="width: 100%"></div></p><script type="text/javascript">    var map = new ol.Map({        layers: [          new ol.layer.Tile({            source: new ol.source.OSM()          })        ],        target: 'map',        view: new ol.View({          center: ol.proj.transform(              [104, 30], 'EPSG:4326', 'EPSG:3857'),          zoom: 10        })    });    // 添加一个绘制的线使用的layer    var lineLayer = new ol.layer.Vector({        source: new ol.source.Vector(),        style: new ol.style.Style({            stroke: new ol.style.Stroke({                color: 'red',                size: 1            })        })    })    map.addLayer(lineLayer);    var lineDraw = new ol.interaction.Draw({        type: 'LineString',        source: lineLayer.getSource(),    // 注意设置source，这样绘制好的线，就会添加到这个source里        style: new ol.style.Style({            stroke: new ol.style.Stroke({                color: '#009933',                size: 1            })        }),        maxPoints: 4    });    // 监听线绘制结束事件，获取坐标    lineDraw.on('drawend', function(event){        document.getElementById('points').innerHTML = JSON.stringify(event.feature.getGeometry().getCoordinates());    });    map.addInteraction(lineDraw);</script><p>代码如下，关键代码还是放在最后：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color: #999;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>当前绘制线的坐标：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">'points'</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">    source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">  center: ol.proj.transform(</span></span><br><span class="line"><span class="actionscript">      [<span class="number">104</span>, <span class="number">30</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">  zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 添加一个绘制的线使用的layer</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> lineLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">source: <span class="keyword">new</span> ol.source.Vector(),</span></span><br><span class="line"><span class="actionscript">style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">size: 1</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">map.addLayer(lineLayer);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> lineDraw = <span class="keyword">new</span> ol.interaction.Draw(&#123;</span></span><br><span class="line"><span class="actionscript">type: <span class="string">'LineString'</span>,</span></span><br><span class="line"><span class="actionscript">source: lineLayer.getSource(),<span class="comment">// 注意设置source，这样绘制好的线，就会添加到这个source里</span></span></span><br><span class="line"><span class="actionscript">style: <span class="keyword">new</span> ol.style.Style(&#123;<span class="comment">// 设置绘制时的样式</span></span></span><br><span class="line"><span class="actionscript">stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">color: <span class="string">'#009933'</span>,</span></span><br><span class="line"><span class="undefined">size: 1</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">maxPoints: <span class="number">4</span><span class="comment">// 限制不超过4个点</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 监听线绘制结束事件，获取坐标</span></span></span><br><span class="line"><span class="actionscript">lineDraw.on(<span class="string">'drawend'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// event.feature 就是当前绘制完成的线的Feature</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'points'</span>).innerHTML = <span class="built_in">JSON</span>.stringify(event.feature.getGeometry().getCoordinates());</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">map.addInteraction(lineDraw);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果需要取消当前绘制，直接用<code>map.removeInteraction(lineDraw)</code>就可以了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="交互实现流程"><a href="#交互实现流程" class="headerlink" title="交互实现流程"></a>交互实现流程</h2><p>从地图浏览的交互类，到<code>feature</code>选取的类，再到绘制图形的类，都是从事件入手，在引擎内部，提供了一个事件传递的通道，支持通过<code>ol.Map</code>添加<code>interaction</code>的方式，接收事件消息，然后再根据业务进行处理。 </p><h2 id="封装的优点和缺点"><a href="#封装的优点和缺点" class="headerlink" title="封装的优点和缺点"></a>封装的优点和缺点</h2><p>毫无疑问，已经内置实现的功能，将极大地提高系统可用性，减少开发者的负担。 但内置的这些通用功能，如果是简单的封装，并不能满足大多数的需要，但是过多的封装，将增大复杂性，比如很多<code>interaction</code>类都有很多的参数设置，必然增加学习和使用成本，这就是缺点。</p><p>对于一般的开发者而言，没有能力自己重新定制开发交互方式，那么最好是学会内置类的应用，虽然有学习成本，但能保证功能没有问题。对于高阶开发者而言，可选择性就很多了，如果效率不行或者流程太复杂，就自己开发。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Interaction&quot;&gt;&lt;a href=&quot;#Interaction&quot; class=&quot;headerlink&quot; title=&quot;Interaction&quot;&gt;&lt;/a&gt;Interaction&lt;/h1&gt;&lt;p&gt;交互是人机界面非常重要的一个部分，任何一个GIS引擎都会内置这一部分功能，而不是让开发者自己实现。 在交互方式上，几乎都是约定俗成的，比如用鼠标左键双击地图可以放大地图，按住鼠标左键拖动地图可以移动浏览地图，用滚动鼠标中间的滑轮可以放大缩小地图等等。 OpenLayers 3都内置支持这些交互方式，同时还具备更多的其他交互方式，这些都将一并在本章节介绍。 更为重要的是，了解其中的基本原理，并在此基础上，应用于自己的业务开发。&lt;/p&gt;
    
    </summary>
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/categories/openLayers/"/>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers 3 进阶实例</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/ch12/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/ch12/index.html</id>
    <published>2018-01-18T12:29:59.000Z</published>
    <updated>2018-01-30T14:09:11.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进阶实例"><a href="#进阶实例" class="headerlink" title="进阶实例"></a>进阶实例</h1><p>前面的基础知识，用于应对基本应用没有问题，但如果想更进一步的结合在一起应用，或者解决更为复杂一点的问题，则稍显困难。本章节针对这类问题给出一些实例讲解，以解决广大ol3使用者的困惑，用于感谢大家对本教程的支持。针对这类问题，曾经在Openlayer3 QQ群里面收集统计过，下面的例子就是基于这些统计数据分析讨论而出的。如果你有什么其他的想法或意见，请在下方留言或QQ联系我（11364382），谢谢。</p><a id="more"></a><h1 id="通过wfs增删改查要素"><a href="#通过wfs增删改查要素" class="headerlink" title="通过wfs增删改查要素"></a>通过wfs增删改查要素</h1><p>本节将讲解ol3使用wfs同后台geoserver进行交互，从而实现要素的增删改查。由于geoserver需要服务器端，所以我们将从环境搭建开始讲解，使用公开的数据源，进行查询，修改，添加，删除操作的演示，使得大家最终学会。</p><h1 id="在windows环境下配置GeoServer"><a href="#在windows环境下配置GeoServer" class="headerlink" title="在windows环境下配置GeoServer"></a>在windows环境下配置GeoServer</h1><p>由于wfs协议涉及到跨域的问题，在配置过程中，我们也将把跨域的环境配置好。虽然跨域的解决方式有很多，但此处选择一个稍微简单的方式，详见下面的具体步骤。</p><h2 id="安装Java环境"><a href="#安装Java环境" class="headerlink" title="安装Java环境"></a>安装Java环境</h2><p>我们使用tomcat作为服务器，所以需要java环境，如果你不确定是否安装有java环境，则可以在命令终端执行： <code>java -version</code>，比如我的环境：<br><img src="../img/java-version.png" alt="java-version"></p><p>如果提示<code>java</code>命令找不到的错误，说明你得优先安装java环境，请到<a href="http://www.java.com/zh_CN/" target="_blank" rel="noopener">官网</a>下载最新的Java进行安装。</p><h2 id="下载Tomcat"><a href="#下载Tomcat" class="headerlink" title="下载Tomcat"></a>下载Tomcat</h2><p>安装好java环境后，我们就到<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">Tomcat官网</a>下载Tomcat，如果java环境是64位的，记得下载64位的Tomcat，如果是32位的java环境，就需要下载32位的tomcat。如上图所示，我的是64位java环境，我选择下载8.5.4版本，64位的windows环境的tomcat： <a href="https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.4/bin/apache-tomcat-8.5.4-windows-x64.zip" target="_blank" rel="noopener">apache-tomcat-8.5.4-windows-x64.zip</a>。</p><p>下载后，解压到一个指定的目录， 我放在了<code>F:\apache-tomcat-8.5.4</code>。记住，解压就可以了，免安装，此时需要验证一下是否能正常启动Tomcat，启动命令终端，执行tomcat目录下的<code>bin\startup.bat</code>，如下：<br><img src="../img/tomcat-startup-fail.png" alt="tomcat-startup-fail"></p><p>从上图可以发现，我们还没有配置环境变量<code>JAVA_HOME</code>或者<code>JRE_HOME</code>。那么我先配置一个<code>JAVA_HOME</code>的环境变量，配置好后，记得注销或者重启电脑，让环境变量生效。 然后重新执行命令，正确启动如下：<br><img src="../img/tomcat-startup-ok.png" alt="tomcat-startup-ok"></p><p>成功启动会弹出一个新的<code>tomcat</code>命令行窗口，参见上图左边的命令行窗口。</p><h2 id="安装GeoServer"><a href="#安装GeoServer" class="headerlink" title="安装GeoServer"></a>安装GeoServer</h2><p>此时，我们需要到<a href="http://geoserver.org/" target="_blank" rel="noopener">GeoServer官网</a>去下载geoserver，我选择了最新的2.9.1版本，由于我使用tomcat作为服务器，所以我选择下载<code>Web Archive</code>格式的<a href="https://sourceforge.net/projects/geoserver/files/GeoServer/2.9.1/geoserver-2.9.1-war.zip/download" target="_blank" rel="noopener">geoserver-2.9.1-war.zip</a>。</p><p>下载后解压到得到war文件：<code>geoserver.war</code>，把该文件放置到tomcat目录下的webapps目录下，比如放置该文件后，我的路径为：<code>F:\apache-tomcat-8.5.4\webapps\geoserver.war</code>。</p><p>然后在命令行终端启动tomcat，可能需要稍微等待一下，因为要部署geoserver，待tomcat命令行终端启动完成，就可以打开浏览器输入<code>http://localhost:8080/geoserver</code>打开geoserver的管理页面，如下：<br><img src="../img/geoserver-index.png" alt="geoserver-index"></p><p>见到这个页面，也就安装成功了。如果没有出现该页面，请按照前面的步骤检查一下什么地方出问题了。</p><h2 id="跨域配置"><a href="#跨域配置" class="headerlink" title="跨域配置"></a>跨域配置</h2><p>由于tomcat从7.0.41版本开始就支持跨域了，参见<a href="http://enable-cors.org/server_tomcat.html" target="_blank" rel="noopener">CORS on Tomcat</a>，我们下载的tomcat是8.5.4，自然就能很好的支持了，只需要进行下面的简单配置：</p><ul><li>找到geoserver的<code>web.xml</code>文件，我的电脑对应的路径为<code>F:\apache-tomcat-8.5.4\webapps\geoserver\WEB-INF\web.xml</code></li><li>打开该文件，把下面的配置添加在该文件中：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.CorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="../img/web-cross.png" alt="web-cross-config"></p><p>然后再重新启动tomcat即可。</p><h1 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h1><p>为了后续进行wfs的各项使用演示，我就使用geoserver官方中使用的数据<a href="http://docs.geoserver.org/latest/en/user/_downloads/nyc_roads.zip" target="_blank" rel="noopener">nyc_roads.zip</a>。这份数据的配置，官网也提供了指导，参见<a href="http://docs.geoserver.org/latest/en/user/gettingstarted/shapefile-quickstart/index.html" target="_blank" rel="noopener">Publishing a shapefile</a>。</p><p>下面就以我的计算机配置为例，进行说明：</p><ol><li><p>下载后解压，把压缩包里面的<code>nyc_roads.dbf, nyc_roads.prj, nyc_roads.shp, nyc_roads.shx</code>放在目录<code>F:\apache-tomcat-8.5.4\webapps\geoserver\data\data\nyc_roads</code>下，<code>nyc_roads</code>这个目录没有，就新建一个。</p></li><li><p>启动tomcat，在浏览器中打开geoserver的配置页面<code>http://localhost:8080/geoserver</code>，使用用户admin登录，密码为geoserver。</p></li><li><p>创建<code>工作区</code>：</p></li></ol><p><img src="../img/create-workspace.png" alt="create-workspace"><br><img src="../img/new-workspace.png" alt="new-workspace"></p><ol><li>创建<code>数据存储</code>：</li></ol><p><img src="../img/create-database.png" alt="create-database"><br><img src="../img/create-database-2.png" alt="create-database2"><br><img src="../img/new-database.png" alt="new-database"></p><ol><li>创建<code>图层</code>，数据源配置好后，保存，就出现下面这个界面：</li></ol><p><img src="../img/create-layer.png" alt="create-layer"><br>点击<code>发布</code>创建新图层：<br><img src="../img/edit-layer.png" alt="edit-layer"><br><img src="../img/edit-layer2.png" alt="edit-layer2"></p><p>最后点击页面最下方的<code>保存</code>按钮，就配置好了。</p><ol><li>最后预览一下，点击左边的<code>Layer Preview</code>，在右边找到刚才创建的图层<code>nyc_roads:nyc_roads</code>，点击右边的OpenLayers，就可以打开新页面，显示预览结果。<br><img src="../img/layer-preview.png" alt="layer-preview"><br><img src="../img/nyc_roads-result.png" alt="layer-preview"></li></ol><p>出现最后一个页面，就说明数据源配置好了。 </p><h1 id="通过wfs查询要素"><a href="#通过wfs查询要素" class="headerlink" title="通过wfs查询要素"></a>通过wfs查询要素</h1><p>一切都准备好了，现在终于可以通过ol3加载配置好的数据了。上一节中最后的预览结果，大家已经看到了，此处我们自己通过ol3来实现这个预览页面，效果图如下：</p><p><img src="../img/wfs-query-nyc-roads.png" alt="wfs query demo"></p><p>对应的代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>wfs demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../ol3.15.1/ol.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../ol3.17.1/ol-debug.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width:100%;height:100%;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vector = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">      source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">        format: <span class="keyword">new</span> ol.format.GeoJSON(),</span></span><br><span class="line"><span class="actionscript">        url: <span class="string">'http://localhost:8080/geoserver/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeNames=nyc_roads:nyc_roads&amp;outputFormat=application/json&amp;srsname=EPSG:4326'</span></span></span><br><span class="line"><span class="undefined">      &#125;),</span></span><br><span class="line"><span class="actionscript">      style: <span class="function"><span class="keyword">function</span><span class="params">(feature, resolution)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">          stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">'blue'</span>,</span></span><br><span class="line"><span class="undefined">            width: 1</span></span><br><span class="line"><span class="undefined">          &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript">      layers: [<span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;), vector],</span></span><br><span class="line"><span class="actionscript">      target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">        center: [-73.99710639567148, 40.742270050255556],</span></span><br><span class="line"><span class="undefined">        maxZoom: 19,</span></span><br><span class="line"><span class="undefined">        zoom: 14,</span></span><br><span class="line"><span class="actionscript">        projection: <span class="string">'EPSG:4326'</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>和一般的矢量地图加载没什么两样，对于wfs而言，需要弄明白的是<code>ol.source.Vector</code>的<code>url</code>参数： <code>http://localhost:8080/geoserver/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeNames=nyc_roads:nyc_roads&amp;outputFormat=application/json&amp;srsname=EPSG:4326</code>。 如果对wfs协议不太清楚的，建议优先看一下geoserver的官网文档<a href="http://docs.geoserver.org/stable/en/user/services/wfs/index.html" target="_blank" rel="noopener">WFS</a>。 </p><p>此处我们要获取所有的要素，所以设置<code>request=GetFeature</code>，<code>typeNames</code>的值设置为<code>nyc_roads:nyc_roads</code>，是因为我们之前配置的图层命名如此，可以在geoserver管理页面的<code>Layer Preview</code>里面看对应图层的<code>Name</code>。 对于<code>outputFormat</code>和<code>srsname</code>就不做过多解释，大家看值就容易明白了。因为<code>view</code>设置的<code>projection: &#39;EPSG:4326&#39;</code>，所以此处设置<code>srsname=EPSG:4326</code>。</p><p>BTW: 上面是全部查询，我们知道wfs也支持filter，所以我们可以在<code>url</code>里面设置filter，从而实现更细粒度的查询，比如这样：<code>http://localhost:8080/geoserver/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeNames=nyc_roads:nyc_roads&amp;outputFormat=application/json&amp;srsname=EPSG:4326&amp;cql_filter=in (&#39;nyc_roads.1162&#39;)</code>。 大家可以自行用这个url进行测试一下。关于filter更详细的信息参见<a href="http://docs.geoserver.org/latest/en/user/filter/syntax.html" target="_blank" rel="noopener">Supported filter languages</a>。 因为这不是教程的重点，所以此处不进行细说。</p><h1 id="通过wfs修改要素"><a href="#通过wfs修改要素" class="headerlink" title="通过wfs修改要素"></a>通过wfs修改要素</h1><p>在查询的基础上，本小节我们更进一步对界面上呈现的要素进行修改，然后通过wfs协议保存到服务器端。界面效果如下:</p><p><img src="../img/wfs-modify.png" alt="wfs modify demo"></p><p>在界面上方，先点击<code>查询</code>按钮，通过wfs协议把所有的要素查询到前端界面上显示，然后选择复选框<code>编辑</code>，就可以选择界面上的线段，进行编辑，比如把直线编辑成<code>W</code>形状，然后点击按钮<code>保存</code>，就可以把编辑后的线段保存下来。</p><p>在点击<code>保存</code>按钮之前，请打开开发者面板，然后再点击<code>保存</code>，之后就可以看到发起了一个wfs的http请求到geoserver服务器，请求的url为：<code>http://localhost:8080/geoserver/wfs?service=wfs</code>，发送的内容大致为:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Transaction</span> <span class="attr">xmlns</span>=<span class="string">"http://www.opengis.net/wfs"</span> <span class="attr">service</span>=<span class="string">"WFS"</span> <span class="attr">version</span>=<span class="string">"1.1.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Update</span> <span class="attr">typeName</span>=<span class="string">"feature:nyc_roads"</span> <span class="attr">xmlns:feature</span>=<span class="string">"http://geoserver.org/nyc_roads"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Name</span>&gt;</span>the_geom<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">MultiLineString</span> <span class="attr">xmlns</span>=<span class="string">"http://www.opengis.net/gml"</span> <span class="attr">srsName</span>=<span class="string">"EPSG:4326"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">lineStringMember</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">LineString</span> <span class="attr">srsName</span>=<span class="string">"EPSG:4326"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">posList</span>&gt;</span>-73.98528635501862 40.768332481384284 -73.98608637 40.76719342 -73.98449242115021 40.767849683761604 -73.98447096347809 40.76647639274598 -73.98299038410187 40.767334699630744 -73.98336657 40.76604531<span class="tag">&lt;/<span class="name">posList</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LineString</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">lineStringMember</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">MultiLineString</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Name</span>&gt;</span>modified<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Value</span>&gt;</span>5/28/2001<span class="tag">&lt;/<span class="name">Value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Value</span>&gt;</span>W 56 ST<span class="tag">&lt;/<span class="name">Value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Name</span>&gt;</span>vsam<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Value</span>&gt;</span>15060<span class="tag">&lt;/<span class="name">Value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Name</span>&gt;</span>sourcedate<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Value</span>&gt;</span>3/31/1996<span class="tag">&lt;/<span class="name">Value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Name</span>&gt;</span>sourcetype<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Value</span>&gt;</span>Photogrammetric<span class="tag">&lt;/<span class="name">Value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Name</span>&gt;</span>source_id<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Value</span>&gt;</span>96083<span class="tag">&lt;/<span class="name">Value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Name</span>&gt;</span>borough<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Value</span>&gt;</span>Manhattan<span class="tag">&lt;/<span class="name">Value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Name</span>&gt;</span>feat_code<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Value</span>&gt;</span>2900<span class="tag">&lt;/<span class="name">Value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Name</span>&gt;</span>feat_desc<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Value</span>&gt;</span>Paved Road<span class="tag">&lt;/<span class="name">Value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Name</span>&gt;</span>exported<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Value</span>&gt;</span>05/19/2004<span class="tag">&lt;/<span class="name">Value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Name</span>&gt;</span>feat_type<span class="tag">&lt;/<span class="name">Name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">Value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Filter</span> <span class="attr">xmlns</span>=<span class="string">"http://www.opengis.net/ogc"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">FeatureId</span> <span class="attr">fid</span>=<span class="string">"nyc_roads.882"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Transaction</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果保存成功，则<code>response</code>的内容大致如下：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml <span class="keyword">version</span>=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;wf<span class="variable">s:TransactionResponse</span> </span><br><span class="line">  xmln<span class="variable">s:xs</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> </span><br><span class="line">  xmln<span class="variable">s:sf</span>=<span class="string">"http://www.openplans.org/spearfish"</span> </span><br><span class="line">  xmln<span class="variable">s:wfs</span>=<span class="string">"http://www.opengis.net/wfs"</span> </span><br><span class="line">  xmln<span class="variable">s:gml</span>=<span class="string">"http://www.opengis.net/gml"</span> </span><br><span class="line">  xmln<span class="variable">s:nyc_roads</span>=<span class="string">"http://geoserver.org/nyc_roads"</span> </span><br><span class="line">  xmln<span class="variable">s:ogc</span>=<span class="string">"http://www.opengis.net/ogc"</span> </span><br><span class="line">  xmln<span class="variable">s:ows</span>=<span class="string">"http://www.opengis.net/ows"</span> </span><br><span class="line">  xmln<span class="variable">s:tiger</span>=<span class="string">"http://www.census.gov"</span> </span><br><span class="line">  xmln<span class="variable">s:topp</span>=<span class="string">"http://www.openplans.org/topp"</span> </span><br><span class="line">  xmln<span class="variable">s:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="keyword">x</span></span><br><span class="line">  mln<span class="variable">s:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span><br><span class="line">  <span class="keyword">version</span>=<span class="string">"1.1.0"</span> </span><br><span class="line">  xsi:schemaLocation=<span class="string">"http://www.opengis.net/wfs http://localhost:8080/geoserver/schemas/wfs/1.1.0/wfs.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;wf<span class="variable">s:TransactionSummary</span>&gt;</span><br><span class="line">    &lt;wf<span class="variable">s:totalInserted</span>&gt;<span class="number">0</span>&lt;/wf<span class="variable">s:totalInserted</span>&gt;</span><br><span class="line">    &lt;wf<span class="variable">s:totalUpdated</span>&gt;<span class="number">1</span>&lt;/wf<span class="variable">s:totalUpdated</span>&gt;</span><br><span class="line">    &lt;wf<span class="variable">s:totalDeleted</span>&gt;<span class="number">0</span>&lt;/wf<span class="variable">s:totalDeleted</span>&gt;</span><br><span class="line">  &lt;/wf<span class="variable">s:TransactionSummary</span>&gt;</span><br><span class="line">  &lt;wf<span class="variable">s:TransactionResults</span>/&gt;</span><br><span class="line">  &lt;wf<span class="variable">s:InsertResults</span>&gt;</span><br><span class="line">    &lt;wf<span class="variable">s:Feature</span>&gt;&lt;ogc:FeatureId fid=<span class="string">"none"</span>/&gt;&lt;/wf<span class="variable">s:Feature</span>&gt;</span><br><span class="line">  &lt;/wf<span class="variable">s:InsertResults</span>&gt;</span><br><span class="line">&lt;/wf<span class="variable">s:TransactionResponse</span>&gt;</span><br></pre></td></tr></table></figure></p><p>重新刷新页面后，再次点击<code>查询</code>按钮，可以验证之前修改的线段是否修改成功。由于不能提供geoserver服务器，所以只能让大家自行用下面的代码在本地验证：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>wfs modify demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../ol3.17.1/ol.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../ol3.17.1/ol-debug.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../3rdparty/zepto.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查询"</span> <span class="attr">onclick</span>=<span class="string">"queryWfs();"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"select"</span> /&gt;</span>选择</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"modify"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"modify"</span> /&gt;</span>编辑</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"保存"</span> <span class="attr">onclick</span>=<span class="string">"onSave();"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width:100%;height:100%;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> wfsVectorLayer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> modifiedFeatures = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 选择器</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> selectInteraction = <span class="keyword">new</span> ol.interaction.Select(&#123;</span></span><br><span class="line"><span class="actionscript">      style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">        stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">          color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">          width: 2</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 修改器</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> modifyInteraction = <span class="keyword">new</span> ol.interaction.Modify(&#123;</span></span><br><span class="line"><span class="actionscript">      style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">        stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">          color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">          width: 5</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;),</span></span><br><span class="line"><span class="undefined">      features: selectInteraction.getFeatures()</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="actionscript">    modifyInteraction.on(<span class="string">'modifyend'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 把修改完成的feature暂存起来</span></span></span><br><span class="line"><span class="undefined">      modifiedFeatures = e.features;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript">      layers: [<span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;)],</span></span><br><span class="line"><span class="actionscript">      target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">        center: [-73.99710639567148, 40.742270050255556],</span></span><br><span class="line"><span class="undefined">        maxZoom: 19,</span></span><br><span class="line"><span class="undefined">        zoom: 13,</span></span><br><span class="line"><span class="actionscript">        projection: <span class="string">'EPSG:4326'</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 通过wfs查询所有的要素</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">queryWfs</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 支持重新查询</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (wfsVectorLayer) &#123;</span></span><br><span class="line"><span class="undefined">        map.removeLayer(wfsVectorLayer);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      </span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 创建新的图层来加载wfs的要素</span></span></span><br><span class="line"><span class="actionscript">      wfsVectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">          format: <span class="keyword">new</span> ol.format.GeoJSON(&#123;</span></span><br><span class="line"><span class="actionscript">            geometryName: <span class="string">'the_geom'</span> <span class="comment">// 因为数据源里面字段the_geom存储的是geometry，所以需要指定</span></span></span><br><span class="line"><span class="undefined">          &#125;),</span></span><br><span class="line"><span class="actionscript">          url: <span class="string">'http://localhost:8080/geoserver/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeNames=nyc_roads:nyc_roads&amp;outputFormat=application/json&amp;srsname=EPSG:4326'</span></span></span><br><span class="line"><span class="undefined">        &#125;),</span></span><br><span class="line"><span class="actionscript">        style: <span class="function"><span class="keyword">function</span><span class="params">(feature, resolution)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">            stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">              color: <span class="string">'blue'</span>,</span></span><br><span class="line"><span class="undefined">              width: 5</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">          &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">      map.addLayer(wfsVectorLayer);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#select'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.checked) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 勾选选择复选框时，添加选择器到地图</span></span></span><br><span class="line"><span class="undefined">        map.removeInteraction(selectInteraction);</span></span><br><span class="line"><span class="undefined">        map.addInteraction(selectInteraction);</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 不勾选选择复选框的情况下，移出选择器和修改器</span></span></span><br><span class="line"><span class="undefined">        map.removeInteraction(selectInteraction);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'modify'</span>).checked = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        map.removeInteraction(modifyInteraction);</span></span><br><span class="line"><span class="actionscript">        modifiedFeatures = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#modify'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.checked) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 勾选修改复选框时，添加选择器和修改器到地图</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'select'</span>).checked = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">        map.removeInteraction(modifyInteraction);</span></span><br><span class="line"><span class="undefined">        map.addInteraction(modifyInteraction);</span></span><br><span class="line"><span class="undefined">        map.removeInteraction(selectInteraction);</span></span><br><span class="line"><span class="undefined">        map.addInteraction(selectInteraction);</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 不勾选修改复选框时，移出修改器</span></span></span><br><span class="line"><span class="undefined">        map.removeInteraction(modifyInteraction);</span></span><br><span class="line"><span class="actionscript">        modifiedFeatures = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 保存已经编辑的要素</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">onSave</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (modifiedFeatures &amp;&amp; modifiedFeatures.getLength() &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 转换坐标</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> modifiedFeature = modifiedFeatures.item(<span class="number">0</span>).clone();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 注意ID是必须，通过ID才能找到对应修改的feature</span></span></span><br><span class="line"><span class="undefined">        modifiedFeature.setId(modifiedFeatures.item(0).getId());</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 调换经纬度坐标，以符合wfs协议中经纬度的位置</span></span></span><br><span class="line"><span class="actionscript">        modifiedFeature.getGeometry().applyTransform(<span class="function"><span class="keyword">function</span><span class="params">(flatCoordinates, flatCoordinates2, stride)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; flatCoordinates.length; j += stride) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> y = flatCoordinates[j];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> x = flatCoordinates[j + <span class="number">1</span>];</span></span><br><span class="line"><span class="undefined">            flatCoordinates[j] = x;</span></span><br><span class="line"><span class="undefined">            flatCoordinates[j + 1] = y;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        modifyWfs([modifiedFeature]);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 把修改提交到服务器端</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">modifyWfs</span><span class="params">(features)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> WFSTSerializer = <span class="keyword">new</span> ol.format.WFS();</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> featObject = WFSTSerializer.writeTransaction(<span class="literal">null</span>,</span></span><br><span class="line"><span class="actionscript">        features, <span class="literal">null</span>, &#123;</span></span><br><span class="line"><span class="actionscript">          featureType: <span class="string">'nyc_roads'</span>, </span></span><br><span class="line"><span class="actionscript">          featureNS: <span class="string">'http://geoserver.org/nyc_roads'</span>,  <span class="comment">// 注意这个值必须为创建工作区时的命名空间URI</span></span></span><br><span class="line"><span class="actionscript">          srsName: <span class="string">'EPSG:4326'</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 转换为xml内容发送到服务器端</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> serializer = <span class="keyword">new</span> XMLSerializer();</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> featString = serializer.serializeToString(featObject);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">      request.open(<span class="string">'POST'</span>, <span class="string">'http://localhost:8080/geoserver/wfs?service=wfs'</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 指定内容为xml类型</span></span></span><br><span class="line"><span class="actionscript">      request.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/xml'</span>);</span></span><br><span class="line"><span class="undefined">      request.send(featString);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="通过wfs添加要素"><a href="#通过wfs添加要素" class="headerlink" title="通过wfs添加要素"></a>通过wfs添加要素</h1><p>现在我们该介绍一下如何在前端绘制一个新的要素，并且保存到服务器端。还是先看一下界面：</p><p><img src="../img/wfs-add.png" alt="wfs add demo"></p><p>勾选<code>新增</code>复选框之后，就可以在界面上绘制新的线段，如图，绘制了一个<code>W</code>形状的线，绘制完成后，点击按钮<code>保存</code>就可以把界面上新增的线保存到服务器端，在开发者工具界面可以看到http请求: <code>http://localhost:8080/geoserver/wfs?service=wfs</code>，请求发送的内容为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Transaction</span> <span class="attr">xmlns</span>=<span class="string">"http://www.opengis.net/wfs"</span> <span class="attr">service</span>=<span class="string">"WFS"</span> <span class="attr">version</span>=<span class="string">"1.1.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nyc_roads</span> <span class="attr">xmlns</span>=<span class="string">"http://geoserver.org/nyc_roads"</span> <span class="attr">fid</span>=<span class="string">"nyc_roads.new.1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">the_geom</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">MultiLineString</span> <span class="attr">xmlns</span>=<span class="string">"http://www.opengis.net/gml"</span> <span class="attr">srsName</span>=<span class="string">"EPSG:4326"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">lineStringMember</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">LineString</span> <span class="attr">srsName</span>=<span class="string">"EPSG:4326"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">posList</span>&gt;</span>-73.99970054626465 40.732669830322266 -73.98974418640137 40.71481704711914 -73.98545265197754 40.730438232421875 -73.98064613342285 40.71636199951172 -73.97360801696777 40.73284149169922<span class="tag">&lt;/<span class="name">posList</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LineString</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">lineStringMember</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">MultiLineString</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">the_geom</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>nyc_roads.new.1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">modified</span>&gt;</span>nyc_roads.new.1<span class="tag">&lt;/<span class="name">modified</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">vsam</span>&gt;</span>0<span class="tag">&lt;/<span class="name">vsam</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">sourcedate</span>&gt;</span><span class="tag">&lt;/<span class="name">sourcedate</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">sourcetype</span>&gt;</span><span class="tag">&lt;/<span class="name">sourcetype</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">source_id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">source_id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">borough</span>&gt;</span><span class="tag">&lt;/<span class="name">borough</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">feat_code</span>&gt;</span>0<span class="tag">&lt;/<span class="name">feat_code</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">feat_desc</span>&gt;</span>11<span class="tag">&lt;/<span class="name">feat_desc</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">feat_type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">feat_type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">exported</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nyc_roads</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Transaction</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>服务器端<code>response</code>的内容为：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml <span class="keyword">version</span>=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">  &lt;wf<span class="variable">s:TransactionResponse</span> xmln<span class="variable">s:xs</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> xmln<span class="variable">s:sf</span>=<span class="string">"http://www.openplans.org/spearfish"</span> xmln<span class="variable">s:wfs</span>=<span class="string">"http://www.opengis.net/wfs"</span> xmln<span class="variable">s:gml</span>=<span class="string">"http://www.opengis.net/gml"</span> xmln<span class="variable">s:nyc_roads</span>=<span class="string">"http://geoserver.org/nyc_roads"</span> xmln<span class="variable">s:ogc</span>=<span class="string">"http://www.opengis.net/ogc"</span> xmln<span class="variable">s:ows</span>=<span class="string">"http://www.opengis.net/ows"</span> xmln<span class="variable">s:tiger</span>=<span class="string">"http://www.census.gov"</span> xmln<span class="variable">s:topp</span>=<span class="string">"http://www.openplans.org/topp"</span> xmln<span class="variable">s:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> xmln<span class="variable">s:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="keyword">version</span>=<span class="string">"1.1.0"</span> xsi:schemaLocation=<span class="string">"http://www.opengis.net/wfs http://localhost:8080/geoserver/schemas/wfs/1.1.0/wfs.xsd"</span>&gt;</span><br><span class="line">    &lt;wf<span class="variable">s:TransactionSummary</span>&gt;</span><br><span class="line">      &lt;wf<span class="variable">s:totalInserted</span>&gt;<span class="number">1</span>&lt;/wf<span class="variable">s:totalInserted</span>&gt;</span><br><span class="line">      &lt;wf<span class="variable">s:totalUpdated</span>&gt;<span class="number">0</span>&lt;/wf<span class="variable">s:totalUpdated</span>&gt;</span><br><span class="line">      &lt;wf<span class="variable">s:totalDeleted</span>&gt;<span class="number">0</span>&lt;/wf<span class="variable">s:totalDeleted</span>&gt;</span><br><span class="line">    &lt;/wf<span class="variable">s:TransactionSummary</span>&gt;</span><br><span class="line">    &lt;wf<span class="variable">s:TransactionResults</span>/&gt;</span><br><span class="line">    &lt;wf<span class="variable">s:InsertResults</span>&gt;</span><br><span class="line">      &lt;wf<span class="variable">s:Feature</span>&gt;</span><br><span class="line">        &lt;ogc:FeatureId fid=<span class="string">"new0"</span> /&gt;</span><br><span class="line">      &lt;/wf<span class="variable">s:Feature</span>&gt;</span><br><span class="line">    &lt;/wf<span class="variable">s:InsertResults</span>&gt;</span><br><span class="line">  &lt;/wf<span class="variable">s:TransactionResponse</span>&gt;</span><br></pre></td></tr></table></figure></p><p>通过再次刷新界面，点击<code>查询</code>按钮查看所有的feature，可以确认是否添加成功，请自行验证。下面给出对应的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>wfs add demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../ol3.17.1/ol.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../ol3.17.1/ol-debug.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../3rdparty/zepto.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查询"</span> <span class="attr">onclick</span>=<span class="string">"queryWfs();"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"add"</span> /&gt;</span>新增</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"saveNew"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"保存"</span> <span class="attr">onclick</span>=<span class="string">"onSaveNew();"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width:100%;height:100%;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> newId = <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> wfsVectorLayer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> drawedFeature = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建用于新绘制feature的layer</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> drawLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">      source: <span class="keyword">new</span> ol.source.Vector(),</span></span><br><span class="line"><span class="actionscript">      style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">        stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">          color: <span class="string">'blue'</span>,</span></span><br><span class="line"><span class="undefined">          width: 5</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 添加绘制新图形的interaction，用于添加新的线条</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> drawInteraction = <span class="keyword">new</span> ol.interaction.Draw(&#123;</span></span><br><span class="line"><span class="actionscript">      type: <span class="string">'LineString'</span>, <span class="comment">// 设定为线条</span></span></span><br><span class="line"><span class="actionscript">      style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">        stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">          color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">          width: 10</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;),</span></span><br><span class="line"><span class="undefined">      source: drawLayer.getSource()</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="actionscript">    drawInteraction.on(<span class="string">'drawend'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 绘制结束时暂存绘制的feature</span></span></span><br><span class="line"><span class="undefined">      drawedFeature = e.feature;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript">      layers: [<span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;), drawLayer],</span></span><br><span class="line"><span class="actionscript">      target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">        center: [-73.99710639567148, 40.742270050255556],</span></span><br><span class="line"><span class="undefined">        maxZoom: 19,</span></span><br><span class="line"><span class="undefined">        zoom: 13,</span></span><br><span class="line"><span class="actionscript">        projection: <span class="string">'EPSG:4326'</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">queryWfs</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (wfsVectorLayer) &#123;</span></span><br><span class="line"><span class="undefined">        map.removeLayer(wfsVectorLayer);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      wfsVectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">          format: <span class="keyword">new</span> ol.format.GeoJSON(&#123;</span></span><br><span class="line"><span class="actionscript">            geometryName: <span class="string">'the_geom'</span></span></span><br><span class="line"><span class="undefined">          &#125;),</span></span><br><span class="line"><span class="actionscript">          url: <span class="string">'http://localhost:8080/geoserver/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeNames=nyc_roads:nyc_roads&amp;outputFormat=application/json&amp;srsname=EPSG:4326'</span></span></span><br><span class="line"><span class="undefined">        &#125;),</span></span><br><span class="line"><span class="actionscript">        style: <span class="function"><span class="keyword">function</span><span class="params">(feature, resolution)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">            stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">              color: <span class="string">'blue'</span>,</span></span><br><span class="line"><span class="undefined">              width: 5</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">          &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">      map.addLayer(wfsVectorLayer);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#add'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.checked) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 勾选新增复选框时，添加绘制的Interaction</span></span></span><br><span class="line"><span class="undefined">        map.removeInteraction(drawInteraction);</span></span><br><span class="line"><span class="undefined">        map.addInteraction(drawInteraction);</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 取消勾选新增复选框时，移出绘制的Interaction，删除已经绘制的feature</span></span></span><br><span class="line"><span class="undefined">        map.removeInteraction(drawInteraction);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (drawedFeature) &#123;</span></span><br><span class="line"><span class="undefined">          drawLayer.getSource().removeFeature(drawedFeature);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        drawedFeature = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 保存新绘制的feature</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">onSaveNew</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 转换坐标</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> geometry = drawedFeature.getGeometry().clone();</span></span><br><span class="line"><span class="actionscript">      geometry.applyTransform(<span class="function"><span class="keyword">function</span><span class="params">(flatCoordinates, flatCoordinates2, stride)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; flatCoordinates.length; j += stride) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> y = flatCoordinates[j];</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> x = flatCoordinates[j + <span class="number">1</span>];</span></span><br><span class="line"><span class="undefined">          flatCoordinates[j] = x;</span></span><br><span class="line"><span class="undefined">          flatCoordinates[j + 1] = y;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">      </span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 设置feature对应的属性，这些属性是根据数据源的字段来设置的</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> newFeature = <span class="keyword">new</span> ol.Feature();</span></span><br><span class="line"><span class="actionscript">      newFeature.setId(<span class="string">'nyc_roads.new.'</span> + newId);</span></span><br><span class="line"><span class="actionscript">      newFeature.setGeometryName(<span class="string">'the_geom'</span>);</span></span><br><span class="line"><span class="actionscript">      newFeature.set(<span class="string">'the_geom'</span>, <span class="literal">null</span>);</span></span><br><span class="line"><span class="actionscript">      newFeature.set(<span class="string">'name'</span>, newFeature.getId());</span></span><br><span class="line"><span class="actionscript">      newFeature.set(<span class="string">'modified'</span>, newFeature.getId());</span></span><br><span class="line"><span class="actionscript">      newFeature.set(<span class="string">'vsam'</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript">      newFeature.set(<span class="string">'sourcedate'</span>, <span class="string">''</span>);</span></span><br><span class="line"><span class="actionscript">      newFeature.set(<span class="string">'sourcetype'</span>, <span class="string">''</span>);</span></span><br><span class="line"><span class="actionscript">      newFeature.set(<span class="string">'source_id'</span>, newId);</span></span><br><span class="line"><span class="actionscript">      newFeature.set(<span class="string">'borough'</span>, <span class="string">''</span>);</span></span><br><span class="line"><span class="actionscript">      newFeature.set(<span class="string">'feat_code'</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript">      newFeature.set(<span class="string">'feat_desc'</span>, <span class="string">'11'</span>);</span></span><br><span class="line"><span class="actionscript">      newFeature.set(<span class="string">'feat_type'</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript">      newFeature.set(<span class="string">'exported'</span>, <span class="string">'true'</span>);</span></span><br><span class="line"><span class="actionscript">      newFeature.setGeometry(<span class="keyword">new</span> ol.geom.MultiLineString([geometry.getCoordinates()]));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      addWfs([newFeature]);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 更新id</span></span></span><br><span class="line"><span class="undefined">      newId = newId + 1;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 3秒后，自动刷新页面上的feature</span></span></span><br><span class="line"><span class="actionscript">      setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">        drawLayer.getSource().clear();</span></span><br><span class="line"><span class="undefined">        queryWfs();</span></span><br><span class="line"><span class="undefined">      &#125;, 3000);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 添加到服务器端</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">addWfs</span><span class="params">(features)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> WFSTSerializer = <span class="keyword">new</span> ol.format.WFS();</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> featObject = WFSTSerializer.writeTransaction(features,</span></span><br><span class="line"><span class="actionscript">        <span class="literal">null</span>, <span class="literal">null</span>, &#123;</span></span><br><span class="line"><span class="actionscript">          featureType: <span class="string">'nyc_roads'</span>,</span></span><br><span class="line"><span class="actionscript">          featureNS: <span class="string">'http://geoserver.org/nyc_roads'</span>,</span></span><br><span class="line"><span class="actionscript">          srsName: <span class="string">'EPSG:4326'</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> serializer = <span class="keyword">new</span> XMLSerializer();</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> featString = serializer.serializeToString(featObject);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">      request.open(<span class="string">'POST'</span>, <span class="string">'http://localhost:8080/geoserver/wfs?service=wfs'</span>);</span></span><br><span class="line"><span class="actionscript">      request.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/xml'</span>);</span></span><br><span class="line"><span class="undefined">      request.send(featString);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="通过wfs删除要素"><a href="#通过wfs删除要素" class="headerlink" title="通过wfs删除要素"></a>通过wfs删除要素</h1><p>删除feature是wfs协议中的最后一个例子了，和之前的修改，添加差不多，大同小异。还是先看界面：</p><p><img src="../img/wfs-delete.png" alt="wfs delete demo"></p><p>选择<code>查询</code>按钮，把所有的feature加载到前端，然后勾选<code>选择</code>复选框，就可以在地图上选择要删除的feature，图示选择之前添加的<code>W</code>形状的线条，然后点击<code>删除选中Feature</code>按钮，就可以把feature删除掉。</p><p>在开发者工具窗口里面可以看到删除feature的http请求： <code>http://localhost:8080/geoserver/wfs?service=wfs</code>，其发送的内容为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Transaction</span> <span class="attr">xmlns</span>=<span class="string">"http://www.opengis.net/wfs"</span> <span class="attr">service</span>=<span class="string">"WFS"</span> <span class="attr">version</span>=<span class="string">"1.1.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Delete</span> <span class="attr">typeName</span>=<span class="string">"feature:nyc_roads"</span> <span class="attr">xmlns:feature</span>=<span class="string">"http://geoserver.org/nyc_roads"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Filter</span> <span class="attr">xmlns</span>=<span class="string">"http://www.opengis.net/ogc"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">FeatureId</span> <span class="attr">fid</span>=<span class="string">"nyc_roads.1302"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Transaction</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>服务器端<code>response</code>的内容为：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml <span class="keyword">version</span>=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">  &lt;wf<span class="variable">s:TransactionResponse</span> xmln<span class="variable">s:xs</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> xmln<span class="variable">s:sf</span>=<span class="string">"http://www.openplans.org/spearfish"</span> xmln<span class="variable">s:wfs</span>=<span class="string">"http://www.opengis.net/wfs"</span> xmln<span class="variable">s:gml</span>=<span class="string">"http://www.opengis.net/gml"</span> xmln<span class="variable">s:nyc_roads</span>=<span class="string">"http://geoserver.org/nyc_roads"</span> xmln<span class="variable">s:ogc</span>=<span class="string">"http://www.opengis.net/ogc"</span> xmln<span class="variable">s:ows</span>=<span class="string">"http://www.opengis.net/ows"</span> xmln<span class="variable">s:tiger</span>=<span class="string">"http://www.census.gov"</span> xmln<span class="variable">s:topp</span>=<span class="string">"http://www.openplans.org/topp"</span> xmln<span class="variable">s:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> xmln<span class="variable">s:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="keyword">version</span>=<span class="string">"1.1.0"</span> xsi:schemaLocation=<span class="string">"http://www.opengis.net/wfs http://localhost:8080/geoserver/schemas/wfs/1.1.0/wfs.xsd"</span>&gt;</span><br><span class="line">    &lt;wf<span class="variable">s:TransactionSummary</span>&gt;</span><br><span class="line">      &lt;wf<span class="variable">s:totalInserted</span>&gt;<span class="number">0</span>&lt;/wf<span class="variable">s:totalInserted</span>&gt;</span><br><span class="line">      &lt;wf<span class="variable">s:totalUpdated</span>&gt;<span class="number">0</span>&lt;/wf<span class="variable">s:totalUpdated</span>&gt;</span><br><span class="line">      &lt;wf<span class="variable">s:totalDeleted</span>&gt;<span class="number">1</span>&lt;/wf<span class="variable">s:totalDeleted</span>&gt;</span><br><span class="line">    &lt;/wf<span class="variable">s:TransactionSummary</span>&gt;</span><br><span class="line">    &lt;wf<span class="variable">s:TransactionResults</span>/&gt;</span><br><span class="line">    &lt;wf<span class="variable">s:InsertResults</span>&gt;</span><br><span class="line">      &lt;wf<span class="variable">s:Feature</span>&gt;</span><br><span class="line">        &lt;ogc:FeatureId fid=<span class="string">"none"</span> /&gt;</span><br><span class="line">      &lt;/wf<span class="variable">s:Feature</span>&gt;</span><br><span class="line">    &lt;/wf<span class="variable">s:InsertResults</span>&gt;</span><br><span class="line">  &lt;/wf<span class="variable">s:TransactionResponse</span>&gt;</span><br></pre></td></tr></table></figure></p><p>通过再次刷新查询，可以确认刚才的feature是否成功删除。请自行验证，对应实例的代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>wfs crud demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../ol3.17.1/ol.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../ol3.17.1/ol-debug.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../3rdparty/zepto.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查询"</span> <span class="attr">onclick</span>=<span class="string">"queryWfs();"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"select"</span> /&gt;</span>选择</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"删除选中Feature"</span> <span class="attr">onclick</span>=<span class="string">"onDeleteFeature();"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width:100%;height:100%;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> wfsVectorLayer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 选择器</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> selectInteraction = <span class="keyword">new</span> ol.interaction.Select(&#123;</span></span><br><span class="line"><span class="actionscript">      style: <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">        stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">          color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">          width: 10</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript">      layers: [<span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line"><span class="undefined">      &#125;)],</span></span><br><span class="line"><span class="actionscript">      target: <span class="string">'map'</span>,</span></span><br><span class="line"><span class="actionscript">      view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="undefined">        center: [-73.99710639567148, 40.742270050255556],</span></span><br><span class="line"><span class="undefined">        maxZoom: 19,</span></span><br><span class="line"><span class="undefined">        zoom: 13,</span></span><br><span class="line"><span class="actionscript">        projection: <span class="string">'EPSG:4326'</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">queryWfs</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (wfsVectorLayer) &#123;</span></span><br><span class="line"><span class="undefined">        map.removeLayer(wfsVectorLayer);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      wfsVectorLayer = <span class="keyword">new</span> ol.layer.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">        source: <span class="keyword">new</span> ol.source.Vector(&#123;</span></span><br><span class="line"><span class="actionscript">          format: <span class="keyword">new</span> ol.format.GeoJSON(&#123;</span></span><br><span class="line"><span class="actionscript">            geometryName: <span class="string">'the_geom'</span></span></span><br><span class="line"><span class="undefined">          &#125;),</span></span><br><span class="line"><span class="actionscript">          url: <span class="string">'http://localhost:8080/geoserver/wfs?service=wfs&amp;version=1.1.0&amp;request=GetFeature&amp;typeNames=nyc_roads:nyc_roads&amp;outputFormat=application/json&amp;srsname=EPSG:4326'</span></span></span><br><span class="line"><span class="undefined">        &#125;),</span></span><br><span class="line"><span class="actionscript">        style: <span class="function"><span class="keyword">function</span><span class="params">(feature, resolution)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="keyword">new</span> ol.style.Style(&#123;</span></span><br><span class="line"><span class="actionscript">            stroke: <span class="keyword">new</span> ol.style.Stroke(&#123;</span></span><br><span class="line"><span class="actionscript">              color: <span class="string">'blue'</span>,</span></span><br><span class="line"><span class="undefined">              width: 5</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">          &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">      map.addLayer(wfsVectorLayer);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#select'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.checked) &#123;</span></span><br><span class="line"><span class="undefined">        map.removeInteraction(selectInteraction);</span></span><br><span class="line"><span class="undefined">        map.addInteraction(selectInteraction);</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">        map.removeInteraction(selectInteraction);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">onDeleteFeature</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 删选择器选中的feature</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (selectInteraction.getFeatures().getLength() &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="undefined">        deleteWfs([selectInteraction.getFeatures().item(0)]);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3秒后自动更新features</span></span></span><br><span class="line"><span class="actionscript">        setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">          selectInteraction.getFeatures().clear();</span></span><br><span class="line"><span class="undefined">          queryWfs();</span></span><br><span class="line"><span class="undefined">        &#125;, 3000);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 在服务器端删除feature</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">deleteWfs</span><span class="params">(features)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> WFSTSerializer = <span class="keyword">new</span> ol.format.WFS();</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> featObject = WFSTSerializer.writeTransaction(<span class="literal">null</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="literal">null</span>, features, &#123;</span></span><br><span class="line"><span class="actionscript">          featureType: <span class="string">'nyc_roads'</span>,</span></span><br><span class="line"><span class="actionscript">          featureNS: <span class="string">'http://geoserver.org/nyc_roads'</span>,</span></span><br><span class="line"><span class="actionscript">          srsName: <span class="string">'EPSG:4326'</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> serializer = <span class="keyword">new</span> XMLSerializer();</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> featString = serializer.serializeToString(featObject);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">      request.open(<span class="string">'POST'</span>, <span class="string">'http://localhost:8080/geoserver/wfs?service=wfs'</span>);</span></span><br><span class="line"><span class="actionscript">      request.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/xml'</span>);</span></span><br><span class="line"><span class="undefined">      request.send(featString);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;进阶实例&quot;&gt;&lt;a href=&quot;#进阶实例&quot; class=&quot;headerlink&quot; title=&quot;进阶实例&quot;&gt;&lt;/a&gt;进阶实例&lt;/h1&gt;&lt;p&gt;前面的基础知识，用于应对基本应用没有问题，但如果想更进一步的结合在一起应用，或者解决更为复杂一点的问题，则稍显困难。本章节针对这类问题给出一些实例讲解，以解决广大ol3使用者的困惑，用于感谢大家对本教程的支持。针对这类问题，曾经在Openlayer3 QQ群里面收集统计过，下面的例子就是基于这些统计数据分析讨论而出的。如果你有什么其他的想法或意见，请在下方留言或QQ联系我（11364382），谢谢。&lt;/p&gt;
    
    </summary>
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/categories/openLayers/"/>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>OpenLayers 3 View</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/ch04/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/ch04/index.html</id>
    <published>2018-01-18T12:29:59.000Z</published>
    <updated>2018-01-30T14:08:07.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="View"><a href="#View" class="headerlink" title="View"></a>View</h1><p>所见即所得是大家喜闻乐见的，<code>View</code>就是这样的，作为地图的窗口，做一些改变，就能看到变化，便于初学者学习。同时，<code>View</code>是OpenLayers 3地图组成部分中非常重要的一个概念，涉及到地图移动，放大，缩小，旋转等，这些功能是任何一个GIS引擎必不可少的。为此，我们把它作为最先介绍和学习的组成部分。</p><a id="more"></a><h1 id="地图导航"><a href="#地图导航" class="headerlink" title="地图导航"></a>地图导航</h1><p>在深入学习之前，还是先来个开胃菜，见识一下<code>View</code>所承载的功能。下面将演示地图导航功能，关于导航相关功能，在前面操作地图的时候，已经有了充分的理解和认识。为什么我们还要再讨论它呢？因为这次的导航功能，需要自己来实现，而且只使用<code>ol.View</code>提供的方法就可以做到。</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%, height: 400px"></div></p><p><div id="navigate-container"><br>    <input type="button" onclick="moveToLeft();" value="左移"><br>    <input type="button" onclick="moveToRight();" value="右移"><br>    <input type="button" onclick="moveToUp();" value="上移"><br>    <input type="button" onclick="moveToDown();" value="下移"><br>    <input type="button" onclick="moveToChengDu();" value="移到成都"><br>    <input type="button" onclick="zoomIn();" value="放大"><br>    <input type="button" onclick="zoomOut();" value="缩小"><br></div></p><script>  var map = new ol.Map({        layers: [            new ol.layer.Tile({source: new ol.source.OSM()})        ],        view: new ol.View({            // 设置成都为地图中心，此处进行坐标转换， 把EPSG:4326的坐标，转换为EPSG:3857坐标，因为ol默认使用的是EPSG:3857坐标            // 请阅读“地图坐标系”了解更多坐标系的信息。            center: ol.proj.transform([104.06, 30.67], 'EPSG:4326', 'EPSG:3857'),            zoom: 10        }),        target: 'map'  });    // 向左移动地图    function moveToLeft() {        var view = map.getView();        var mapCenter = view.getCenter();        // 让地图中心的x值增加，即可使得地图向左移动，增加的值根据效果可自由设定        mapCenter[0] += 50000;        view.setCenter(mapCenter);        map.render();    }    // 向右移动地图    function moveToRight() {        var view = map.getView();        var mapCenter = view.getCenter();        // 让地图中心的x值减少，即可使得地图向右移动，减少的值根据效果可自由设定        mapCenter[0] -= 50000;        view.setCenter(mapCenter);        map.render();    }    // 向上移动地图    function moveToUp() {        var view = map.getView();        var mapCenter = view.getCenter();        // 让地图中心的y值减少，即可使得地图向上移动，减少的值根据效果可自由设定        mapCenter[1] -= 50000;        view.setCenter(mapCenter);        map.render();    }    // 向下移动地图    function moveToDown() {        var view = map.getView();        var mapCenter = view.getCenter();        // 让地图中心的y值增加，即可使得地图向下移动，增加的值根据效果可自由设定        mapCenter[1] += 50000;        view.setCenter(mapCenter);        map.render();    }    // 移动到成都    function moveToChengDu() {        var view = map.getView();        // 设置地图中心为成都的坐标，即可让地图移动到成都        view.setCenter(ol.proj.transform([104.06, 30.67], 'EPSG:4326', 'EPSG:3857'));        map.render();    }    // 放大地图    function zoomIn() {        var view = map.getView();        // 让地图的zoom增加1，从而实现地图放大        view.setZoom(view.getZoom() + 1);    }    // 缩小地图    function zoomOut() {        var view = map.getView();        // 让地图的zoom减小1，从而实现地图缩小        view.setZoom(view.getZoom() - 1);    }</script><p>点击地图下方的几个按钮试试响应的功能，用它们就可以完整的实现地图导航了。按照惯例，下面我们会给出对应的源码，但我希望你能先学习一下<code>ol.View</code>的API文档，从中找出我们可能使用了的方法。</p><p>好了，下面就来揭晓答案：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%, height: 400px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navigate-container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"moveToLeft();"</span> <span class="attr">value</span>=<span class="string">"左移"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"moveToRight();"</span> <span class="attr">value</span>=<span class="string">"右移"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"moveToUp();"</span> <span class="attr">value</span>=<span class="string">"上移"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"moveToDown();"</span> <span class="attr">value</span>=<span class="string">"下移"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"moveToChengDu();"</span> <span class="attr">value</span>=<span class="string">"移到成都"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"zoomIn();"</span> <span class="attr">value</span>=<span class="string">"放大"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"zoomOut();"</span> <span class="attr">value</span>=<span class="string">"缩小"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;source: <span class="keyword">new</span> ol.source.OSM()&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置成都为地图中心，此处进行坐标转换， 把EPSG:4326的坐标，转换为EPSG:3857坐标，因为ol默认使用的是EPSG:3857坐标</span></span></span><br><span class="line"><span class="actionscript">center: ol.proj.transform([<span class="number">104.06</span>, <span class="number">30.67</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>),</span></span><br><span class="line"><span class="undefined">zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 向左移动地图</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">moveToLeft</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> view = map.getView();</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> mapCenter = view.getCenter();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 让地图中心的x值增加，即可使得地图向左移动，增加的值根据效果可自由设定</span></span></span><br><span class="line"><span class="undefined">mapCenter[0] += 50000;</span></span><br><span class="line"><span class="undefined">view.setCenter(mapCenter);</span></span><br><span class="line"><span class="undefined">map.render();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 向右移动地图</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">moveToRight</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> view = map.getView();</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> mapCenter = view.getCenter();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 让地图中心的x值减少，即可使得地图向右移动，减少的值根据效果可自由设定</span></span></span><br><span class="line"><span class="undefined">mapCenter[0] -= 50000;</span></span><br><span class="line"><span class="undefined">view.setCenter(mapCenter);</span></span><br><span class="line"><span class="undefined">map.render();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 向上移动地图</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">moveToUp</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> view = map.getView();</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> mapCenter = view.getCenter();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 让地图中心的y值减少，即可使得地图向上移动，减少的值根据效果可自由设定</span></span></span><br><span class="line"><span class="undefined">mapCenter[1] -= 50000;</span></span><br><span class="line"><span class="undefined">view.setCenter(mapCenter);</span></span><br><span class="line"><span class="undefined">map.render();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 向下移动地图</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">moveToDown</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> view = map.getView();</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> mapCenter = view.getCenter();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 让地图中心的y值增加，即可使得地图向下移动，增加的值根据效果可自由设定</span></span></span><br><span class="line"><span class="undefined">mapCenter[1] += 50000;</span></span><br><span class="line"><span class="undefined">view.setCenter(mapCenter);</span></span><br><span class="line"><span class="undefined">map.render();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 移动到成都</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">moveToChengDu</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> view = map.getView();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置地图中心为成都的坐标，即可让地图移动到成都</span></span></span><br><span class="line"><span class="actionscript">view.setCenter(ol.proj.transform([<span class="number">104.06</span>, <span class="number">30.67</span>], <span class="string">'EPSG:4326'</span>, <span class="string">'EPSG:3857'</span>));</span></span><br><span class="line"><span class="undefined">map.render();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 放大地图</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">zoomIn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> view = map.getView();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 让地图的zoom增加1，从而实现地图放大</span></span></span><br><span class="line"><span class="undefined">view.setZoom(view.getZoom() + 1);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 缩小地图</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">zoomOut</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> view = map.getView();</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 让地图的zoom减小1，从而实现地图缩小</span></span></span><br><span class="line"><span class="undefined">view.setZoom(view.getZoom() - 1);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>input</code>标签增加了几个按钮，每个按钮都绑定了对应的点击事件监听，对应的监听函数实现了某一种导航的功能，都很简单，并且代码都有注释，容易理解。创建地图的代码几乎没有任何改变，也不过多说明，请结合代码和上面的地图进行理解。</p><p>在功能上，目前尚有两个方面的欠缺，一是按钮没有集成在地图上；二是移动并不平滑。这两部分功能缺失将在我们学习了<code>Control</code>和动画之后，一步一步再补充完善，此处暂时不深入下去。现在需要考虑的是我们在代码中使用了<code>ol.proj.transform</code>这个方法，它有什么作用？</p><h1 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h1><p>是否已经知道<code>ol.proj.transform</code>的功能了？你应该知道的，因为有API文档。它主要用于坐标转换，它的第一个参数是<code>ol.Coordinate</code>类型的坐标，后面两个参数依次是当前坐标所用的坐标系，及转换后的坐标所用的坐标系，<code>ol.proj.transform([104.06, 30.67], &#39;EPSG:4326&#39;, &#39;EPSG:3857&#39;)</code>就能把<code>EPSG:4326</code>的坐标<code>[104.06, 30.67]</code>转换为<code>EPSG:3857</code>的坐标。</p><p>在了解这个函数的功能后，可能不禁会问：为什么要弄的如此复杂，是不是还有很多其他的坐标系？是的，确实存在很多其他的坐标系，如果可以选择的话，应该没人愿意这样。道理如同这个世界上存在各种各样的货币一样。在下一个小节，就会详细介绍多个坐标系及存在的原因。但在此之前，我们得先了解一个有意义的坐标应该如何定义。 </p><p>如果单独地看<code>[45.06, 30.67]</code>，这是没有任何意义的两个数字，在不同的场景，不同的人眼里，它们可以是某个仪器的两个测量值，也可以是学生的考试成绩，还可以是某个坐标。大家或许已经意识到，场景是非常重要的，假如我们定义这两个数字表示的是一个地理位置的坐标，那请问你知道这个坐标所指的具体位置吗？肯定是不能的。因为我们并不知道这个坐标里面的数字使用什么单位，是度？是米？还是其他的单位？如果添加上单位，也还不够，假设单位是度，我们还是不知道坐标中的前一个数字是经度，还是纬度。即使定义经纬度，也还不够，因为还有很多不确定的东西，比如这个坐标相对的原点在哪里？二维还是三维，哪个方向为正向？</p><p>一个有意义的坐标并不是我们看上去那样简单，特别是地理坐标，但初学者往往会忽略这点，从而造成在应用中经常出现定位错误。</p><h1 id="坐标系及投影"><a href="#坐标系及投影" class="headerlink" title="坐标系及投影"></a>坐标系及投影</h1><p>关于原点，方向，单位等等的相关定义和描述，组成了我们常说的坐标系。谈到坐标系，就会想起初中数学中经常接触到的二维笛卡尔坐标系，在图形学中也会遇到三维坐标系，在GIS中我们需要地理坐标系。但它并不像笛卡尔坐标系那样简单，学过地理知识就知道，地球并不是一个完全规则的球体。在不同的地区，为了在数学上表示它，就出现了多种不同的参考椭球体，比如克拉索夫斯基(Krasovsky)椭球体，WGS1984椭球体，更多的椭球体参见<a href="https://zh.wikipedia.org/wiki/%E5%8F%82%E8%80%83%E6%A4%AD%E7%90%83%E4%BD%93" target="_blank" rel="noopener">参考椭球体</a>。在参考椭球体的基础上，就发展出了不同的地理坐标系，比如我国常用的WGS84，北京54，西安80坐标系，欧洲，北美也有不同的坐标系。北京54使用的是克拉索夫斯基(Krasovsky)椭球体，WGS84使用的是WGS1984椭球体。由此可见，多个坐标系是源于地理的复杂性。</p><p>由于存在着多种坐标系，即使同样的坐标，在不同的坐标系中，也表示的是不同的位置，这就是大家经常遇到的偏移问题的根源，要解决这类问题，就需要纠偏，把一个坐标系的坐标转换成另一个坐标系的坐标。由于WGS84是全球通用的坐标系，涉及到多个坐标系与它之间的转换，所以在此做个简单的介绍。</p><p>WGS84，全称World Geodetic System 1984，是为GPS全球定位系统使用而建立的坐标系统。通过遍布世界的卫星观测站观测到的坐标建立，其初次WGS84的精度为1-2m，在1994年1月2日，通过10个观测站在GPS测量方法上改正，得到了WGS84（G730），G表示由GPS测量得到，730表示为GPS时间第730个周。</p><p>1996年，National Imagery and Mapping Agency (NIMA) 为美国国防部 (U.S.Department of Defense, DoD)做了一个新的坐标系统。这样实现了新的WGS版本WGS（G873）。其因为加入了美国海军天文台和北京站的改正，其东部方向加入了31-39cm 的改正。所有的其他坐标都有在1分米之内的修正。</p><p>关于北京54和西安80坐标系，请自行通过网络查找相关资料进行了解。</p><p>有了坐标系后，我们就能精确的表示地球上的每一个位置，但为什么还需要投影呢？投影是为了把不可展的椭球面描绘到平面上，它使用几何透视方法或数学分析的方法，将地球上的点和线投影到可展的曲面(平面、园柱面或圆锥面)上，再将此可展曲面展成平面，建立该平面上的点、线和地球椭球面上的点、线的对应关系。正是因为有投影，大家才能在网页上看到二维平面的地球地图。</p><p>投影方式也多种多样，其中有一种投影叫墨卡托投影(Mercator Projection)，广泛使用于网页地图，对于OpenLayers 3的开发者而言，尤其重要，详情参见<a href="http://baike.baidu.com/view/301981.htm" target="_blank" rel="noopener">墨卡托投影</a>。</p><p>如果不了解上面这些基本知识，在使用OpenLayers 3的过程中，会感觉寸步难行，相反，则得心应手。</p><h1 id="OpenLayers-3使用的坐标系"><a href="#OpenLayers-3使用的坐标系" class="headerlink" title="OpenLayers 3使用的坐标系"></a>OpenLayers 3使用的坐标系</h1><p>目前OpenLayers 3支持两种投影，一个是<code>EPSG:4326</code>，等同于WGS84坐标系，参见<a href="http://spatialreference.org/ref/epsg/wgs-84/" target="_blank" rel="noopener">详情</a>。另一个是<code>EPSG:3857</code>，等同于900913，由Mercator投影而来，经常用于web地图，参见<a href="http://spatialreference.org/ref/sr-org/7483/" target="_blank" rel="noopener">详情</a>。一个是全球通用的，一个是web地图专用的，自然OpenLayers 3支持它们。在使用过程中，需要注意OpenLayers 3默认使用的是<code>EPSG:3857</code>。这也是为什么前面的代码里需要进行坐标转换的原因。 既然支持<code>EPSG:4326</code>，为什么还要转换？当然是可以不用转换的，但前提是你得指定使用具体那种投影，就像下面这样。</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script>  new ol.Map({        layers: [            new ol.layer.Tile({source: new ol.source.OSM()})        ],        view: new ol.View({            // 设置成都为地图中心            center: [104.06, 30.67],            projection: 'EPSG:4326',            zoom: 10        }),        target: 'map'  });</script><p>代码很简单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;source: <span class="keyword">new</span> ol.source.OSM()&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置成都为地图中心</span></span></span><br><span class="line"><span class="undefined">center: [104.06, 30.67],</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 指定投影使用EPSG:4326</span></span></span><br><span class="line"><span class="actionscript">projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以开发时需要记住的是当前OpenLayers 3使用的坐标系及投影，以及我们自己的数据所使用的坐标系及投影。在没有弄清楚之前，就不要继续后面的内容学习，直到弄清楚为止。</p><h1 id="ol-View的应用"><a href="#ol-View的应用" class="headerlink" title="ol.View的应用"></a>ol.View的应用</h1><p><a href="04-01.md">地图导航</a>是<code>View</code>应用的一个例子，但仅限于导航。其实<code>View</code>还有一些其他的功能，在开发中经常遇到。比如控制地图显示范围，自动适配某个范围等等。若有所了解，可跳过本章节，直接进入下一个章节。</p><h1 id="限制地图范围"><a href="#限制地图范围" class="headerlink" title="限制地图范围"></a>限制地图范围</h1><p>在实际使用中，往往只关心某一个区域的地图，而无需显示整个地球的地图，这样可以聚焦于业务，同时可以减少前端和后台的地图数据。无疑，这样的功能是非常有用的。下面我们就将看到，地图只能在经度29度到31度，纬度在102到104度之间显示。</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script>  new ol.Map({        layers: [            new ol.layer.Tile({source: new ol.source.OSM()})        ],        view: new ol.View({            extent: [102, 29, 104, 31],            // 设置成都为地图中心            center: [104.06, 30.67],            projection: 'EPSG:4326',            zoom: 10        }),        target: 'map'  });</script><p>不妨上下左右拖拽地图试试，是否发现上下左右都存在着边界？其实代码很简单：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;source: <span class="keyword">new</span> ol.source.OSM()&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置地图中心范围</span></span></span><br><span class="line"><span class="undefined">extent: [102, 29, 104, 31],</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置成都为地图中心</span></span></span><br><span class="line"><span class="undefined">center: [104.06, 30.67],</span></span><br><span class="line"><span class="actionscript">projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>就只是添加了    <code>extent: [102, 29, 104, 31],</code>这行代码就实现了功能。<code>extent</code>参数类型为<code>[minX, minY, maxX, maxY]</code>的<code>ol.Extent</code>，很容易记住。</p><p>如果对上面的地图进行缩小，然后再看地图，是否发现范围<code>[102, 29, 104, 31]</code>外的区域也显示出来了，而这并不是我们期望看到的。这时请注意仔细看<code>extent</code>参数的说明，这个范围指的是地图中心的限制范围，而不是整个地图显示的范围。那遇到这个问题该怎么办？我们发现，当我们地图放大后，这个问题并不那么明显，地图放大的越大，固定窗口显示的实际地理范围越小。一个简单的办法就是限制地图不能无限缩小，具体允许缩小到哪一级，可通过实际缩小地图到刚好填满整个窗口(<code>id</code>为<code>map</code>的<code>div</code>)来确定。限制地图缩放级别可参见<a href="04-07.md">下一节</a>。</p><p>这是一种简单的做法，虽然有效，但并不精确，如果要做到非常精确，还需要学习后面更多的知识(分辨率等)，在后续章节会有更深入的说明和示例。</p><h1 id="限制地图缩放级别"><a href="#限制地图缩放级别" class="headerlink" title="限制地图缩放级别"></a>限制地图缩放级别</h1><p>有时无限制地允许用户缩小或者放大地图，并不是一种明智的做法，在地图上的<code>feature</code>、标注、图形等都会变的不便于查看。为此，适中的地图缩放级别是被大多数场景所需要的。下面演示地图你只能在10到14级进行缩放。</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><script>  new ol.Map({        layers: [            new ol.layer.Tile({source: new ol.source.OSM()})        ],        view: new ol.View({            // 设置成都为地图中心            center: [104.06, 30.67],            projection: 'EPSG:4326',            zoom: 10,            minZoom: 10,            maxZoom: 14        }),        target: 'map'  });</script><p>缩放试试便知，地图现在不能无限缩小放大了，代码也是非常的简单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;source: <span class="keyword">new</span> ol.source.OSM()&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置成都为地图中心</span></span></span><br><span class="line"><span class="undefined">center: [104.06, 30.67],</span></span><br><span class="line"><span class="actionscript">projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">zoom: 10,</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 限制地图缩放最大级别为14，最小级别为10</span></span></span><br><span class="line"><span class="undefined">minZoom: 10,</span></span><br><span class="line"><span class="undefined">maxZoom: 14</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>很多初学者问这个问题，其实仔细阅读一下API文档就会知道如何编码，以至于很多已经知道这个功能的其他开发者不愿意回答这么基础的功能。如果只是显示最小级别则只用设置<code>minZoom</code>的值即可，反之只设置<code>maxZoom</code>的值。</p><p>除了使用<code>minZoom</code>和<code>maxZoom</code>之外，还可以使用<code>minResolution</code>和<code>maxResolution</code>，其具体原理和使用，在分辨率小节会有介绍。对于开发者而言，建议使用<code>minZoom</code>和<code>maxZoom</code>，简单直接。</p><h1 id="自适配区域"><a href="#自适配区域" class="headerlink" title="自适配区域"></a>自适配区域</h1><p>在实际应用中，会有一些地图查找和标注的业务，比如查看成都市锦江区。而这时，地图所在区域可能是北京，我们需要能够让地图直接定位到锦江区，并且最大化完全地显示这块区域。下面就将演示这个功能。</p><p><head><br>    <link href="../src/ol3.13.1/ol.css" rel="stylesheet" type="text/css"><br>    <script type="text/javascript" src="../src/ol3.13.1/ol.js" charset="utf-8"></script><br></head></p><p><div id="map" style="width: 100%"></div></p><p><input type="button" value="显示成都" onclick="fitToChengdu();"></p><script>  var map = new ol.Map({        layers: [            new ol.layer.Tile({source: new ol.source.OSM()})        ],        view: new ol.View({            // 设置成都为地图中心            center: [104.06, 30.67],            projection: 'EPSG:4326',            zoom: 10        }),        target: 'map'  });  function fitToChengdu() {      // 让地图最大化完全地显示区域[104, 30.6, 104.12, 30.74]      map.getView().fit([104, 30.6, 104.12, 30.74], map.getSize());  }</script><p>点击地图下方的按钮<strong>显示成都</strong>，看看有什么效果。代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"显示成都"</span> <span class="attr">onclick</span>=<span class="string">"fitToChengdu();"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="undefined">layers: [</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> ol.layer.Tile(&#123;source: <span class="keyword">new</span> ol.source.OSM()&#125;)</span></span><br><span class="line"><span class="undefined">],</span></span><br><span class="line"><span class="actionscript">view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 设置成都为地图中心</span></span></span><br><span class="line"><span class="undefined">center: [104.06, 30.67],</span></span><br><span class="line"><span class="actionscript">projection: <span class="string">'EPSG:4326'</span>,</span></span><br><span class="line"><span class="undefined">zoom: 10</span></span><br><span class="line"><span class="undefined">&#125;),</span></span><br><span class="line"><span class="actionscript">target: <span class="string">'map'</span></span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">fitToChengdu</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 让地图最大化完全地显示区域[104, 30.6, 104.12, 30.74]</span></span></span><br><span class="line"><span class="undefined">  map.getView().fit([104, 30.6, 104.12, 30.74], map.getSize());</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只用了一行代码，<code>ol.View</code>的<code>fit</code>函数很强大，希望初学者能认真仔细的查看API文档，它的第三个参数还可以设置更多的选项，以适应更多的需要。关于更多的使用，参见官网例子<a href="http://openlayers.org/en/v3.13.1/examples/center.html" target="_blank" rel="noopener">Advanced View Positioning</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;View&quot;&gt;&lt;a href=&quot;#View&quot; class=&quot;headerlink&quot; title=&quot;View&quot;&gt;&lt;/a&gt;View&lt;/h1&gt;&lt;p&gt;所见即所得是大家喜闻乐见的，&lt;code&gt;View&lt;/code&gt;就是这样的，作为地图的窗口，做一些改变，就能看到变化，便于初学者学习。同时，&lt;code&gt;View&lt;/code&gt;是OpenLayers 3地图组成部分中非常重要的一个概念，涉及到地图移动，放大，缩小，旋转等，这些功能是任何一个GIS引擎必不可少的。为此，我们把它作为最先介绍和学习的组成部分。&lt;/p&gt;
    
    </summary>
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/categories/openLayers/"/>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>openlayers</title>
    <link href="https://jiangshaobo.cn/20180118/openlayers/index.html"/>
    <id>https://jiangshaobo.cn/20180118/openlayers/index.html</id>
    <published>2018-01-18T12:00:31.000Z</published>
    <updated>2018-01-30T15:04:08.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenLayers-3-Primer"><a href="#OpenLayers-3-Primer" class="headerlink" title="OpenLayers 3 Primer"></a>OpenLayers 3 Primer</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>由于在学习OpenLayers3，有缘看到OpenLayers 3 Primer教程，真是很荣幸。转到博客，仅仅方便地铁上阅读，学习。<br>这是一个关于OpenLayers 3使用的入门教程。帮助初学者逐步认识OpenLayers 3，理解地图组成，以及各个组成部分的作用。在此基础上，逐个突破，结合大量的实例，指导大家应用OpenLayers 3开发出符合业务的地图。在这个过程中，辅以对应的理论知识，学习了解OpenLayers 3背后的原理，尽量做到知其然且知其所以然，为更高级的OpenLayers 3开发打下坚实的基础。本教程将坚持实用为主，对应用中遇到的重点、难点加以详细讲解，提出实用方案。</p><p>为了满足广大初学者的需要，教程将坚持一个原则：即以<strong>浅显易懂</strong>为基础，以<strong>有效实用</strong>为最终目标的原则。</p><a id="more"></a><h2 id="为什么要写这样一个教程"><a href="#为什么要写这样一个教程" class="headerlink" title="为什么要写这样一个教程"></a>为什么要写这样一个教程</h2><p>故事是从我学习OpenLayers 3开始的。那时版本才3.0.0，当时学习OpenLayers 3很快就入手了，没有遇到任何障碍。 但后来发现有些初学者并不是这样的，都不知道怎么入手，遇到很多问题，我在回答了很多类似问题后，开始寻找入门难的原因。 总结下来有两个主要原因：</p><ul><li>第一，虽然官网有关于每个类和方法的API文档，也有相关的例子，但就是没有一个系统的教程把他们串起来，对着例子虽然能做出一些类似的业务，但并不能灵活应用，自然会遇到很多问题。 同时国内目前并没有一本关于OpenLayers 3学习的书籍或教程，这是比较让人遗憾的事。庆幸地是国外的同仁已经写了两本英文书籍，一本是<a href="https://www.packtpub.com/web-development/openlayers-3-beginner%E2%80%99s-guide" target="_blank" rel="noopener">OpenLayers 3: Beginner’s Guide</a>，需要付费；另一本是<a href="https://leanpub.com/thebookofopenlayers3" target="_blank" rel="noopener">The book of OpenLayers 3</a>，需要付费，但同时也支持开放。但对于国内开发者而言，还是中文更加可读。 (国外最近又出了两本需要付费的书，一本是<a href="https://www.packtpub.com/web-development/mastering-openlayers-3" target="_blank" rel="noopener">Mastering Openlayers 3</a>，这本书内容涵盖也比较全面，对英文没有障碍的初学者，可以学习。 另一本是<a href="https://www.packtpub.com/web-development/openlayers-3x-cookbook-second-edition" target="_blank" rel="noopener">OpenLayers 3.x Cookbook - Second Edition</a>)</li><li>第二，使用OpenLayers 3的初学者并不都是GIS专业出身，有很大一部分是前端开发者，或者其他领域的开发者，GIS相关的理论知识欠缺。同时，还有一些开发者连JavaScript语言也不熟练，API文档都不知道如何阅读。 但由于任务或者项目压身，不得不使用Openlayers开发，自然会遇到很多困难。</li></ul><p>为了解决这个问题，我写过一篇<a href="http://www.jianshu.com/p/6785e755fa0d" target="_blank" rel="noopener">OpenLayers 3 入门指南</a>，一开始想当然地认为可以解决入门问题，直到有一天在群里来了一个初学者，他看了这篇文章后，觉得并没有什么卵用。这时我才意识到问题的严重性，问题没解决，反而多了一篇垃圾。因为入门者需要的是更为具体的东西。 在征集了大多数人的意见后，我决定写这本教程（在此一并感谢QQ群里那些提出意见，给予帮助的帅哥美女们）。目前国内存在很多OpenLayers 3的爱好者和使用者，我所在的QQ群就有将近千人，同时还存在很多其他关于OpenLayers的群，后续还会有更多的开发者使用它。</p><p>本教程作为一次尝试，我愿意做第一本国内的OpenLayers 3教程，希望能在开放的情况下，真正帮助到国内OpenLayers 3的初学者入门，虽然这并不容易，但我愿意挑战自己，并加入到开源的潮流中去，以此向OpenLayers 3这个优秀的开源引擎致敬，向它的开发团队和所有贡献者致敬！</p><h2 id="目标读者"><a href="#目标读者" class="headerlink" title="目标读者"></a>目标读者</h2><p>本教程的主要目标读者是刚开始接触OpenLayers 3的应用开发者，但对它有一定了解的开发者也可以通过这个教程的后续部分来提升自己的理解和认识。同时希望对它有深入了解的开发者review本教程，提交issue或者PR。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>OpenLayers 3的版本: 3.13.1</li><li>浏览器: chrome 47.0.2526.111(64bit)</li></ul><h3 id="关于环境，这边可能会使用openlayers-3或者4来实验和学习。"><a href="#关于环境，这边可能会使用openlayers-3或者4来实验和学习。" class="headerlink" title="关于环境，这边可能会使用openlayers 3或者4来实验和学习。"></a>关于环境，这边可能会使用openlayers 3或者4来实验和学习。</h3><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>QQ群 OpenLayers官方旗舰群[2] 里面的 <strong>扯淡大叔</strong><br>QQ: 11364382</p><h3 id="BTW"><a href="#BTW" class="headerlink" title="BTW"></a>BTW</h3><p>我和一帮天南海北的朋友们正在开发一个开源的WEB 3D GIS引擎<a href="http://www.f3earth.com" target="_blank" rel="noopener">F3Earth</a>，有兴趣的朋友可以了解一下，谢谢大家的支持。</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><ul><li><a href="./ch01/index.html">OpenLayers 3 介绍</a></li><li><a href="./ch02/index.html">一个简单的地图</a></li><li><a href="./ch03/index.html">OpenLayers 3地图</a><ul><li><a href="./ch03/index.html">初步解析地图组成</a></li><li><a href="./ch03/index.html">地图所有组成部分</a></li><li><a href="./ch03/index.html">看懂API</a></li><li><a href="./ch03/index.html">结合API文档分析代码</a></li><li><a href="./ch03/index.html">ol.Map的应用</a><ul><li><a href="./ch03/index.html">定制地图logo</a></li><li><a href="./ch03/index.html">单页面多地图</a></li><li><a href="./ch03/index.html">地图联动</a></li><li><a href="./ch03/index.html">动态交换地图</a></li></ul></li></ul></li><li><a href="./ch04/index.html">View</a><ul><li><a href="./ch04/index.html">地图导航</a></li><li><a href="./ch04/index.html">坐标</a></li><li><a href="./ch04/index.html">坐标系及投影</a></li><li><a href="./ch04/index.html">OpenLayers 3使用的坐标系</a></li><li><a href="./ch04/index.html">ol.View的应用</a><ul><li><a href="./ch04/index.html">限制地图范围</a></li><li><a href="./ch04/index.html">限制地图缩放级别</a></li><li><a href="./ch04/index.html">自适配区域</a></li></ul></li></ul></li><li><a href="./ch05/index.html">Source和Layer</a><ul><li><a href="./ch05/index.html">加载瓦片地图</a><ul><li><a href="./ch05/index.html">最简单的加载在线地图</a></li><li><a href="./ch05/index.html">万能瓦片地图加载秘籍</a></li><li><a href="./ch05/index.html">加载离线瓦片地图</a></li><li><a href="./ch05/index.html">瓦片加载的源码浅析与小结</a></li></ul></li><li><a href="./ch05/index.html">静态地图及应用</a></li><li><a href="./ch05/index.html">加载WMS服务地图</a></li><li><a href="./ch05/index.html">矢量地图</a><ul><li><a href="./ch05/index.html">获取加载后的所有feature</a></li><li><a href="./ch05/index.html">坐标转换</a></li><li><a href="./ch05/index.html">样式设置</a></li></ul></li><li><a href="./ch05/index.html">图层叠加及管理</a></li></ul></li><li><a href="./ch06/index.html">LOD与分辨率</a><ul><li><a href="./ch06/index.html">LOD原理</a></li><li><a href="./ch06/index.html">瓦片计算</a></li><li><a href="./ch06/index.html">分辨率</a></li><li><a href="./ch06/index.html">自定义瓦片地图及加载</a></li></ul></li><li><a href="./ch07/index.html">图标及提示信息</a><ul><li><a href="./ch07/index.html">应用overlay</a></li><li><a href="./ch07/index.html">动画图标</a></li><li><a href="./ch07/index.html">style及应用</a><ul><li><a href="./ch07/index.html">设置图标位置</a></li><li><a href="./ch07/index.html">根据层级放大缩小图标</a></li><li><a href="./ch07/index.html">另类设置svg图标</a></li><li><a href="./ch07/index.html">规则几何体图标</a></li><li><a href="./ch07/index.html">用Canvas自绘图标</a></li><li><a href="./ch07/index.html">动态改变图标</a></li><li><a href="./ch07/index.html">文字标注</a></li></ul></li><li><a href="./ch07/index.html">styleFunction应用</a></li><li><a href="./ch07/index.html">大量图标方案</a></li><li><a href="./ch07/index.html">提示信息</a></li></ul></li><li><a href="./ch08/index.html">事件</a><ul><li><a href="./ch08/index.html">一个简单的事件应用</a></li><li><a href="./ch08/index.html">注销事件响应</a></li><li><a href="./ch08/index.html">常用事件</a></li><li><a href="./ch08/index.html">自定义事件及应用</a></li></ul></li><li><a href="./ch09/index.html">Interaction</a><ul><li><a href="./ch09/index.html">内置交互方式介绍</a></li><li><a href="./ch09/index.html">实现原理</a></li><li><a href="./ch09/index.html">Feature选取之选中样式</a></li><li><a href="./ch09/index.html">Feature选取之条件过滤</a></li><li><a href="./ch09/index.html">Feature选取之取消选中</a></li><li><a href="./ch09/index.html">绘制一条线</a></li><li><a href="./ch09/index.html">绘图进阶</a></li><li><a href="./ch09/09-08.md">总结</a></li></ul></li><li><a href="./ch10/index.html">Control</a><ul><li><a href="./ch10/10-01.md">控件概览</a></li><li><a href="./ch10/10-02.md">探究控件原理</a></li><li><a href="./ch10/10-03.md">控件美颜</a></li><li><a href="./ch10/10-04.md">自定义控件</a></li></ul></li><li><a href="./ch11/index.html">动画</a><ul><li><a href="./ch11/11-01.md">动画简单应用</a></li><li><a href="./ch11/11-02.md">动画高阶应用</a></li><li><a href="./ch11/11-03.md">利用postcompose事件做动画</a></li></ul></li><li><a href="./ch12/index.html">进阶实例</a><ul><li><a href="./ch12/index.html">通过wfs增删改查要素</a><ul><li><a href="./ch12/index.html">GeoServer环境配置</a></li><li><a href="./ch12/index.html">配置数据源</a></li><li><a href="./ch12/index.html">通过wfs查询要素</a></li><li><a href="./ch12/index.html">通过wfs修改要素</a></li><li><a href="./ch12/index.html">通过wfs添加要素</a></li><li><a href="./ch12/index.html">通过wfs删除要素</a></li></ul></li></ul></li><li><a href="./ch13/index.html">常见问题</a></li><li><a href="./ch14/index.html">注意事项</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OpenLayers-3-Primer&quot;&gt;&lt;a href=&quot;#OpenLayers-3-Primer&quot; class=&quot;headerlink&quot; title=&quot;OpenLayers 3 Primer&quot;&gt;&lt;/a&gt;OpenLayers 3 Primer&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;由于在学习OpenLayers3，有缘看到OpenLayers 3 Primer教程，真是很荣幸。转到博客，仅仅方便地铁上阅读，学习。&lt;br&gt;这是一个关于OpenLayers 3使用的入门教程。帮助初学者逐步认识OpenLayers 3，理解地图组成，以及各个组成部分的作用。在此基础上，逐个突破，结合大量的实例，指导大家应用OpenLayers 3开发出符合业务的地图。在这个过程中，辅以对应的理论知识，学习了解OpenLayers 3背后的原理，尽量做到知其然且知其所以然，为更高级的OpenLayers 3开发打下坚实的基础。本教程将坚持实用为主，对应用中遇到的重点、难点加以详细讲解，提出实用方案。&lt;/p&gt;
&lt;p&gt;为了满足广大初学者的需要，教程将坚持一个原则：即以&lt;strong&gt;浅显易懂&lt;/strong&gt;为基础，以&lt;strong&gt;有效实用&lt;/strong&gt;为最终目标的原则。&lt;/p&gt;
    
    </summary>
    
    
      <category term="openLayers" scheme="https://jiangshaobo.cn/tags/openLayers/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat运行一段时间后报错cache eviction process was unable to free [10]</title>
    <link href="https://jiangshaobo.cn/20180118/Tomcat%E8%BF%90%E8%A1%8C%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E6%8A%A5%E9%94%99cache-eviction-process-was-unable-to-free.html"/>
    <id>https://jiangshaobo.cn/20180118/Tomcat运行一段时间后报错cache-eviction-process-was-unable-to-free.html</id>
    <published>2018-01-18T09:50:25.000Z</published>
    <updated>2018-02-04T14:22:17.896Z</updated>
    
    <content type="html"><![CDATA[<h5 id="应用运行一段时间后崩掉了。查看日志记录如下"><a href="#应用运行一段时间后崩掉了。查看日志记录如下" class="headerlink" title="应用运行一段时间后崩掉了。查看日志记录如下:"></a>应用运行一段时间后崩掉了。查看日志记录如下:</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">15-Jan-2018 16:56:55.801 INFO [ContainerBackgroundProcessor[StandardEngine[Catal</span><br><span class="line">ina]]] org.apache.catalina.webresources.Cache.backgroundProcess The background c</span><br><span class="line">ache eviction process was unable to free [10] percent of the <span class="keyword">cache</span> <span class="keyword">for</span> <span class="keyword">Context</span> [</span><br><span class="line">] - <span class="keyword">consider</span> increasing the maximum <span class="keyword">size</span> <span class="keyword">of</span> the cache. <span class="keyword">After</span> eviction approximat</span><br><span class="line">ely [<span class="number">24</span>,<span class="number">460</span>] KB <span class="keyword">of</span> <span class="keyword">data</span> remained <span class="keyword">in</span> the cache.</span><br><span class="line"><span class="number">15</span>-Jan<span class="number">-2018</span> <span class="number">16</span>:<span class="number">57</span>:<span class="number">05.810</span> INFO [ContainerBackgroundProcessor[StandardEngine[Catal</span><br><span class="line">ina]]] org.apache.catalina.webresources.Cache.backgroundProcess The background c</span><br><span class="line">ache eviction process was unable <span class="keyword">to</span> free [<span class="number">10</span>] <span class="keyword">percent</span> <span class="keyword">of</span> the <span class="keyword">cache</span> <span class="keyword">for</span> <span class="keyword">Context</span> [</span><br><span class="line">] - <span class="keyword">consider</span> increasing the maximum <span class="keyword">size</span> <span class="keyword">of</span> the cache. <span class="keyword">After</span> eviction approximat</span><br><span class="line">ely [<span class="number">24</span>,<span class="number">460</span>] KB <span class="keyword">of</span> <span class="keyword">data</span> remained <span class="keyword">in</span> the cache.</span><br><span class="line"><span class="number">15</span>-Jan<span class="number">-2018</span> <span class="number">16</span>:<span class="number">57</span>:<span class="number">15.819</span> INFO [ContainerBackgroundProcessor[StandardEngine[Catal</span><br><span class="line">ina]]] org.apache.catalina.webresources.Cache.backgroundProcess The background c</span><br><span class="line">ache eviction process was unable <span class="keyword">to</span> free [<span class="number">10</span>] <span class="keyword">percent</span> <span class="keyword">of</span> the <span class="keyword">cache</span> <span class="keyword">for</span> <span class="keyword">Context</span> [</span><br><span class="line">] - <span class="keyword">consider</span> increasing the maximum <span class="keyword">size</span> <span class="keyword">of</span> the cache. <span class="keyword">After</span> eviction approximat</span><br><span class="line">ely [<span class="number">24</span>,<span class="number">460</span>] KB <span class="keyword">of</span> <span class="keyword">data</span> remained <span class="keyword">in</span> the cache.</span><br><span class="line"><span class="number">15</span>-Jan<span class="number">-2018</span> <span class="number">16</span>:<span class="number">57</span>:<span class="number">25.827</span> INFO [ContainerBackgroundProcessor[StandardEngine[Catal</span><br><span class="line">ina]]] org.apache.catalina.webresources.Cache.backgroundProcess The background c</span><br><span class="line">ache eviction process was unable <span class="keyword">to</span> free [<span class="number">10</span>] <span class="keyword">percent</span> <span class="keyword">of</span> the <span class="keyword">cache</span> <span class="keyword">for</span> <span class="keyword">Context</span> [</span><br><span class="line">] - <span class="keyword">consider</span> increasing the maximum <span class="keyword">size</span> <span class="keyword">of</span> the cache. <span class="keyword">After</span> eviction approximat</span><br><span class="line">ely [<span class="number">24</span>,<span class="number">460</span>] KB <span class="keyword">of</span> <span class="keyword">data</span> remained <span class="keyword">in</span> the cache.</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="日志中记录并给出了建议："><a href="#日志中记录并给出了建议：" class="headerlink" title="日志中记录并给出了建议："></a>日志中记录并给出了建议：</h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consider increasing <span class="keyword">the</span> maximum size <span class="keyword">of</span> <span class="keyword">the</span> cache</span><br></pre></td></tr></table></figure><p>也就是增加最大缓存。</p><p>打开tomcat下的conf文件下(tomcat_home/conf/Catalina/localhost/里的context文件里)<br>的context.xml在文件尾部前增加添加这么一行：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Resources <span class="attribute">cachingAllowed</span>=<span class="string">"true"</span> <span class="attribute">cacheMaxSize</span>=<span class="string">"100000"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>把cacheMaxSize调大就行了。</p><h5 id="群友说可能是代码的问题，正在排查中。"><a href="#群友说可能是代码的问题，正在排查中。" class="headerlink" title="群友说可能是代码的问题，正在排查中。"></a>群友说可能是代码的问题，正在排查中。</h5><p>最后来个群友发的段子。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我今天突然觉得递归可以这样通俗的表达出来：</span><br><span class="line">两个人玩成语接龙，第一个人说：为所欲为。</span><br><span class="line">第二个人说：为所欲为。</span><br><span class="line">......</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;应用运行一段时间后崩掉了。查看日志记录如下&quot;&gt;&lt;a href=&quot;#应用运行一段时间后崩掉了。查看日志记录如下&quot; class=&quot;headerlink&quot; title=&quot;应用运行一段时间后崩掉了。查看日志记录如下:&quot;&gt;&lt;/a&gt;应用运行一段时间后崩掉了。查看日志记录如下:&lt;/h5&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;15-Jan-2018 16:56:55.801 INFO [ContainerBackgroundProcessor[StandardEngine[Catal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ina]]] org.apache.catalina.webresources.Cache.backgroundProcess The background c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ache eviction process was unable to free [10] percent of the &lt;span class=&quot;keyword&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Context&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;] - &lt;span class=&quot;keyword&quot;&gt;consider&lt;/span&gt; increasing the maximum &lt;span class=&quot;keyword&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; the cache. &lt;span class=&quot;keyword&quot;&gt;After&lt;/span&gt; eviction approximat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ely [&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;460&lt;/span&gt;] KB &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; remained &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the cache.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;-Jan&lt;span class=&quot;number&quot;&gt;-2018&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;57&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;05.810&lt;/span&gt; INFO [ContainerBackgroundProcessor[StandardEngine[Catal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ina]]] org.apache.catalina.webresources.Cache.backgroundProcess The background c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ache eviction process was unable &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; free [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;percent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; the &lt;span class=&quot;keyword&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Context&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;] - &lt;span class=&quot;keyword&quot;&gt;consider&lt;/span&gt; increasing the maximum &lt;span class=&quot;keyword&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; the cache. &lt;span class=&quot;keyword&quot;&gt;After&lt;/span&gt; eviction approximat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ely [&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;460&lt;/span&gt;] KB &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; remained &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the cache.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;-Jan&lt;span class=&quot;number&quot;&gt;-2018&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;57&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;15.819&lt;/span&gt; INFO [ContainerBackgroundProcessor[StandardEngine[Catal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ina]]] org.apache.catalina.webresources.Cache.backgroundProcess The background c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ache eviction process was unable &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; free [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;percent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; the &lt;span class=&quot;keyword&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Context&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;] - &lt;span class=&quot;keyword&quot;&gt;consider&lt;/span&gt; increasing the maximum &lt;span class=&quot;keyword&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; the cache. &lt;span class=&quot;keyword&quot;&gt;After&lt;/span&gt; eviction approximat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ely [&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;460&lt;/span&gt;] KB &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; remained &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the cache.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;-Jan&lt;span class=&quot;number&quot;&gt;-2018&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;57&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;25.827&lt;/span&gt; INFO [ContainerBackgroundProcessor[StandardEngine[Catal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ina]]] org.apache.catalina.webresources.Cache.backgroundProcess The background c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ache eviction process was unable &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; free [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;percent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; the &lt;span class=&quot;keyword&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Context&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;] - &lt;span class=&quot;keyword&quot;&gt;consider&lt;/span&gt; increasing the maximum &lt;span class=&quot;keyword&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; the cache. &lt;span class=&quot;keyword&quot;&gt;After&lt;/span&gt; eviction approximat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ely [&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;460&lt;/span&gt;] KB &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; remained &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the cache.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="tomcat" scheme="https://jiangshaobo.cn/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>win10安装Postgresql 错误解决方案 Failed to load sql modules into the</title>
    <link href="https://jiangshaobo.cn/20180114/win10%E5%AE%89%E8%A3%85Postgresql-%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-Failed-to-load-sql-modules-into-the.html"/>
    <id>https://jiangshaobo.cn/20180114/win10安装Postgresql-错误解决方案-Failed-to-load-sql-modules-into-the.html</id>
    <published>2018-01-14T08:28:57.000Z</published>
    <updated>2018-02-04T14:22:28.030Z</updated>
    
    <content type="html"><![CDATA[<h4 id="win10安装postgrelsql安装了很多次都是报错，开始查明以为是权限的问题，然后就给文件夹赋予权限，以为快解决了，又出现了-Failed-to-load-sql-modules-into-the-database-cluster的错误，于是根据错误去继续寻找解决方案，ubuntu下分分钟就install了。最后翻看stackoverflow找到解决方案。"><a href="#win10安装postgrelsql安装了很多次都是报错，开始查明以为是权限的问题，然后就给文件夹赋予权限，以为快解决了，又出现了-Failed-to-load-sql-modules-into-the-database-cluster的错误，于是根据错误去继续寻找解决方案，ubuntu下分分钟就install了。最后翻看stackoverflow找到解决方案。" class="headerlink" title="win10安装postgrelsql安装了很多次都是报错，开始查明以为是权限的问题，然后就给文件夹赋予权限，以为快解决了，又出现了 Failed to load sql modules into the database cluster的错误，于是根据错误去继续寻找解决方案，ubuntu下分分钟就install了。最后翻看stackoverflow找到解决方案。"></a>win10安装postgrelsql安装了很多次都是报错，开始查明以为是权限的问题，然后就给文件夹赋予权限，以为快解决了，又出现了 Failed to load sql modules into the database cluster的错误，于是根据错误去继续寻找解决方案，ubuntu下分分钟就install了。最后翻看stackoverflow找到解决方案。</h4><p>步骤如下：<br>I was getting this same error when trying to install PostgreSQL v9.4.4 on Windows 10 Pro. Starting with a solution hosted on Stack Exchange, I came up with the following steps that allowed the installer to run successfully:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) Create <span class="keyword">a</span> <span class="built_in">new</span> user account, called postgres</span><br><span class="line"><span class="number">2</span>) Add <span class="keyword">the</span> <span class="built_in">new</span> account <span class="built_in">to</span> <span class="keyword">the</span> Administrators <span class="keyword">and</span> Power Users groups</span><br><span class="line"><span class="number">3</span>) Restart <span class="keyword">the</span> computer</span><br><span class="line">    NOTE: I added step <span class="comment">#3, since step #4 didn't work without it</span></span><br><span class="line"><span class="number">4</span>) Run <span class="keyword">a</span> <span class="keyword">command</span> <span class="title">prompt</span> <span class="title">as</span> <span class="title">the</span> <span class="title">postgres</span> <span class="title">user</span>, <span class="title">using</span> <span class="title">the</span> <span class="title">command</span>:</span><br><span class="line">    runas /user:postgres cmd.exe</span><br><span class="line"><span class="number">5</span>) Run <span class="keyword">the</span> installer <span class="built_in">from</span> <span class="keyword">the</span> postgres <span class="keyword">command</span> <span class="title">window</span></span><br><span class="line"><span class="number">6</span>) Delete <span class="keyword">the</span> postgres user account, <span class="keyword">as</span> well <span class="keyword">as</span> <span class="keyword">the</span> user <span class="built_in">directory</span></span><br><span class="line">    NOTE: I added step <span class="comment">#6, since the postgres account is not required after installation</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>第二步的话，在win10下很简单，在此电脑（我的电脑）下右键选管理，右键-》新增用户（postgres），然后重启用原来的用户登陆。<br>注意第四步，可以按win+r打开运行命令，然后输入<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runas /<span class="keyword">user</span>:postgres <span class="keyword">cmd</span>.<span class="bash">exe</span></span><br></pre></td></tr></table></figure></p><p>之后在cmd里面直接运行postgresql-10.1-3-windows-x64.exe，安装成功。<br>win10安装Postgresql 错误解决方案 Failed to load sql modules into the database cluster<br>win10安装Postgresql 错误解决方案 新增用户</p><p><img src="https://www.whatled.com/content/uploadfile/201712/38de1513519156.png" alt=""><br><img src="https://www.whatled.com/content/uploadfile/201712/704c1513519157.png" alt=""></p><p>建议访问：<a href="https://stackoverflow.com/questions/30689251/failed-to-load-sql-modules-into-the-database-cluster-during-postgresql-installat/" target="_blank" rel="noopener">stackoverflow</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;win10安装postgrelsql安装了很多次都是报错，开始查明以为是权限的问题，然后就给文件夹赋予权限，以为快解决了，又出现了-Failed-to-load-sql-modules-into-the-database-cluster的错误，于是根据错误去继续寻找解决方案，ubuntu下分分钟就install了。最后翻看stackoverflow找到解决方案。&quot;&gt;&lt;a href=&quot;#win10安装postgrelsql安装了很多次都是报错，开始查明以为是权限的问题，然后就给文件夹赋予权限，以为快解决了，又出现了-Failed-to-load-sql-modules-into-the-database-cluster的错误，于是根据错误去继续寻找解决方案，ubuntu下分分钟就install了。最后翻看stackoverflow找到解决方案。&quot; class=&quot;headerlink&quot; title=&quot;win10安装postgrelsql安装了很多次都是报错，开始查明以为是权限的问题，然后就给文件夹赋予权限，以为快解决了，又出现了 Failed to load sql modules into the database cluster的错误，于是根据错误去继续寻找解决方案，ubuntu下分分钟就install了。最后翻看stackoverflow找到解决方案。&quot;&gt;&lt;/a&gt;win10安装postgrelsql安装了很多次都是报错，开始查明以为是权限的问题，然后就给文件夹赋予权限，以为快解决了，又出现了 Failed to load sql modules into the database cluster的错误，于是根据错误去继续寻找解决方案，ubuntu下分分钟就install了。最后翻看stackoverflow找到解决方案。&lt;/h4&gt;&lt;p&gt;步骤如下：&lt;br&gt;I was getting this same error when trying to install PostgreSQL v9.4.4 on Windows 10 Pro. Starting with a solution hosted on Stack Exchange, I came up with the following steps that allowed the installer to run successfully:&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) Create &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; user account, called postgres&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) Add &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; account &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; Administrators &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; Power Users groups&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) Restart &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; computer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NOTE: I added step &lt;span class=&quot;comment&quot;&gt;#3, since step #4 didn&#39;t work without it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) Run &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prompt&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;postgres&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;user&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;command&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runas /user:postgres cmd.exe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) Run &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; installer &lt;span class=&quot;built_in&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; postgres &lt;span class=&quot;keyword&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;window&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) Delete &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; postgres user account, &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; well &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; user &lt;span class=&quot;built_in&quot;&gt;directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NOTE: I added step &lt;span class=&quot;comment&quot;&gt;#6, since the postgres account is not required after installation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="postgresql" scheme="https://jiangshaobo.cn/tags/postgresql/"/>
    
      <category term="win10" scheme="https://jiangshaobo.cn/tags/win10/"/>
    
      <category term="fail" scheme="https://jiangshaobo.cn/tags/fail/"/>
    
  </entry>
  
  <entry>
    <title>centos ubuntu下安装nodejs环境</title>
    <link href="https://jiangshaobo.cn/20180113/centos-ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85nodejs%E7%8E%AF%E5%A2%83.html"/>
    <id>https://jiangshaobo.cn/20180113/centos-ubuntu下安装nodejs环境.html</id>
    <published>2018-01-13T09:33:18.000Z</published>
    <updated>2018-02-04T15:06:16.126Z</updated>
    
    <content type="html"><![CDATA[<h4 id="申请了阿里云的主机，后续打算将博客转移到阿里云上，之前的腾讯云由于没有备案都闲置了，用作测试。"><a href="#申请了阿里云的主机，后续打算将博客转移到阿里云上，之前的腾讯云由于没有备案都闲置了，用作测试。" class="headerlink" title="申请了阿里云的主机，后续打算将博客转移到阿里云上，之前的腾讯云由于没有备案都闲置了，用作测试。"></a>申请了阿里云的主机，后续打算将博客转移到阿里云上，之前的腾讯云由于没有备案都闲置了，用作测试。</h4><p>顺便从头记录node学习相关。</p><p>先安装一个node环境，到node官网下载node安装包<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>//nodejs<span class="meta">.org</span>/<span class="built_in">zh</span>-cn/download/</span><br></pre></td></tr></table></figure></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://nodejs.org/dist/v8.<span class="number">9.3</span>/<span class="keyword">node</span><span class="title">-v8</span>.<span class="number">9.3</span>-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><a id="more"></a><p>centos ubuntu下安装nodejs环境</p><p>由于是新的环境，一切都是新的。</p><p>首先cd到/temp下，wget <a href="https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz" target="_blank" rel="noopener">https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz</a></p><p>然后解压node-v8.9.3-linux-x64.tar.xz文件(默认使用的root用户，非root用户命令前加sudo)。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xvf -d <span class="keyword">node</span><span class="title">-v8</span>.<span class="number">9.3</span>-linux-x64.tar.xz</span><br><span class="line">mv <span class="keyword">node</span><span class="title">-v8</span>.<span class="number">9.3</span>-linux-x64 <span class="keyword">node</span><span class="title"></span></span><br><span class="line"><span class="title">cp</span> -R <span class="keyword">node</span> <span class="title">/usr</span>/local</span><br></pre></td></tr></table></figure><p>将node-v8.9.3-linux-x64重新命名为node</p><p>再把node复制到/usr/local下。</p><p>之后配置环境变量，由于没有安装vim，先使用vi来编辑，</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vi</span> /etc/<span class="keyword">profile</span></span><br></pre></td></tr></table></figure><p>在/etc/profile下追加node环境配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">NODE_HOME</span>=/usr/local/node</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$NODE_HOME</span>/bin:$PATH</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">NODE_PATH</span>=<span class="variable">$NODE_HOME</span>/lib/node_modules:$PATH</span><br></pre></td></tr></table></figure><p>然后按esc之后输入:wq（保存并退出）</p><p>让配置生效source /etc/profile</p><p>这样安装完成。可以使用node -v查看node版本，可以使用npm -v查看npm版本</p><p>安装cnpm或者换源。</p><h4 id="如果在centos下（ubuntu也是类似，只是命令不一样）要编译安装node"><a href="#如果在centos下（ubuntu也是类似，只是命令不一样）要编译安装node" class="headerlink" title="如果在centos下（ubuntu也是类似，只是命令不一样）要编译安装node"></a>如果在centos下（ubuntu也是类似，只是命令不一样）要编译安装node</h4><p>首先</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">yum</span> <span class="literal">-</span><span class="comment">y</span> <span class="comment">install</span> <span class="comment">gcc</span> <span class="comment">make</span> <span class="comment">gcc</span><span class="literal">-</span><span class="comment">c</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">openssl</span><span class="literal">-</span><span class="comment">devel</span> <span class="comment">wget</span></span><br></pre></td></tr></table></figure><p>下载源码</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v8.<span class="number">9.3</span>/<span class="keyword">node</span><span class="title">-v8</span>.<span class="number">9.3</span>.tar.gz</span><br></pre></td></tr></table></figure><p>解压<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf <span class="keyword">node</span><span class="title">-v8</span>.<span class="number">9.3</span>-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p><p>编译安装</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure><p>然后验证</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br></pre></td></tr></table></figure><p>安装pm2<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Unitech/</span>pm2</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> General</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install pm2 -g            <span class="comment"># Install PM2</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 start app.js              <span class="comment"># Start, Daemonize and auto-restart application (Node)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 start app.py              <span class="comment"># Start, Daemonize and auto-restart application (Python)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 start npm -- start        <span class="comment"># Start, Daemonize and auto-restart Node application</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Cluster Mode (Node.js only)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 start app.js -i 4         <span class="comment"># Start 4 instances of application in cluster mode</span></span></span><br><span class="line">                                # it will load balance network queries to each app</span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 reload all                <span class="comment"># Zero Second Downtime Reload</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 scale [app-name] 10       <span class="comment"># Scale Cluster app to 10 process</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Process Monitoring</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 list                      <span class="comment"># List all processes started with PM2</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 monit                     <span class="comment"># Display memory and cpu usage of each app</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 show [app-name]           <span class="comment"># Show all information about application</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Log management</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 logs                      <span class="comment"># Display logs of all apps</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 logs [app-name]           <span class="comment"># Display logs for a specific app</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 logs --json               <span class="comment"># Logs in JSON format</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 flush</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 reloadLogs</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Process State Management</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 start app.js --name=<span class="string">"api"</span> <span class="comment"># Start application and name it "api"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 start app.js -- -a 34     <span class="comment"># Start app and pass option "-a 34" as argument</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 start app.js --watch      <span class="comment"># Restart application on file change</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 start script.sh           <span class="comment"># Start bash script</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 start app.json            <span class="comment"># Start all applications declared in app.json</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 reset [app-name]          <span class="comment"># Reset all counters</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 stop all                  <span class="comment"># Stop all apps</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 stop 0                    <span class="comment"># Stop process with id 0</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 restart all               <span class="comment"># Restart all apps</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 gracefulReload all        <span class="comment"># Gracefully reload all apps in cluster mode</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 delete all                <span class="comment"># Kill and delete all apps</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 delete 0                  <span class="comment"># Delete app with id 0</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Startup/Boot management</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 startup                   <span class="comment"># Detect init system, generate and configure pm2 boot on startup</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 save                      <span class="comment"># Save current process list</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 resurrect                 <span class="comment"># Restore previously saved processes</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 unstartup                 <span class="comment"># Disable and remove startup system</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 update                    <span class="comment"># Save processes, kill PM2 and restore processes</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 generate                  <span class="comment"># Generate a sample json configuration file</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Deployment</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 deploy app.json prod setup    <span class="comment"># Setup "prod" remote server</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 deploy app.json prod          <span class="comment"># Update "prod" remote server</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 deploy app.json prod revert 2 <span class="comment"># Revert "prod" remote server by 2</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Module system</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 module:generate [name]    <span class="comment"># Generate sample module with name [name]</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 install pm2-logrotate     <span class="comment"># Install module (here a log rotation system)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 uninstall pm2-logrotate   <span class="comment"># Uninstall module</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pm2 publish                   <span class="comment"># Increment version, git push and npm publish</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;申请了阿里云的主机，后续打算将博客转移到阿里云上，之前的腾讯云由于没有备案都闲置了，用作测试。&quot;&gt;&lt;a href=&quot;#申请了阿里云的主机，后续打算将博客转移到阿里云上，之前的腾讯云由于没有备案都闲置了，用作测试。&quot; class=&quot;headerlink&quot; title=&quot;申请了阿里云的主机，后续打算将博客转移到阿里云上，之前的腾讯云由于没有备案都闲置了，用作测试。&quot;&gt;&lt;/a&gt;申请了阿里云的主机，后续打算将博客转移到阿里云上，之前的腾讯云由于没有备案都闲置了，用作测试。&lt;/h4&gt;&lt;p&gt;顺便从头记录node学习相关。&lt;/p&gt;
&lt;p&gt;先安装一个node环境，到node官网下载node安装包&lt;br&gt;&lt;figure class=&quot;highlight avrasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;https:&lt;/span&gt;//nodejs&lt;span class=&quot;meta&quot;&gt;.org&lt;/span&gt;/&lt;span class=&quot;built_in&quot;&gt;zh&lt;/span&gt;-cn/download/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;https://nodejs.org/dist/v8.&lt;span class=&quot;number&quot;&gt;9.3&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;-v8&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;9.3&lt;/span&gt;-linux-x64.tar.xz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="https://jiangshaobo.cn/tags/nodejs/"/>
    
      <category term="node.js" scheme="https://jiangshaobo.cn/tags/node-js/"/>
    
      <category term="centos" scheme="https://jiangshaobo.cn/tags/centos/"/>
    
      <category term="ubuntu" scheme="https://jiangshaobo.cn/tags/ubuntu/"/>
    
  </entry>
  
</feed>
